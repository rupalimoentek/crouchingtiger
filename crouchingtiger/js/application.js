(function () {
    if (!this.require) {
        var e = {}, t = {}, n = function (s, o) {
                var u = r(o, s),
                    a = r(u, "./index"),
                    f, l;
                f = t[u] || t[a];
                if (f) return f;
                if (l = e[u] || e[u = a]) return f = {
                    id: u,
                    exports: {}
                }, t[u] = f.exports, l(f.exports, function (e) {
                    return n(e, i(u))
                }, f), t[u] = f.exports;
                throw "module " + s + " not found"
            }, r = function (e, t) {
                var n = [],
                    r, i;
                /^\.\.?(\/|$)/.test(t) ? r = [e, t].join("/").split("/") : r = t.split("/");
                for (var s = 0, o = r.length; s < o; s++) i = r[s], i == ".." ? n.pop() : i != "." && i != "" && n.push(i);
                return n.join("/")
            }, i = function (e) {
                return e.split("/").slice(0, -1).join("/")
            };
        this.require = function (e) {
            return n(e, "")
        }, this.require.define = function (t) {
            for (var n in t) e[n] = t[n]
        }, this.require.modules = e, this.require.cache = t
    }
    return this.require
}).call(this), this.require.define({
    "lib/environment": function (e, t, n) {
        var r = {
            development: !1,
            test: !1,
            staging: !1,
            qa: !1,
            production: !1
        };
        window.jasmine != null ? r.test = !0 : r[$("body").data("environment")] = !0, n.exports = Object.freeze(r)
    }
}), this.require.define({
    "lib/logging/console_logger": function (e, t, n) {
        function i(e, n) {
            e = e || window.console || r, n = n || t("lib/environment"), this.console = e;
            if (n.production || n.test) this.debug = this.info = this.log = Em.K;
            n.production && (this.warn = this.error = this.group = this.groupCollapsed = this.groupEnd = Em.K)
        }

        function s(e) {
            var t = function (t) {
                this.console[e] ? this.console[e](t) : this.log(t)
            };
            return t.name = e, t
        }

        function o(e, t) {
            var n = function (n) {
                this.console[e] ? this.console[e](n) : this.log(n + t)
            };
            return n.name = e, n
        }
        var r = {
            log: Em.K,
            warn: Em.K,
            debug: Em.K,
            error: Em.K
        };
        i.toString = function () {
            return "ConsoleLogger"
        }, $.extend(i.prototype, {
            log: function (e) {
                this.console.log(e)
            },
            debug: s("debug"),
            info: s("info"),
            warn: s("warn"),
            error: s("error"),
            group: o("group", " - start"),
            groupCollapsed: o("groupCollapsed", " - start"),
            groupEnd: o("groupEnd", " - end")
        }), n.exports = i
    }
}), this.require.define({
    "lib/lotus/auto_pagination": function (e, t, n) {
        n.exports = Em.Mixin.create({
            loadAt: 100,
            getElement: function () {
                return this.$().closest(".pane")
            },
            didInsertElement: function () {
                return this.getElement().scroll(this.scroll.bind(this)), this._super()
            },
            childViewsDidChange: function (e, t, n, r) {
                this._super.apply(this, arguments), r > 0 && Em.run.next(this, function () {
                    Em.run.next(this, this.scroll)
                })
            },
            scroll: function (e) {
                var t = (e || {}).target;
                t = t ? $(t) : this.getElement();
                var n = t[0].scrollHeight - (t.outerHeight() + t.scrollTop());
                if (n < this.get("loadAt")) {
                    var r = this.get("content");
                    r && r.fetchMore()
                }
            }
        })
    }
}), this.require.define({
    "lib/lotus/batcher": function (e, t, n) {
        var r = {
            timeout: 5e3,
            debounce: 100
        }, i = function (e) {
                e = $.extend({}, r, e);
                if (!$.isFunction(e.run)) throw "Batcher requires a run function";
                this.run = e.run, this.timeout = e.timeout, this.onSuccess = $.Callbacks(), this.onFailure = $.Callbacks(), this._runBatch = this._runBatch.bind(this), this._startTimer = _.debounce(this._startTimer, e.debounce), this._currentBatch = []
            };
        i.prototype = {
            add: function (e) {
                return _.include(this._currentBatch, e) || (this._currentBatch.push(e), this._startTimer()), this
            },
            remove: function (e) {
                return this._currentBatch = _.without(this._currentBatch, e), this
            },
            _currentBatch: null,
            _timer: null,
            _startTimer: function () {
                this._timer || (this._timer = setTimeout(this._runBatch, this.timeout))
            },
            _runBatch: function () {
                if (this._currentBatch.length > 0) {
                    var e = this.run(this._currentBatch),
                        t = this;
                    e != null && $.when(e).done(function () {
                        t.onSuccess.fire.apply(t.onSuccess, arguments)
                    }).fail(function () {
                        t.onFailure.fire.apply(t.onFailure, arguments)
                    })
                }
                this._currentBatch = [], this._timer = null
            }
        }, n.exports = i
    }
}), this.require.define({
    "lib/lotus/global_events": function (e, t, n) {
        function i(e) {
            return Object.seal != null ? Object.seal(e) : e
        }

        function o(e) {
            return Em.get(e, "parentView") || Em.get(e, "eventDelegate")
        }

        function u(e, t) {
            var n, i;
            if (!e) return !1;
            if ($.isFunction(e[t])) {
                n = r.call(arguments, 2), i = e[t].apply(e, n);
                if (i !== !1) return i
            } else if ($.isFunction(e.globalEventDidFire)) {
                n = r.call(arguments, 1), i = e.globalEventDidFire.apply(e, n);
                if (i !== !1) return i
            }
            return n = r.call(arguments, 1), n.unshift(o(e)), u.apply(this, n)
        }
        var r = Array.prototype.slice,
            s = Em.Object.createWithMixins(Em.Evented, {
                firstResponder: function (e, t) {
                    return t || null
                }.property().cacheable(),
                _removeFocusClassOnLoseFocus: function () {
                    var e = this.get("firstResponder");
                    e && e instanceof Em.View && e.$().removeClass("fr-focus")
                }.observesBefore("firstResponder"),
                _addFocusClassOnGainFocus: function () {
                    var e = this.get("firstResponder");
                    e && e instanceof Em.View && e.$().addClass("fr-focus")
                }.observes("firstResponder")
            });
        s.triggerOnResponder = function () {
            var e = this.get("firstResponder"),
                t = r.call(arguments);
            return t.unshift(e), u.apply(this, t)
        }, n.exports = i(s)
    }
}), this.require.define({
    "lib/lotus/collection_navigation": function (e, t, n) {
        function o(e, t, n) {
            var i = t + n;
            return i >= 0 && i < r(e, "length") ? i : n < 0 ? this.navigateOutOfBoundsNegative(t) : this.navigateOutOfBoundsPositive(t)
        }

        function u(e, t, n, r) {}
        var r = Em.get,
            i = Em.set,
            s = t("lib/lotus/global_events"),
            a = t("./collection_navigation_item");
        n.exports = Em.Mixin.create({
            itemViewClass: Em.View.extend(a),
            scrollElement: null,

            focusIndex: function (e, t) {
                return t
            }.property().cacheable(),
            navigateOutOfBounds: function (e) {
                return e
            },
            navigateOutOfBoundsNegative: function (e) {
                return this.navigateOutOfBounds(e)
            },
            navigateOutOfBoundsPositive: function (e) {
                return this.navigateOutOfBounds(e)
            },
            globalEvents: s,
            inFocus: function () {
                return this == this.get("globalEvents.firstResponder")
            }.property("globalEvents.firstResponder").cacheable(),
            inFocusDidChange: function () {
                this.get("focusIndex") == null ? this.set("focusIndex", 0) : this.updateChildViewFocus()
            }.observes("inFocus"),
            elementInFocus: function () {
                var e = r(this, "content");
                return e ? e.objectAt(r(this, "focusIndex")) : null
            }.property("focusIndex").cacheable(),
            setChildViewInFocus: function (e) {
                if (!e) return this;
                var t = this.get("childViews").indexOf(e);
                return this.set("focusIndex", t), this
            },
            childViewInFocus: function () {
                var e = r(this, "childViews");
                return e ? e.objectAt(r(this, "focusIndex")) : null
            }.property("focusIndex", "childViews.length").cacheable(),
            arrayWillChange: function (e, t, n) {
                return this._super(e, t, n)
            },
            select: function (e) {
                e && e.originalEvent && e.originalEvent.preventDefault && e.originalEvent.preventDefault(), this.doSelect(this.get("elementInFocus"))
            },
            doSelect: function (e) {
                e && i(e, "selected", !r(e, "selected"))
            },
            navigateFirst: function () {
                this.set("focusIndex", 0)
            },
            navigatePrevious: function () {
                var e = r(this, "content"),
                    t = r(this, "focusIndex");
                return e != null && t != null ? i(this, "focusIndex", o.call(this, e, t, -1)) : this.navigateLast(), !1
            },
            navigateNext: function () {
                var e = r(this, "content"),
                    t = r(this, "focusIndex");
                return e != null && t != null ? i(this, "focusIndex", o.call(this, e, t, 1)) : this.navigateFirst(), !1
            },
            navigateLast: function () {
                var e = this.get("content.length") || 0;
                this.set("focusIndex", Math.max(e - 1, 0))
            },
            _removeCurrentChildViewFocus: function () {
                var e = this.get("childViewInFocus");
                e && !e.isDestroyed && i(e, "inFocus", !1)
            }.observesBefore("focusIndex"),
            _addNewFocus: function () {
                this.updateChildViewFocus()
            }.observes("focusIndex"),
            childViewsReadyDidChange: function () {
                var e = this.get("focusIndex");
                if (e == null) return;
                var t = this.get("content.length") || 0;
                if (this.get("childViewsReady") && e > t - 1) {
                    this.navigateLast();
                    return
                }
                this.updateChildViewFocus()
            }.observes("childViewsReady"),
            updateChildViewFocus: function () {
                var e = this.get("childViews"),
                    t = this.get("focusIndex");
                e && t != null && e[t] && i(e[t], "inFocus", !0)
            },
            childViewsReady: function () {
                var e = this.get("childViews.length");
                return e == this.get("content.length") && e != null
            }.property("childViews", "childViews.length", "content", "content.length").volatile(),
            scrollFocusObserver: function () {
                var e = this.get("scrollElement");
                if (e == null) return;
                var t = this.get("childViewInFocus");
                if (t == null) return;
                var n = t.$(),
                    r = n.offset();
                if (n == null || r == null) return;
                var i = e[0].getBoundingClientRect(),
                    s = n[0].getBoundingClientRect();
                s.top < i.top ? n[0].scrollIntoView(!0) : s.bottom > i.bottom && n[0].scrollIntoView(!1)
            }.observes("childViewInFocus")
        })
    }
}), this.require.define({
    "lib/lotus/collection_navigation_item": function (e, t, n) {
        n.exports = Em.Mixin.create({
            classNameBindings: ["inFocus"],
            inFocus: function (e, t) {
                return arguments.length < 2 ? !1 : !! t
            }.property().cacheable()
        })
    }
}), this.require.define({
    "lib/lotus/collection_selection": function (e, t, n) {
        n.exports = Em.Mixin.create({
            selectedItems: function () {
                var e = this.get("content");
                return e ? this.get("content").filterProperty("selected") : []
            }.property("content.@each.selected").cacheable(),
            selectAll: function (e, t) {
                var n = this.get("content");
                return n && n.length > 0 ? arguments.length == 2 ? (t = !! t, n.setEach("selected", t)) : t = n.everyProperty("selected", !0) : t = !1, t
            }.property("content.@each.selected").cacheable(),
            anySelected: function () {
                var e = this.get("content");
                return e && e.someProperty("selected", !0)
            }.property("content.@each.selected").cacheable(),
            noneSelected: Em.computed.not("anySelected"),
            hasItems: function () {
                var e = this.get("content");
                return e != null && e.length > 0
            }.property("content.length").cacheable()
        })
    }
}), this.require.define({
    "lib/lotus/enum": function (e, t, n) {
        var r = "Enum value %@ already defined for %@";
        n.exports = Em.Mixin.create({
            init: function () {
                this._super.apply(this, arguments);
                var e = this.get("id"),
                    t = this.constructor;
                if (t[e]) throw r.fmt(e, t);
                t[e] = this
            }
        })
    }
}), this.require.define({
    "lib/lotus/focusable": function (e, t, n) {
        var r = t("./global_events");
        n.exports = Em.Mixin.create({
            focus: function () {
                return r.set("firstResponder", this), this
            }
        })
    }
}), this.require.define({
    "lib/lotus/idle_timer": function (e, t, n) {
        n.exports = Em.Object.extend(Em.Evented, {
            started: !1,
            start: function (e) {
                e = e || 18e5;
                if (this.get("started")) throw new Error("idleTimer has already been started");
                $.idleTimer(e), $(document).bind("idle.idleTimer", this.trigger.bind(this, "idle")), $(document).bind("active.idleTimer", this.trigger.bind(this, "active")), this.set("started", !0)
            },
            isIdle: function () {
                return $.data(document, "idleTimer") === "idle"
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "IdleTimer"
            }
        })
    }
}), this.require.define({
    "lib/lotus/singleton": function (e, t, n) {
        function r(e) {
            var t = "Singleton %@ already created.".fmt(e);
            Error.call(this, t), this.message = t
        }

        function i(e) {
            var t = e.get("singletonPath");
            t != null && (Ember.deprecate("singletonPath has been deprecated."), Ember.isGlobalPath(t) ? Ember.set(t, e) : e.set(t, e))
        }
        r.prototype = new Error, r.prototype.constructor = r, r.prototype.name = "SingletonException";
        var s = Ember.Mixin.create({
            create: function () {
                var e = this,
                    t = e._instance,
                    n, r;
                return t != null && Ember.warn("Singleton %@ already exists. Overriding. In the future, this will throw an exception.".fmt(e)), n = e._super.apply(e, arguments), r = n.destroy, n.destroy = function () {
                    return e._instance = null, r.call(n)
                }, e._instance = n, i(n), n
            },
            instance: function () {
                return this._instance != null ? this._instance : (this._instance = this.create.apply(this, arguments), this.setupInstance && this.setupInstance(this._instance), this._instance)
            }
        });
        n.exports = s
    }
}), this.require.define({
    "lib/lotus/keyboard_listener": function (e, t, n) {
        var r = Em.Object.extend({
            currentKeyCode: null
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "KeyboardListener"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/user/settings": function (e, t, n) {
        var r = Ember.Resource.define({
            url: function () {
                return "/api/v2/users/me/settings.json"
            },
            schema: {
                deviceNotification: {
                    type: Boolean,
                    path: "device_notification"
                },
                showOnboardingTooltips: {
                    type: Boolean,
                    path: "show_onboarding_tooltips"
                },
                showReportingVideoTutorial: {
                    type: Boolean,
                    path: "show_reporting_video_tutorial"
                },
                showHCOnboardingTooltip: {
                    type: Boolean,
                    path: "show_hc_onboarding_tooltip"
                },
                showWelcomeDialog: {
                    type: Boolean,
                    path: "show_welcome_dialog"
                },
                showAppsTray: {
                    type: Boolean,
                    path: "show_apps_tray"
                },
                showFeatureNotifications: {
                    type: Boolean,
                    path: "show_feature_notifications"
                },
                isFirstTimeAssumingUser: {
                    type: Boolean,
                    path: "show_user_assume_tutorial"
                },
                keyboardShortcutsEnabled: {
                    type: Boolean,
                    path: "keyboard_shortcuts_enabled"
                },
                voiceCallingNumber: {
                    type: String,
                    path: "voice_calling_number"
                }
            },
            parse: function (e) {
                return e.settings.lotus
            }
        }).extend({
            isNew: !1,
            toJSON: function () {
                var e = this._super.apply(this, arguments);
                return {
                    settings: {
                        lotus: e
                    }
                }
            },
            init: function () {
                this._super();
                var e = this.get("showOnboardingTooltips") && this.get("showReportingVideoTutorial") && this.get("showWelcomeDialog") && this.get("keyboardShortcutsEnabled") && this.get("voiceCallingNumber") === null,
                    t = JSON.parse($.cookie("_lsc"));
                t && (e && (this.beginPropertyChanges(), (t.hasOwnProperty("show_welcome_dialog") || Zd.get("currentUser.last_login_at")) && this.set("showWelcomeDialog", !1), t.hasOwnProperty("onboarding_tooltips_viewed") && this.set("showOnboardingTooltips", t.onboarding_tooltips_viewed), t.hasOwnProperty("reporting_tutorial_viewed") && this.set("showReportingVideoTutorial", t.reporting_tutorial_viewed), t.hasOwnProperty("keyboard_shortcuts_enabled") && this.set("keyboardShortcutsEnabled", t.keyboard_shortcuts_enabled), t.hasOwnProperty("voice_calling_number") && this.set("voiceCallingNumber", t.voice_calling_number), this.endPropertyChanges()), $.cookie("_lsc", null, {
                    path: "/",
                    secure: window.location.protocol === "https:"
                }))
            },
            saveChanges: function () {
                this.save()
            }.observes("showWelcomeDialog", "showOnboardingTooltips", "showReportingVideoTutorial", "keyboardShortcutsEnabled", "voiceCallingNumber", "showHCOnboardingTooltip", "showAppsTray", "showFeatureNotifications", "isFirstTimeAssumingUser")
        });
        n.exports = r
    }
}), this.require.define({
    "lib/user_settings": function (e, t, n) {
        n.exports = t("models/user/settings").create({})
    }
}), this.require.define({
    "lib/lotus/keyboard_shortcuts": function (e, t, n) {
        var r = t("lib/user_settings"),
            i = t("./global_events"),
            s = {
                bind: function (e, t) {
                    window.key(e, function (e) {
                        return s.triggerOn.triggerOnResponder(t, {
                            originalEvent: e
                        })
                    })
                },
                triggerOn: i
            };
        window.key.ignoreEvent = function (e) {
            var t = e.target || e.srcElement,
                n = t.tagName;
            return r.get("keyboardShortcutsEnabled") ? e.altKey && e.ctrlKey ? !1 : n === "BUTTON" || n === "INPUT" || n === "SELECT" || n === "TEXTAREA" || t.contentEditable === "true" : !0
        }, n.exports = Object.freeze(s)
    }
}), this.require.define({
    "lib/lotus/labeled_field_view": function (e, t, n) {
        n.exports = Ember.View.extend({
            label: null,
            i18nLabel: null,
            value: null,
            disabled: Em.computed.alias("fieldView.disabled"),
            FieldView: Ember.required(),
            defaultTemplate: Ember.Handlebars.compile("{{view view.LabelView}}{{view view.FieldView}}"),
            LabelView: Ember.View.extend({
                tagName: "label",
                defaultTemplate: Ember.Handlebars.compile("{{view.text}}"),
                attributeBindings: ["for"],
                viewName: "labelView",
                text: function () {
                    var e = this.get("parentView.i18nLabel");
                    return e ? I18n.t(e) : this.get("parentView.label")
                }.property("parentView.label", "parentView.i18nLabel").cacheable()
            }).reopenClass({
                preservesContext: !0
            }),
            willInsertElement: function () {
                this._super(), this.set("labelView.for", Ember.guidFor(this.get("fieldView")))
            }
        }).reopenClass({
            preservesContext: !0,
            toString: function () {
                return "LabeledFieldView"
            }
        })
    }
}), this.require.define({
    "lib/views/focusable_view_mixin": function (e, t, n) {
        var r = Em.Mixin.create({
            name: Em.required(),
            focusManager: Em.required(),
            viewNameInFocus: Em.computed.alias("focusManager.viewNameInFocus"),
            domVisible: !1,
            init: function () {
                this.focusHandler = this.registerViewAsFocused.bind(this), this._super()
            },
            didInsertElement: function () {
                this._super && this._super(), this.viewNameInFocusDidChange();
                var e = this.$()[0];
                e.addEventListener("focus", this.focusHandler, !0), this.$().click(function (e) {
                    e.originalEvent.interceptedByFocusableView = !0
                })
            },
            willDestroyElement: function () {
                var e = this.$()[0];
                e && e.removeEventListener("focus", this.focusHandler, !0), this._super && this._super()

            },
            viewNameInFocusDidChange: function () {
                if (!this.get("focusManager")) return;
                if (!this.get("viewNameInFocus")) return;
                if (this.get("state") !== "inDOM") return;
                if (!this.get("domVisible")) return;
                if (this.get("name") !== this.get("viewNameInFocus")) return;
                Em.run.once(this, this._focus)
            }.observes("viewNameInFocus", "domVisible", "focusManager"),
            _focus: function () {
                t("lib/lotus/global_events").set("firstResponder", this);
                if (this.focus) this.focus();
                else {
                    var e = this.$("button, input");
                    e.length > 0 ? e.focus() : this.$().focus()
                }
            },
            becameVisible: function () {
                this._super && this._super(), this.set("domVisible", !0)
            },
            becameHidden: function () {
                this._super && this._super(), this.set("domVisible", !1)
            },
            registerViewAsFocused: function () {
                var e = this.get("focusManager");
                e && e.set("viewNameInFocus", this.get("name"))
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/lotus/labeled_text_field": function (e, t, n) {
        var r = t("./labeled_field_view");
        n.exports = r.extend(t("lib/views/focusable_view_mixin"), {
            classNames: ["labeled-text-field"],
            FieldView: Ember.TextField.extend({
                viewName: "fieldView",
                valueBinding: "parentView.value",
                click: function () {
                    this.$().focus()
                }
            })
        })
    }
}), this.require.define({
    "lib/logging/logger": function (e, t, n) {
        var r = function (e) {
            var t = "lotus";
            e && (t = "%@/%@".fmt(t, e)), this.minilog = Minilog(t)
        };
        r.prototype = {
            debug: function (e) {
                return this.toMinilog(e, "debug")
            },
            error: function (e) {
                return this.toMinilog(e, "error")
            },
            info: function (e) {
                return this.toMinilog(e, "info")
            },
            appVersion: function () {
                return Zd.get("currentVersion") || {}
            },
            toMinilog: function (e, t) {
                return typeof e == "string" && (e = {
                    message: e
                }), e.zdVersion = this.appVersion(), this.minilog[t].call(this.minilog, e)
            }
        }, n.exports = r
    }
}), this.require.define({
    "lib/monitoring/stores/in_memory_store": function (e, t, n) {
        function r() {
            function n() {
                e = {
                    counts: {},
                    times: {}
                }
            }

            function r(e) {
                var t = Object.prototype.hasOwnProperty;
                for (var n in e)
                    if (t.call(e, n)) return !1;
                return !0
            }

            function i() {
                return e ? r(e.times) && r(e.counts) : !0
            }
            var e, t = {};
            n(), this.data = function () {
                return e
            }, this.isEmpty = function () {
                return i()
            }, this.reset = function () {
                n()
            }, this.count = function (t) {
                return e.counts[t] || (e.counts[t] = 0), ++e.counts[t]
            }, this.storeCount = function (t, n) {
                return e.counts[t] = n
            }, this.time = function (e) {
                t[e] = new Date
            }, this.timeEnd = function (n) {
                if (!t[n]) return;
                var r = t[n];
                return delete t[n], e.times[n] = new Date - r
            }, this.storeTime = function (t, n) {

                return e.times[t] = n
            }
        }
        n.exports = r
    }
}), this.require.define({
    "lib/monitoring/stores/pubsub_store": function (e, t, n) {
        function u() {
            function i() {
                setInterval(function () {
                    t.publish()
                }, o)
            }
            var e = !1,
                t = this,
                n = new r;
            ["data", "isEmpty", "reset", "count", "storeCount", "time", "timeEnd", "storeTime"].forEach(function (e) {
                    t[e] = n[e].bind(n)
                }), this.enableLogging = function () {
                    e || (i(), e = !0)
            }, this.logger = function () {
                return s
            }, this.publish = function () {
                if (this.isEmpty()) return;
                s.info(this.data()), this.reset()
            }
        }
        var r = t("lib/monitoring/stores/in_memory_store"),
            i = t("lib/logging/logger"),
            s = new i("monitoring"),
            o = 3e5;
        n.exports = u
    }
}), this.require.define({
    "lib/monitoring/metrics": function (e, t, n) {
        function o() {
            var e = [new r, new i];
            this.data = function () {
                return e.invoke("data")
            }, this.reset = function () {
                return e.invoke("reset")
            }, this.stores = function () {
                return e
            }, this.count = function (t) {
                e.invoke("count", t)
            }, this.storeCount = function (t, n) {
                e.invoke("storeCount", t, n)
            }, this.time = function (t) {
                e.invoke("time", t)
            }, this.timeEnd = function (t) {
                e.invoke("timeEnd", t)
            }, this.storeTime = function (t, n) {
                e.invoke("storeTime", t, n)
            }, this.enableLogging = function () {
                e.invoke("enableLogging")
            }
        }
        var r = t("lib/monitoring/stores/in_memory_store"),
            i = t("lib/monitoring/stores/pubsub_store"),
            s;
        o.instance = function () {
            return s || (s = new o), s
        }, n.exports = o
    }
}), this.require.define({
    "lib/lotus/loading": function (e, t, n) {
        function l() {
            this.startedAt = null, this.timer = null, this.loadingTime = null, i = u.instance()
        }
        var r, i, s = 3e3,
            o = t("lib/logging/console_logger"),
            u = t("lib/lotus/timing"),
            a = new o,
            f = t("lib/monitoring/metrics").instance();
        l.prototype.start = function () {
            this.startedAt = Date.now(), this.timer = setTimeout(this.stop.bind(this), s), $("#booting").show()
        }, l.prototype.stop = function () {
            if (!this.timer) return;
            clearTimeout(this.timer), this.timer = null, this.loadingTime = Date.now() - this.startedAt, $("#booting").hide(), a.info("Loading screen shown for " + this.loadingTime), this.logTimeSinceRequest("booting/request/to/loaded", "Time from request start until the loading screen drop")
        }, l.prototype.logTimeSinceRequest = function (t, n) {
            var r, s = i.getTime("navigationStart");
            s && (r = Date.now() - s, f.storeTime(t, r), a.info(n + ": " + r))
        }, l.instance = function () {
            return r = r || new l, r
        }, n.exports = l
    }
}), this.require.define({
    "lib/lotus/nearest_with_behavior": function (e, t, n) {
        n.exports = Object.freeze({
            nearestWithBehavior: function (e) {
                var t = Em.get(this, "parentView");
                while (t) {
                    if (e.detect(t)) return t;
                    t = Em.get(t, "parentView")
                }
            }
        })
    }
}), this.require.define({
    "lib/lotus/responder_view": function (e, t, n) {
        n.exports = Em.Mixin.create(t("./focusable"), {
            didInsertElement: function () {
                this.$().bind("focusin.firstResponder.lotus click.firstResponder.lotus", this.focus.bind(this)), this._super()
            }
        })
    }
}), this.require.define({
    "lib/lotus/run_loop_tracer": function (e, t, n) {
        var r = function () {};
        r.prototype = {
            _originalFlush: Em.RunLoop.prototype.flush,
            activate: function () {
                var e = Array.prototype.slice.apply(arguments);
                e.length ? this.tracedQueues = e : this.tracedQueues = ["actions", "render"];
                var t = this;
                Em.RunLoop.prototype.flush = Em.wrap(function (e) {
                    var n = this._queues,
                        r, i, s, o;
                    if (!n) return this._super.apply(this, arguments);
                    if (e) r = n[e], r && (r.unshift({
                        target: t,
                        method: "_begin",
                        args: [e]
                    }), r.push({
                        target: t,
                        method: "_end",
                        args: [e]
                    }));
                    else {
                        s = Em.run.queues, o = s.length;
                        for (i = 0; i < o; i++) e = s[i], r = n[e], r && (r.unshift({
                            target: t,
                            method: "_begin",
                            args: [e]
                        }), r.push({
                            target: t,
                            method: "_end",
                            args: [e]
                        }))
                    }
                    return this._super.apply(this, arguments)
                }, this._originalFlush)
            },
            deactivate: function () {
                Em.RunLoop.prototype.flush = this._originalFlush
            },
            _begin: function (e) {
                this.tracedQueues.contains(e) && console.time(e)
            },
            _end: function (e) {
                this.tracedQueues.contains(e) && console.timeEnd(e)
            }
        }, n.exports = r
    }
}), this.require.define({
    "lib/lotus/screencast_view": function (e, t, n) {
        var r = t("models/screencast");
        n.exports = Em.Mixin.create({
            screencastController: Em.computed.singleton("controllers/screencast_controller"),
            handleClickForScreencast: function (e) {
                var t = $(e.target).data("screencast-id");
                if (typeof t != "undefined") {
                    var n = r.create({
                        id: t
                    });
                    this.get("screencastController").setScreencast(n), e.preventDefault()
                }
            },
            didSetScreencastUrl: function () {
                this.get("screencastController.screencast.url") && this.showScreencastPreview()
            }.observes("screencastController.screencast.url"),
            showScreencastPreview: function () {
                var e = this;
                $("#screencast_preview").modal().on("hidden", function () {
                    e.get("screencastController").removeScreencast()
                })
            }
        })
    }
}), this.require.define({
    "lib/lotus/swappable": function (e, t, n) {
        n.exports = Em.Mixin.create({
            isVisible: function () {
                return this.get("name") === this.get("parentView.activeChildName")
            }.property("parentView.activeChildName", "name").cacheable()
        })
    }
}), this.require.define({
    "lib/lotus/swappable_view": function (e, t, n) {
        n.exports = Ember.View.extend(t("./swappable"))
    }
}), this.require.define({
    "lib/lotus/timing": function (e, t, n) {
        var r, i = t("lib/logging/console_logger"),
            s = function (e) {
                var t, n, r = e.performance;
                if (!r) {
                    t = new i, t.info("Your browser does not support performance monitoring.");
                    return
                }
                n = r.navigation || {}, this._supported = !0, this._timing = r.timing, this._initialPageLoad = n.type !== 2
            };
        s.prototype.supported = function () {
            return this._supported
        }, s.prototype.getTime = function (e) {
            if (this._timing && this._initialPageLoad) return this._timing[e]
        }, s.instance = function () {
            return r = r || new s(window), r
        }, n.exports = s
    }
}), this.require.define({
    "lib/lotus/version_watcher": function (e, t, n) {
        function i(e) {
            this._timerId = null, this._callback = e
        }
        var r = 3e5;
        i.prototype = {
            startWatching: function () {
                if (this._timerId) return;
                this._timerId = setInterval(this._watchVersion.bind(this), r)
            },
            stopWatching: function () {
                if (!this._timerId) return;
                clearInterval(this._timerId), this._timerId = null
            },
            _watchVersion: function () {
                var e = this;
                $.ajax({
                    url: "/agent/version.json",
                    cache: !1,
                    dataType: "json"
                }).done(function (t) {
                    e._callback && e._callback(t)
                })
            }
        }, n.exports = i
    }
}), this.require.define({
    "lib/lotus/workspace_bindings": function (e, t, n) {
        n.exports = Object.freeze({
            _workspaceView: function () {
                return this.nearestWithProperty("workspace")
            }.property().cacheable(),
            workspace: function (e, t) {
                return t ? (this.set("_workspace", t), t) : this.get("_workspace") || this.get("_workspaceView.workspace")
            }.property("_workspace", "_workspaceView.workspace").cacheable(),
            controllerView: function () {
                var e = this;
                do {
                    e = e.get("parentView");
                    if (!e) return
                } while (e.get("controller") == null);
                return e
            }.property().volatile()
        })
    }
}), this.require.define({
    "lib/session": function (e, t, n) {
        function i() {
            return $.ajax({
                url: "/api/v2/users/me?include=abilities%2Croles",
                type: "GET",
                dataType: "json",
                async: !1
            })
        }

        function s(e) {
            if (r == null) {
                var t = $.Deferred();
                i().then(function (n) {
                    var r = n && n.user && n.user.role;
                    r === "agent" || r === "admin" ? (e.authenticityToken = n.user.authenticity_token, e.data = n, t.resolve(n)) : t.reject()
                }), r = t.promise()
            }
            return r
        }
        var r, o = {
                start: function () {
                    return s(this)
                },
                destroy: function () {
                    r = null, this.authenticityToken = undefined, this.data = undefined
                }
            };
        n.exports = Object.freeze({
            instance: function () {
                return o
            }
        })
    }
}), this.require.define({
    "initializers/ajax_transport": function (e, t, n) {
        function o(e, t) {
            s = s || Em.get("Zendesk.currentVersion.tag"), s && !t.crossDomain && e.setRequestHeader("X-Zendesk-Lotus-Version", s)
        }

        function u(e) {
            return $.parseJSON($.trim(e))
        }

        function f(e, n, r) {
            a = a || t("lib/session").instance().authenticityToken, !e.crossDomain && a && r.setRequestHeader("X-CSRF-Token", a)
        }

        function l(e, t, n) {
            t.status === 0 && i.error({
                short_message: 'Request failed with status code "0"',
                url: n.url,
                method: n.type
            })
        }
        var r = t("lib/logging/logger"),
            i = new r("ajax-transport"),
            s, a = null;
        n.exports = function () {
            $.ajaxSetup({
                beforeSend: o,
                converters: {
                    "text json": u
                }
            }), $(document).ajaxError(l), $.ajaxPrefilter(f)
        }
    }
}),
function (e) {
    e.Zendesk = e.Zendesk || {}
}(this),
function () {
    Zendesk.Gravatar = function (e, t, n, r) {
        this.email = e, this.defaultImage = t, this.size = typeof n != "undefined" ? n : 30, this.rating = typeof r != "undefined" ? r : "g"
    }, Zendesk.Gravatar.prototype = {
        url: function () {
            var e = "https://secure.gravatar.com/avatar/",
                t = this.hash(this.email),
                n = "?d=" + this.defaultImage,
                r = "&s=" + this.size,
                i = "&r=" + this.rating;
            return e + t + n + r + i
        },
        hash: function (e) {
            return e = $.trim(e).toLowerCase(), $.md5(e)
        }
    }
}(),
function () {
    var e = /\/images\/types\/user_sm\.png$/,
        t = window.escape("https://assets.zendesk.com/images/types/user_sm.png");
    Zendesk.Photo = function (e, t) {
        this.photoUrl = e, this.email = t
    }, Zendesk.Photo.prototype = {
        url: function () {
            var e, n;
            return this.isDefaultPhoto() ? (e = new Zendesk.Gravatar(this.email, t), e.url()) : this.photoUrl
        },
        isDefaultPhoto: function () {
            return !this.photoUrl || this.photoUrl.match(e)
        }
    }
}(),
function () {
    Zendesk.User = Ember.Resource.define({
        url: "/api/v2beta/users",
        schema: {
            id: Number,
            name: String,
            email: String,
            roles: Number,
            locale_id: Number,
            openid_url: String,
            created_at: Date,
            updated_at: Date,
            is_verified: Boolean,
            last_login: Date,
            details: String,
            notes: String,
            external_id: Number,
            restriction_id: Number,
            phone: String,
            is_active: Boolean,
            time_zone: String,
            uses_12_hour_clock: Boolean,
            authenticity_token: String,
            tags: Object,
            signature: String,
            alias: String,
            private_comments_only: Boolean,
            is_moderator: Boolean,
            photo_url: String,
            shared: Boolean
        }
    }).extend({
        isAgent: function () {
            return (this.get("roles") || 0) > 1
        }.property("roles").cacheable(),
        isAdmin: function () {
            return (this.get("roles") || 0) === 2
        }.property("roles").cacheable(),
        isAgentNotAdmin: function () {
            return (this.get("roles") || 0) === 4
        }.property("roles").cacheable(),
        isEndUser: function () {
            return (this.get("roles") || 0) === 0
        }.property("roles").cacheable(),
        roleName: function () {
            return this.get("isAdmin") ? "admin" : this.get("isAgent") ? "agent" : "end_user"
        }.property("isAgent", "isAdmin").cacheable(),
        roleDisplayName: function () {
            return I18n.t("type.updated_by.%@".fmt(this.get("roleName")))
        }.property("roleName").cacheable(),
        displayName: function () {
            return this.get("name") || this.get("email")
        }.property("name", "email").cacheable(),
        profileImageUrl: function () {
            var e = new Zendesk.Photo(this.get("photo_url"), this.get("email"));
            return e.url()
        }.property("photo_url", "email").cacheable()
    }), Zendesk.User.current = Zendesk.User.create(), Zendesk.User.current.resourceURL = function () {
        return "/api/v2beta/users/current"
    }
}(),
function () {
    Zendesk.AccountSurveyResponse = Ember.Resource.define({
        url: function () {
            return "/api/v2/account/survey_response.json"
        },
        schema: {
            id: Number,
            industry: String,
            employee_count: String,
            target_audience: String,
            support_structure: String,
            customer_count: String,
            team_count: Number,
            agent_count: Number
        },
        parse: function (e) {
            return e && (e = e.survey_response || e), e
        }
    }).extend({
        autoFetch: !1,
        toJSON: function () {
            var e = {
                industry: this.get("industry"),
                employee_count: this.get("employee_count"),
                target_audience: this.get("target_audience"),
                support_structure: this.get("support_structure"),
                customer_count: this.get("customer_count"),
                team_count: this.get("team_count"),
                agent_count: this.get("agent_count")
            };
            return {
                survey_response: e
            }
        }
    })
}(), this.require.define({
    "models/deployments": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                clientSideLogging: {
                    type: Boolean,
                    path: "client_side_logging"
                },
                feedPrototype: {
                    type: Boolean,
                    path: "feed_prototype"
                },
                ipmFeatureNotifications: {
                    type: Boolean,
                    path: "ipm_feature_notifications"
                },
                lotusLogging: {
                    type: Boolean,
                    path: "lotus_logging"
                },
                planSelection: {
                    type: Boolean,
                    path: "plan_selection"
                },
                realtimeComments: {
                    type: Boolean,
                    path: "realtime_comments"
                },
                ticketForms: {
                    type: Boolean,
                    path: "ticket_forms"
                },
                voiceWebRTC: {
                    type: Boolean,
                    path: "voice_webrtc"
                },
                atMentions: {
                    type: Boolean,
                    path: "at_mentions"
                },
                userAssume: {
                    type: Boolean,
                    path: "user_assume"
                },
                placeholders: {
                    type: Boolean,
                    path: "placeholders"
                },
                userViews: {
                    type: Boolean,
                    path: "user_views"
                },
                multipleOrganizations: {
                    type: Boolean,
                    path: "multiple_organizations"
                },
                voiceTrustOnOutboundCalls: {
                    type: Boolean,
                    path: "voice_trust_on_outbound_calls"
                },
                voiceDisablePoller: {
                    type: Boolean,
                    path: "voice_disable_poller"
                },
                elitePricing: {
                    type: Boolean,
                    path: "elite_pricing"
                },
                voiceQueuedCalls: {
                    type: Boolean,
                    path: "voice_queued_calls"
                }
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/help_center_settings": function (e, t, n) {
        n.exports = Em.Resource.define({
            schema: {
                features: Object,
                state: Object,
                securityPolicy: {
                    type: Object,
                    path: "security_policy"
                }
            },
            parse: function (e) {
                return e.state = {
                    webPortal: e.state.web_portal,
                    helpCenter: e.state.help_center,
                    helpCenterOnboarding: e.state.help_center_onboarding_state
                }, e
            }
        }).extend({
            _stateCode: function (e, t) {
                if (arguments.length > 1) return t;
                var n = this.get("state.helpCenter") || "disabled",
                    r = this.get("state.webPortal") || "disabled",
                    i = {
                        restricted: "r",
                        enabled: "e",
                        disabled: "d"
                    };
                return i[r] + i[n]
            }.property("state.helpCenter", "state.webPortal").cacheable(),
            hideCopyToForums: Em.computed.among("_stateCode", "re", "dd", "dr", "de"),
            hideResendVerificationEmail: Em.computed.among("_stateCode", "dd", "dr"),
            hideGoToWebPortal: Em.computed.among("_stateCode", "re", "dd", "dr", "de"),
            hideTopicsFilter: Em.computed.among("_stateCode", "re", "dd", "dr", "de"),
            hideArticlesFilter: Em.computed.among("_stateCode", "ed", "er", "dd", "dr"),
            hideEndUserAccessRestriction: Em.computed.among("_stateCode", "re", "dd", "dr", "de"),
            hidePasswordReset: Em.computed.among("_stateCode", "dd", "dr"),
            hidePasswordSet: Em.computed.alias("hidePasswordReset"),
            hideOrgSharing: Em.computed.among("_stateCode", "re", "dd", "dr", "de"),
            hideUserAssume: Em.computed.among("_stateCode", "dd", "dr"),
            hideWebPortalFilters: Em.computed.match("_stateCode", /^d.$/),
            renameForumsToHelpCenter: Em.computed.match("_stateCode", /^.[e|r]/),
            renameEditorPermissionToManager: Em.computed.alias("renameForumsToHelpCenter"),
            hideForumsPermission: Em.computed.equal("_stateCode", "dd"),
            webPortalEnabled: Em.computed.match("_stateCode", /^e.$/),
            webPortalConfigured: Em.computed.match("_stateCode", /^[e|r].$/),
            helpCenterConfigured: Em.computed.match("_stateCode", /^.[e|r]$/),
            helpCenterOnboardingState: Em.computed.oneWay("state.helpCenterOnboarding"),
            showHelpCenterIcon: function () {
                var e = this.get("helpCenterConfigured"),
                    t = this.get("helpCenterOnboardingState") === "enabled";
                return e || t && Zd.currentUser.get("isAdmin")
            }.property("helpCenterConfigured", "helpCenterOnboardingState", "Zd.currentUser.isAdmin").cacheable()
        }).reopenClass({
            toString: function () {
                return "HelpCenter Settings"
            }
        })
    }
}), this.require.define({
    "models/account": function (e, t, n) {
        var r = Ember.Resource.define({
            url: function () {
                return "/api/v2/account/settings.json"
            },
            schema: {
                private_attachments: Boolean,
                chat_welcome_message: String,
                comments_public_by_default: Boolean,
                is_agent_collision_enabled: Boolean,
                is_collaboration_enabled: Boolean,
                maximum_chat_requests: Number,
                reverse_event_order: Boolean,
                ticket_tagging: Boolean,
                markdown_ticket_comments: Boolean,
                has_voice_enabled: Boolean,
                in_voice_maintenance: Boolean,
                has_voice_logging: Boolean,
                has_chat_enabled: Boolean,
                isChatAvailable: Boolean,
                has_user_tags: Boolean,
                shorten_url: String,
                apps_use: Boolean,
                apps_create_private: Boolean,
                apps_create_public: Boolean,
                prefer_lotus: Boolean,
                lotus_reporting: Boolean,
                forum_statistics: Boolean,
                search_statistics: Boolean,
                useStatusHold: Boolean,
                screenrTicketRecorderId: String,
                screenrDomain: String,
                screencastsForTicketsEnabled: Boolean,
                has_voice_outbound_enabled: Boolean,
                billing_backend: String,
                active_features: Object,
                has_time_zone_selection: Boolean,
                hasIndividualLanguageSelection: Boolean,
                ticketFormsInstructions: String,
                assignTicketsUponSolve: Boolean,
                headerLogoUrl: {
                    type: String,
                    path: "branding.header_logo_url"
                },
                faviconUrl: {
                    type: String,
                    path: "branding.favicon_url"
                },
                headerColor: {
                    type: String,
                    path: "branding.header_color"
                },
                textColor: {
                    type: String,
                    path: "branding.text_color"
                },
                pageBackgroundColor: {
                    type: String,
                    path: "branding.page_background_color"
                },
                tabBackgroundColor: {
                    type: String,
                    path: "branding.tab_background_color"
                }
            },
            parse: function (e) {
                var t = e.settings;
                return t && (t.tickets && (t.private_attachments = t.tickets.private_attachments, t.comments_public_by_default = t.tickets.comments_public_by_default, t.is_agent_collision_enabled = t.tickets.agent_collision, t.is_collaboration_enabled =
                    t.tickets.collaboration, t.reverse_event_order = t.tickets.list_newest_comments_first, t.ticket_tagging = t.tickets.tagging, t.useStatusHold = t.tickets.status_hold, t.markdown_ticket_comments = t.tickets.markdown_ticket_comments, t.assignTicketsUponSolve = t.tickets.assign_tickets_upon_solve), t.chat && (t.chat_welcome_message = t.chat.welcome_message, t.maximum_chat_requests = t.chat.maximum_request_count, t.has_chat_enabled = t.chat.enabled, t.isChatAvailable = t.chat.available), t.voice && (t.has_voice_enabled = t.voice.enabled, t.in_voice_maintenance = t.voice.maintenance, t.has_voice_logging = t.voice.logging, t.has_voice_outbound_enabled = t.voice.outbound_enabled), t.user && (t.has_user_tags = t.user.tagging, t.has_time_zone_selection = t.user.time_zone_selection, t.hasIndividualLanguageSelection = t.user.language_selection), t.twitter && (t.shorten_url = t.twitter.shorten_url), t.apps && (t.apps_use = t.apps.use, t.apps_create_private = t.apps.create_private, t.apps_create_public = t.apps.create_public), t.lotus && (t.prefer_lotus = t.lotus.prefer_lotus, t.lotus_reporting = t.lotus.reporting), t.statistics && (t.forum_statistics = t.statistics.forum, t.search_statistics = t.statistics.search), t.screencast && (t.screencastsForTicketsEnabled = t.screencast.enabled_for_tickets, t.screenrTicketRecorderId = t.screencast.tickets_recorder_id, t.screenrDomain = t.screencast.host), t.billing && (t.billing_backend = t.billing.backend), t.ticket_form && t.ticket_form.ticket_forms_instructions && (t.ticketFormsInstructions = t.ticket_form.ticket_forms_instructions, delete t.ticket_form.ticket_forms_instructions)), t
            }
        }).extend({
            shortenUrlOptional: function () {
                return this.get("shorten_url") === "optional"
            }.property("shorten_url").cacheable(),
            toJSON: function () {
                var e = {
                    lotus: {
                        prefer_lotus: this.get("prefer_lotus")
                    },
                    ticket_form: {
                        ticket_forms_instructions: this.get("ticketFormsInstructions")
                    }
                };
                return {
                    settings: e
                }
            }
        }),
            i = t("models/deployments"),
            s = t("models/help_center_settings"),
            o = r.extend({
                remoteExpiryKey: "settings",
                remoteExpiryAutoFetch: !0
            }),
            u = Ember.Resource.define({
                url: function () {
                    return "/api/v2/account.json?include=subscription,deployments,hc_settings,branding"
                },
                schema: {
                    uses12HourClock: Boolean,
                    pubsubServers: {
                        type: Object,
                        path: "deployments.pubsubServers"
                    },
                    subdomain: {
                        type: String,
                        path: "account.subdomain"
                    },
                    hostMapping: {
                        type: String,
                        path: "account.host_mapping"
                    },
                    name: {
                        type: String,
                        path: "account.name"
                    },
                    planType: {
                        type: String,
                        path: "subscription.plan_type"
                    },
                    planName: {
                        type: String,
                        path: "subscription.plan_name"
                    },
                    fileUploadCap: {
                        type: Number,
                        path: "subscription.file_upload_cap"
                    },
                    accountType: {
                        type: String,
                        path: "subscription.account_type"
                    },
                    billingBackend: {
                        type: String,
                        path: "subscription.billing_backend"
                    },
                    sandbox: {
                        type: Boolean,
                        path: "account.sandbox"
                    },
                    createdAt: {
                        type: Date,
                        path: "subscription.created_at"
                    },
                    trialExpiresOn: {
                        type: Date,
                        path: "subscription.trial_expires_on"
                    },
                    daysLeftInTrial: {
                        type: Number,
                        path: "subscription.days_left_in_trial"
                    },
                    inTrial: {
                        type: Boolean,
                        path: "subscription.trial"
                    },
                    maxAgents: {
                        type: Number,
                        path: "subscription.max_agents"
                    },
                    suspended: {
                        type: Boolean,
                        path: "subscription.suspended"
                    },
                    deployments: {
                        type: i,
                        nested: !0
                    },
                    owner: {
                        type: "Zendesk.User",
                        path: "account.owner_id"
                    },
                    helpCenterSettings: {
                        type: s,
                        path: "hc_settings",
                        nested: !0
                    }
                },
                parse: function (e) {
                    return e && e.account && (e.uses12HourClock = e.account.time_format && e.account.time_format === 12), e
                }
            }).extend({
                settings: function () {
                    return r.create({})
                }.property().cacheable(),
                expirableSettings: function () {
                    return o.create()
                }.property().cacheable(),
                isNotSandbox: function () {
                    return !this.get("sandbox")
                }.property("sandbox").cacheable(),
                isTrialAccount: Em.computed.equal("accountType", "trial"),
                daysSinceTrialExpired: function () {
                    var e = (new Date - this.get("trialExpiresOn")) / 864e5;
                    return Math.ceil(e)
                }.property("trialExpiresOn").volatile(),
                isInternallyBilled: Em.computed.equal("billingBackend", "internal"),
                created_at: function (e, t) {
                    return Ember.deprecate("Account#created_at is deprecated, please use createdAt."), arguments.length > 1 ? (this.set("createdAt", t), t) : this.get("createdAt")
                }.property("createdAt").volatile(),
                uses_12_hour_clock: function (e, t) {
                    return Ember.deprecate("Account#uses_12_hour_clock is deprecated, please use uses12HourClock."), arguments.length > 1 ? (this.set("uses12HourClock", t), t) : this.get("uses12HourClock")
                }.property("uses12HourClock").volatile()
            });
        n.exports = u
    }
}), this.require.define({
    "lib/current_account": function (e, t, n) {
        var r = t("models/account"),
            i = r.create();
        n.exports = i
    }
}), this.require.define({
    "lib/account_consumer": function (e, t, n) {
        var r = t("lib/current_account"),
            i = Em.Mixin.create({
                currentAccount: r
            });
        n.exports = i
    }
}), this.require.define({
    "lib/user_settings_consumer": function (e, t, n) {
        var r = t("lib/user_settings"),
            i = Em.Mixin.create({
                userSettings: r
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/apps_controller": function (e, t, n) {
        var r = t("lib/lotus/singleton"),
            i = t("lib/lotus/global_events"),
            s = function (e) {
                return Em.getWithDefault(e, "appContainers", [])
            }, o = Em.ArrayController.extend(Ember.Evented, t("lib/user_settings_consumer"), {
                content: Em.computed.emptyArray(),
                active: Em.computed.alias("userSettings.showAppsTray"),
                isActive: Em.computed.bool("active"),
                hideApps: function () {
                    return this.set("active", !1)
                },
                showApps: function () {
                    return this.set("active", !0)
                },
                toggleApps: function () {
                    this.set("active", !this.get("active"))
                },
                reloadAllApps: function () {
                    i.trigger("@action:apps:reload")
                },
                resetAppsForView: function (e) {
                    e && !e.isDestroyed && s(e).invoke("removeApps")
                },
                notifyAppsForView: function (e, t) {
                    s(e).forEach(function (e) {
                        e.get("appsManager").notifyApps(t)
                    })
                },
                runHooksFor: function (e, t) {
                    return $.when.apply($, s(e).invoke("runHooksFor", t))
                }
            }).reopenClass(r, {
                toString: function () {
                    return "AppsController"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "lib/apps_consumer": function (e, t, n) {
        n.exports = Em.Mixin.create({
            appsController: Em.computed.singleton("controllers/apps_controller")
        })
    }
}), this.require.define({
    "initializers/app_market": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = $.queryParameters().zaf,
            s = $.queryParameters().zat,
            o = "/assets/apps/framework/current/framework.min.js",
            u = "/api/v2/apps/installed.js";
        i && (i === "debug" ? o = "/assets/apps/framework/current/framework.js" : i.match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/) && (o = "/assets/apps/framework/%@/framework.js".fmt(i))), s && (s === "true" ? u = "http://localhost:4567/app.js" : s.match(/^http:\/\/localhost:\d+\/app.js$/) ? u = s : s = !1), [o, u].forEach(function (e) {
            $.ajax({
                async: !1,
                cache: !0,
                dataType: "script",
                url: e
            })
        });
        var a = window.ZendeskApps,
            f = t("controllers/apps_controller").instance();
        a || (a = {
            AppContainer: Em.Mixin.create({
                deactivateAppView: Em.K
            }),
            Site: {},
            DefaultAppViewClass: Em.View,
            installedAppsFor: Em.K.bind([]),
            AppContainerHostView: Em.Mixin.create({
                didActivate: Em.K,
                didDeactivate: Em.K,
                reset: Em.K
            })
        }), a.AppContainer.reopen(t("lib/account_consumer"), t("lib/apps_consumer"), {
            currentUser: function () {
                return Zendesk.get("currentUser")
            }.property().cacheable(),
            init: function () {
                r.on("@action:apps:reload", this, "reloadApps"), this._super.apply(this, arguments)
            }
        }), n.exports = function () {
            Zendesk.set("Apps", a), Zendesk.set("appsController", f), Zendesk.Apps.UserAppContainer = Zendesk.Apps.UserAppContainer || Zendesk.Apps.AppContainer, Zendesk.Apps.TicketAppContainer = Zendesk.Apps.TicketAppContainer || Zendesk.Apps.AppContainer, Zendesk.Apps.BarAppContainer = Zendesk.Apps.BarAppContainer || Zendesk.Apps.NavBarAppContainer || Zendesk.Apps.AppContainer, Zendesk.Apps.isZatEnabled = function () {
                return !!s
            }
        }
    }
}), this.require.define({
    "lib/app_url_sanitizer": function (e, t, n) {
        var r = /\?.*/,
            i = {
                paramsWhitelist: [],
                whitelistUrlParams: function () {
                    this.paramsWhitelist = _.union(this.paramsWhitelist, [].slice.call(arguments))
                },
                getQueryParams: function (e) {
                    var t = e.match(r);
                    if (!t) return {};
                    var n = t[0].slice(1);
                    return $.queryParameters(n)
                },
                getWhiteListedParamsAsQueryString: function (e) {
                    var t = this.getQueryParams(e);
                    return this.paramsWhitelist.filter(function (e) {
                        return t.hasOwnProperty(e) && t[e]
                    }).map(function (e) {
                        return e + "=" + t[e]
                    }).join("&")
                },
                sanitizeUrl: function (e) {
                    var t = e.indexOf("#");
                    t = t === -1 ? e.length : t;
                    var n = e.slice(0, t),
                        i = e.slice(t),
                        s = this.getWhiteListedParamsAsQueryString(n);
                    return s = s ? "?" + s : "", n.replace(r, s) + i
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "initializers/app_url_sanitizer": function (e, t, n) {
        var r = t("lib/app_url_sanitizer");
        r.whitelistUrlParams("redirect", "zat", "zaf", "code", "oauth_token", "oauth_verifier"), n.exports = function () {
            if (t("lib/environment").test) return;
            var e = r.sanitizeUrl(window.location.href);
            e !== window.location.href && window.location.replace(e)
        }
    }
}), this.require.define({
    "initializers/application": function (e, t, n) {
        n.exports = function () {
            var e = window.Zendesk || {}, t = Em.Application.create(e, {
                    Config: window.__zendesk_config,
                    customEvents: {
                        paste: "paste",
                        mouseover: "mouseOver",
                        mouseout: "mouseOut"
                    },
                    views: Em.Object.create()
                });
            window.__zendesk_config = null, window.Zendesk = window.Zd = t
        }
    }
}), this.require.define({
    "initializers/browser_closing": function (e, t, n) {
        n.exports = function () {
            $(window).on("beforeunload", function () {
                return Ember.get("Zendesk.workspaces.browserCloseWarning") || Ember.get("Zendesk.currentUser.voice.browserCloseWarning") || undefined
            })
        }
    }
}), this.require.define({
    "mixins/button_support": function (e, t, n) {
        var r = Em.Mixin.create(Em.TargetActionSupport, {
            tagName: "button",
            attributeBindings: ["type", "disabled", "href", "tabindex"],
            disabled: !1,
            propagateEvents: !1,
            type: function (e, t) {
                var n = this.get("tagName");
                t !== undefined && (this._type = t);
                if (this._type !== undefined) return this._type;
                if (n === "input" || n === "button") return "button"
            }.property("tagName").cacheable(),
            href: function () {
                return this.get("tagName") === "a" ? "#" : null
            }.property("tagName").cacheable(),
            mouseDown: function () {
                return this.get("disabled") || (this.set("isActive", !0), this._mouseDown = !0, this._mouseEntered = !0), this.get("propagateEvents")
            },
            mouseLeave: function () {
                this._mouseDown && (this.set("isActive", !1), this._mouseEntered = !1)
            },
            mouseEnter: function () {
                this._mouseDown && (this.set("isActive", !0), this._mouseEntered = !0)
            },
            mouseUp: function () {
                return this.get("isActive") && (this.triggerAction(), this.set("isActive", !1)), this._mouseDown = !1, this._mouseEntered = !1, this.get("propagateEvents")
            },
            keyDown: function (e) {
                (e.keyCode === 13 || e.keyCode === 32) && this.mouseDown()
            },
            keyUp: function (e) {
                (e.keyCode === 13 || e.keyCode === 32) && this.mouseUp()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/context_menu_view": function (e, t, n) {
        var r = Em.View.extend(t("mixins/button_support"), {
            tagName: "li",
            classNames: ["button"],
            classNameBindings: ["content.status"],
            actionBinding: "content.action",
            targetBinding: "content.target",
            isVisible: Em.computed.notEqual("content.status", "invisible"),
            disabled: Em.computed.equal("content.status", "inactive"),
            didInsertElement: function () {
                this.$().html(this.get("content.label"))
            }
        }).reopenClass({
            preservesContext: !0
        }),
            i = Em.View.extend({
                render: function (e) {
                    this._super(e);
                    var t = r.create({
                        content: this.get("content"),
                        parentView: this
                    });
                    this.appendChild(t)
                }
            }).reopenClass({
                preservesContext: !0
            }),
            s = Em.CollectionView.extend({
                tagName: "ul",
                classNames: "zendesk-context-menu",
                itemViewClass: r,
                isVisible: !1,
                show: function (e, t) {
                    return this.set("isVisible", !0), e && this.set("content", e), t && this.positionRelativeTo(t), this
                },
                hide: function () {
                    return this.set("isVisible", !1), this
                },
                eventNameSpace: function () {
                    return ".contextmenu_" + Em.guidFor(this)
                }.property().cacheable(),
                didInsertElement: function () {
                    this.setupHideLogic(), this._super()
                },
                setupHideLogic: function () {
                    var e = this.get("eventNameSpace"),
                        t = _(function () {
                            this.set("isVisible", !1)
                        }).bind(this);
                    $(window).bind("hashchange" + e, t), $(document).bind("mousewheel" + e, t), $(document).bind("keydown" + e, function (e) {
                        e.keyCode === 27 && t()
                    })
                },
                positionRelativeTo: function (e) {
                    e = $(e);
                    var t = e.offset();
                    this.$().css({
                        top: t.top + e.outerHeight() + 3,
                        left: t.left
                    })
                },
                destroy: function () {
                    var e = this.get("eventNameSpace");
                    $(document).unbind(e), $(window).unbind(e), this._super.apply(this, arguments)
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                preservesContext: !0
            });
        n.exports = s
    }
}), this.require.define({
    "initializers/context_menu_view": function (e, t, n) {
        n.exports = function () {
            var n = t("lib/views/context_menu_view").instance().append(document.body)
        }
    }
}), this.require.define({
    "lib/utils": function (e, t, n) {
        function i(e) {
            return Ember.deprecate("lib/utils.bind has been deprecated. Use Function.prototype.bind."), $.proxy(this, e)
        }

        function s(e) {
            var t = +(new Date);
            return e(), +(new Date) - t
        }

        function u() {
            return /\b(https?:\/\/[^\s"]+)\b/g
        }
        var r = function () {
            return this.charAt(0).toUpperCase() + this.slice(1)
        }, o = Em.Handlebars.Utils.escapeExpression;
        n.exports = Object.seal({
            capitalize: r,
            bind: i,
            htmlEscape: o,
            getUrlRe: u,
            benchmark: s
        })
    }
}), this.require.define({
    "lib/autoresize": function (e, t, n) {
        function r() {
            if ($("style#autoResize-clone-style").length > 0) return;
            $('<style id="autoResize-clone-style">.autoResize-clone {position: absolute;top: -9999px;left: -9999px;opacity: 0;overflow: hidden;}</style>').appendTo("body")
        }

        function i(e) {
            var t = $(e),
                n = t.data("autoResize-clone");
            return n != null ? n : (n = e.cloneNode(), n.removeAttribute("id"), n.className = "autoResize-clone", n.tabIndex = "-1", n.style.height = "auto", e.parentNode.insertBefore(n, e), t.data("autoResize-clone", n), n)
        }

        function s(e) {
            var t = e.target,
                n = i(t);
            n.value = t.value, t.style.height = n.scrollTop + n.scrollHeight + 20 + "px"
        }

        function o(e) {
            window.setTimeout(function () {
                s(e)
            }, 0)
        }

        function u() {
            if (u.bound) return;
            $("body").on("change.autoResize", "textarea.autoResize", o).on("cut.autoResize", "textarea.autoResize", o).on("drop.autoResize", "textarea.autoResize", o).on("keydown.autoResize", "textarea.autoResize", o).on("paste.autoResize", "textarea.autoResize", o), u.bound = !0
        }
        n.exports = function () {
            r(), u(), $(this).addClass("autoResize").css({
                overflow: "auto",
                resize: "none"
            }).each(function (e, t) {
                s({
                    target: t
                })
            })
        }
    }
}), this.require.define({
    "lib/on_lose_focus_once": function (e, t, n) {
        function r(e, t) {
            return e && e.target && ($(t).find(e.target).length > 0 || $(t).filter(e.target).length > 0)
        }

        function i(e, t) {
            return function (n) {
                r(n, t) || ($(document).unbind(".onLoseFocusOnce"), e())
            }
        }
        n.exports = function (t) {
            var n = this;
            if (this.length > 0) {
                $(document).unbind(".onLoseFocusOnce");
                var r = i(t, this);
                setTimeout(function () {
                    $(document).bind("focusin.onLoseFocusOnce", r).bind("focus.onLoseFocusOnce", r).bind("click.onLoseFocusOnce", r)
                }, 1)
            }
            return this
        }
    }
}), this.require.define({
    "lib/get_pre_text": function (e, t, n) {
        n.exports = function () {
            var t = $("<pre />").html(this.html());
            return $.browser.webkit && t.find("div").replaceWith(function () {
                return "\n" + this.innerHTML
            }), $.browser.msie && t.find("p").replaceWith(function () {
                return this.innerHTML + "<br>"
            }), ($.browser.mozilla || $.browser.opera || $.browser.msie) && t.find("br").replaceWith("\n"), $.trim(t.text())
        }
    }
}), this.require.define({
    "lib/date_extensions": function (e, t, n) {
        n.exports = Object.freeze({
            getWeekYear: function () {
                var e = this.getFullYear();
                return (new Date).getFullYear() === e ? "" : e
            },
            getWeek: function () {
                var e = new Date(this.getFullYear(), this.getMonth(), this.getDate());
                e.setHours(0, 0, 0), e.setDate(e.getDate() + 4 - (e.getDay() || 7));
                var t = new Date(e.getFullYear(), 0, 1),
                    n = (e.getTime() - t) / 864e5;
                return 1 + Math.floor(n / 7)
            }
        })
    }
}), this.require.define({
    "lib/computed_property_macros": function (e, t, n) {
        n.exports = Object.freeze({
            emptyArray: function () {
                return Ember.computed(function (e, t) {
                    return arguments.length > 1 ? t : []
                })
            },
            emptyObject: function () {
                return Ember.computed(function (e, t) {
                    return arguments.length > 1 ? t : {}
                })
            },
            i18n: function (e) {
                return Ember.computed(function () {
                    return I18n.t(e)
                })
            },
            singleton: function (e) {
                return Ember.computed(function (n, r) {
                    return r == null ? t(e).instance() : r
                }).cacheable()
            }
        })
    }
}), this.require.define({
    "initializers/core_extensions": function (e, t, n) {
        var r = t("lib/utils"),
            i = t("lib/date_extensions");
        n.exports = function () {
            String.prototype.capitalize = r.capitalize, Date.prototype.getWeekYear = i.getWeekYear, Date.prototype.getWeek = i.getWeek, EmberCPM.install(), $.extend(Ember.computed, t("lib/computed_property_macros")), $.extend($.fn, {
                autoResize: t("lib/autoresize"),
                onLoseFocusOnce: t("lib/on_lose_focus_once"),
                getPreText: t("lib/get_pre_text")
            }), Em.View.reopen(Em.I18n.TranslateableAttributes, t("lib/lotus/nearest_with_behavior"), t("lib/lotus/workspace_bindings"))
        }
    }
}), this.require.define({
    "initializers/ecmascript5": function (e, t, n) {
        n.exports = function () {
            _.isFunction(Object.seal) || (Object.seal = function (e) {
                return e
            }), _.isFunction(Object.freeze) || (Object.freeze = function (e) {
                return e
            }), _.isFunction(Function.prototype.bind) || (Function.prototype.bind = function () {
                var e = [this].concat(Array.prototype.slice.call(arguments));
                return $.proxy.apply($, e)
            })
        }
    }
}), this.require.define({
    "lib/location_history": function (e, t, n) {
        var r = 10,
            i = Em.ArrayProxy.create({
                content: [],
                setup: function () {
                    if (this.isSetup) return;
                    this.isSetup = !0, this.pushObject(window.location.href), Sammy.apps.body.bind("location-changed", _(this.onLocationChange).bind(this))
                },
                onLocationChange: function () {
                    window.location.href !== this.get("lastObject") && this.pushObject(window.location.href)
                },
                lengthDidChange: function () {
                    this.get("length") > r && this.shiftObject()
                }.observes("length"),
                lastPage: function () {
                    var e = this.get("length");
                    return e == 1 ? "#/dashboard" : this.objectAt(e - 2)
                },
                lastPageExcluding: function (e) {
                    var t;
                    for (var n = this.get("length") - 1; n >= 0; n--)
                        if (!e.test(this.objectAt(n))) {
                            t = this.objectAt(n);
                            break
                        }
                    return t
                }
            });
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "lib/validation_error": function (e, t, n) {
        var r = function (e, t) {
            this._message = "", this.parse(e, t)
        };
        r.prototype = {
            parse: function (e, n) {
                var r, i, s = [];
                try {
                    var o = typeof e == "string" ? e : e.get("resourceName").toLowerCase(),
                        u;
                    r = JSON.parse(n);
                    if (o === "ticket") {
                        var a = e.get("id") ? "#" + e.get("id") : "",
                            f = t("lib/formatting_helper").truncateWithEllipsis(e.get("subject"), 14);
                        u = I18n.t("activerecord.errors.messages.ticket_not_saved", {
                            id: a,
                            subject: f
                        })
                    } else u = I18n.t("activerecord.errors.messages.could_not_save_" + o);
                    i = "<h1>" + u + "</h1>", i += "<ul>", r.details ? _.each(r.details, function (e, t) {
                        e !== "Record validation errors" && _.each(e, function (e) {
                            s.push(e.description)
                        })
                    }) : s = r.map(function (e) {
                        return e[0] === "base" ? e[1].capitalize() : e[0].capitalize() + " " + e[1]
                    }), i += s.map(function (e) {
                        return "<li>" + e + "</li>"
                    }).join(""), i += "</ul>", o === "ticket" && (e.set("errors", s.length > 0 ? s : !1), i += ('<p class="clearfix"><a href="%@" class="btn close_btn">' + I18n.t("activerecord.errors.messages.fix_this") + "</a></p>").fmt(e.get("href"))), this._message = i
                } catch (l) {}
            },
            message: function () {
                return this._message
            }
        }, r.generateMessage = function (e, t) {
            return (new r(e, t)).message()
        }, n.exports = r
    }
}), this.require.define({
    "lib/growl": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = ["notice", "alert", "error"],
            s = function (e) {
                var t = e && e.memo;
                if (!t) return;
                var n = t.action || "notice",
                    r = t.message,
                    s = t.options || {};
                if (!r) return;
                i.indexOf(n) !== -1 && u[n].call(u, r, s)
            }, o = function () {
                r.on("@action:growl", s)
            };
        o();
        var u = {
            notice: function (e, t) {
                t = $.extend({
                    themeState: "notice",
                    life: 4e3
                }, t), $.jGrowl(e, t)
            },
            alert: function (e, t) {
                t = $.extend({
                    themeState: "alert",
                    sticky: !0
                }, t), $.jGrowl(e, t)
            },
            error: function (e, t) {
                this.hideErrors(), t = $.extend({
                    themeState: "error",
                    sticky: !0,
                    group: "generic"
                }, t), $.jGrowl(e, t)
            },
            hideErrors: function () {
                $(".jGrowl-notification.error.generic").each(function () {
                    $(this).trigger("jGrowl.beforeClose")
                })
            }
        };
        n.exports = Object.seal(u)
    }
}), this.require.define({
    "initializers/ember_resource_error_handler": function (e, t, n) {
        var r = t("lib/growl");
        n.exports = function () {
            Em.Resource.errorHandler = function (e, n, i, s) {
                var o = encodeURIComponent(document.location.toString()),
                    u = Em.get(s, "resource.resourceName") || "",
                    a = Em.get(s, "operation"),
                    f = t("lib/location_history");
                switch (e.status) {
                case 401:
                    window.location.href = "/access/login?return_to=" + encodeURIComponent(window.location.href);
                    break;
                case 403:
                case 404:
                    s.operation === "read" && u === "Ticket" && (Em.run.next(function () {
                        Zd.workspaces.removeCurrentWorkspace(), window.location.href = f.lastPage()
                    }), $("#nonexistent_ticket").modal());
                    break;
                case 406:
                case 422:
                    if (a === "update" || a === "create") {
                        var l = t("lib/validation_error"),
                            c = Em.get(s, "resource"),
                            h = new l(c, e.responseText),
                            p = c.get("resourceName") === "Ticket" ? "ticket" : "generic";
                        r.error(h.message(), {
                            group: p,
                            afterOpen: function (e) {
                                $(e).find(".close_btn").click(function () {
                                    e.trigger("jGrowl.beforeClose")
                                })
                            }
                        })
                    }
                }
            }
        }
    }
}), this.require.define({
    "initializers/ember_resource_push_transport": function (e, t, n) {
        var r = {
            subscribe: function (e, t) {
                RadarClient.alloc("expiry", function () {
                    RadarClient.status(e).on(function (e) {
                        var n = e && e.value && e.value.updated_at;
                        t({
                            updatedAt: n
                        })
                    }).subscribe()
                })
            },
            unsubscribe: function (e, t) {
                RadarClient.status(e).unsubscribe()
            }
        };
        n.exports = function () {
            Em.Resource.PushTransport = r
        }
    }
}), this.require.define({
    "initializers/ember_resource_settings": function (e, t, n) {
        n.exports = function () {
            Ember.Resource.SUPPORT_AUTOFETCH = !1, Ember.Resource.Lifecycle.clock.stop();
            var e = Ember.Resource.lookUpType;
            Ember.Resource.lookUpType = function (n) {
                return e(n) || t(n)
            }
        }
    }
}), this.require.define({
    "lib/throttler": function (e, t, n) {
        var r = function (e, t) {
            this.eventLimit = e || 0, this.timeLimit = (t || 0) * 1e3, this.firstCall = this.timeNow(), this.currentCalls = 0
        };
        r.prototype.timeNow = function () {
            return Date.now()
        }, r.prototype.isThrottled = function () {
            var e = this.timeNow() - this.firstCall > this.timeLimit,
                t = this.currentCalls >= this.eventLimit && !e;
            return e && (this.currentCalls = 0), t || (this.currentCalls += 1), this.currentCalls == 1 && (this.firstCall = this.timeNow()), t
        }, r.throttle = function (e, t, n, i) {
            var s = new r(t, n);
            return function () {
                if (!s.isThrottled()) return e.apply(i || this, arguments)
            }
        }, n.exports = Object.seal(r)
    }
}), this.require.define({
    "lib/logging/error_notifier": function (e, t, n) {
        function l() {
            var e = [],
                t = [],
                n = function (e, t) {
                    setTimeout(function () {
                        try {
                            e(t)
                        } catch (n) {}
                    }, 100)
                };
            this.beforeNotify = function (t) {
                e.push(t)
            }, this.notify = function (e) {
                t.push(e)
            }, this.watch = function () {
                window.onerror = this.onError.bind(this), Ember.onerror = this.catchError.bind(this), this.isWatching = !0
            }, this.onError = function (e, t, n) {
                var r = t.error;
                t.indexOf && (r = f.buildFakeError(e, t, n)), r && this.catchError(r)
            }, this.catchError = function (r) {
                r.fakeException || (s.error(r.message, r.stack), r = f.buildError(r));
                var i = e.some(function (e) {
                    e(r) === !1
                });
                if (i) return !1;
                t.forEach(function (e) {
                    n(e, r)
                })
            }, this.throttle = function (e, t) {
                this.catchError = r.throttle(this.catchError, e, t), this.isWatching && this.watch()
            }
        }
        var r = t("lib/throttler"),
            i = t("lib/logging/console_logger"),
            s = new i,
            o, u, a, f;
        u = function () {
            var e = t("states/main").instance(),
                n, r = {};
            r.action = e.get("currentState.path") || "";
            if (r.action === "workspaces") {
                var i = Zendesk.workspaces.get("current.state.currentState.path") || "";
                r.action = i.replace(/^\w+Workspace\./, "")
            }
            return n = r.action.match(/^(.*)\.(\w+)$/), n && (r.component = n[1], r.action = n[2]), r
        }, o = function (e) {
            return $.extend(e, u()), Em.isArray(e.stack) && (e.params = {
                context: (e.stack[0].context || []).join("\n")
            }), e
        }, f = {
            buildError: function (e) {
                var t = TraceKit.computeStackTrace(e);
                return t.mode === "failed" && ["description", "message", "name"].forEach(function (n) {
                    Em.empty(e[n]) || (t[n] = e[n])
                }), o(t)
            },
            buildFakeError: function (e, t, n) {
                var r = {
                    url: t,
                    line: n
                }, i = {
                        mode: "onerror",
                        message: e,
                        stack: [r]
                    };
                return $.extend(i, {
                    fakeException: !0
                }), o(i)
            }
        }, l.instance = function () {
            return a || (a = new l), a
        }, n.exports = l
    }
}), this.require.define({
    "lib/logging/logging_defaults": function (e, t, n) {
        var r, i, s, o = {
                "cgi-data": {
                    HTTP_HOST: window.location.host,
                    PATH: window.location.pathname,
                    PROTOCOL: window.location.protocol,
                    QUERY: window.location.search,
                    HTTP_USER_AGENT: navigator.userAgent
                },
                href: window.location.href,
                url: "%@//%@%@".fmt(window.location.protocol, window.location.host, window.location.pathname),
                maxErrorsPerThrottlePeriod: 10,
                errorThrottlePeriod: 60
            };
        i = function (e, t, n) {
            var r = {};
            return [["account.subdomain", Ember.get(e, "subdomain")], ["user.id", Ember.get(t, "id")], ["user.role", Ember.get(t, "role")], ["version.sha", Ember.get(n, "sha")], ["version.tag", Ember.get(n, "tag")]].forEach(function (e) {
                Em.empty(e[1]) || (r[e[0]] = String(e[1]))
            }), r
        }, s = function (e, t, n) {
            r = Em.copy(o);
            var s = i(e, t, n);
            return Em.empty(Em.keys(s)) || (r.session = s), r
        }, n.exports = Object.freeze({
            retrieve: s
        })
    }
}), this.require.define({
    "initializers/error_reporting": function (e, t, n) {
        function f() {
            var e = t("lib/current_account"),
                n = Zd.get("currentVersion") || {}, r = Zd.get("currentUser"),
                i = u.retrieve(e, r, n);
            return i
        }

        function l(e) {
            return $.extend({}, e, f())
        }

        function c() {
            i.beforeNotify(function () {
                Hoptoad.setErrorDefaults(f())
            }), i.beforeNotify(function (e) {
                if (e.message === "Script error.") return !1
            }), i.notify(function (e) {
                Hoptoad.notify(e)
            }), i.notify(function (e) {
                o.error(l(e))
            }), Hoptoad.setEnvironment(r), Hoptoad.setKey("eac70e49ac1555e2985f54f41c6d09e5")
        }
        var r = $("body").data("environment"),
            i = t("lib/logging/error_notifier").instance(),
            s = t("lib/logging/logger"),
            o = new s("error"),
            u = t("lib/logging/logging_defaults"),
            a = !1;
        n.exports = function () {
            ["development", "test", null].contains(r) || (c(), i.throttle(u.maxErrorsPerThrottlePeriod, u.errorThrottlePeriod), i.watch())
        }
    }
}), this.require.define({
    "initializers/external_links_guard": function (e, t, n) {
        function r(e) {
            var t = e.indexOf("#"),
                n = t === -1 ? e.length : t;
            return e.slice(0, n)
        }

        function s(e) {
            return e.host == window.location.host && i.test(e.pathname)
        }

        function o(e) {
            var t = e.pathname.match("/tickets/.*");
            return "#" + t[0]
        }
        var i = /\/tickets\/.*/,
            u = r(window.location.href);
        n.exports = function () {
            $(document).on("mousedown", ".pane_body a", function () {
                if (s(this)) this.href = o(this);
                else {
                    if (this.href === "" || this.target) return;
                    var e = r(this.href);
                    u !== e && (this.target = "_blank")
                }
            })
        }
    }
}), this.require.define({
    "initializers/growl": function (e, t, n) {
        n.exports = function () {
            $.fn.jGrowl.prototype.defaults.closer = !1
        }
    }
}), this.require.define({
    "lib/i18n_package_loader": function (e, t, n) {
        function i(e) {
            this.target = e, this.requests = {}
        }

        function s(e, t) {
            return _.difference(t, Object.keys(e))
        }

        function o(e) {
            return $.ajax({
                type: "GET",
                url: "/api/v2/locales/current.json",
                data: {
                    include: "translations",
                    packages: e.join(",")
                }
            })
        }

        function u(e, t, n) {
            e.forEach(function (e) {
                t[e] = n
            })
        }

        function a(e, t) {
            return _.values(_.pick(e, t))
        }

        function f(e, t) {
            t && t.locale && t.locale.translations && $.extend(e, t.locale.translations)
        }
        var r = Array.prototype.slice;
        i.prototype.load = function () {
            if (arguments.length === 0) throw new TypeError("PackageLoader#load requires at least one package.");
            var e = r.call(arguments, 0),
                t = s(this.requests, e);
            if (t.length > 0) {
                var n = o(t).done(f.bind(this, this.target));
                u(t, this.requests, n)
            }
            return $.when.apply($, a(this.requests, e))
        }, n.exports = i
    }
}), this.require.define({
    "initializers/i18n": function (e, t, n) {
        n.exports = function () {
            function i(e) {
                var t = "0" + e.toString();
                return t.substr(t.length - 2)
            }
            var e = window.I18n = Em.I18n,
                n = e.translations = Em.get("Zendesk.Config.translations"),
                r = t("lib/i18n_package_loader");
            e.locale_id = Em.get("Zendesk.Config.locale_id"), e.loader = new r(e.translations), Em.assert("Zendesk.Config.translations must be defined for I18n initializer", n != null), CLDR.defaultLanguage = "en", n["date.datepicker.first_day"] = Number(n["date.datepicker.first_day"]), n["date.datepicker.is_rtl"] = Boolean(Number(n["date.datepicker.is_rtl"])), n["date.datepicker.show_month_after_year"] = Boolean(Number(n["date.datepicker.show_month_after_year"])), $.datepicker.setDefaults({
                closeText: n["date.datepicker.close_text"],
                prevText: n["date.datepicker.prev_text"],
                nextText: n["date.datepicker.next_text"],
                currentText: n["date.datepicker.current_text"],
                monthNames: n["date.month_names"].slice(1),
                monthNamesShort: n["date.abbr_month_names"].slice(1),
                dayNames: n["date.day_names"],
                dayNamesShort: n["date.abbr_day_names"],
                dayNamesMin: n["date.min_day_names"],
                weekHeader: n["date.datepicker.week_header"],
                dateFormat: n["date.datepicker.date_format"],
                firstDay: n["date.datepicker.first_day"],
                isRTL: n["date.datepicker.is_rtl"],
                showMonthAfterYear: n["date.datepicker.show_month_after_year"],
                yearSuffix: n["date.datepicker.year_suffix"]
            }), e.strftime = function (r, s, o) {
                o = typeof o != "undefined" ? o : !1;
                if (!r) throw new Error("I18n.strftime requires a Date");
                if (!s) throw new Error("I18n.strftime requires a format");
                var u = r.getDay(),
                    a = r.getDate(),
                    f = r.getFullYear(),
                    l = r.getMonth() + 1,
                    c = r.getHours(),
                    h = c,
                    p = c > 11 ? e.t("time.pm") : e.t("time.am"),
                    d = r.getSeconds(),
                    v = r.getMinutes(),
                    m = r.getTimezoneOffset(),
                    g = Math.floor(Math.abs(m / 60)),
                    y = Math.abs(m) - g * 60,
                    b = (m > 0 ? "-" : "+") + (g.toString().length < 2 ? "0" + g : g) + ":" + (y.toString().length < 2 ? "0" + y : y),
                    w = t("lib/current_account"),
                    E = w.get("uses12HourClock");
                return s.indexOf("%H:%M") !== -1 && E && !o && (s = s.replace(/%H:%M/g, n["time.formats.short_time"])), h > 12 ? h -= 12 : h === 0 && (h = 12), String(s).replace(/%a/g, n["date.abbr_day_names"][u]).replace(/%A/g, n["date.day_names"][u]).replace(/%b/g, n["date.abbr_month_names"][l]).replace(/%B/g, n["date.month_names"][l]).replace(/%d/g, i(a)).replace(/%-d/g, a).replace(/%H/g, i(c)).replace(/%-H/g, c).replace(/%I/g, i(h)).replace(/%-I/g, h).replace(/%m/g, i(l)).replace(/%-m/g, l).replace(/%M/g, i(v)).replace(/%-M/g, v).replace(/%p/g, p).replace(/%S/g, i(d)).replace(/%-S/g, d).replace(/%w/g, u).replace(/%y/g, i(f)).replace(/%-y/g, i(f).replace(/^0+/, "")).replace(/%Y/g, f).replace(/%Z/g, b)
            }, e.distanceOfTimeInWords = function (t, n) {
                var r = (t - n) / 1e3,
                    i = Math.floor(r / 60);
                if (i <= 1) return e.t("datetime.distance_in_words.x_minutes.one");
                if (i < 45) return e.t("datetime.distance_in_words.x_minutes.other", {
                    count: i
                });
                if (i < 90) return e.t("datetime.distance_in_words.about_x_hours.one");
                var s = Math.round(i / 60);
                if (i < 1440) return e.t("datetime.distance_in_words.about_x_hours.other", {
                    count: s
                });
                if (i < 2880) return e.t("datetime.distance_in_words.x_days.one");
                var o = Math.round(i / 1440);
                if (i < 43200) return e.t("datetime.distance_in_words.x_days.other", {
                    count: o
                });
                if (i < 86400) return e.t("datetime.distance_in_words.about_x_months.one");
                var u = Math.round(i / 43200);
                if (i < 525960) return e.t("datetime.distance_in_words.about_x_months.other", {
                    count: u
                });
                if (i < 1051920) return e.t("datetime.distance_in_words.about_x_years.one");
                var a = Math.round(i / 525960);
                return e.t("datetime.distance_in_words.over_x_years.other", {
                    count: a
                })
            }, e.inflect = function (t, n) {
                var r = parseInt(n, 10);
                return r == 1 ? e.t(t + ".one", {
                    count: r
                }) : e.t(t + ".other", {
                    count: r
                })
            }, e.timeInterval = function (t) {
                var n = parseInt(t, 10);
                if (n < 0) return "Unknown";
                var r = parseInt(n / 3600, 10),
                    i = parseInt(n / 60 - r * 60, 10),
                    s = parseInt(n - (i * 60 + r * 3600), 10),
                    o = [];
                return r > 0 && o.push(e.inflect("datetime.distance_in_words.x_hours", r)), i > 0 && o.push(e.inflect("datetime.distance_in_words.x_minutes", i)), s > 0 && o.push(e.inflect("datetime.distance_in_words.x_seconds", s)), o.join(", ")
            }, DateWithOffset.prototype.strftime = Date.prototype.strftime = function (t, n) {
                return e.strftime(this, t, n)
            }, DateWithOffset.prototype.to_s = Date.prototype.to_s = function (t, n) {
                var r = e.translations[t || "date.formats.default"];
                return r = r || "%Y-%m-%d", e.strftime(this, r, n)
            }
        }
    }
}), this.require.define({
    "lib/channels/zones": function (e, t, n) {
        n.exports = {
            1: {
                zone: {
                    US: "250234636",
                    CA: ["403", "587", "780", "825", "236", "250", "604", "672", "778", "204", "431", "506", "709", "902", "226", "249", "289", "343", "365", "416", "437", "519", "613", "647", "705", "807", "905", "902", "418", "438", "450", "514", "579", "581", "819", "873", "306", "639", "867", "600"],
                    BS: "242",
                    BB: "246",
                    AI: "264",
                    AG: "268",
                    VG: "284",
                    VI: "340",
                    KY: "345",
                    BM: "441",
                    GD: "473",
                    TC: "649",
                    MS: "664",
                    MP: "670",
                    GU: "671",
                    AS: "684",
                    SX: "721",
                    LC: "758",
                    DM: "767",
                    VC: "784",
                    PR: ["787", "939"],
                    DO: ["809", "829", "849"],
                    TT: "868",
                    KN: "869",
                    JM: "876"
                },
                "default": "US"
            },
            2: {
                zone: {
                    EG: "0",
                    SS: "11",
                    EH: ["125288", "125289"],
                    MA: "12",
                    DZ: "13",
                    TN: "16",
                    LY: "18",
                    GM: "20",
                    SN: "21",
                    MR: "22",
                    ML: "23",
                    GN: "24",
                    CI: "25",
                    BF: "26",
                    NE: "27",
                    TG: "28",
                    BJ: "29",
                    MU: "30",
                    LR: "31",
                    SL: "32",
                    GH: "33",
                    NG: "34",
                    TD: "35",
                    CF: "36",
                    CM: "37",
                    CV: "38",
                    ST: "39",
                    GQ: "40",
                    GA: "41",
                    CG: "42",
                    CD: "43",
                    AO: "44",
                    GW: "45",
                    IO: "46",
                    AC: "47",
                    SC: "48",
                    SD: "49",
                    RW: "50",
                    ET: "51",
                    SO: "52",
                    DJ: "53",
                    KE: "54",
                    TZ: "55",
                    UG: "56",
                    BI: "57",
                    MZ: "58",
                    ZM: "60",
                    MG: "61",
                    YT: "62",
                    ZW: "63",
                    NA: "64",
                    MW: "65",
                    LS: "66",
                    BW: "67",
                    SZ: "68",
                    KM: "69",
                    TA: "908",
                    SH: "90",
                    ER: "91",
                    AW: "97",
                    FO: "98",
                    GL: "99"
                }
            },
            3: {
                zone: {
                    GR: "0",
                    NL: "1",
                    BE: "2",
                    FR: "3",
                    ES: "4",
                    GI: "50",
                    PT: "51",
                    LU: "52",
                    IE: "53",
                    IS: "54",
                    AL: "55",
                    MT: "56",
                    CY: "57",
                    FI: "58",
                    BG: "59",
                    HU: "6",
                    LT: "70",
                    LV: "71",
                    EE: "72",
                    MD: "73",
                    AM: "74",
                    BY: "75",
                    AD: "76",
                    MC: "77",
                    SM: "78",
                    VA: ["79", "906698"],
                    UA: "80",
                    RS: "81",
                    ME: "82",
                    HR: "85",
                    SI: "86",
                    BA: "87",
                    EU: "88",
                    MK: "89",
                    IT: "9"
                }
            },
            4: {
                zone: {
                    RO: "0",
                    CH: "1",
                    CZ: "20",
                    SK: "21",
                    LI: "23",
                    AT: "3",
                    IM: ["41624", "47624", "47524"],
                    GB: "4",
                    DK: "5",
                    SE: "6",
                    NO: "7",
                    PL: "8",
                    DE: "9"
                }
            },
            5: {
                zone: {
                    FK: "00",
                    BZ: "01",
                    GT: "02",
                    SV: "03",
                    HN: "04",
                    NI: "05",
                    CR: "06",
                    PA: "07",
                    PM: "08",
                    HT: "09",
                    PE: "1",
                    MX: "2",
                    CU: "3",
                    AR: "4",
                    BR: "5",
                    CL: "6",
                    CO: "7",
                    VE: "8",
                    BL: "90",
                    MF: "99",
                    BO: "91",
                    GY: "92",
                    EC: "93",
                    GF: "94",
                    PY: "95",
                    MQ: "96",
                    SR: "97",
                    UY: "98"
                }
            },
            6: {
                zone: {
                    MY: "0",
                    CX: "189164",
                    CC: "1891",
                    AU: "1",
                    ID: "2",
                    PH: "3",
                    NZ: "4",
                    SG: "5",
                    TH: "6",
                    TL: "70",
                    AQ: "72",
                    BN: "73",
                    NR: "74",
                    PG: "75",
                    TO: "76",
                    SB: "77",
                    VU: "78",
                    FJ: "79",
                    PW: "80",
                    WF: "81",
                    CK: "82",
                    NU: "83",
                    WS: "85",
                    KI: "86",
                    NC: "87",
                    TV: "88",
                    PF: "89",
                    TK: "90",
                    FM: "91",
                    MH: "92"
                }
            },
            7: {
                zone: {
                    RU: ["3", "4", "8"],
                    KZ: ["7", "6"]
                },
                "default": "RU"
            },
            8: {
                zone: {
                    XT: "00",
                    XS: "08",
                    JP: "1",
                    KR: "2",
                    VN: "4",
                    KP: "50",
                    HK: "52",
                    MO: "53",
                    KH: "55",
                    LA: "56",
                    CN: "6",
                    XN: "70",
                    XP: "78",
                    BD: "80",
                    XG: "81",
                    XV: ["82", "83"],
                    TW: "86",
                    XD: "88"
                }
            },
            9: {
                zone: {
                    TR: "0",
                    IN: "1",
                    PK: "2",
                    AF: "3",
                    LK: "4",
                    MM: "5",
                    MV: "60",
                    LB: "61",
                    JO: "62",
                    SY: "63",
                    IQ: "64",
                    KW: "65",
                    SA: "66",
                    YE: "67",
                    OM: "68",
                    PS: "70",
                    AE: "71",
                    IL: "72",
                    BH: "73",
                    QA: "74",
                    BT: "75",
                    MN: "76",
                    NP: "77",
                    XR: "79",
                    IR: "8",
                    XC: "91",
                    TJ: "92",
                    TM: "93",
                    AZ: "94",
                    GE: "95",
                    KG: "96",
                    UZ: "98"
                }
            }
        }
    }
}), this.require.define({
    "models/countries": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                id: Number,
                code: String,
                name: String,
                region: String,
                calling_code: String
            }
        }),
            i = Em.ResourceCollection.extend({
                expireIn: 31536e3,
                url: "/api/v2/countries",
                type: r,
                parse: function (e) {
                    var t = e.countries || [];
                    return t
                }
            }),
            s;
        i.instance = function () {
            return s || (s = i.create()), s
        }, n.exports = i
    }
}), this.require.define({
    "lib/channels/country_number_helper": function (e, t, n) {
        var r = t("lib/channels/zones"),
            i = {
                matchesCountry: function (e, t) {
                    var n;
                    return t = _.flatten([t]), t.find(function (t) {
                        return t == e.substr(0, t.length)
                    })
                },
                getCountryCode: function (e) {
                    e += "", e = e.replace(new RegExp("[\\D]", "g"), ""), e = e.replace(new RegExp("^[0]*", "g"), "");
                    var t = r[e.substr(0, 1)];
                    if (!t) return;
                    var n = t.zone;
                    e = e.substr(1, e.length - 1);
                    var i;
                    for (var s in n) {
                        var o = n[s];
                        if (this.matchesCountry(e, o)) {
                            i = s;
                            break
                        }
                    }
                    return i || t["default"]
                },
                getCountry: function (e) {
                    var n = this.getCountryCode(e);
                    return t("models/countries").instance().findProperty("code", n)
                }
            };
        n.exports = i
    }
}), this.require.define({
    "lib/settings": function (e, t, n) {
        var r = t("lib/current_account"),
            i = r.get("settings");
        n.exports = i
    }
}), this.require.define({
    "lib/settings_consumer": function (e, t, n) {
        var r = t("lib/settings"),
            i = Em.Mixin.create({
                settings: r
            });
        n.exports = i
    }
}), this.require.define({
    "lib/voice/state": function (e, t, n) {
        var r = t("lib/channels/country_number_helper"),
            i = ["cancelled", "ended", "queued", "voicemail", "voicemail_transcription_completed", "voicemail_completed", "voicemail_ended"],
            s = Em.Object.extend(t("lib/settings_consumer"), t("lib/user_settings_consumer"), {
                dialerVisible: !1,
                keypadVisible: !1,
                dialing: !1,
                callingCountry: "US",
                dialedNumber: "+1",
                lastNumberDialed: "",
                ticketContext: null,
                callConsoleVisible: !1,
                ticketConsoleVisible: !1,
                callConsoleMuted: !1,
                ignoreMissedCallMessaging: !1,
                callTimerVisible: !1,
                callTimerCounting: !1,
                waitingMessage: !1,
                isConnecting: !1,
                twilioSetUp: !1,
                invalidTokenCount: 0,
                refreshing: !1,
                checkingForConnection: !1,
                currentUserBinding: "Zendesk.currentUser",
                voiceResource: Em.computed.alias("currentUser.voice"),
                currentCall: Em.computed.oneWay("voiceResource.currentCall"),
                phoneNumbers: Em.computed.alias("voiceResource.phone_numbers"),
                availability: Em.computed.alias("voiceResource.availability"),
                available: Em.computed.alias("voiceResource.available"),
                callingNumber: Em.computed.alias("userSettings.voiceCallingNumber"),
                clientCapabilityToken: Em.computed.alias("voiceResource.client_capability_token"),
                logging: Em.computed.alias("voiceResource.logging"),
                via: Em.computed.alias("voiceResource.via"),
                currentAccount: t("lib/current_account"),
                hasOutboundEnabled: Em.computed.bool("currentAccount.expirableSettings.has_voice_outbound_enabled"),
                globalPermissionsBinding: "Zendesk.globalPermissions",
                hasVoiceEnabled: Em.computed.bool("globalPermissions.voiceEnabled"),
                isViaPhone: Em.computed.equal("via", "phone"),
                activeCall: function () {
                    var e = this.get("currentCall");
                    return e != null && !i.contains(e.get("status"))
                }.property("currentCall.status").cacheable(),
                canCallBack: function () {
                    return !this.get("settings.has_voice_enabled") || !this.get("hasOutboundEnabled") ? !1 : !this.get("activeCall")
                }.property("settings.has_voice_enabled", "activeCall", "hasOutboundEnabled").cacheable(),
                resetDialer: function () {
                    this.set("dialerVisible", !1);
                    var e = r.getCountry(this.get("lastNumberDialed"));
                    e && this.set("dialedNumber", "+" + e.get("calling_code"))
                },
                inConnectionPhase: function () {
                    return this.get("isConnecting") || this.get("checkingForConnection")
                }.property("isConnecting", "checkingForConnection").cacheable()
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "VoiceState"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "models/custom_role": function (e, t, n) {
        n.exports = Em.Resource.define({
            schema: {
                id: Number,
                name: String,
                description: String,
                created_at: Date,
                updated_at: Date,
                configuration: Object
            }
        }).extend({
            canCreateOrganization: function () {
                return this.get("configuration.organization_editing")
            }
        })
    }
}), this.require.define({
    "lib/custom_roles_consumer": function (e, t, n) {
        var r = Em.ResourceCollection.extend({
            expireIn: 31536e3,
            url: "/api/v2/custom_roles",
            type: t("models/custom_role"),
            parse: function (e) {
                return this._super(e.custom_roles || e)
            }
        });
        n.exports = Em.Mixin.create({
            customRoles: r.create()
        })
    }
}), this.require.define({
    "lib/features": function (e, t, n) {
        var r = t("lib/environment"),
            i = Em.Object.extend(t("lib/account_consumer"), t("lib/custom_roles_consumer"), {
                deployments: Em.computed.oneWay("currentAccount.deployments"),
                helpCenterSettings: Em.computed.oneWay("currentAccount.helpCenterSettings"),
                hasCustomRoles: function () {
                    return this.get("customRoles.length") > 0
                }.property("customRoles.@each").cacheable(),
                hasVoiceQueuedCalls: Em.computed.bool("deployments.voiceQueuedCalls"),
                hasFeatureNotifications: Em.computed.bool("deployments.ipmFeatureNotifications"),
                hasLotusLogging: Em.computed.bool("deployments.lotusLogging"),
                hasTicketForms: function () {
                    return !!this.get("deployments.ticketForms")
                }.property("deployments.ticketForms").cacheable(),
                hasFeedPrototype: function () {
                    return !!r.development || !! this.get("deployments.feedPrototype")
                }.property().cacheable(),
                hasVoiceWebRTC: Em.computed.bool("deployments.voiceWebRTC"),
                hasPlanSelection: Em.computed.bool("deployments.planSelection"),
                hasElitePricing: Em.computed.bool("deployments.elitePricing"),
                hasAtMentions: Em.computed.bool("deployments.atMentions"),
                hasUserAssume: Em.computed.bool("deployments.userAssume"),
                hasPlaceholders: Em.computed.bool("deployments.placeholders"),
                hasVoiceTrustOnOutboundCalls: Em.computed.bool("deployments.voiceTrustOnOutboundCalls"),
                hasVoiceDisablePoller: Em.computed.bool("deployments.voiceDisablePoller"),
                hasMultipleOrganizations: Em.computed.bool("deployments.multipleOrganizations"),
                hasWebPortalConfigured: Em.computed.bool("helpCenterSettings.webPortalConfigured"),
                hasHelpCenterConfigured: Em.computed.bool("helpCenterSettings.helpCenterConfigured"),
                isHelpCenterOnboardingEligible: Em.computed.equal("helpCenterSettings.helpCenterOnboardingState", "enabled"),
                hasUserViews: Em.computed.bool("deployments.userViews")
            }),
            s = i.create();
        n.exports = Object.seal({
            Features: s,
            consumer: Ember.Mixin.create({
                features: s
            }),
            hasFeature: function (e) {
                return s.get("has%@".fmt(e.capitalize()))
            }
        })
    }
}), this.require.define({
    "views/modals/modal": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = Em.View.extend({
                templateName: "templates/modals/base",
                classNames: ["modal"],
                attributeBindings: ["style"],
                options: null,
                style: "display: none;",
                bodyTemplate: null,
                init: function () {
                    var e = this.get("_templateContext"),
                        t = this.get("bodyTemplate");
                    this._super.apply(this, arguments), t && this.set("body", this.evaluateTemplate(t, e))
                },
                evaluateTemplate: function (e, t) {
                    var n = [],
                        r = {
                            data: {
                                buffer: n
                            }
                        }, i = Em.TEMPLATES[e];
                    return i && i(t, r), n.join("")
                },
                title: null,
                body: null,
                footerView: Em.View.extend({
                    templateName: "templates/modals/modal_footer"
                }),
                confirmLabel: null,
                cancelLabel: null,
                _hiding: !1,
                originalFirstResponder: null,
                target: null,
                destroyOnHide: !0,
                didInsertElement: function () {
                    this._super.apply(this, arguments), this.$().modal(this.get("options")).on("hide", this.willHideModal.bind(this)).on("hidden", this.onHidden.bind(this)), this.focus()
                },
                hideModal: function () {
                    this.set("_hiding", !0), this.$().modal("hide")
                },
                onHidden: function () {
                    this.get("destroyOnHide") && this.destroy()
                },
                willHideModal: function () {
                    var e = this.get("target");
                    if (this.get("_hiding")) return;
                    this.set("_hiding", !0), e && e.userDidCancel && e.userDidCancel(), this.blur()
                },
                showModal: function () {
                    this.set("_hiding", !1), this.$().modal("show"), this.focus()
                },
                focus: function () {
                    var e = r;
                    this.set("originalFirstResponder", e.get("firstResponder")), e.set("firstResponder", this)
                },
                blur: function () {
                    var e = this.get("originalFirstResponder");
                    e && e.get("isDestroyed") !== !0 && r.set("firstResponder", this.get("originalFirstResponder")), this.set("originalFirstResponder", null)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "views/modals/webrtc_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["voice_webrtc_settings_modal"],
            title: I18n.t("txt.voice.webrtc_settings.shared.title"),
            confirmLabel: I18n.t("txt.voice.webrtc_settings.shared.close_label"),
            target: function () {
                return this
            }.property().cacheable(),
            userDidConfirm: function () {
                this.hideModal()
            }
        }).reopenClass(t("lib/lotus/singleton"));
        n.exports = r
    }
}), this.require.define({
    "lib/voice/webrtc": function (e, t, n) {
        function u() {
            i.hideModal(), o.instance().append()
        }

        function a(e, t) {
            t.stop(), e()
        }

        function f() {
            i.hideModal()
        }
        var r = t("views/modals/webrtc_modal"),
            i, s = r.extend({
                bodyTemplate: "templates/modals/voice_webrtc_settings_instructions"
            }),
            o = r.extend({
                bodyTemplate: "templates/modals/voice_webrtc_settings_success"
            }),
            l = Em.Object.extend({
                TWILIO_CLIENT_VERSION: "1.1",
                isEnabled: function () {
                    return t("lib/features").hasFeature("voiceWebRTC") && window.Twilio && Twilio.require("twilio/rtc").enabled()
                },
                promptMicAccess: function (e, t) {
                    navigator.webkitGetUserMedia({
                        audio: !0
                    }, a.bind(undefined, e), t)
                },
                showSettings: function () {
                    if (!this.isEnabled() || !navigator.webkitGetUserMedia) return;
                    i = s.instance().append(), this.promptMicAccess(u, f)
                }
            }).reopenClass(t("lib/lotus/singleton"));
        n.exports = l
    }
}), this.require.define({
    "lib/voice/outbound_call": function (e, t, n) {
        var r = t("lib/voice/webrtc").instance(),
            i = t("lib/voice/state").instance(),
            s = Minilog("outbound-call"),
            o = t("lib/growl"),
            u = function () {
                return t("lib/features").hasFeature("voiceWebRTC")
            }, a = function (e) {
                i.set("dialing", !0), i.set("lastNumberDialed", i.get("dialedNumber"));
                var t = this;
                $.post("/voice/calls/place_outbound_call", {
                    country: i.get("callingCountry"),
                    ticket_id: e && e.ticketId,
                    user_id: e && e.userId,
                    number: i.get("dialedNumber"),
                    calling_number: i.get("callingNumber")
                }, function (e) {
                    s.info({
                        short_message: "place_outbound_call",
                        _data: e
                    }), e.invalid && (s.error({
                        short_message: "place_outbound_call",
                        _invalid: e.invalid,
                        _data: e
                    }), o.error(I18n.t("txt.voice.dialer." + e.issues[0])), i.set("dialing", !1))
                })
            }, f = {
                place: function (e) {
                    if (i.get("dialing")) return;
                    i.get("ticketContext") && (e = _.defaults(e || {}, {
                        ticketId: i.get("ticketContext.id")
                    }));
                    var t = this,
                        n = function () {
                            a(e)
                        };
                    !i.get("isViaPhone") && u() && r.isEnabled() ? r.promptMicAccess(n, Em.K) : n()
                }
            };
        n.exports = Object.seal(f)
    }
}), this.require.define({
    "controllers/identities/phone_actions": function (e, t, n) {
        var r = t("lib/voice/outbound_call"),
            i = t("lib/voice/state").instance(),
            s = Em.Mixin.create({
                directlineController: null,
                makeDirectLine: function () {
                    this._hideContextMenu(), this.get("directlineController").displayMakeDirectModal()
                },
                removeDirectLine: function () {
                    this.get("directlineController").removeDirectLine(), this._hideContextMenu()
                },
                removePhone: function () {
                    this.set("user.phone", ""), this.get("directlineController").updateNumber(), this._hideContextMenu()
                },
                callThisNumber: function () {
                    i.set("dialedNumber", this.get("user.phone")), r.place({
                        userId: this.get("user.id")
                    })
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/identities/identities_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = "mailto:%@",
            s = "https://twitter.com/%@",
            o = "/api/v2/users/%@/identities/%@/make_primary",
            u = "/api/v2/users/%@/identities/%@/request_verification",
            a = t("controllers/identities/phone_actions"),
            f = t("lib/lotus/global_events"),
            l = Em.Object.extend(a, {
                currentIdentity: null,
                user: null,
                contextMenuController: null,
                addIdentityFormController: null,
                userDidChange: function () {
                    Em.run.next(this, function () {
                        var e = Zd.get("workspaces.current.userController.user");
                        this.set("user", e)
                    })
                }.observes("Zd.workspaces.current.userController.user"),
                hasUserPermission: function (e, t) {
                    return e === "facebook" ? t === "remove" : ["verifyNow", "sendVerificationEmail"].contains(t) ? this.get("user.userPermissions." + t) || !1 : this.get("user.userPermissions.manageIdentities")
                },
                addIdentity: function (e) {
                    this.hasUserPermission(e.get("type"), "add") && e.save()
                },
                sendEmail: function () {
                    if (!this.currentIdentity) return;
                    window.location.href = i.fmt(this.currentIdentity.get("value")), this._hideContextMenu()
                },
                viewTwitterAccount: function () {
                    if (!this.currentIdentity) return;
                    window.open(s.fmt(this.currentIdentity.get("value"))), this._hideContextMenu()
                },
                makePrimary: function () {
                    var e = this.currentIdentity;
                    e && this.hasUserPermission(e.get("type"), "edit") && $.ajax({
                        type: "PUT",
                        url: o.fmt(e.get("user.id"), e.get("id")),
                        dataType: "json"
                    }).done(_(function () {
                        var e = this.get("user.identities");
                        e.expire(), Em.run.next(function () {
                            e.fetch()
                        }), this.set("currentIdentity", null), f.trigger("@identitity:was_updated", this)
                    }).bind(this)), this._hideContextMenu()
                },
                verify: function () {
                    var e = this.currentIdentity;
                    e && this.hasUserPermission("*", "verifyNow") && e.verify(), this._hideContextMenu()
                },
                resendVerificationEmail: function () {
                    var e = this.currentIdentity && this.currentIdentity.get("user");
                    e && this.hasUserPermission("*", "sendVerificationEmail") && $.ajax({
                        type: "PUT",
                        url: u.fmt(e.get("id"), this.currentIdentity.get("id")),
                        dataType: "json"
                    }).done(function () {
                        r.notice(I18n.t("txt.identities.successful_verification_email_sent", {
                            name: e.get("name"),
                            email: e.get("email")
                        }))
                    }), this._hideContextMenu()
                },
                remove: function () {
                    var e = this.currentIdentity;
                    e && this.hasUserPermission(e.get("type"), "remove") && (e.remove(), this.set("currentIdentity", null)), this._hideContextMenu()
                },
                showEmailForm: function () {
                    this.hasUserPermission("email", "add") && this.set("addIdentityFormController.type", "email"), this._hideContextMenu()
                },
                showGoogleAccountForm: function () {
                    this.hasUserPermission("google", "add") && this.set("addIdentityFormController.type", "google"), this._hideContextMenu()
                },
                showTwitterForm: function () {
                    this.hasUserPermission("twitter", "add") && this.set("addIdentityFormController.type", "twitter"), this._hideContextMenu()
                },
                showFacebookForm: Em.K,
                showPhoneForm: function () {
                    this.hasUserPermission("phone", "add") && this.set("addIdentityFormController.type", "phone"), this._hideContextMenu()
                },
                _hideContextMenu: function () {
                    this.get("contextMenuController").hide()
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "IdentitiesController"
                }
            });
        n.exports = l
    }
}), this.require.define({
    "controllers/identities/add_identity_form": function (e, t, n) {
        var r = Em.Object.extend({
            value: "",
            type: null,
            user: Em.computed.oneWay("identitiesController.user"),
            identitiesController: null,
            directlineController: Em.computed.oneWay("identitiesController.directlineController"),
            isTwitter: Em.computed.equal("type", "twitter"),
            addIdentity: function () {
                this.set("value", $.trim(this.get("value")));
                var e = this.get("value");
                if (this.get("type") === "phone") {
                    var n = this.get("user.phone");
                    e !== "" && (n == null || n === "") && (this.set("user.phone", e), this.get("directlineController").updateNumber())
                } else e !== "" && this.get("identitiesController").addIdentity(t("models/user/identity").create({
                    value: this.get("value"),
                    type: this.get("type"),
                    user: this.get("user")
                }));
                this.reset()
            },
            hasUserPermission: function () {
                var e = this.get("identitiesController");
                return e.hasUserPermission.apply(e, arguments)
            },
            saveUser: function () {
                this.get("user").save()
            },
            reset: function () {
                this.set("value", ""), this.set("type", null)
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "AddIdentityFormController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/identities/context_menu": function (e, t, n) {
        var r = t("lib/voice/state").instance(),
            i = Em.Object.extend(t("lib/settings_consumer"), t("lib/account_consumer"), {
                userBinding: "identitiesController.user",
                currentIdentityBinding: "identitiesController.currentIdentity",
                currentCommandId: null,
                identitiesController: null,
                menuDefinitions: null,
                toggle: function (e) {
                    var t = e.identityId,
                        n = e.commandId,
                        r = parseInt(t, 10) === this.get("currentIdentity.id"),
                        i = n != null && n === this.get("currentCommandId"),
                        s = this.get("contextMenu.isVisible"),
                        o = t == null && n == null;
                    o || s && (i || r) ? this.hide() : this.show(e)
                },
                show: function (e) {
                    var n, r, i = this.get("contextMenu");
                    if (e.identityId == null && e.commandId == null) return;
                    e.identityId ? (r = t("models/user/identity").create({
                        id: parseInt(e.identityId, 10)
                    }), n = r.get("type"), this.set("currentIdentity", r)) : e.commandId && (n = "command:" + e.commandId, this.set("currentCommandId", e.commandId));
                    var s = this.get("menuDefinitions." + n);
                    n === "email" && this.get("_hideResendVerificationEmail") && (s = s.filter(function (e) {
                        return e.action !== "resendVerificationEmail"
                    })), i.set("content", s), i.positionRelativeTo(e.relativeEl), i.set("isVisible", !0)
                },
                hide: function () {
                    if (!this.get("contextMenu")) return;
                    this.set("contextMenu.isVisible", !1)
                },
                _hideResendVerificationEmail: function () {
                    return this.get("user.isAgent") ? !1 : this.get("currentAccount.helpCenterSettings.hideResendVerificationEmail")
                }.property("user.isAgent", "currentAccount.helpCenterSettings.hideResendVerificationEmail").cacheable(),
                _identitiesDidChange: function () {
                    var e = this.get("currentIdentity"),
                        t = this.get("user.identities");
                    e && t && t.findProperty("id", e.get("id")) == null && this.reset()
                }.observes("user.identities.@each"),
                reset: function () {
                    this.set("currentCommandId", null), this.set("currentIdentity", null)
                }.observes("user"),
                shouldHide: function () {
                    this.get("currentCommandId") == null && this.get("currentIdentity") == null && this.hide()
                }.observes("currentCommandId", "currentIdentity"),
                hasUserPermission: function () {
                    var e = this.get("identitiesController");
                    return e.hasUserPermission.apply(e, arguments)
                },
                _updateMenuItemStatus: function (e, t) {
                    if (e == "callThisNumber" && !r.get("hasOutboundEnabled")) {
                        this.get("menuDefinitions.itemDefinitions")[e].set("status", "invisible");
                        return
                    }
                    this.get("menuDefinitions.itemDefinitions")[e].set("status", t ? "" : "inactive")
                },
                _updateMenu: function (e) {
                    if (!this.get("user")) return;
                    e.menuRule.call(this) ? _(e.menuItemRules).forEach(function (e, t) {
                        this._updateMenuItemStatus(t, e.call(this, t))
                    }, this) : _(e.menuItemRules).forEach(function (e, t) {
                        this._updateMenuItemStatus(t, !1)
                    }, this)
                },
                updateIdentityMenuItems: function () {
                    this._updateMenu(this.identityMenuRules)
                }.observes("currentIdentity", "user.identities.@each"),
                identityMenuRules: {
                    menuRule: function () {
                        return this.hasUserPermission("*", "edit")
                    },
                    menuItemRules: {
                        makePrimary: function (e) {
                            var t = this.get("currentIdentity");
                            return t ? this.hasUserPermission(t.get("type"), "edit") === !1 ? !1 : t && !t.get("primary") && t.get("verified") : !1
                        },
                        remove: function (e) {
                            var t = this.get("currentIdentity");
                            return t ? this.get("user.identities.length") <= 1 ? !1 : this.hasUserPermission(t.get("type"), "remove") === !1 ? !1 : t.get("isEmailBased") ? t.get("primary") ? !1 : this.get("user.identities").filterProperty("isEmailBased").length > 1 : !0 : !1
                        },
                        verify: function (e) {
                            return this.hasUserPermission("*", "verifyNow") === !1 ? !1 : !this.get("currentIdentity.verified")
                        },
                        resendVerificationEmail: function (e) {
                            return this.hasUserPermission("*", "sendVerificationEmail") === !1 ? !1 : !this.get("currentIdentity.verified")
                        },
                        makeDirectLine: function () {
                            return !this.get("user.hasDirectLine")
                        },
                        removeDirectLine: function () {
                            return this.get("user.hasDirectLine")
                        },
                        removePhone: function () {
                            var e = this.get("user.hasDirectLine") ? 2 : 1;
                            return this.get("user.identities.length") >= e
                        },
                        callThisNumber: function () {
                            return r.get("canCallBack")
                        }
                    }
                },
                updateAddCommentMenuItems: function () {
                    this.get("currentCommandId") === "addContact" ? this._updateMenu(this.addContactMenuRules) : this.get("currentCommandId") === "managePhone" && this._updateMenu(this.identityMenuRules)
                }.observes("currentCommandId", "user.identities.@each"),
                updateTargetNumberActivation: function () {
                    this._updateMenu(this.identityMenuRules)
                }.observes("voiceState.currentCall.status"),
                addContactMenuRules: {
                    menuRule: function () {
                        return this.hasUserPermission("*", "add")
                    },
                    menuItemRules: {
                        showPhoneForm: function (e) {
                            return this.hasUserPermission("phone", "add") === !1 ? !1 : !this.get("user.phone")
                        },
                        showTwitterForm: function (e) {
                            return this.hasUserPermission("twitter", "add")
                        },
                        showEmailForm: function (e) {
                            return this.hasUserPermission("email", "add")
                        },
                        showGoogleAccountForm: function (e) {
                            return this.hasUserPermission("google", "add")
                        },
                        showFacebookForm: function (e) {
                            return this.hasUserPermission("facebook", "add")
                        }
                    }
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "IdentitiesContextMenuController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/identities/menu_definitions": function (e, t, n) {
        var r = t("controllers/identities/identities_controller").instance(),
            i = {};
        _({
            makeDirectLine: {
                label: I18n.t("txt.identities.action.make_direct_line"),
                action: "makeDirectLine"
            },
            makePrimary: {
                label: I18n.t("txt.identities.action.make_primary"),
                action: "makePrimary"
            },
            callThisNumber: {
                label: I18n.t("txt.identities.action.call_this_number"),
                action: "callThisNumber"
            },
            sendEmail: {
                label: I18n.t("txt.identities.action.send_email"),
                action: "sendEmail"
            },
            tweet: {
                label: I18n.t("txt.identities.action.view_twitter_account"),
                action: "viewTwitterAccount"
            },
            verify: {
                label: I18n.t("txt.identities.action.verify"),
                action: "verify"
            },
            resendVerificationEmail: {
                label: I18n.t("txt.identities.action.resend_verification_email"),
                action: "resendVerificationEmail"
            },
            remove: {
                label: I18n.t("txt.identities.action.remove"),
                action: "remove"
            },
            removeDirectLine: {
                label: I18n.t("txt.identities.action.remove_direct_line"),
                action: "removeDirectLine"
            },
            removePhone: {
                label: I18n.t("txt.identities.action.remove"),
                action: "removePhone"
            },
            showEmailForm: {
                label: I18n.t("txt.identities.action.new_email"),
                action: "showEmailForm"
            },
            showGoogleAccountForm: {
                label: I18n.t("txt.identities.action.new_google_account"),
                action: "showGoogleAccountForm"
            },
            showTwitterForm: {
                label: I18n.t("txt.identities.action.new_twitter"),
                action: "showTwitterForm"
            },
            showFacebookForm: {
                label: I18n.t("txt.identities.action.new_facebook"),
                action: "showFacebookForm"
            },
            showPhoneForm: {
                label: I18n.t("txt.identities.action.new_phone"),
                action: "showPhoneForm"
            }
        }).each(function (e, t) {
            e.target = e.target || r, i[t] = Em.Object.create(e)
        });
        var s = Em.Object.create({
            itemDefinitions: i,
            email: [i.sendEmail, i.makePrimary, i.verify, i.resendVerificationEmail, i.remove],
            googleBinding: "email",
            phone_number: [i.callThisNumber, i.makeDirectLine, i.removeDirectLine, i.removePhone],
            "command:managePhone": [i.callThisNumber, i.makeDirectLine, i.removeDirectLine, i.removePhone],
            twitter: [i.tweet, i.remove],
            "command:addContact": [i.showEmailForm, i.showGoogleAccountForm, i.showTwitterForm, i.showFacebookForm, i.showPhoneForm],
            _default: [i.remove],
            unknownProperty: function (e, t) {
                return this._default
            }
        });
        n.exports = s
    }
}), this.require.define({
    "views/modals/make_direct_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["modal", "role-modal"],
            title: I18n.t("txt.users.show.direct_line_popup.direct_line_label"),
            body: I18n.t("txt.users.show.direct_line_popup.direct_line_description"),
            confirmLabel: I18n.t("txt.users.show.direct_line_popup.make_this_number_direct_line_label"),
            cancelLabel: I18n.t("txt.user.actions.role.downgrade.cancel")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/voice/directline_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = Em.Object.extend({
                identitiesController: null,
                modal: null,
                removeDirectLine: function () {
                    this._editDirectLine(!1)
                },
                userDidConfirm: function () {
                    this._editDirectLine(!0), this._dismissModal()
                },
                userDidCancel: function () {
                    this._dismissModal()
                },
                displayMakeDirectModal: function () {
                    this.set("modal", t("views/modals/make_direct_modal").create({
                        target: this
                    })), this.get("modal").append()
                },
                updateNumber: function () {
                    var e = this.get("identitiesController.user");
                    this._updateUserNumber(e.get("hasDirectLine")).done(function (e, t, n) {
                        r.hideErrors(), !n.phone && t && t.length > 0 && r.error(I18n.t("txt.user.direct_line.update_number.error_notice"))
                    })
                },
                _editDirectLine: function (e) {
                    var t = this;
                    this._updateUserNumber(e).done(function (n, r, i) {
                        t._checkForChangedNumber(n, e, i.phone)
                    })
                },
                _updateUserNumber: function (e, t) {
                    var n = this.get("identitiesController.user"),
                        i = e ? 1 : 0,
                        s = n.get("phone"),
                        o = $.Deferred(),
                        u = this;
                    return $.ajax({
                        url: "/users/%@/update_number".fmt(n.get("id")),
                        type: "POST",
                        dataType: "json",
                        data: {
                            number: s,
                            direct_line: i
                        }
                    }).done(function (e) {
                        n.hasDirectLine && n.get("identities.length") == 1 ? r.error(I18n.t("txt.identities.users_must_have_at_least_one_identity")) : n.get("identities").refresh().done(function () {
                            Em.run.next(function () {
                                o.resolve(n, s, e)
                            })
                        })
                    }).error(function () {
                        u._checkForChangedNumber(n, e, s)
                    }), o.promise()
                },
                _checkForChangedNumber: function (e, t, n) {
                    var i = e.get("hasDirectLine"),
                        s;
                    r.hideErrors(), i !== t && (s = I18n.t("txt.user.direct_line.update_number.error_notice") + "<ul><li>" + I18n.t("txt.identities.direct_line.update_number.taken", {
                        value: n
                    }) + "</li></ul>", r.error(s))
                },
                _dismissModal: function () {
                    this.get("modal").hideModal(), this.set("modal", null)
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "DirectLineController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "initializers/identities_controllers": function (e, t, n) {
        n.exports = function () {
            var n = t("controllers/identities/identities_controller").instance(),
                r = t("controllers/identities/context_menu").instance(),
                i = t("controllers/identities/add_identity_form").instance(),
                s = t("controllers/identities/menu_definitions"),
                o = t("controllers/voice/directline_controller").instance();
            n.set("directlineController", o), o.set("identitiesController", n), n.set("contextMenuController", r), r.set("identitiesController", n), r.set("menuDefinitions", s), n.set("addIdentityFormController", i), i.set("identitiesController", n);
            var u = t("lib/views/context_menu_view").instance();
            t("controllers/identities/context_menu").instance().contextMenu = u;
            var a = function (e) {
                t("controllers/identities/context_menu").instance().toggle({
                    identityId: e.target.getAttribute("data-identity-id"),
                    commandId: e.target.getAttribute("data-command-id"),
                    relativeEl: e.target
                })
            };
            $(document.body).unbind("click.identities_global"), $(document.body).bind("click.identities_global", a), u.reopen({
                destroy: function () {
                    $(document.body).unbind("click.identities_global"), t("controllers/identities/context_menu").instance().reset(), this._super.apply(this, arguments)
                }
            })
        }
    }
}), this.require.define({
    "initializers/idle_timer": function (e, t, n) {
        n.exports = function () {
            Em.assert("idle_timer initializer requires Zendesk to be defined", Zendesk != null), Zendesk.set("idle", !1);
            var e = t("lib/lotus/idle_timer").instance();
            e.start(6e5), e.on("idle", function () {
                Zendesk.set("idle", !0)
            }), e.on("active", function () {
                Zendesk.set("idle", !1)
            })
        }
    }
}), this.require.define({
    "initializers/keyboard_listener_init": function (e, t, n) {
        var r = t("lib/lotus/keyboard_listener").instance();
        n.exports = function () {
            $(document).keydown(function (e) {
                r.set("currentKeyCode", e.keyCode)
            }).keyup(function (e) {
                r.set("currentKeyCode", null)
            }), $(window).blur(function () {
                r.set("currentKeyCode", null)
            })
        }
    }
}), this.require.define({
    "initializers/keyboard_shortcuts": function (e, t, n) {
        var r = t("lib/lotus/keyboard_shortcuts"),
            i = [
                ["up", "navigatePrevious"],
                ["down", "navigateNext"],
                ["left", "navigateLeft"],
                ["right", "navigateRight"],
                ["pageup", "navigateFirst"],
                ["pagedown", "navigateLast"],
                ["ctrl+up", "navigateFirst"],
                ["ctrl+down", "navigateLast"],
                ["home", "navigateFirst"],
                ["end", "navigateLast"],
                ["w", "navigatePrevious"],
                ["s", "navigateNext"],
                ["a", "navigateLeft"],
                ["d", "navigateRight"],
                ["k", "navigatePrevious"],
                ["j", "navigateNext"],
                ["h", "navigateLeft"],
                ["l", "navigateRight"],
                ["space", "select"],
                ["ctrl+k", "navigateFirst"],
                ["ctrl+j", "navigateLast"],
                ["return", "activate"],
                ["x", "quickview"],
                ["esc", "cancel"],
                ["⌃+⌥+o", "saveAsOpen"],
                ["⌃+⌥+p", "saveAsPending"],
                ["⌃+⌥+d", "saveAsHold"],
                ["⌃+⌥+s", "saveAsSolved"],
                ["⌃+⌥+c", "toggleReply"],
                ["⌃+⌥+x", "toggleNote"],
                ["⌃+⌥+m", "toggleMacro"],
                ["⌃+⌥+down", "nextTicket"],
                ["⌃+⌥+a", "toggleApps"],
                ["⌃+⌥+j", "nextTicket"],
                ["⌃+⌥+w", "closeWorkspace"],
                ["⌃+⌥+h", "goHome"],
                ["⌃+⌥+v", "goToFilters"],
                ["⌃+⌥+t", "goToTicket"],
                ["⌃+⌥+r", "goToRequester"],
                ["⌃+⌥+f", "goToSearch"],
                ["/", "goToSearch"],
                ["⌃+⌥+n", "goToNewTicket"]
            ];
        n.exports = function () {
            _.each(i, function (e) {
                r.bind(e[0], e[1])
            })
        }
    }
}), this.require.define({
    "initializers/popover_extensions": function (e, t, n) {
        n.exports = function () {
            $(document).on("mouseover", "#bootstrap_popover_container", function () {
                $(this).data("popover_target", null).empty()
            }), $(document).on("mouseover", ".popover, .tooltip", function () {
                var e = $(this);
                if (e.hasClass("dialer") || e.hasClass("add") || e.hasClass("static")) return;
                setTimeout(function () {
                    e.remove()
                }, 1)
            })
        }
    }
}), this.require.define({
    "lib/pubsub": function (e, t, n) {
        var r = Minilog("pubsub_init");
        n.exports = Object.seal({
            initialize: function (e) {
                function n(e) {
                    if (t++ > 5) return;
                    $.ajax("/api/v2/users/radar_token.json", {
                        dataType: "json",
                        cache: !1,
                        error: function (e, t, i) {
                            n(), r.error("#get_radar_config_failed", t, i)
                        },
                        success: function (t) {
                            var i;
                            t.auth ? (i = t.servers[Math.floor(Math.random() * t.servers.length)], r.info("Radar connecting to", i.host, i.port), t.host = i.host, t.port = i.port, RadarClient.configure(t), e && e("radar", RadarClient)) : n(e)
                        }
                    })
                }
                var t = 0;
                n(e)
            },
            connected: function (e) {
                e && e()
            },
            getBackendName: function (e) {
                e && e("radar")
            }
        })
    }
}), this.require.define({
    "initializers/pubsub": function (e, t, n) {
        n.exports = function () {
            window.Pubsub = t("lib/pubsub")
        }
    }
}), this.require.define({
    "lib/router": function (e, t, n) {
        function i(e, t, n) {
            this.name = "redirect-from-%@".fmt(e), this.destination = _.isFunction(t) ? t : function () {
                return t
            }, this.router = n
        }

        function s(e, t) {
            this.sammyApp = e, this.handlers = t, this.handlers.suspended = {}, this.handlers.loading = {}, this.handlers.failure = {}, this.map(function (e) {
                e(r).to("suspended")
            })
        }
        var r = "/__suspended__";
        _.extend(i.prototype, {
            serialize: function (e) {
                return e
            },
            model: function (e) {
                return e
            },
            setup: function (e, t) {
                var n = Ember.makeArray(this.destination(e, t));
                this.router.replaceWith.apply(this.router, n)
            }
        }), s.prototype = new Router, _.extend(s.prototype, {
            parseURL: function (t) {
                return t.replace(/^[^#]*#([^?]*)(?:\?.*)?$/, "$1")
            },
            getHandler: function (n) {
                var r = this.handlers;
                return r.hasOwnProperty(n) || (r[n] = t("routes/" + n).create({
                    router: this
                })), r[n]
            },
            updateURL: function (e) {
                e !== r && this.sammyApp.goToHash(e)
            },
            redirect: function (e, t) {
                var n = new i(e, t, this);
                this.handlers[n.name] = n, this.map(function (t) {
                    t(e).to(n.name)
                })
            },
            suspend: function () {
                return this.transitionTo("suspended")
            }
        }), n.exports = s
    }
}), this.require.define({
    "routes/section": function (e, t, n) {
        var r = Ember.Mixin.create(t("routes/base"), {
            app: Zendesk,
            section: Ember.required(),
            subsection: Ember.required(),
            activate: function () {
                var e = this.get("app");
                e.set("section", this.get("section")), e.set("subsection", this.get("subsection"))
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/iframe_view": function (e, t, n) {
        n.exports = Em.View.extend({
            tagName: "iframe",
            classNames: "iframe".w(),
            attributeBindings: "src name width height".w(),
            src: null,
            name: "zendesk-clean-admin",
            width: "100%",
            height: "100%",
            reset: function (e) {
                var t = this.$()[0],
                    n = t && t.contentDocument;
                n && (n.location = e || this.get("src"))
            }
        })
    }
}), this.require.define({
    "states/re_entrant_admin_state": function (e, t, n) {
        n.exports = Em.Mixin.create({
            resetRoute: function (e) {
                var t = this.get("view.src"),
                    n = this.src(e.get("controller.currentId")),
                    r = this.get("view");
                t !== n ? r.reset(n) : r.reset()
            },
            srcTemplate: Em.required(),
            src: function (e) {
                return this.get("srcTemplate").fmt(e)
            },
            enter: function (e) {
                this._super.apply(this, arguments), this.set("view.src", this.src(e.get("controller.currentId")))
            }
        })
    }
}), this.require.define({
    "states/resettable_admin_state": function (e, t, n) {
        n.exports = Em.Mixin.create({
            resetRoute: function (e) {
                var t = this.get("view");
                t.reset()
            }
        })
    }
}), this.require.define({
    "states/admin": function (e, t, n) {
        var r = t("mixins/admin_menu_contextual_help"),
            i = t("lib/views/iframe_view"),
            s = t("states/resettable_admin_state"),
            o, u = {
                forum_moderation: "/forums/moderation",
                reports: "/reports",
                tags: "/tags",
                ticket_fields: "/ticket_fields",
                user_fields: "/user_fields",
                organization_fields: "/organization_fields",
                dynamic_content: "/dynamic_content/items",
                slas: "/slas",
                security: "/settings/security",
                tickets: "/settings/tickets",
                agents: "/settings/agents",
                apps: "/apps",
                installed_apps: "/apps/installations",
                dev_center: "/apps/owned",
                sandbox: "/account/sandbox",
                crm: "/settings/extensions#crm",
                portal: "/settings/portal",
                dropboxes: "/account/dropboxes/new",
                chat: "/settings/chat",
                voice: "/voice/settings#general_settings",
                email: "/settings/email",
                api: "/settings/api"
            };
        Em.keys(u).forEach(function (e) {
            var t = u[e];
            u[e] = Em.State.extend({
                show: Em.ViewState.createWithMixins(s, r, {
                    view: i.extend({
                        src: t
                    })
                })
            })
        });
        var a = t("modules/ticket_forms_data/main"),
            f = t("states/re_entrant_admin_state"),
            o = Em.StateManager.extend(u, {
                rootView: null,
                controller: t("controllers/admin_menu_controller"),
                subscriptionController: t("controllers/admin/subscription_controller"),
                subscriptionConfirmationController: t("controllers/admin/subscription/subscription_confirmation_controller"),
                subscriptionPaymentController: t("controllers/admin/subscription/subscription_payment_controller").instance,
                contextualHelpController: t("controllers/admin/contextual_help/admin_menu_help_controller").create(),
                planSelectionController: Em.computed.singleton("controllers/plan_selection_controller"),
                denyAccess: function () {
                    t("api/lotus").error(I18n.t("txt.errors.access_denied.title")), Zd.Routes.goToHash("#/dashboard"), this.goToState("overview.show")
                },
                goToAdmin: function (e, t, n) {
                    t = t || "show";
                    var r = this.get("controller"),
                        i = [e, t].compact().join("."),
                        s, o;
                    if (this.get(i + ".permitted") === !1) {
                        this.denyAccess();
                        return
                    }
                    r.set("activeName", e), r.set("currentLocation", window.location.hash), r.set("currentId", n), this.get("currentState.path") === i && (s = this.get("currentState"), s.resetRoute && s.resetRoute(this)), this.goToState(i)
                },
                overview: Em.State.extend({
                    show: Em.ViewState.create({
                        view: t("views/admin/overview_view")
                    })
                }),
                account: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/settings/account"
                        })
                    })
                }),
                views: Em.State.extend({
                    show: Em.ViewState.createWithMixins(s, r, {
                        view: i.extend({
                            src: "/rules?filter=views"
                        })
                    }),
                    edit: Em.ViewState.createWithMixins(f, {
                        view: i,
                        srcTemplate: "/rules/views/%@/edit"
                    }),
                    clone: Em.ViewState.createWithMixins(f, {
                        view: i,
                        srcTemplate: "/rules/new?filter=view&copy_id=%@"
                    })
                }),
                macros: Em.State.extend({
                    show: Em.ViewState.createWithMixins(s, r, {
                        view: i.extend({
                            src: "/rules?filter=macros"
                        })
                    }),
                    edit: Em.ViewState.createWithMixins(f, {
                        view: i,
                        srcTemplate: "/rules/macros/%@/edit"
                    }),
                    from_ticket: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this
                                .set("view.src", "/rules/new?filter=macro&ticket_id=%@".fmt(window.location.hash.split("=")[1]))
                        }
                    })
                }),
                user_fields: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/crm_admin/user_fields"
                        })
                    })
                }),
                organization_fields: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/crm_admin/organization_fields"
                        })
                    })
                }),
                automations: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/rules?filter=automations"
                        })
                    }),
                    edit: Em.ViewState.createWithMixins(f, {
                        view: i,
                        srcTemplate: "/rules/automations/%@/edit"
                    })
                }),
                triggers: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/rules?filter=triggers"
                        })
                    }),
                    edit: Em.ViewState.createWithMixins(f, {
                        view: i,
                        srcTemplate: "/rules/triggers/%@/edit"
                    })
                }),
                customers: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/settings/customers"
                        })
                    }),
                    satisfaction: Em.ViewState.create({
                        view: i.extend({
                            src: "/settings/customers#satisfaction"
                        })
                    })
                }),
                facebook: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/facebook/settings"
                        })
                    }),
                    facebook_auth: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this.set("view.src", "/facebook/auth/create?%@".fmt($.param($.queryParameters())))
                        }
                    }),
                    "facebook_auth&": Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this.set("view.src", "/facebook/auth/create?%@".fmt($.param($.queryParameters())))
                        }
                    })
                }),
                twitter: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/twitter/settings"
                        })
                    }),
                    twitter_auth: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this.set("view.src", "/account/channels/successful_twitter_auth?%@".fmt($.param($.queryParameters())))
                        }
                    }),
                    twitter_reauth: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this.set("view.src", "/account/channels/%@/edit".fmt($.queryParameters().id))
                        }
                    })
                }),
                extensions: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, {
                        view: i.extend({
                            src: "/settings/extensions"
                        })
                    }),
                    salesforce_auth: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments), this.set("view.src", "/settings/extensions/salesforce_oauth_callback?%@".fmt($.param($.queryParameters())))
                        }
                    })
                }),
                people: Em.State.extend({
                    show: Em.ViewState.createWithMixins(r, s, {
                        view: i,
                        enter: function () {
                            this._super.apply(this, arguments);
                            var e = Zd.currentUser.get("isAgent") ? "/users" : "/people";
                            this.set("view.src", e)
                        }
                    }),
                    agents: Em.ViewState.create({
                        view: i.extend({
                            src: "/users?role[]=4&role[]=2"
                        })
                    }),
                    groups: Em.ViewState.createWithMixins({
                        view: i,
                        enter: function (e, n, r) {
                            this._super.apply(this, arguments);
                            var i = "/groups/" + t("controllers/admin_menu_controller").get("currentId");
                            this.set("view.src", i)
                        },
                        resetRoute: function () {
                            return this.enter.apply(this, arguments)
                        }
                    })
                }),
                "switch": Em.State.extend({
                    show: Em.ViewState.create({
                        view: t("views/admin/switch_to_classic_view")
                    })
                }),
                subscription: Em.State.extend({
                    show: Em.ViewState.createWithMixins({
                        permitted: Zd.get("globalPermissions.manageSubscriptionReadOnly"),
                        features: t("lib/features"),
                        init: function () {
                            this.get("features").hasFeature("planSelection") ? this.set("view", t("views/subscription_view_v2")) : this.set("view", t("views/admin/subscription/subscription_view")), this._super.apply(this, arguments)
                        },
                        enter: function (e) {
                            var t = e.get("planSelectionController"),
                                n = this._super,
                                r = this,
                                i = arguments;
                            this.get("features").hasFeature("planSelection") ? t.initialize().done(function () {
                                n.apply(r, i)
                            }) : (e.get("subscriptionController").show(), this._super.apply(this, arguments))
                        }
                    }),
                    confirm: Em.ViewState.createWithMixins({
                        view: t("views/admin/subscription/subscription_confirmation_view"),
                        enter: function (e) {
                            this._super.apply(this, arguments), e.get("subscriptionConfirmationController").show()
                        }
                    }),
                    payment: Em.ViewState.createWithMixins({
                        view: t("views/admin/subscription/subscription_payment_view"),
                        enter: function (e) {
                            this._super.apply(this, arguments), e.get("subscriptionPaymentController").show()
                        }
                    })
                }),
                benchmark_survey: Em.State.extend({
                    enter: function () {
                        this._super.apply(this, arguments), t("controllers/benchmark_survey_controller").instance().initialize()
                    },
                    show: Em.ViewState.create({
                        view: t("views/admin/benchmark_survey_view")
                    })
                }),
                ticket_forms: Em.State.create({
                    show: Em.ViewState.createWithMixins(r, {
                        permittedBinding: Em.Binding.oneWay("Zd.globalPermissions.manageTicketForms"),
                        view: t("views/admin/ticket_forms_view"),
                        enter: function (e) {
                            var t = this,
                                n = this._super,
                                r = arguments;
                            $.when(a.initialize(), I18n.loader.load("ticket_forms")).done(function () {
                                n.apply(t, r)
                            })
                        }
                    }),
                    create: Em.ViewState.createWithMixins(r, {
                        permittedBinding: Em.Binding.oneWay("Zd.globalPermissions.manageTicketForms"),
                        view: t("api/ticket_forms/lib").Views.CreateView,
                        enter: function (e) {
                            var t = this,
                                n = this._super,
                                r = arguments;
                            $.when(a.initialize(), I18n.loader.load("ticket_forms")).done(function () {
                                n.apply(t, r), t.get("view").setup()
                            })
                        }
                    }),
                    edit: Em.ViewState.createWithMixins(r, {
                        permittedBinding: Em.Binding.oneWay("Zd.globalPermissions.manageTicketForms"),
                        view: t("api/ticket_forms/lib").Views.EditView,
                        enter: function (e) {
                            var t = this,
                                n = this._super,
                                r = arguments;
                            $.when(a.initialize(), I18n.loader.load("ticket_forms")).done(function () {
                                n.apply(t, r), t.get("view").setup(e.get("controller.currentId"))
                            })
                        }
                    }),
                    clone: Em.ViewState.createWithMixins(r, {
                        permittedBinding: Em.Binding.oneWay("Zd.globalPermissions.manageTicketForms"),
                        view: t("api/ticket_forms/lib").Views.CloneView,
                        enter: function (e) {
                            var t = this,
                                n = this._super,
                                r = arguments;
                            $.when(a.initialize(), I18n.loader.load("ticket_forms")).done(function () {
                                n.apply(t, r), t.get("view").setup(e.get("controller.currentId"))
                            })
                        }
                    })
                })
            });
        o.reopenClass({
            RootView: Em.ContainerView.extend({
                elementId: "admin_content",
                didInsertElement: function () {
                    this.get("parentView.rootInserted").resolve(this), this._super()
                }
            })
        }), n.exports = o
    }
}), this.require.define({
    "views/main_pane/section": function (e, t, n) {
        n.exports = Em.View.extend(t("lib/lotus/swappable"), t("lib/account_consumer"), {
            tagName: "section",
            classNames: ["main_panes", "split_pane"],
            loading: Em.computed.singleton("lib/lotus/loading"),
            didInsertElement: function () {
                this.get("loading").stop(), this._super()
            }
        }).reopenClass({
            makeSectionView: function (e, t, n) {
                return t = t || {}, n = n || {}, this.createWithMixins(n, {
                    name: e,
                    id: e,
                    classNames: [e],
                    templateName: "templates/main_pane/%@".fmt(e)
                }, t)
            }
        })
    }
}), this.require.define({
    "models/launchpad/launchpad_task": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                id: Number,
                key: String,
                order: Number,
                section: String,
                status: String,
                enabled: Boolean
            },
            url: function (e) {
                return "/api/v2/jetpack_tasks/%@.json".fmt(e.get("key").underscore())
            },
            parse: function (e) {
                return e = e.jetpack_task || e, e.key = e.key.camelize(), e
            }
        }).extend({
            isNew: function () {
                return !Ember.get(this, "key")
            }.property("key").cacheable(),
            incomplete: function () {
                return this.get("status") !== "complete"
            }.property("status").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "models/launchpad/launchpad_tasks": function (e, t, n) {
        var r = Em.ResourceCollection.extend({
            remoteExpiryKey: "jetpack_tasks",
            remoteExpiryAutoFetch: !0,
            type: t("models/launchpad/launchpad_task"),
            url: "/api/v2/jetpack_tasks.json",
            parse: function (e) {
                return this._super(e.jetpack_tasks)
            },
            agentTasks: function () {
                return this.get("content").filterProperty("section", "agent")
            }.property("content.@each").cacheable()
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "LanchpadTasks"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/launchpad_controller": function (e, t, n) {
        var r, i = t("models/launchpad/launchpad_tasks").instance(),
            s = Em.Object.extend(t("lib/account_consumer"), {
                active: !0,
                tasks: Em.computed.oneWay("launchpadTasks.content"),
                launchpadEnabled: !1,
                isTrialBinding: Em.Binding.oneWay("currentAccount.inTrial"),
                init: function () {
                    this._super(), this.set("currentUser", Zd.currentUser).set("launchpadTasks", i)
                },
                setupForTrial: function (e) {
                    var t = this.get("currentAccount.createdAt"),
                        n = new Date("Fri May 25 2012 00:00:00 GMT-0700 (PDT)"),
                        r = e || t.getTime() >= n.getTime();
                    e = e || this.get("currentAccount.isTrialAccount"), this.get("currentUser.isLightAgent") && (r = !1, e = !1), this.set("launchpadEnabled", r), this.set("active", e)
                },
                isTrialExpired: function () {
                    return this.get("currentAccount.daysSinceTrialExpired") > 1
                }.property("currentAccount.daysSinceTrialExpired").cacheable(),
                watchTrialAccount: function () {
                    this.setupForTrial(this.get("isTrial"))
                }.observes("isTrial"),
                activateDashboard: function () {
                    this.set("active", !1), Zd.Routes.goToHash("#/dashboard")
                },
                currentLaunchpadMenuItem: function () {
                    return this.get("active") ? "launchpad" : "dashboard"
                }.property("active").cacheable(),
                activateLaunchpad: function () {
                    this.set("active", !0)
                },
                shouldShowUser: Em.computed.alias("launchpadEnabled"),
                swappableName: function () {
                    return this.get("active") ? "launchpad" : "updates"
                }.property("active").cacheable(),
                shouldShowTrialCountdown: function () {
                    return this.get("currentAccount.daysLeftInTrial") > 0
                }.property("currentAccount.daysLeftInTrial").cacheable(),
                shouldShowUpsell: function () {
                    return this.get("currentAccount.isTrialAccount") && this.get("currentUser.isAccountOwner")
                }.property("currentAccount.isTrialAccount", "currentUser.isAccountOwner").cacheable()
            }).reopenClass({
                instance: function () {
                    return r || (r = s.create()), r
                },
                toString: function () {
                    return "LaunchpadController"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "views/organizations/organization_view": function (e, t, n) {
        var r = Em.View.extend(t("lib/lotus/swappable"), t("lib/views/render_if_activated"), t("lib/settings_consumer"), t("lib/account_consumer"), {
            templateName: "templates/organizations/main_pane",
            name: "organization",
            ticketBinding: "delegate.ticket",
            userBinding: "delegate.user",
            workspaceBinding: "delegate",
            organizationBinding: "delegate.organization",
            shouldShowIncidentsBinding: "delegate.shouldShowIncidents",
            shouldShowProblemBinding: "delegate.shouldShowProblem",
            shouldShowOrgSharing: Em.computed.not("currentAccount.helpCenterSettings.hideOrgSharing"),
            tagName: "section",
            classNames: ["main_panes", "split_pane", "organization"],
            everActivatedBinding: "controller.everActivated"
        }).reopenClass({
            toString: function () {
                return "OrganizationView"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/users/topics": function (e, t, n) {
        var r = t("lib/utils").htmlEscape,
            i = Em.View.extend({
                templateName: "templates/items/topic",
                forumLink: function () {
                    var e = this.get("content.forum.name"),
                        t = this.get("content.forum.id"),
                        n = '<a href="/forums/%@" target="_blank">%@</a>'.fmt(r(t), r(e));
                    return new Handlebars.SafeString(n)
                }.property("content.forum.name", "content.forum.id").cacheable(),
                createdStamp: function () {
                    var e = t("lib/views/timestamp_view"),
                        n = this.get("content.createdAt") || this.get("content.created_at");
                    return new Handlebars.SafeString(e.renderDateTime(n))
                }.property("content.createdAt").cacheable()
            });
        i.reopenClass({
            toString: function () {
                return "UserTopicsView"
            }
        }), n.exports = i
    }
}), this.require.define({
    "views/search/search_results_view": function (e, t, n) {
        function i() {
            var e = this.get("elementInFocus");
            if (e != null) {
                var t = r(e, "url"),
                    n = r(e, "target");
                n == null ? window.location.hash = t : window.open(t, n)
            }
        }
        var r = Em.get,
            s = Em.View.extend(t("lib/lotus/collection_navigation_item"), {
                render: function (e) {
                    this._super(e);
                    var n = this.get("content.resultType"),
                        r, i;
                    switch (n) {
                    case "topic":
                        r = t("views/users/topics");
                        break;
                    case "article":
                        r = t("views/search/article_result");
                        break;
                    case "user":
                        i = "templates/items/user";
                        break;
                    case "organization":
                        i = "templates/items/organization";
                        break;
                    case "group":
                        i = "templates/items/group";
                        break;
                    default:
                        i = "templates/items/ticket"
                    }
                    typeof i != "undefined" && (r = Em.View.extend({
                        parentView: this,
                        templateName: i
                    }));
                    var s = r.extend({
                        content: this.get("content.model")
                    });
                    this.appendChild(s)
                }
            }),
            o = Em.CollectionView.extend(t("lib/lotus/auto_pagination"), t("lib/lotus/collection_navigation"), t("lib/lotus/responder_view"), {
                controllerBinding: "parentView.controller",
                itemViewClass: s,
                navigateSearchResultsBinding: "controller.navigateSearchResults",
                getElement: function () {
                    return $("#search_results_container")
                },
                triggerResizeResults: function () {
                    this.get("controller.resultsAvailable") && Em.run.next(this, function () {
                        this.getElement().css("top", $(".search.main_panes .search_bar").outerHeight())
                    })
                }.observes("controller.resultsAvailable"),
                setFocus: function () {
                    if (!this.get("navigateSearchResults")) return;
                    this.focus(), this.navigateFirst()
                }.observes("navigateSearchResults"),
                didInsertElement: function () {
                    return this.set("scrollElement", this.getElement()), this._super.apply(this, arguments)
                },
                activate: i,
                navigateRight: i,
                navigateOutOfBounds: function (e) {
                    return e === 0 ? (this.set("navigateSearchResults", !1), null) : e
                },
                cancel: function () {
                    this.get("controller").cancel()
                }
            });
        n.exports = o
    }
}), this.require.define({
    "lib/views/view_registrar_mixin": function (e, t, n) {
        var r = function (e) {
            if (e == null) return;
            return typeof e == "string" ? e : Em.get(e, "name")
        }, i = function (e, t) {
                t = r(t);
                if (t == null) return;
                var n = e.get("uiDeferreds"),
                    i = n.get(t);
                return i || (i = $.Deferred(), n.set(t, i)), i
            }, s = Em.Mixin.create({
                init: function () {
                    this.set("uiDeferreds", new Em.Map), this.set("views", Em.Object.create()), this._super()
                },
                uiReadyForView: function (e) {
                    return i(this, e).promise()
                },
                viewWasInserted: function (e) {
                    i(this, e).resolve()
                },
                registerView: function (e) {
                    if (e == null) return;
                    var t = Em.get(e, "name");
                    !this.hasView(e) && this.set("views." + t, e)
                },
                unregisterView: function (e) {
                    var t = r(e);
                    if (t == null) return;
                    this.get("uiDeferreds").remove(t), this.set("views." + t, null)
                },
                hasView: function (e) {
                    var t = r(e);
                    return t != null && !! this.get("views." + t)
                },
                destroy: function () {
                    this._super(), this.set("views", null), this.get("uiDeferreds").forEach(function (e, t) {
                        t.reject()
                    }), this.set("uiDeferreds", null)
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/main_panes_controller": function (e, t, n) {
        var r = t("controllers/ticket_filter_manager_controller").instance(),
            i = t("controllers/user_filter_manager_controller").instance(),
            s = t("controllers/launchpad_controller"),
            o = t("lib/lotus/swappable"),
            u = t("views/main_pane/section"),
            a = t("controllers/dashboard/dashboard_controller"),
            f = Em.Object.extend(t("lib/views/view_registrar_mixin"), {
                mainPane: Em.computed.oneWay("views.mainPane"),
                dashboardView: u.makeSectionView("dashboard", {
                    launchpadController: s.instance(),
                    controller: a.instance()
                }),
                filtersView: u.makeSectionView("filters", {
                    controller: r
                }, t("lib/collapsible_sidebar")),
                userFiltersView: u.makeSectionView("user_filters", {
                    controller: i,
                    classNameBindings: ["controller.isPreviewing:previewing"]
                }, t("lib/collapsible_sidebar")),
                reportingView: u.makeSectionView("reporting", {
                    classNames: ["bordered"]
                }),
                validViewNames: Object.freeze("dashboard admin search filters userFilters user organization reporting".w()),
                findViewByName: function (e) {
                    return this[e + "View"]
                },
                addViewIfNotPresent: function (e) {
                    var t = null,
                        n;
                    Ember.View.detectInstance(e) ? (t = e, n = t.get("name")) : (n = e, t = this.findViewByName(n));
                    if (!this.get("validViewNames").contains(n)) return;
                    var r = this.get("views.mainPane");
                    r && r.get("presentPanes") && !r.get("presentPanes").contains(n) && (r.get("childViews").pushObject(t), r.get("presentPanes").pushObject(n))
                },
                activatePane: function (e) {
                    this.set("mainPane.activeChildName", e)
                },
                addPane: function (e) {
                    var t = this.get("mainPane");
                    if (!t) return;
                    t.get("childViews").pushObject(e), t.get("presentPanes").pushObject(e.get("name"))
                },
                paneIsPresent: function (e) {
                    var t = this.get("views.mainPane.presentPanes");
                    if (t) return t.contains("dashboard")
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "MainPanesController"
                }
            });
        n.exports = f
    }
}), this.require.define({
    "routes/admin": function (e, t, n) {
        var r = t("states/admin");
        n.exports = Ember.Object.extend(t("routes/section"), {
            section: "admin",
            subsection: null,
            mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
            mainPaneView: function () {
                var e = $.Deferred();
                return t("views/main_pane/section").makeSectionView("admin", {
                    rootInserted: e,
                    RootView: r.RootView,
                    classNames: ["flush_top"]
                })
            }.property().cacheable(),
            beforeModel: function () {
                if (this.get("adminStates") != null) return;
                var e = this.get("mainPaneView");
                return this.get("mainPanesController").addViewIfNotPresent(e), e.get("rootInserted").then(this._buildAdminStates.bind(this))
            },
            activate: function () {
                return this.get("states").goToState("admin"), this._super()
            },
            _buildAdminStates: function (e) {
                this.set("adminStates", r.create({
                    rootView: e
                }))
            }
        }).reopenClass({
            toString: function () {
                return "AdminRoute"
            }
        })
    }
}), this.require.define({
    "lib/tracking": function (e, t, n) {
        function o() {
            var e = Zd.currentUser.get("id");
            return Zd.currentUser.get("isEndUser") ? "end-user" : e && !r.get("trial") ? "agent-" + Base64.encode(e.toString()) : e
        }

        function u(e, t, n) {
            var u = i.development && n !== !1;
            if (r && !u) {
                var a = n === !1 ? "/images/blank.gif?" : "/tracker/pixel.gif?",
                    f = {
                        sdr_s: s,
                        sdr_o: r.get("subdomain"),
                        sdr_u: o(),
                        sdr_m: t,
                        sdr_a: e
                    };
                $.get(a + $.param(f))
            }
        }
        var r = t("lib/current_account"),
            i = t("lib/environment"),
            s = i.production ? "SP-1111-01" : "SP-11110-01";
        n.exports = u
    }
}), this.require.define({
    "routes/base": function (e, t, n) {
        var r = Ember.Mixin.create({
            router: null,
            enter: function () {
                return this.activate.apply(this, arguments)
            },
            exit: function () {
                return this.deactivate.apply(this, arguments)
            },
            activate: Em.K,
            deactivate: Em.K,
            transitionTo: function () {
                var e = this.get("router");
                e.transitionTo.apply(e, arguments)
            },
            replaceWith: function () {
                var e = this.get("router");
                e.replaceWith.apply(e, arguments)
            },
            states: Em.computed.singleton("states/main")
        });
        n.exports = r
    }
}), this.require.define({
    "routes/admin_section": function (e, t, n) {
        var r = t("lib/tracking");
        n.exports = Ember.Object.extend(t("routes/base"), {
            model: function (e) {
                return {
                    section: e.section,
                    subsection: e.subsection || null,
                    id: e.id || null
                }
            },
            setup: function (e) {
                r("Toolbar: Admin", "Lotus-general"), this.get("adminStates").goToAdmin(e.section, e.subsection, e.id)
            },
            adminStates: function () {
                return this.get("router").getHandler("admin").get("adminStates")
            }.property().cacheable()
        }).reopenClass({
            toString: function () {
                return "AdminSectionRoute"
            }
        })
    }
}), this.require.define({
    "routes/app_index": function (e, t, n) {
        var r = t("lib/logging/console_logger"),
            i = new r;
        n.exports = Ember.Object.extend(t("routes/base"), {
            events: {
                error: function (e, t) {
                    typeof Ember.onerror == "function" ? Ember.onerror(e) : i.error(e.message)
                }
            }
        }).reopenClass({
            toString: function () {
                return "AppIndexRoute"
            }
        })
    }
}), this.require.define({
    "routes/dashboard": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Ember.Object.extend(t("routes/section"), {
                section: "dashboard",
                subsection: null,
                controller: Em.computed.singleton("controllers/dashboard/dashboard_controller"),
                view: Em.computed.singleton("views/dashboard/incoming_table_body_view"),
                activate: function () {
                    r("Toolbar: Dashboard", "Lotus-general"), this._super(), this.get("controller").activate(), this.get("states").goToState("dashboard")
                },
                deactivate: function () {
                    this.get("controller").deactivate()
                },
                model: function (e) {
                    this.get("controller").fetchData("all")
                },
                setup: function (e) {
                    this.focusViewSoon()
                },
                focusViewSoon: function () {
                    Em.run.next(function () {
                        var e = this.get("view");
                        e && e.focus()
                    }.bind(this))
                }
            }).reopenClass({
                toString: function () {
                    return "DashboardRoute"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "routes/launchpad": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Ember.Object.extend(t("routes/section"), {
                section: "dashboard",
                beforeModel: function () {
                    return this.get("launchpadTasks").fetch()
                },
                activate: function () {
                    r("Toolbar: Getting-started", "Lotus-general"), this.set("app.section", "dashboard"), this.get("states").goToState("dashboard"), this.get("controller").activateLaunchpad()
                },
                controller: Em.computed.singleton("controllers/launchpad_controller"),
                launchpadTasks: t("models/launchpad/launchpad_tasks").instance()
            }).reopenClass({
                toString: function () {
                    return "LaunchpadRoute"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "routes/launchpad_task": function (e, t, n) {
        n.exports = Ember.Object.extend(t("routes/base"), {
            model: function (e) {
                var t = e.task,
                    n = this.get("allTaskNames");
                return n.contains(t) ? t : "announcements"
            },
            afterModel: function (e, t) {
                this.canPerformTask(this.get("currentUser"), e) || t.abort()
            },
            setup: function (e) {
                this.get("launchpadViewStates").onInit.done(function () {
                    this.goToState(e)
                })
            },
            app: Zendesk,
            launchpadViewStates: t("views/launchpad/view_states"),
            currentUser: Em.computed.oneWay("app.currentUser"),
            allTasks: t("models/launchpad/launchpad_tasks").instance(),
            allTaskNames: function () {
                return this.get("allTasks").mapProperty("key")
            }.property("allTasks.@each.key").cacheable(),
            agentTaskNames: function () {
                return this.get("allTasks.agentTasks").mapProperty("key")
            }.property("allTasks.@each.key").cacheable(),
            isAgentTask: function (e) {
                return this.get("agentTaskNames").contains(e) || e == "announcements"
            },
            canPerformTask: function (e, t) {
                return !e.get("isEndUser") && !e.get("isLightAgent") && (e.get("isAdmin") || this.isAgentTask(t))
            }
        }).reopenClass({
            toString: function () {
                return "LaunchpadTaskRoute"
            }
        })
    }
}), this.require.define({
    "routes/list_filters": function (e, t, n) {
        var r = t("controllers/ticket_filter_manager_controller").instance(),
            i = t("lib/tracking"),
            s = Ember.Object.extend(t("routes/section"), {
                section: "filters",
                subsection: "loading",
                sectionController: r,
                model: function () {
                    return this.get("sectionController").fetchData("list")
                },
                activate: function () {
                    this._super(), i("Toolbar: Filters", "Lotus-general"), this.get("states").goToState("filters.loading")
                },
                setup: function () {
                    var e = this.get("sectionController.currentFilter") || this.get("sectionController.viewFilters.firstObject");
                    this.replaceWith("show_filter", e)
                }
            }).reopenClass({
                toString: function () {
                    return "ListFiltersRoute"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "routes/list_user_filters": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Ember.Object.extend(t("routes/section"), {
                section: "user_filters",
                subsection: "loading",
                sectionController: Em.computed.singleton("controllers/user_filter_manager_controller"),
                model: function () {
                    return this.get("sectionController").fetchData("list")
                },
                activate: function () {
                    this._super(), this.get("states").goToState("userFilters.loading")
                },
                setup: function () {
                    var e = this.get("sectionController"),
                        t = e.get("currentFilter"),
                        n = t && t.get("active") ? t : e.get("filters.firstObject");
                    n ? this.replaceWith("show_user_filter", n) : e.set("currentFilter", null)
                }
            }).reopenClass({
                url: "/user_filters",
                toString: function () {
                    return "ListUserFiltersRoute"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "routes/new_organization": function (e, t, n) {
        n.exports = Ember.Object.extend(t("routes/base"), {
            adminURL: function () {
                return Zd.Routes.staticPaths.get("adminURL")
            }.property("Zd.Routes.staticPaths.adminURL"),
            setup: function () {
                var e = t("controllers/new_organization_controller").create();
                this.set("newOrganizationController", e), e.newOrganization({
                    previousRoute: this.get("adminURL")
                })
            },
            deactivate: function () {
                this.get("newOrganizationController").destroy(), this.set("newOrganizationController", null)
            }
        }).reopenClass({
            toString: function () {
                return "NewOrganizationRoute"
            }
        })
    }
}), this.require.define({
    "routes/plan_selection": function (e, t, n) {
        var r = "small medium large extra_large".w(),
            i = t("lib/tracking");
        n.exports = Em.Object.extend(t("routes/base"), {
            planSelectionController: Em.computed.singleton("controllers/plan_selection_controller"),
            model: function (e) {
                return e.plan
            },
            afterModel: function (e) {
                var t = r.indexOf(e) + 1;
                if (t <= 0) return;
                return i("view-billing-via-straight-to-pay-" + e, "new_plan_selection", !0), this.get("planSelectionController").show("billing", t)
            }
        }).reopenClass({
            toString: function () {
                return "PlanSelectionRoute"
            }
        })
    }
}), this.require.define({
    "lib/request_limiter": function (e, t, n) {
        var r = function () {
            this.scheduled = null, this.current = null
        };
        r.prototype.perform = function (e) {
            var t = $.Deferred();
            return this.scheduled = {
                fn: e,
                dfd: t
            }, this._send(), t.promise()
        }, r.prototype._send = function () {
            if (this.current) return;
            this.current = this.scheduled, this.scheduled = null;
            var e = this.current;
            e.fn().then(function (t) {
                e.dfd.resolve(t), this.current = null, this.scheduled && this._send()
            }.bind(this)).fail(function () {
                e.dfd.reject(), this.current = null
            }.bind(this))
        }, n.exports = r
    }
}), this.require.define({
    "models/search/search_filter": function (e, t, n) {
        var r = Em.Object.extend({
            id: null,
            localizationKey: null,
            filter: "",
            href: "",
            active: !1,
            displayText: function () {
                return I18n.t(this.get("localizationKey"))
            }.property().cacheable()
        }),
            i = r.extend({
                filter: function () {
                    function o(e) {
                        return parseInt(e, 10) < 10 && (e = "0" + e), e.toString()
                    }

                    function u(e) {
                        var t = [];
                        t.push(e.getFullYear());
                        var n = e.getMonth() + 1;
                        return t.push(o(n)), t.push(o(e.getDate())), t.join("-")
                    }
                    var e = new Date,
                        t = new Date(e),
                        n = new Date(e),
                        r = new Date(e),
                        i = new Date(e);
                    t.setDate(e.getDate() - 1), n.setDate(e.getDate() - 7), r.setMonth(e.getMonth() - 1), i.setFullYear(e.getFullYear() - 1);
                    var s = {
                        day: t,
                        week: n,
                        month: r,
                        year: i
                    }, a = this.get("id");
                    return typeof a != "undefined" && a !== "" ? "updated>%@".fmt(u(s[a])) : ""
                }.property().volatile()
            });
        n.exports = Object.freeze({
            Type: r,
            Time: i
        })
    }
}), this.require.define({
    "controllers/search_controller": function (e, t, n) {
        var r = t("models/search/search_result_collection"),
            i = [{
                id: "",
                localizationKey: "txt.search.filter.any-time",
                active: !0
            }, {
                id: "day",
                localizationKey: "txt.search.filter.past-day"
            }, {
                id: "week",
                localizationKey: "txt.search.filter.past-week"
            }, {
                id: "month",
                localizationKey: "txt.search.filter.past-month"
            }, {
                id: "year",
                localizationKey: "txt.search.filter.past-year"
            }].map(function (e) {
                return t("models/search/search_filter").Time.create(e)
            }),
            s = [{
                id: "all",
                localizationKey: "txt.search.filter.all",
                filter: "",
                active: !0
            }, {
                id: "ticket",
                localizationKey: "txt.search.filter.tickets",
                filter: "type:ticket"
            }, {
                id: "entry",
                localizationKey: "txt.search.filter.topics",
                filter: "type:entry"
            }, {
                id: "article",
                localizationKey: "txt.search.filter.articles",
                filter: "type:article"
            }, {
                id: "people",
                localizationKey: "txt.search.filter.people",
                filter: "type:user"
            }, {
                id: "organization",
                localizationKey: "txt.search.filter.organizations",
                filter: "type:organization"
            }].map(function (e) {
                return t("models/search/search_filter").Type.create(e)
            }),
            o = 1,
            u = 15,
            a = t("lib/request_limiter"),
            f = Em.Object.extend(t("lib/account_consumer"), {
                query: "",
                activeFilters: Em.computed.emptyObject(),
                searchResults: null,
                pendingSearchResults: null,
                sortMode: "relevance",
                sortingByRelevance: Em.computed.equal("sortMode", "relevance"),
                sortingByActivity: Em.computed.equal("sortMode", "activity"),
                requestLimiter: new a,
                navigateSearchResults: !1,
                hideTopicsFilter: Em.computed.oneWay("currentAccount.helpCenterSettings.hideTopicsFilter"),
                hideArticlesFilter: Em.computed.oneWay("currentAccount.helpCenterSettings.hideArticlesFilter"),
                working: !1,
                hasSearchResults: function () {
                    return this.get("searchResults.length") > 0
                }.property("searchResults.length").cacheable(),
                search: function () {
                    this.requestLimitedSearch()
                }.observes("query", "activeFilters.time", "activeFilters.type", "sortMode"),
                sortByRelevance: function () {
                    if (this.get("sortingByRelevance")) return;
                    this.set("sortMode", "relevance")
                },
                sortByActivity: function () {
                    if (this.get("sortingByActivity")) return;
                    this.set("sortMode", "activity")
                },
                requestLimitedSearch: _.debounce(function () {
                    var e = this.buildFilterQuery();
                    if (e === "") {
                        this.set("searchResults", null);
                        return
                    }
                    var t = this.get("sortingByActivity") ? "&by_updated=1" : "",
                        n = r.create({
                            perPage: u,
                            url: "/api/v2/search/incremental?query=%@%@".fmt(encodeURIComponent(e), t)
                        });
                    this.set("errored", !1), this.set("working", !0), this.get("requestLimiter").perform(function () {
                        return n.fetch()
                    }).done(function () {
                        this.set("searchResults", n)
                    }.bind(this)).always(function () {
                        this.set("working", !1)
                    }.bind(this)).fail(function () {
                        this.set("errored", !0)
                    }.bind(this))
                }, 300),
                buildFilterQuery: function () {
                    var e = this.get("query").trim(),
                        t = this.get("activeFilters");
                    if (e.length < o) return "";
                    var n = [Em.get(t, "type.filter") || "", Em.get(t, "time.filter") || ""].join(" ").trim();
                    return n.length === 0 ? e : n + " " + e
                },
                cancel: function () {
                    this.set("searchResults", null), this.set("query", ""), this.set("activeFilters", {})
                },
                resultsAvailable: function () {
                    return this.get("query.length") >= o && this.get("searchResults.isFetched")
                }.property("query.length", "searchResults.isFetched").cacheable(),
                resultSummary: function () {
                    if (this.get("resultsAvailable")) {
                        var e = this.get("searchResults.resultCount"),
                            t = "",
                            n = [],
                            r = this.get("activeFilters");
                        e === 0 ? t = I18n.t("txt.search.summary.none") : e === 1 ? t = I18n.t("txt.search.summary.singular_count") : t = I18n.t("txt.search.summary.plural_count", {
                            count: e
                        });
                        for (var i in r) r.hasOwnProperty(i) && typeof r[i] != "undefined" && r[i].get("filter") !== "" && n.push(I18n.t(r[i].localizationKey));
                        return n.length > 0 && (n = n.reverse().join(", "), t += " <span>(%@)</span>".fmt(n)), new Handlebars.SafeString(t)
                    }
                    return ""
                }.property("resultsAvailable", "query").cacheable(),
                filterSelected: function (e) {
                    var t = e.get("filterCategory"),
                        n = e.get("content");
                    this.set("activeFilters.%@".fmt(t), n)
                },
                searchFilters: function () {
                    var e = s;
                    return this.get("hideTopicsFilter") && (e = e.filter(function (e) {
                        return e.get("id") !== "entry"
                    })), this.get("hideArticlesFilter") && (e = e.filter(function (e) {
                        return e.get("id") !== "article"
                    })), {
                        type: e,
                        time: i
                    }
                }.property("hideTopicsFilter", "hideArticlesFilter").cacheable()
            });
        n.exports = f
    }
}), this.require.define({
    "routes/search": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Ember.Object.extend(t("routes/section"), {
                section: "search",
                subsection: null,
                mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
                controller: function () {
                    return t("controllers/search_controller").create()
                }.property().cacheable(),
                view: function () {
                    return t("views/main_pane/section").makeSectionView("search", {
                        controller: this.get("controller"),
                        SearchResultsView: t("views/search/search_results_view"),
                        working: Em.computed.oneWay("controller.working"),
                        errored: Em.computed.oneWay("controller.errored"),
                        searchReferenceURL: I18n.t("txt.search.search_reference")
                    })
                }.property().cacheable(),
                activate: function () {
                    r("Toolbar: Search", "Lotus-general"), this._super(), this.get("mainPanesController").addViewIfNotPresent(this.get("view")), this.get("states").goToState("search")
                }
            }).reopenClass({
                toString: function () {
                    return "SearchRoute"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "routes/show_app": function (e, t, n) {
        n.exports = Ember.Object.extend(t("routes/section"), {
            activate: function () {},
            model: function (e) {
                return e.name
            },
            setup: function (e) {
                this.set("app.section", "app-%@".fmt(e)), this.set("app.subsection", null), this.get("states").goToState("app")
            }
        }).reopenClass({
            toString: function () {
                return "ShowAppRoute"
            }
        })
    }
}), this.require.define({
    "routes/show_filter": function (e, t, n) {
        var r = t("controllers/ticket_filter_manager_controller").instance(),
            i = Ember.Object.extend(t("routes/section"), {
                section: "filters",
                subsection: "show",
                sectionController: r,
                serialize: function (e) {
                    return {
                        id: e.get("id")
                    }
                },
                model: function (e) {
                    var n = $.Deferred(),
                        r;
                    return e.id === "suspended" ? r = t("models/filter/suspended_filter").instance() : r = t("models/filter/view_filter").create({
                        id: e.id
                    }), r.fetch().done(n.resolve.bind(n, r)).fail(n.reject.bind(n)), n.promise()
                },
                activate: function () {
                    this._super(), this.get("states").goToState("filters.show"), this.get("sectionController").fetchData("list")
                },
                deactivate: function () {
                    this.get("sectionController").deactivate()
                },
                setup: function (e) {
                    this.get("sectionController").setup(e)
                }
            }).reopenClass({
                toString: function () {
                    return "ShowFilterRoute"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "routes/show_organization": function (e, t, n) {
        var r = Zendesk.Organization,
            i = "tickets";
        n.exports = Ember.Object.extend(t("routes/base"), {
            workspaceManager: Zd.get("workspaces"),
            model: function (e) {
                return {
                    organization: r.create({
                        id: e.id
                    }),
                    section: e.section || i
                }
            },
            setup: function (e) {
                var t = e.organization,
                    n = "organization.%@".fmt(e.section);
                this.get("workspaceManager").activateWorkspace(t, n), this.get("states").goToState("workspaces")
            }
        }).reopenClass({
            toString: function () {
                return "ShowOrganizationRoute"
            }
        })
    }
}), this.require.define({
    "routes/show_user": function (e, t, n) {
        function r(e) {
            return e.get("isAgent") ? "assigned_tickets" : "tickets"
        }
        var i = t("controllers/user_validator");
        n.exports = Ember.Object.extend(t("routes/base"), {
            validateUser: function (e) {
                return i.validateUser(e)
            },
            serialize: function (e) {
                return {
                    id: e.get("id")
                }
            },
            model: function (e) {
                var t = $.Deferred(),
                    n = Zendesk.User.create({
                        id: e.id
                    });
                return n.fetch().done(t.resolve.bind(t, n)).fail(t.reject.bind(t)).always(this.validateUser.bind(this, n)), t.promise()
            },
            setup: function (e) {
                this.replaceWith("show_user_details", {
                    user: e,
                    subsection: r(e)
                })
            }
        })
    }
}), this.require.define({
    "routes/show_user_details": function (e, t, n) {
        function r(e, t) {
            this.user = e, this.subsection = t
        }
        n.exports = Ember.Object.extend(t("routes/base"), {
            serialize: function (e) {
                return {
                    id: e.user.get("id"),
                    subsection: e.subsection
                }
            },
            model: function (e) {
                var t = Zendesk.User.create({
                    id: e.id
                });
                return new r(t, e.subsection)
            },
            activate: function () {
                this.get("states").goToState("workspaces")
            },
            setup: function (e) {
                var t = e.user,
                    n = this.get("profileTracker"),
                    r = this.get("workspaces"),
                    i = function () {
                        n.init("user_profile", "from_direct"), r.activateWorkspace(t, "user." + e.subsection)
                    };
                t.fetch().always(function () {
                    Zd.Routes.activateWorkspaceForActiveUser(t, i)
                })
            },
            profileTracker: function () {
                return t("lib/profile_tracker")
            }.property().cacheable(),
            workspaces: function () {
                return Zd.workspaces
            }.property().cacheable()
        })
    }
}), this.require.define({
    "routes/show_user_filter": function (e, t, n) {
        var r = Ember.Object.extend(t("routes/section"), {
            section: "user_filters",
            subsection: "show",
            sectionController: Em.computed.singleton("controllers/user_filter_manager_controller"),
            serialize: function (e) {
                return {
                    id: e.get("id")
                }
            },
            model: function (e) {
                var n = $.Deferred(),
                    r = this.get("sectionController"),
                    i = t("models/filter/user_filter/user_filter").create({
                        id: e.id
                    });
                return i.fetch().done(function () {
                    n.resolve(i), !i.get("active") && r.
                    onInactiveFilterLoad(i)
                }).fail(function () {
                    n.reject(), r.onFilterLoadFailure(i)
                }), n.promise()
            },
            activate: function () {
                this._super(), this.get("states").goToState("userFilters.show"), this.get("sectionController").fetchData("list")
            },
            setup: function (e) {
                this.get("sectionController").setup(e)
            }
        }).reopenClass({
            url: "/user_filters/:id",
            toString: function () {
                return "ShowUserFilterRoute"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "initializers/routes": function (e, t, n) {
        n.exports = function () {
            var n = Zendesk.Routes,
                r = t("lib/router"),
                i = new r(n, {}),
                s = t("lib/logging/console_logger"),
                o = new s;
            n.notFound = function (e, n) {
                var r = i.parseURL(n);
                try {
                    i.handleURL(r)
                } catch (s) {
                    if (!t("lib/environment").production) throw s;
                    o.error("Not found: " + r)
                }
            }, n.bind("event-context-after", function () {
                i.suspend()
            }), i.map(function (e) {
                e("/").to("app_index", function (e) {
                    e("/dashboard").to("dashboard", function (e) {
                        e("/").to("dashboard"), e("/plan_selection/:plan").to("plan_selection")
                    }), e("/search").to("search"), e("/filters").to("list_filters"), e("/filters/:id").to("show_filter"), e("/user_filters").to("list_user_filters"), e("/user_filters/:id").to("show_user_filter"), e("/apps/:name").to("show_app"), e("/users/:id").to("show_user"), e("/users/:id/:subsection").to("show_user_details"), e("/admin").to("admin", function (e) {
                        e("/:section").to("admin_section"), e("/:section/:subsection").to("admin_subsection"), e("/:section/:subsection/:id").to("admin_id")
                    }), e("/organizations/new").to("new_organization"), e("/organizations/:id/:section").to("show_organization"), e("/organizations/:id").to("show_organization"), e("/launchpad").to("launchpad", function (e) {
                        e("/").to("launchpad"), e("/:task").to("launchpad_task")
                    })
                })
            }), i.redirect("/suspended", "/filters/suspended"), i.handlers.admin_subsection = t("routes/admin_section").create({
                router: i
            }), i.handlers.admin_id = t("routes/admin_section").create({
                router: i
            }), Zendesk.router = i
        }
    }
}), this.require.define({
    "initializers/sammy": function (e, t, n) {
        n.exports = function () {
            Zendesk.Routes = Sammy("body"), Zendesk.Routes.error = function (e, t) {
                if (t) throw t
            }
        }
    }
}), this.require.define({
    "initializers/session": function (e, t, n) {
        function r() {
            if (t("lib/environment").test) return;
            window.location.href = "/access/login?return_to=" + encodeURIComponent(window.location.href)
        }
        n.exports = function () {
            return t("lib/session").instance().start().fail(r)
        }
    }
}), this.require.define({
    "initializers/silence_render_destroyed_view": function (e, t, n) {
        var r = "You can't call %@ on a destroyed view",
            i = Ember.String.fmt;
        n.exports = function () {
            Ember.View.states.destroyed.rerender = function () {}
        }
    }
}), this.require.define({
    "initializers/singletons": function (e, t, n) {
        n.exports = function () {
            Zendesk.reopen({
                features: function () {
                    Ember.deprecate("Zendesk.features has been deprecated. Please use lib/features or require('lib/features').consumer.");
                    var e = t("lib/features").consumer,
                        n = Ember.Object.create(e);
                    return n.get("features")
                }.property().volatile()
            })
        }
    }
}), this.require.define({
    "models/time_zone": function (e, t, n) {
        function i(e, t, n) {
            this.name = e, this.offset = t, this.formattedOffset = n, this.label = "(%@) %@".fmt(this.formattedOffset, this.name), this.value = this.name, this.offsetInMilliseconds = r * this.offset, Object.freeze(this)
        }
        var r = 6e4;
        $.extend(i.prototype, {
            valueOf: function () {
                return this.offset
            },
            toString: function () {
                return this.label
            },
            toJSON: function () {
                return this.name
            },
            utcToLocal: function (e) {
                return new DateWithOffset(e, this)
            }
        }), i.toString = function () {
            return "TimeZone"
        }, i.Local = function () {
            var e = -(new Date).getTimezoneOffset(),
                t = e < 0 ? "-" : "+",
                n = Math.abs(e),
                r = Math.floor(n / 60),
                s = n - 60 * r;
            r < 10 && (r = "0" + r), s < 10 && (s = "0" + s);
            var o = "%@%@:%@".fmt(t, r, s);
            return new i("-", e, o)
        }(), n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/time_zones": function (e, t, n) {
        var r = t("models/time_zone"),
            i = Zendesk.TicketFieldCollection = Em.ResourceCollection.extend({
                url: "/api/v2/time_zones",
                type: Object,
                expireIn: 31536e3,
                parse: function (e) {
                    var t = (e || {}).time_zones;
                    return _.map(t, function (e) {
                        return new r(e.name, e.offset, e.formatted_offset)
                    })
                },
                findByName: function (e) {
                    return this.find(function (t) {
                        return t.name === e
                    })
                },
                all: function () {
                    return this.get("content")
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "All Time Zones"
                }
            });
        Object.defineProperties(i, {
            Local: {
                value: r.Local,
                writable: !1
            }
        }), n.exports = i
    }
}), this.require.define({
    "initializers/time_zones": function (e, t, n) {
        n.exports = function () {
            t("models/time_zones").instance().fetch({
                async: !1
            })
        }
    }
}), this.require.define({
    "initializers/update_messaging": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = t("lib/growl");
        n.exports = function () {
            var e = function (e) {
                i.hideErrors(), i.notice(I18n.t("txt.model.updated", {
                    name: e && e.get("name")
                }), {
                    life: 1250
                })
            }, t = function (e) {
                    r.trigger("@user:was_updated", e.get("user") || e)
                }, n = function () {
                    r.on("@user:was_updated", e), r.on("@organization:was_updated", e), r.on("@identity:was_updated", t), r.on("@group_memberships:was_updated", t)
                };
            n()
        }
    }
}), this.require.define({
    "helpers/action_with_event": function (e, t, n) {
        function i(e, t, n) {
            var r = [],
                i;
            return e.isState && typeof e.send == "function" ? (i = e.send, r.push(t)) : i = e[t], r.push(n), i.apply(e, r)
        }

        function o(e, t, n, r, o) {
            var u = (++Ember.$.uuid).toString();
            return s[u] = {
                eventName: t,
                handler: function (t) {
                    return t.view = r, t.context = o, i(n, e, t)
                }
            }, r.on("willRerender", function () {
                delete s[u]
            }), r.on("willDestroyElement", function () {
                delete s[u]
            }), u
        }

        function a() {
            if (u) return;
            Ember.EventDispatcher.reopen({
                setupHandler: function (e, t, n) {
                    this._super.apply(this, arguments), e.delegate("[data-ember-action-with-event]", t + ".ember", function (e) {
                        var t = Ember.$(e.currentTarget).attr("data-ember-action-with-event"),
                            r = s[t],
                            i = r.handler;
                        if (r.eventName === n) return i(e)
                    })
                }
            }), u = !0
        }

        function f(e, t) {
            var n = t.hash || {}, i = n.on || "click",
                s = t.data.view,
                u, a, f;
            s.isVirtual && (s = s.get("parentView")), n.target ? u = r(this, n.target, t) : (f = t.data.keywords.controller, f && (u = r(f, "target"))), u = u || s, a = n.context ? r(this, n.context, t) : t.contexts[0];
            var l = o(e, i, u, s, a);
            return new Ember.Handlebars.SafeString('data-ember-action-with-event="' + l + '"')
        }
        var r = Ember.get,
            r = Ember.Handlebars.get,
            s = {}, u = !1;
        f.initialize = a, n.exports = f
    }
}), this.require.define({
    "helpers/bound": function (e, t, n) {
        var r = Em.View.extend({
            init: function () {
                this._super.apply(this, arguments);
                var e = this.get("templateContext"),
                    t, n, r = {}, i = this;
                t = function () {
                    i.get("isDestroyed") || i.rerender()
                }, n = function () {
                    Em.run.once(t)
                }, this.set("invoker", n), this.get("path").split(" ").forEach(function (t) {
                    Em.addObserver(e, t, n)
                }, this)
            },
            destroy: function () {
                var e = this.get("templateContext"),
                    t = this.get("invoker");
                this.get("path").split(" ").forEach(function (n) {
                    Em.removeObserver(e, n, t)
                }, this), this._super.apply(this, arguments)
            }
        });
        n.exports = function (e, t) {
            return t.hash.path = e, t.hash.templateContext = this, Em.Handlebars.helpers.view.call(this, r, t)
        }
    }
}), this.require.define({
    "lib/views/bound_view": function (e, t, n) {
        n.exports = Em.View.extend({
            update: function () {
                this.get("isDestroyed") || this.rerender()
            }.observes("value")
        })
    }
}), this.require.define({
    "lib/timezones/timezone": function (e, t, n) {
        function s(e) {
            return i.findByName(e) || r.Local
        }
        var r = t("models/time_zone"),
            i = t("models/time_zones").instance(),
            o = {
                getDate: function (e, t) {
                    return Ember.deprecate("Timezone.getDate is deprecated. Use models/time_zone."), s(t).utcToLocal(e)
                },
                getTimeZoneOffset: function (e) {
                    Ember.deprecate("Timezone.getTimeZoneOffset is deprecated. Use models/time_zone.");
                    var t = s(e),
                        n = t.formattedOffset,
                        r = /^GMT(.+):(.+)$/.exec(n);
                    return {
                        hours: r[1],
                        minutes: r[2]
                    }
                },
                _getOffsetInMilliseconds: function (e) {
                    Ember.deprecate("Timezone._getOffsetInMilliseconds is deprecated. Use models/time_zone.");
                    var t = 6e4,
                        n = parseInt(e.hours, 10) * 60 + parseInt(e.minutes, 10);
                    return n * t
                }
            };
        n.exports = Object.seal(o)
    }
}), this.require.define({
    "lib/views/timestamp_view": function (e, t, n) {
        var r = function (e) {
            var t = Ember.get("Zendesk.currentUser.timeZone");
            return t && t.utcToLocal(e)
        }, i = function () {
                return r(new Date)
            }, s = function (e, t) {
                return e.getYear() === t.getYear() && e.getMonth() === t.getMonth() && e.getDate() === t.getDate()
            }, o = function (e) {
                return s(e, i())
            }, u = function (e) {
                var t = i();
                return t.setDate(i().getDate() - 1), s(e, t)
            }, a = function (e, t) {
                var n = 36e5 * t;
                return i().getTime() - e.getTime() < n
            }, f = function (e) {
                return a(e, 144)
            }, l = function (e) {
                return a(e, 1)
            }, c = function (e) {
                return e.getFullYear() === i().getFullYear()
            }, h = function (e, t, n) {
                var r, s;
                if (!t) c(e) ? r = "timestamp.formats.for_this_year" : r = "timestamp.formats.for_before_this_year";
                else {
                    if (l(e)) return I18n.t("timestamp.formats.this_hour", {
                        time_difference: I18n.distanceOfTimeInWords(i(), e)
                    });
                    o(e) ? r = "timestamp.formats.for_today" : u(e) ? r = "timestamp.formats.for_yesterday" : f(e) ? r = "timestamp.formats.this_week" : c(e) ? r = "timestamp.formats.for_this_year" : r = "timestamp.formats.for_before_this_year"
                }
                return s = I18n.t(r), n && r.indexOf("this_year") !== -1 && (s = s.replace(" %H:%M", "")), e.strftime(s)
            }, p = t("lib/views/bound_view").extend({
                render: function (e) {
                    var t = this.get("value");
                    if (!t) return;
                    var n = {
                        relative: !this.get("nonRelative"),
                        live: !this.get("nonLive"),
                        full: this.get("full")
                    };
                    e.push(p.renderDateTime(t, n))
                }
            });
        p.reopenClass({
            renderDisplayDate: h,
            renderDateTime: function (e, t) {
                t = t || {}, e = r(e);
                var n = "";
                return t.live && (n = "live"), t.full && (n += " full"), n !== "" && (n = 'class="' + $.trim(n) + '" '), e ? "<time " + n + 'datetime="' + e.to_s("date.formats.xml_schema", !0) + '" title="' + e.to_s("time.formats.long") + '">' + h(e, t.relative, !t.full) + "</time>" : ""
            }
        }), $(document).ready(function () {
            setInterval(function () {
                var e, t, n = $("time.live");
                for (var i = 0; i < n.length; i++) e = $(n[i]), t = r(new Date(e.attr("datetime"))), e.text(h(t, !0, !e.hasClass("full")))
            }, 6e4)
        }), n.exports = p
    }
}), this.require.define({
    "helpers/bound_timestamp": function (e, t, n) {
        var r = t("lib/views/timestamp_view");
        n.exports = function (e, t) {
            return t.hash.valueBinding = e, Em.Handlebars.helpers.view.call(this, r, t)
        }
    }
}), this.require.define({
    "helpers/collection_module": function (e, t, n) {
        n.exports = function (e, n) {
            var r = "_collectionKlass_" + e.replace(/\//g, "_").camelize();
            return this.set(r, t(e)), Em.Handlebars.helpers.collection.call(this, r, n)
        }
    }
}), this.require.define({
    "components/simple_content": function (e, t, n) {
        n.exports = t("lib/component").extend({
            content: null,
            text: Em.computed.oneWay("content"),
            didInsertElement: function () {
                this.textDidChange()
            },
            textDidChange: function () {
                if (this.get("state") !== "inDOM") return;
                var e = this.get("text"),
                    t = this.isHtmlSafe(e) ? "html" : "text";
                this.$()[t]("" + e)
            }.observes("text"),
            isHtmlSafe: function (e) {
                return e instanceof Handlebars.SafeString
            }
        }).reopenClass({
            toString: function () {
                return "SimpleContentComponent"
            }
        })
    }
}), this.require.define({
    "helpers/currency": function (e, t, n) {
        var r = t("components/simple_content").extend({
            tagName: "span",
            content: function () {
                var e = this.get("amount"),
                    t = isNaN(this.get("precision")) ? 2 : parseInt(this.get("precision"), 10),
                    n = e != null && !isNaN(e) ? e.toFixed(t) : "";
                return "$%@".fmt(n)
            }.property("amount").cacheable()
        });
        n.exports = function (e, t) {
            return t.hash.amountBinding = e, Em.Handlebars.helpers.view.call(this, r, t)
        }
    }
}), this.require.define({
    "helpers/lowercase": function (e, t, n) {
        var r = t("components/simple_content").extend({
            tagName: "span",
            value: null,
            content: function () {
                var e = this.get("value") || "";
                return e.toLowerCase()
            }.property("value")
        });
        n.exports = function (e, t) {
            return t.hash.valueBinding = e, Em.Handlebars.helpers.view.call(this, r, t)
        }
    }
}), this.require.define({
    "lib/profile_tracker": function (e, t, n) {
        function f(e) {
            var t = o + ":";
            s == "user_profile" && !u && h(), u && (t = u + ":" + t), r(t + e, s, !1)
        }

        function l(e, t) {
            v(), a = p(), o = t, s = e
        }

        function c(e) {
            i = !0, f(e)
        }

        function h() {
            u = Zd.workspaces.get("current.user.role")
        }

        function p() {
            return window.location.hash.substring(0, window.location.hash.lastIndexOf("/"))
        }

        function d() {
            return p() == a
        }

        function v() {
            if (!s || d()) return;
            i || f("none"), i = !1, s = null, o = null, u = null, a = null
        }
        var r = t("lib/tracking"),
            i = !1,
            s = null,
            o = null,
            u = null,
            a = null;
        n.exports = Object.seal({
            init: l,
            track: c,
            reset: v
        })
    }
}), this.require.define({
    "lib/views/navbar": function (e, t, n) {
        var r = t("lib/profile_tracker"),
            i = t("lib/utils").htmlEscape,
            s = t("components/simple_content").extend({
                tagName: "a",
                attributeBindings: ["href"],
                classNameBindings: ["content.active"],
                href: Em.computed.oneWay("content.href"),
                text: function () {
                    var e = i(this.get("content.displayText")),
                        t = this.get("content.count");
                    return t && (e += " <span class='count'>(%@)</span>".fmt(t)), new Handlebars.SafeString(e)
                }.property("content.displayText", "content.count"),
                click: function () {
                    r.track("conversation:" + this.get("content.name"))
                }
            });
        n.exports = Em.CollectionView.extend({
            tagName: "nav",
            itemViewClass: s
        })
    }
}), this.require.define({
    "helpers/navbar": function (e, t, n) {
        n.exports = function (e, t) {
            return t = t || {}, t.hash = $.extend({
                contentBinding: e
            }, t.hash || {}), Em.Handlebars.helpers.collection_module.call(this, "lib/views/navbar", t)
        }
    }
}), this.require.define({
    "helpers/percent": function (e, t, n) {
        var r = t("components/simple_content").extend({
            tagName: "span",
            content: function () {
                var e = this.get("number") || 0;
                return e + "%"
            }.property("number").cacheable()
        }),
            i = function (e, t) {
                return t.hash.numberBinding = e, Em.Handlebars.helpers.view.call(this, r, t)
            };
        n.exports = i
    }
}), this.require.define({
    "helpers/render_as_text": function (e, t, n) {
        n.exports = function (e) {
            var t = this.get(e);
            return $("<div>").html(t || "").text()
        }
    }
}), this.require.define({
    "lib/auto_linker": function (e, t, n) {
        var r = t("lib/utils"),
            i = '<a href="$1" target="_blank" tabindex="-1">$1</a>';
        n.exports = Object.freeze({
            link: function (e) {
                return typeof e == "string" && e.length > 0 ? e.replace(r.getUrlRe(), i) : ""
            }
        })
    }
}), this.require.define({
    "helpers/render_comment": function (e, t, n) {
        var r = t("lib/utils").htmlEscape,
            i = t("lib/auto_linker");
        n.exports = function (e) {
            var t = r($.trim(Em.get(this, e)));
            t = t.replace(/\s*\n\s*\n\s*/g, "\n\n"), t = i.link(t);
            var n = t.split("\n-- \n");
            if (n.length > 1) {
                var s = n.pop();
                t = n.join(" "), t += '<div class="signature_toggle">%@</div><div class="signature">%@</div>'.fmt(I18n.t("event.comment_show_signature.label"), s)
            }
            return new Handlebars.SafeString(t)
        }
    }
}), this.require.define({
    "helpers/timestamp": function (e, t, n) {
        var r = t("lib/views/timestamp_view");
        n.exports = function (e, t) {
            var n = Em.get(this, e);
            if (n) {
                var i = {
                    live: t.hash.live === "true",
                    relative: t.hash.relative === "true",
                    full: t.hash.full === "true"
                };
                return new Handlebars.SafeString(r.renderDateTime(n, i))
            }
            return ""
        }
    }
}), this.require.define({
    "helpers/truncate_and_trim": function (e, t, n) {
        n.exports = function (e, t) {
            var n = $.trim(Em.get(this, e)),
                r = parseInt(t.hash.length, 10) || 350;
            return n.length > r && (n = n.substring(0, r) + I18n.t("txt.ellipsis")), n.replace(/\n+/g, "\n")
        }
    }
}), this.require.define({
    "helpers/unbound": function (e, t, n) {
        n.exports = function (e) {
            return Em.get(this, e)
        }
    }
}), this.require.define({
    "helpers/unbound_if": function (e, t, n) {
        n.exports = function (e, t) {
            var n = Ember.get(this, e, !1);
            return n === undefined && Ember.isGlobalPath(e) && (n = Ember.get(window, e)), n ? t.fn(this) : t.inverse(this)
        }
    }
}), this.require.define({
    "helpers/uppercase": function (e, t, n) {
        var r = t("components/simple_content").extend({
            tagName: "span",
            value: null,
            content: function () {
                var e = this.get("value") || "";
                return e.toUpperCase()
            }.property("value")
        });
        n.exports = function (e, t) {
            return t.hash.valueBinding = e, Em.Handlebars.helpers.view.call(this, r, t)
        }
    }
}), this.require.define({
    "helpers/view_module": function (e, t, n) {
        n.exports = function (e, n) {
            return Em.Handlebars.helpers.view.call(this, t(e), n)
        }
    }
}), this.require.define({
    "helpers/when": function (e, t, n) {
        var r = t("lib/views/bound_view").extend({
            tagName: "span",
            render: function (e) {
                return this.get("value") || this.set("template", this.get("inverseTemplate")), this._super(e)
            }
        });
        n.exports = function (e, t) {
            return t.hash.valueBinding = e, t.hash.inverseTemplate = t.inverse, Em.Handlebars.helpers.view.call(this, "Zendesk.WhenView", t)
        }
    }
}), this.require.define({
    "lib/channels/get_flag_by_phone_number": function (e, t, n) {
        var r = t("lib/channels/country_number_helper"),
            i = '<div class="flag-icon flags-%@"></div>';
        n.exports = function (e, t) {
            var n = Em.get(this, e),
                s = r.getCountry(n);
            return s ? new Handlebars.SafeString(i.fmt(s.get("code").toLowerCase())) : ""
        }
    }
}), this.require.define({
    "lib/component": function (e, t, n) {
        function r(e) {
            var t = e.replace(/_/g, "-"),
                n = /^[a-z]+(-[a-z]+)+$/.test(t);
            if (!n) throw new Error(e + " is not a valid component name");
            return t
        }

        function i(e, n) {
            var r;
            try {
                r = t("components/" + e)
            } catch (i) {
                r = o
            }
            return r = r.extend({
                template: n
            }).reopenClass({
                toString: function () {
                    return "Component " + e
                }
            }),
            function (e) {
                return Em.Handlebars.helpers.view.call(this, r, e)
            }
        }

        function s(e, t) {
            var n = i(e, t);
            return Em.Handlebars.registerHelper(r(e), n), n
        }
        var o = Ember.View.extend({
            _templateContext: function (e, t) {
                return arguments.length > 1 ? t : this
            }.property()
        }).reopenClass({
            toString: function () {
                return "Zendesk.Component"
            },
            define: s
        });
        n.exports = o
    }
}), this.require.define({
    "lib/define_component": function (e, t, n) {
        function o(e) {
            var t = "templates/components/" + e;
            return Ember.TEMPLATES[t]
        }
        var r = t("lib/logging/console_logger"),
            i = new r,
            s = t("lib/component");
        n.exports = function (t) {
            var n = o(t);
            if (n) try {
                var r = s.define(t, n);
                return i.debug("defined component for:" + t), r
            } catch (u) {
                return null
            }
        }
    }
}), this.require.define({
    "initializers/view_helpers": function (e, t, n) {
        function i(e, n) {
            try {
                var r = t("helpers/" + e);
                return n.registerHelper(e, r), r
            } catch (i) {
                return null
            }
        }

        function s(e) {
            function s(s) {
                var o = s.underscore(),
                    u = i(o, e);
                if (u) {
                    var a = r.call(arguments, 1);
                    return u.apply(this, a)
                }
                var f = t("lib/define_component")(o);
                if (!f) return n.apply(this, arguments)
            }
            var n = e.helpers.helperMissing;
            e.registerHelper("helperMissing", s)
        }
        var r = [].slice;
        n.exports = function () {
            s(Handlebars), s(Ember.Handlebars), Handlebars.registerHelper("u", t("helpers/unbound")), "view_module unboundIf collection_module navbar".w().forEach(function (e) {
                Handlebars.registerHelper(e, t("helpers/" + e.underscore()))
            }), Handlebars.registerHelper("getFlagByPhoneNumber", t("lib/channels/get_flag_by_phone_number")), t("helpers/action_with_event").initialize()
        }
    }
}), this.require.define({
    "initializers/watch_for_updates": function (e, t, n) {
        n.exports = function () {
            var n = t("lib/lotus/version_watcher"),
                r = null,
                i = null;
            r = new n(function (e) {
                if (i === null) {
                    i = e;
                    return
                }
                e.version && e.version !== i.version && (i = e, $("#reload_notice").modal())
            }), r.startWatching();
            var s = t("lib/lotus/idle_timer").instance();
            s.on("idle", function () {
                r.stopWatching()
            }), s.on("active", function () {
                r.startWatching()
            })
        }
    }
}), this.require.define({
    "lib/x_frame_com": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = function (e) {
                var t = window.location,
                    n = t.protocol + "//" + t.host;
                return e === n
            }, s = function (e) {
                if (!i(e.origin)) return;
                var t;
                try {
                    t = e.data && JSON.parse(e.data) || {}
                } catch (n) {
                    return
                }
                if (!t.target) return;
                r.trigger("@action:" + t.target, t)
            };
        n.exports = Object.freeze({
            setup: function () {
                window.addEventListener("message", s, !1)
            }
        })
    }
}), this.require.define({
    "initializers/x_frame_init": function (e, t, n) {
        n.exports = function () {
            t("lib/x_frame_com").setup()
        }
    }
}), this.require.define({
    "initializers/x_frame_routing": function (e, t, n) {
        function i(e) {
            e && e.memo && Zendesk.Routes.goToHash(e.memo.hash)
        }
        var r = t("lib/lotus/global_events");
        n.exports = function () {
            r.on("@action:route", i)
        }
    }
}),
function (e) {
    function i(e, t) {
        r.info("%@: done (%@ms)".fmt(e, t))
    }

    function s(e, n) {
        r.groupCollapsed(e), i(e, t(n)), r.groupEnd(e)
    }

    function o() {
        var e = Array.prototype.slice.call(arguments);
        return t(function () {
            e.forEach(function (e) {
                var n = require("initializers/%@".fmt(e)),
                    r = t(n);
                i(e, r)
            })
        })
    }
    require("initializers/ecmascript5")();
    var t = require("lib/utils").benchmark,
        n = require("lib/logging/console_logger"),
        r = new n;
    s("Initializers", function () {
        o("session", "core_extensions", "view_helpers", "ember_resource_settings", "ember_resource_error_handler", "ember_resource_push_transport", "silence_render_destroyed_view", "ajax_transport", "application", "app_market", "keyboard_shortcuts", "sammy", "routes", "watch_for_updates", "external_links_guard", "popover_extensions", "i18n", "browser_closing", "x_frame_init", "x_frame_routing", "time_zones", "keyboard_listener_init", "identities_controllers", "update_messaging", "pubsub")
    }), Zendesk.Launchpad = {}, $(function () {
        s("onDOMLoad Initializers", function () {
            o("error_reporting", "growl", "singletons", "context_menu_view", "idle_timer"), require("lib/apps_post_installation").init(), r.info("lib/apps_post_installation: done"), Zendesk.set("modulesReady", !0)
        })
    })
}(this),
function () {
    Zendesk.Views = Zendesk.Views || {}, Zendesk.Views.LinkTo = Ember.View.extend({
        tagName: "a",
        attributeBindings: ["href", "type", "target", "title"],
        href: function () {
            var e = this.get("content");
            return e ? Zendesk.Helpers.linkTo.urlFor(e) : null
        }.property("content").cacheable(),
        didInsertElement: function () {
            this._super.apply(this, arguments), this.toggle()
        },
        toggle: function () {
            this.$().toggle(this.get("content") != null)
        }.observes("content")
    }), Zendesk.Helpers = Zendesk.Helpers || {}, Zendesk.Helpers.linkTo = function (e, t) {
        return t.hash.contentBinding = e, Ember.Handlebars.helpers.view.call(this, "Zendesk.Views.LinkTo", t)
    }, Zendesk.Helpers.linkTo.urlFor = function (e) {
        return "" + e
    }, Handlebars.registerHelper("linkTo", Zendesk.Helpers.linkTo)
}(), this.require.define({
    "lib/views/form_field_view": function (e, t, n) {
        var r = Em.View.extend({
            configOptions: Em.computed.emptyObject(),
            userDidChangeValue: Em.K,
            defaultValueLabel: "-",
            backLinkLabel: I18n.t("txt.control.menu.back_link_label"),
            didInsertElement: function () {
                this._super(), this.delegate && this.delegate.destroy && this.delegate.destroy(), this.buildDelegate()
            },
            buildDelegate: Em.K,
            updateDelegate: function () {
                var e = this.get("value");
                this.delegate && this.delegate.value !== e && this.delegate.setValue(e, "update")
            },
            delegateDidChange: function (e, t) {
                if (t && t.userInitiated) {
                    var n = this.delegate.value === "" ? null : this.delegate.value;
                    n !== this.get("value") && (this.set("value", n), Em.run.next(this, this.userDidChangeValue))
                }
            },
            valueDidChange: function () {
                Em.run.next(this, function () {
                    Em.run.next(this, this.updateDelegate)
                })
            }.observes("value"),
            disableDidChange: function () {
                if (!this.delegate || !this.delegate.disable || !this.delegate.enable) return;
                this.get("disabled") ? this.delegate.disable() : this.delegate.enable()
            }.observes("disabled"),
            destroy: function () {
                this.delegate && (this.delegate.destroy && this.delegate.destroy(), this.delegate = null), this._super.apply(this, arguments)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/core_widgets/menu_utils": function (e, t, n) {
        var r = function () {
            return this
        }, i = function (e) {
                if (arguments.length < 2) return e;
                for (var t, n, r = 1; r < arguments.length; r++) {
                    n = arguments[r];
                    for (t in n) {
                        if (!n.hasOwnProperty(t)) continue;
                        if (e[t] != null) continue;
                        e[t] = n[t]
                    }
                }
                return e
            }, s = function (e) {
                if (arguments.length < 2) return e;
                for (var t, n, r = 1; r < arguments.length; r++) {
                    n = arguments[r];
                    for (t in n) {
                        if (!n.hasOwnProperty(t)) continue;
                        e[t] = n[t]
                    }
                }
                return e
            }, o = function (e, t) {
                var n = function () {
                    var n = this._super;
                    this._super = e;
                    var r = t.apply(this, arguments);
                    return this._super = n, r
                };
                return n
            }, u = function (e) {
                if (arguments.length < 2) return e;
                for (var t, n, r = 1; r < arguments.length; r++) {
                    n = arguments[r];
                    for (t in n) {
                        if (!n.hasOwnProperty(t)) continue;
                        typeof e[t] == "function" && typeof n[t] == "function" ? e[t] = o(e[t], n[t]) : e[t] = n[t]
                    }
                }
                return e
            }, a = function (e) {
                for (var t in e) e.hasOwnProperty(t) && (e[t] = typeof e[t] == "function" ? r : null)
            }, f = {
                extend: function () {
                    if (arguments.length === 0) return this;
                    var e = Array.prototype.slice.call(arguments);
                    for (var t = 0; t < e.length; t++) {
                        var n = e[t];
                        if (n == null) continue;
                        typeof n == "function" ? this.addProperties(n.prototype) : this.addProperties(n)
                    }
                    return this
                },
                addStaticProperties: function () {
                    if (arguments.length === 0) return this;
                    var e = Array.prototype.slice.call(arguments);
                    return e.unshift(this), u.apply(null, e), this
                },
                addProperties: function () {
                    if (arguments.length === 0) return this;
                    var e = Array.prototype.slice.call(arguments);
                    return e.unshift(this.prototype), u.apply(null, e), this.prototype.constructor = this, this
                }
            }, l = function () {
                var e = function () {
                    this._super = r, this.init && this.init.apply(this, arguments)
                };
                return s(e, f), e.extend.apply(e, arguments), e
            }, c = function (e) {
                var t = {}, n = function (n) {
                        if (t.hasOwnProperty(n)) return t[n];
                        var r = e(n);
                        return t[n] = r, r
                    };
                return n
            }, h = function () {
                function r(t) {
                    return e[t] || "&amp;"
                }

                function i(e) {
                    return n.test(e) ? e.replace(t, r) : e
                }
                var e = {
                    "<": "&lt;",
                    ">": "&gt;",
                    '"': "&quot;",
                    "'": "&#x27;",
                    "`": "&#x60;"
                }, t = /&(?!\w+;)|[<>"'`]/g,
                    n = /[&<>"'`]/;
                return i
            }(),
            p = function (e, t) {
                $.fn[e] = function (n) {
                    n = n || {};
                    var r = n.domHolder = this[0];
                    if (!r) return this;
                    var i = new t(n);
                    return i.addObserver("destroy", function () {
                        $(r).data(e, null)
                    }), this.eq(0).data(e, i), this
                }
            }, d = function (e) {
                this.idPrefix = e || "zd_mn_", this.counter = 0
            };
        d.prototype.getUniqId = function (e) {
            return (e || this.idPrefix) + this.counter++
        };
        var v = new d,
            m = function (e) {
                return e.replace(/[\-\[\]\{\}\(\)\*\+\?\.\,\\\^\$\|#\s]/g, "\\$&")
            }, g = function (e) {
                return document.getElementById(e)
            }, y = {
                setOptions: function (e, t) {
                    this.options || (this.options = e || {}, i(this, this.options)), i(this, t)
                }
            }, b = {
                trigger: function (e, t) {
                    t = t || {}, t.eventSource = this, $(document).trigger("zd_" + e + "." + this.id, t)
                },
                addObserver: function (e, t) {
                    $(document).bind("zd_" + e + "." + this.id, t)
                },
                removeObserver: function (e, t) {
                    $(document).unbind("zd_" + e + "." + this.id, t)
                },
                removeObservers: function () {
                    $(document).unbind("." + this.id)
                },
                forward: function (e, t, n, r, i) {
                    t.addObserver(e, function (e, t) {
                        i && (t = i(t)), r.trigger(n, t)
                    })
                },
                stopForwarding: function (e, t) {
                    t.removeObserver(e)
                }
            }, w = l({
                init: function (e, t) {
                    this.targetObject = e || this, this.hashIds = {}, this.hashValues = {}, this.postParser = t
                },
                reset: function () {
                    this.hashIds = {}, this.hashValues = {}, this.rootItem = null, w.initValue = null
                },
                _resolveInitValue: function () {
                    var e = w.initValue;
                    if (!e && this.rootItem.menu && this.rootItem.menu.length)
                        for (var t in this.hasValues)
                            if (this.hashValues.hasOwnProperty(t) && this.hashValues[t].value != null) {
                                e = this.hashValues[t].value;
                                break
                            }
                    return e
                },
                preParseFilter: function (e) {
                    return e
                },
                parse: function (e) {
                    this.reset(), e = this.preParseFilter(e), this.parseItem({
                        role: "root",
                        children: Object.prototype.toString.call(e) === "[object Array]" ? e : [e]
                    }), this.postParser && this.postParser(this.rootItem), this.targetObject.initValue = w.initValue, this.targetObject.hashIds = this.hashIds, this.targetObject.hashValues = this.hashValues, this.targetObject.rootItem = this.rootItem
                },
                parseItem: function (e, t) {
                    if (!e) return;
                    var n, r, i;
                    e.role === "root" && (this.rootItem = t = {
                        role: "root",
                        id: v.getUniqId()
                    });
                    if (e.children && e.children.length) {
                        n = [], e.role !== "root" && (r = {
                            id: v.getUniqId(),
                            role: "uiBackLink",
                            parentMenu: n,
                            parentItem: t,
                            index: 0,
                            enableHtmlEscape: !0
                        }, this.hashIds[r.id] = r, n[0] = r, t.role = "uiMenuLink"), t.menu = n, n.id = t.id + "_mn", n.parentItem = t, n.parentMenu = t.parentMenu;
                        var s = n.length,
                            o;
                        for (var u = s, a = e.children.length + s; u < a; u++) {
                            o = e.children[u - s];
                            if (!o) continue;
                            i = !0, o.hasOwnProperty("enabled") && (i = o.enabled !== !1), r = {}, r.id = v.getUniqId(), r.data = o, r.type = o.type, r.label = o.label, r.enabled = i, r.index = u, r.parentMenu = n, r.parentItem = t, r.enableHtmlEscape = o.enableHtmlEscape !== !1, n[u] = r, this.hashIds[r.id] = r;
                            if ("id" in o || o.value !== undefined) {
                                var f = o.value == null ? o.id : o.value;
                                r.value = f == null ? this.defaultValue : f, this.hashValues[r.value] = r, o.selected && (w.initValue = r.value)
                            }
                            o.children && o.children.length && this.parseItem(o, r), r.role == null && r.value === undefined && (r.role = "uiLabel")
                        }
                    }
                }
            });
        w.menuModelParsers = {
            LabelConcatenator: l({
                init: function (e, t) {
                    this.delimiter = e || " > ", this.fieldName = t || "concatenatedLabel"
                },
                parse: function (e) {
                    this._processItem(e, "")
                },
                _processItem: function (e, t) {
                    var n;
                    if (e.role === "uiBackLink" && e.role === "uiLabel") return;
                    e[this.fieldName] = t + e.label;
                    if (e.menu)
                        for (var r = 0, i = e.menu.length; r < i; r++) {
                            n = e.menu[r];
                            if (!n.label) continue;
                            this._processItem(n, e.role === "root" ? "" : t + e.label + this.delimiter)
                        }
                }
            })
        };
        var E = l({
            init: function () {
                this.reHighlightWord = null, this.lastWord = null
            },
            render: function (e, t, n) {
                return t = t || "", e = h(e), this.lastWord !== t && (this.reHighlightWord = new RegExp(m(h(t)), "ig")), this.reHighlightWord.test(e) ? e.replace(this.reHighlightWord, function (e) {
                    return '<span class="' + n + '">' + e + "</span>"
                }) : e
            }
        }),
            S = l({
                init: function (e) {
                    this.options = e || {}, this.parser = this.options.parser, this.maxRecords = this.options.maxRecords || Infinity
                },
                loadData: function (e) {
                    this.parser && (e = this.parser.parse(e)), e && e.length > this.maxRecords && (e = e.slice(0, this.maxRecords)), this.onDataReady(e)
                },
                onDataReady: r
            }),
            x = l({
                init: function (e, t, n) {
                    n = n || {}, this.filterWord = "", this.data = [], this.url = t, this.maxRecords = e || 100, this.cache = {}, this.xhr = null, this.curRequestIndex = 0, this.parse = n.parse || this.parse, this.dataFilter = n.dataFilter || this.dataFilter, this.httpMethod = n.httpMethod || "GET"
                }
            }).addProperties({
                onDataReady: r,
                dataFilter: function (e) {
                    return e ? e.users || [] : []
                },
                loadData: function (e, t) {
                    var n = this.dataFilter(e);
                    t && (this.cache[t] = e), this.data = this.parse(n), this.onDataReady(this.data)
                },
                filter: function (e, t) {
                    if (t == null || t === "") {
                        this.resetFilter(), this.abort(), this.loadData();
                        return
                    }
                    t += "";
                    if (t === this.filterWord) return;
                    this.filterWord = t;
                    if (!this.filterWord) return;
                    this.fetch(this.filterWord)
                },
                fetch: function (e) {
                    this.abort(), this.curRequestIndex++;
                    if (this.cache.hasOwnProperty(e)) {
                        this.loadData(this.cache[e]);
                        return
                    }
                    var t = this;
                    (function (n) {
                        t.xhr = $.ajax({
                            type: t.httpMethod,
                            url: t.url.fmt(encodeURIComponent(t.filterWord), t.maxRecords),
                            dataType: "json",
                            success: function (r) {
                                n === t.curRequestIndex && t.loadData(r, e)
                            },
                            error: function (e) {
                                n === t.curRequestIndex && t.loadData()
                            }
                        })
                    })(this.curRequestIndex)
                },
                abort: function () {
                    this.xhr && this.xhr.abort()
                },
                parse: function (e) {
                    if (!e) return [];
                    if (e && e.length === 0) return e;
                    var t = [];
                    for (var n = 0; n < e.length && n < this.maxRecords; n++) t.push({
                        label: e[n].name,
                        value: e[n].id,
                        email: e[n].email
                    });
                    return t
                },
                resetFilter: function () {
                    this.filterWord = ""
                }
            }),
            T = function (e, t) {
                return e.role === "uiBackLink" || e.role === "uiLabel" || e.role === "root" || e[t] == null || e.value == null
            }, N = function (e) {
                var t = function (t, n, r) {
                    var i = t.getWordRegExp(),
                        s = t.filteredField,
                        o, u, a = {};
                    for (var f in n.hashIds) {
                        if (r.length >= t.maxRecords) break;
                        o = n.hashIds[f];
                        if (T(o, s)) continue;
                        if (a[o.value] === 1) continue;
                        a[o.value] = 1;
                        if (e && e(o, t, n, r) !== !0) continue;
                        i.test(o[s]) && (u = r[r.length] = {
                            value: o.value,
                            label: o.label,
                            type: o.type,
                            sourceItem: o
                        }, u[s] = o[s])
                    }
                    return r
                };
                return t
            }, C = l({
                init: function (e, t, n) {
                    this.reset(), this.maxRecords = e || Infinity, this.filteredField = t || "label", this.filterQueue = n || [N()]
                },
                loadData: function (e) {
                    this.data = e, this.onDataReady(e)
                },
                filter: function (e, t) {
                    if (t == null || t === "") {
                        this.filterWord = "", this.loadData([]);
                        return
                    }
                    if (t === this.filterWord) return;
                    this.filterWord = t;
                    if (!this.filterWord) return;
                    var n = [];
                    this.filterQueue.forEach(function (t) {
                        t(this, e, n)
                    }, this), this.loadData(n)
                },
                onDataReady: r,
                getWordRegExp: function () {
                    return this.getRegExp(this.filterWord)
                },
                getRegExp: c(function (e) {
                    return new RegExp(m(e), "i")
                }),
                reset: function () {
                    this.filterWord = "", this.data = []
                }
            });
        C.buildFilter = N;
        var k = l({
            init: function (e) {
                this.dom = e.dom, this.domAux = e.domAux, this.clsZero = e.clsZero, this.state = 0, this.bitMap = {}, this.setup(e.clsStates)
            },
            setup: function (e) {
                this.bitMap = {};
                for (var t = 0, n = 1; t < e.length; t++, n *= 2) this.bitMap[e[t]] = n
            },
            addState: function (e) {
                if (!this.bitMap.hasOwnProperty(e)) return;
                this.state = this.state | this.bitMap[e], this.dom().addClass(e), this.domAux() && this.domAux().addClass(e), this.postStateChange()
            },
            removeState: function (e) {
                if (!this.bitMap.hasOwnProperty(e)) return;
                this.state = this.state & ~this.bitMap[e], this.dom().removeClass(e), this.domAux() && this.domAux().removeClass(e), this.postStateChange()
            },
            postStateChange: function () {
                this.dom()[this.state === 0 ? "addClass" : "removeClass"](this.clsZero), this.domAux() && this.domAux()[this.state === 0 ? "addClass" : "removeClass"](this.clsZero)
            }
        }),
            L = function () {};
        L.prototype = {
            positionMenu: function (e, t, n) {
                var r = this.getAvailableSpaceAbove(t),
                    i = this.getAvailableSpaceBelow(t),
                    s = n || this.determinePosition(e, r, i),
                    o = s === "down" ? i : r;
                return this.adjustMenuSize(e, o), this.positionMenuDom(e.dom[0], t, s), s
            },
            getAvailableSpaceAbove: function (e) {
                return e.getBoundingClientRect().top
            },
            getAvailableSpaceBelow: function (e) {
                return window.innerHeight - e.getBoundingClientRect().bottom
            },
            adjustMenuSize: function (e, t) {
                var n = e.getNaturalCoords().height;
                n > t ? e.setHeight(t) : e.resetHeight()
            },
            determinePosition: function (e, t, n) {
                var r = e.getNaturalCoords().height;
                return r <= n ? "down" : r <= t ? "up" : n > t ? "down" : "up"
            },
            positionMenuDom: function (e, t, n) {
                var r = document.body.scrollTop || document.documentElement.scrollTop,
                    i = document.body.scrollLeft || document.documentElement.scrollLeft,
                    s = t.getBoundingClientRect(),
                    o = Math.floor(s.left) + i,
                    u = Math.floor(s.bottom) + r;
                e.style.left = o + "px", n === "down" ? (e.style.top = u + "px", e.style.bottom = "") : (e.style.top = "", e.style.bottom = $(window).height() - u + t.offsetHeight + "px")
            }
        };
        var A = l({
            init: function () {
                this._monitoringTimer = null
            },
            observeOnce: function (e, t) {
                return this.observe(e, t, !0)
            },
            observe: function (e, t, n) {
                var r = A.getSenseCoords(e);
                clearTimeout(this._monitoringTimer), this._monitoringTimer = setTimeout(function () {
                    this.isChanged(e, r) ? (t(), n && this.stopObserving()) : this.observe(e, t, n)
                }.bind(this), 100)
            },
            isChanged: function (e, t) {
                return this.boundBeforeSensing || (this.boundBeforeSensing = this.beforeSensing.bind(this)), this.boundAfterSensing || (this.boundAfterSensing = this.afterSensing.bind(this)), !! A.senseForCoords(e, t, this.boundBeforeSensing, this.boundAfterSensing)
            },
            stopObserving: function () {
                clearTimeout(this._monitoringTimer)
            },
            beforeSensing: r,
            afterSensing: r,
            destroy: function () {
                this.stopObserving()
            }
        }).addStaticProperties({
            getSenseCoords: function (e) {
                var t = e.getBoundingClientRect();
                return {
                    left: Math.ceil(t.left + 1),
                    top: Math.ceil(t.top + 1),
                    right: Math.ceil(t.right - 2),
                    bottom: Math.ceil(t.bottom - 2)
                }
            },
            senseForCoords: function (e, t, n, r) {
                n && n();
                var i = document.elementFromPoint(t.left, t.top),
                    s = document.elementFromPoint(t.right, t.bottom);
                return r && r(), (i === e ? "" : "tl:") + (s === e ? "" : "br:")
            },
            senseForDom: function (e, t, n) {
                return this.senseForCoords(e, this.getSenseCoords(e), t, n)
            }
        }),
            O = {
                getDomBaseForPositioning: r,
                dom: null,
                position: null,
                clsPositionUp: null,
                verticalMenuPositioner: null,
                domBasePositionObserver: null,
                setPosition: function (e) {
                    this.position = e, this.updatePositionCssClass()
                },
                updatePositionCssClass: function () {
                    this.dom.toggleClass(this.clsPositionUp, this.position === "up"), $(this.domMenuHolder).toggleClass(this.clsPositionUp, this.position === "up")
                },
                positionMenu: function (e, t, n) {
                    var r = this.verticalMenuPositioner.positionMenu(e, t, n);
                    this.setPosition(r)
                },
                observeDomBasePositionOnce: function (e) {
                    this.domBasePositionObserver.observeOnce(this.getDomBaseForPositioning(), e)
                },
                stopObservingDomBasePosition: function () {
                    this.domBasePositionObserver.stopObserving()
                }
            }, M = {
                addScopeClass: function (e) {
                    $(this.domHolder).addClass(e), $(this.dom).addClass(e)
                },
                removeScopeClass: function (e) {
                    $(this.domHolder).removeClass(e), $(this.dom).removeClass(e)
                },
                toggleScopeClass: function (e, t) {
                    $(this.domHolder).toggleClass(e, t), $(this.dom).toggleClass(e, t)
                }
            }, _ = function (e) {
                if (!e) return;
                switch (A.senseForDom(e)) {
                case "tl:":
                    e.scrollIntoView(!0);
                    break;
                case "br:":
                    e.scrollIntoView(!1);
                    break;
                case "tl:br:":
                    e.focus(), e.blur()
                }
            };
        n.exports = Object.seal({
            K: r,
            extend: s,
            defineClass: l,
            escapeRegExp: m,
            escapeHtml: h,
            VerticalMenuPositioner: L,
            DomPositionObserver: A,
            OptionsMixin: y,
            ObservableMixin: b,
            PositionableMixin: O,
            CssScopingMixin: M,
            makePlugin: p,
            domById: g,
            getUniqId: function (e) {
                return v.getUniqId(e)
            },
            cleanObject: a,
            MenuDataParser: w,
            HighlightingRenderer: E,
            FilteringDataSource: C,
            CssClsStateMachine: k,
            SimpleMenuDataSource: S,
            RemoteSearchDataSource: x,
            positionDomIntoView: _
        })
    }
}), this.require.define({
    "lib/core_widgets/menu": function (e, t, n) {
        var r = t("lib/core_widgets/menu_utils"),
            i = r.domById,
            s = r.K,
            o = 1,
            u = 2,
            a = {
                DOWN: 40,
                END: 35,
                ENTER: 13,
                ESCAPE: 27,
                HOME: 36,
                LEFT: 37,
                NUMPAD_ENTER: 108,
                PAGE_DOWN: 34,
                PAGE_UP: 33,
                RIGHT: 39,
                SPACE: 32,
                SHIFT: 16,
                TAB: 9,
                UP: 38
            }, f = {
                value: null,
                defaultValue: "",
                defaultValueLabel: "-",
                backLinkLabel: "Back",
                domHolderSelector: "body",
                disabled: !1,
                transitionMode: "sliding",
                transitionDuration: 300,
                transitionEasing: "easeOutQuad",
                clsRoot: "zd-menu-root",
                clsListHolder: "zd-menu-list-holder",
                clsItem: "zd-menu-item",
                clsBackLink: "zd-menu-back-link",
                clsMenuLink: "zd-menu-link",
                clsLabel: "zd-menu-label",
                clsBaseArrow: "zd-selectmenu-base-arrow zd-icon-triangle-1-s",
                clsItemArrow: "zd-menu-item-arrow zd-icon-triangle-1-e",
                clsBackArrow: "zd-menu-item-arrow zd-icon-triangle-1-w",
                clsMenuItemIcon: "zd-menu-item-icon",
                clsDisabled: "zd-state-disabled",
                clsFocused: "zd-state-focus",
                clsHover: "zd-state-hover",
                clsItemFocused: "zd-item-focus",
                clsItemDisabled: "zd-item-disabled",
                clsAutofitMode: "zd-menu-autofit-mode",
                isVisible: !0,
                autofitMode: !1,
                keyboardCue: !1,
                keyboardCueAction: "select",
                goToStartAfterReachingEnd: !1,
                goToEndAfterReachingStart: !1,
                enableMenuItemIcons: !1,
                enableHtmlEscape: !0
            }, l = r.defineClass().addStaticProperties({
                defaultOptions: f,
                keyCodes: a,
                instances: {},
                registerInstance: function (e) {
                    this.instances[e.id] = e
                },
                unregisterInstance: function (e) {
                    delete this.instances[e.id]
                },
                count: function () {
                    var e = 0;
                    for (var t in this.instances) this.instances.hasOwnProperty(t) && e++;
                    return e
                },
                zombies: function () {
                    var e, t = [];
                    for (var n in this.instances) {
                        if (!this.instances.hasOwnProperty(n)) continue;
                        e = this.instances[n], e.dom && !$.contains(document.body, e.dom[0]) && t.push(e)
                    }
                    return t
                }
            }).addProperties(r.OptionsMixin, r.ObservableMixin, {
                init: function (e) {
                    this.type = "zdMenu", this.rootItem = null, this.activeItem = null, this.focusedItem = null, this.isFocused = !1, this.isInDom = !1, this.isDestroyed = !1, this.isVisible = null, this.isKeyboardCaptured = !1, this.isKeyboardNavigation = !1, this.navigationMode = "mouse", this.inTransition = !1, this.lastKey = null, this.lastIndex = -1, this.lastActiveMenu = null, this.typeToClassMap = null, this.roleToClassMap = null, this.highlighter = null, this.setOptions(e, f), this.parser = new r.MenuDataParser(this, this.postParser), this.roleToClassMap = this.roleToClassMap || {}, this.roleToClassMap.uiBackLink = this.roleToClassMap.uiBackLink || this.clsBackLink, this.roleToClassMap.uiMenuLink = this.roleToClassMap.uiMenuLink || this.clsMenuLink, this.roleToClassMap.uiLabel = this.roleToClassMap.uiLabel || this.clsLabel, this.id = r.getUniqId(), this.domHolder = this.domHolder || $(this.domHolderSelector)[0], this.rootItem = {
                        role: "root"
                    }, this.hashIds = {}, this.hashValues = {}, this.value = this.value != null ? this.value : this.defaultValue, this.lastValue = null, this.renderDisplayValue = this.options.renderDisplayValue, this.renderItemContent = this.options.renderItemContent || this.renderItemContent, l.registerInstance(this), this.initUI(), this.data && this.loadData(this.data)
                },
                destroy: function () {
                    this.destroyUI(), this.removeObservers(), l.unregisterInstance(this), this.onDestroy(), r.cleanObject(this), this.isDestroyed = !0
                },
                reset: function () {
                    this.setValue(this.options.value)
                },
                resetFull: function () {
                    this.resetUI(), this.rootItem = {
                        role: "root"
                    }, this.data = {}, this.hashIds = {}, this.hashValues = {}, this.value = this.defaultValue, this.lastValue = null, this.activeItem = null, this.focusedItem = null
                },
                loadData: function (e) {
                    var t = this.isFocused;
                    this.resetFull(), this.data = e, this.parser.parse(this.data), this.onDataReady(), this.lastValue = null, this.initValue == null && (this.initValue = this.defaultValue), this.setValue(this.initValue, "init"), this.resolveAutofitMode(), this.syncViewWithValue(), this.syncViewWithMode(), t && this.focus()
                },
                getValue: function () {
                    return this.value
                },
                setValue: function (e, t) {
                    var n = this.getItemByValue(e);
                    if (this.itemIsDisabled(n)) return !1;
                    var r = {
                        oldValue: this.lastValue,
                        value: e,
                        userInitiated: t === "click" || t === "keyboard" || t === "keyboardCue",
                        source: t,
                        record: n
                    };
                    this.onChangeRequest(r);
                    if (e == null || !n) e = this.defaultValue;
                    this.value = e, this.lastValue !== this.value && (this.lastValue = this.value, this.activeItem = this.hashValues[this.value], this.syncViewWithValue(), this.onChange(r), this.trigger("change", r))
                },
                getDisplayValue: function () {
                    return this.activeItem ? this.options.renderDisplayValue ? this.options.renderDisplayValue(this.activeItem, r.escapeHtml) : this.enableHtmlEscape && this.activeItem.enableHtmlEscape ? r.escapeHtml(this.activeItem.label) : this.activeItem.label : this.defaultValueLabel
                },
                getParentMenu: function (e) {
                    var t = e.parentItem;
                    return t == null || t && t.role === "root" ? null : t.parentMenu
                },
                getItemByValue: function (e) {
                    return this.hashValues ? this.hashValues[e] : null
                },
                domToItem: function (e) {
                    return this.hashIds[typeof e == "string" ? e : e.id]
                },
                itemToDom: function (e) {
                    return i(e.id)
                },
                itemHasMenu: function (e) {
                    return !!e.menu && !! e.menu.length
                },
                itemIsDisabled: function (e) {
                    return !!e && !! e.hasOwnProperty("enabled") && e.enabled === !1
                },
                itemIsFocusable: function (e) {
                    return e != null && e.role !== "uiLabel" && !this.itemIsDisabled(e)
                },
                itemIsBackHelper: function (e) {
                    return e.role === "uiBackLink"
                },
                firstSelectableMenuItem: function (e) {
                    return e && this._getNextFocusableItem(e, 0)
                },
                resolveAutofitMode: function () {
                    if (this.rootItem && this.rootItem.menu) {
                        var e = this.rootItem.menu;
                        for (var t = 0; t < e.length; t++)
                            if (e[t].menu) {
                                this.autofitMode = !1;
                                return
                            }
                    }
                    this.autofitMode = !0
                },
                initUI: function () {
                    this.htmlBuffer = this.render(), this.putInDom(this.domHolder), this.postDomInsertionSetup()
                },
                destroyUI: function () {
                    this.isInDom && (this.dom.unbind(), this.dom.remove(), $(document).unbind("click." + this.id)), this.isInDom = !1, this.domHolder = null
                },
                resetUI: function () {
                    this.isInDom && (this.blur(), this.dom.removeClass(this.clsHover).html(""))
                },
                render: function () {
                    return this.menuItemIconHtml = this.enableMenuItemIcons ? this.renderItemIcon() : "", '<div id="' + this.id + '" tabindex="0" class="' + this.clsRoot + '"' + (this.isVisible ? "" : ' style="display:none"') + "></div>"
                },
                renderMenu: function (e) {
                    if (!e) return "";
                    var t = "";
                    for (var n = 0, r = e.length; n < r; n++) t += this.renderItem(e[n]);
                    return t
                },
                renderItem: function (e) {
                    var t, n = this.clsItem;
                    return this.typeToClassMap && e.type && this.typeToClassMap[e.type] && (n += " " + this.typeToClassMap[e.type]), this.roleToClassMap && e.role && this.roleToClassMap[e.role] && (n += " " + this.roleToClassMap[e.role]), this.itemIsDisabled(e) && (n += " " + this.clsItemDisabled), e.menu ? t = '<span class="' + this.clsItemArrow + '"></span>' : e.role === "uiBackLink" ? (e.label = this.backLinkLabel, t = '<span class="' + this.clsBackArrow + '"></span>') : t = "", '<li id="' + e.id + '" class="' + n + '" role="presentation">' + t + this.menuItemIconHtml + '<a tabindex="-1" role="menuitem">' + this.renderItemContent(e, this.highlighter, r.escapeHtml) + "</a>" + "</li>"
                },
                renderItemIcon: function () {
                    return '<span class="' + this.clsMenuItemIcon + '"></span>'
                },
                renderItemContent: function (e, t, n) {
                    return t ? t(e.label) : n && this.enableHtmlEscape && e.enableHtmlEscape ? n(e.label) : e.label
                },
                putInDom: function (e) {
                    if (this.isInDom) return;
                    $(e || this.domHolder).append(this.htmlBuffer), this.dom = $("#" + this.id), this.isInDom = !0, this.syncViewWithMode()
                },
                putMenuInDom: function (e) {
                    if (!e) return null;
                    if (e && e.length && e.isInDom) return i(e.id);
                    var t = document.createElement("ul");
                    t.setAttribute("role", "menu"), t.id = e.id, t.className = this.clsListHolder, t.style.display = "none", t.innerHTML = this.renderMenu(e), this.dom[0].appendChild(t), e.isInDom = !0;
                    var n = e.length - 1;
                    while (n--) e[n].isInDom = !0;
                    return t
                },
                postDomInsertionSetup: function () {
                    this.dom.bind("mouseup", this.onRootMouseUp.bind(this)).bind("mousedown", this.onRootMouseDown.bind(this)).bind("mousemove", this.onRootMouseMove.bind(this)).bind("mouseover", this.onRootMouseOver.bind(this)).bind("mouseout", this.onRootMouseOut.bind(this)).bind("mouseenter", this.onRootMouseEnter.bind(this)).bind("mouseleave", this.onRootMouseLeave.bind(this)).bind("focus", this.onRootFocus.bind(this)).bind("blur", this.onRootBlur.bind(this)), $(document).bind("click." + this.id, this.onDocumentClick.bind(this))
                },
                setMenuSizes: function (e) {
                    if (!this.dom) return;
                    e = e || $(this.domHolder);
                    var t = this.dom.css("visibility");
                    this.dom.css({
                        visibility: "hidden",
                        width: e.innerWidth()
                    }).css({
                        width: this.dom.innerWidth() + (this.dom.outerWidth() - e.outerWidth()),
                        visibility: t
                    })
                },
                syncViewWithMode: function () {
                    this.isInDom && this.dom.toggleClass(this.clsAutofitMode, this.autofitMode)
                },
                syncViewWithValue: function (e) {
                    e = e == null ? !0 : e, this.isInDom && this.isVisible && (this.activeItem ? this.showMenu(this.activeItem.parentMenu, e ? this.activeItem : null) : this.showMenu(this.rootItem.menu, e ? this.firstSelectableMenuItem(this.rootItem.menu) : null))
                },
                focus: function () {
                    if (this.isFocused) return;
                    this.isFocused = !0, this.dom.addClass(this.clsFocused), this.captureKeyboard(), this.onFocus(), this.trigger("focus")
                },
                blur: function () {
                    if (!this.isFocused) return;
                    this.isFocused = !1, this.dom.removeClass(this.clsFocused), this.releaseKeyboard(), this.onBlur(), this.trigger("blur")
                },
                disable: function () {
                    this.setDisableState(!0)
                },
                enable: function () {
                    this.setDisableState(!1)
                },
                setDisableState: function (e) {
                    if (e === this.disabled) return;
                    this.disabled = e, this.dom.toggleClass(this.disabled, this.clsDisabled), this.onDisabledChanged(), this.trigger("disableChanged")
                },
                show: function (e, t) {
                    if (this.isVisible) return;
                    e = e == null ? !0 : e, t = t == null ? !0 : t, this.isVisible = !0, this.isKeyboardNavigation = !1, t && this.setMenuSizes(), this.syncViewWithMode(), this.dom.show(), this.syncViewWithValue(e), this.onShow(), this.trigger("show")
                },
                hide: function () {
                    if (!this.isVisible) return;
                    this.isVisible = !1, this.dom.hide(), this.blurItem(this.focusedItem), this.onHide(), this.trigger("hide")
                },
                toggle: function () {
                    this.isVisible ? this.hide() : this.show()
                },
                showMenu: function (e, t, n) {
                    if (!e || this.inTransition) return;
                    if (this.activeMenu !== e) {
                        var r = this.putMenuInDom(e);
                        if (!r) return;
                        r.setAttribute("aria-expanded", "true");
                        var s = function () {
                            var t = i(e.id);
                            if (parseInt(t.style.height, 10)) return;
                            var n = $(t);
                            n.outerHeight(n.outerHeight())
                        };
                        (n || this.transitions.direct).call(this, e, this.activeMenu, s), this.activeMenu = e
                    }
                    t = t && t.role !== "root" ? t : null, t && setTimeout(function () {
                        this.focusItem(t, !0)
                    }.bind(this), 1)
                },
                hideMenu: function (e) {
                    if (!e) return;
                    var t = i(e.id);
                    t && (t.setAttribute("aria-expanded", "false"), t.style.display = "none")
                },
                activateItem: function (e, t) {
                    if (e == null || this.itemIsDisabled(e)) return;
                    if (this.inTransition) return;
                    this.navigationMode = t || "mouse", this.itemHasMenu(e) ? this.showMenu(e.menu, this.firstSelectableMenuItem(e.menu), this.getTransition("Left")) : this.itemIsBackHelper(e) ? this.showMenu(e.parentMenu.parentMenu, e.parentMenu.parentItem, this.getTransition("Right")) : this.setValue(e.value, t)
                },
                focusItem: function (e, t) {
                    if (!this.itemIsFocusable(e)) return;
                    this.focusedItem && this.blurItem(this.focusedItem), this.focusedItem = e, $("#" + e.id).addClass(this.clsItemFocused), t && this.positionItemInView(e), this.trigger("itemFocused", this.focusedItem)
                },
                blurItem: function (e) {
                    if (!e) return;
                    $("#" + e.id).removeClass(this.clsItemFocused)
                },
                positionItemInView: function (e) {
                    if (!e) return;
                    var t = this.dom && this.dom[0],
                        n = i(e.id);
                    if (!n) return;
                    var r = n.offsetTop;
                    t.scrollTop = r - t.offsetHeight / 2 + n.offsetHeight / 2
                },
                getNaturalCoords: function () {
                    if (!this.isInDom) return 0;
                    var e = this.dom.height();
                    this.resetHeight();
                    var t = this.dom[0].getBoundingClientRect();
                    return this.setHeight(e), t
                },
                setHeight: function (e) {
                    e = Math.floor(e);
                    var t = this.dom.outerHeight() - this.dom.height();
                    this.dom.height(e - t)
                },
                resetHeight: function () {
                    this.dom[0].style.height = ""
                },
                _manageNavigationMode: function (e) {
                    if (!this.isKeyboardNavigation || this._lastClientX !== e.clientX || this._lastClientY !== e.clientY) this.isKeyboardNavigation = !1;
                    this._lastClientX = e.clientX, this._lastClientY = e.clientY
                },
                resolveItemFromDom: function (e) {
                    var t = this.dom[0];
                    while (e !== t) {
                        if (e.tagName === "LI") return this.domToItem(e);
                        e = e.parentNode
                    }
                    return null
                },
                onDataReady: s,
                onChange: s,
                onChangeRequest: s,
                onFocus: s,
                onBlur: s,
                onShow: s,
                onHide: s,
                onDisabledChanged: s,
                onDestroy: s,
                onCueMatch: s,
                onDocumentClick: function (e) {
                    if (!this.dom) return;
                    $.contains(this.dom[0], e.target) || this.blur()
                },
                onRootMouseEnter: function (e) {
                    this.dom.addClass(this.clsHover)
                },
                onRootMouseLeave: function (e) {
                    this.dom.removeClass(this.clsHover)
                },
                onRootMouseOver: function (e) {
                    if (this.isKeyboardNavigation) return;
                    var t = this.resolveItemFromDom(e.target);
                    t && t.role !== "uiLabel" && this.focusItem(t)
                },
                onRootMouseOut: function (e) {
                    if (e.target.tagName === "LI") {
                        var t = this.domToItem(e.target);
                        t && t.role !== "uiLabel" && this.blurItem(t)
                    }
                },
                onRootMouseUp: function (e) {
                    var t = this.resolveItemFromDom(e.target);
                    t && t.role !== "uiLabel" && this.activateItem(t, "click")
                },
                onRootMouseDown: function (e) {
                    this.activeItem && this.activeItem.parentMenu ? this.putMenuInDom(this.activeItem.parentMenu) : this.rootItem && this.rootItem.menu && this.putMenuInDom(this.rootItem.menu)
                },
                onRootMouseMove: function (e) {
                    this._manageNavigationMode(e)
                },
                onRootFocus: function () {
                    this.focus()
                },
                onRootBlur: function () {
                    this.blur()
                },
                getTransition: function (e) {
                    return this.transitionMode === "direct" ? this.transitions.direct : this.transitions[this.transitionMode + e]
                },
                transitions: {
                    direct: function (e, t, n) {
                        var r = i(e.id);
                        r.style.display = "", r.style.left = 0, e !== t && t && this.hideMenu(t), n && n()
                    },
                    stackingLeft: function (e, t, n) {
                        this.transitions._stacking.call(this, e, t, n, "Left")
                    },
                    stackingRight: function (e, t, n) {
                        this.transitions._stacking.call(this, e, t, n, "Right")
                    },
                    _stacking: function (e, t, n, r) {
                        if (e === t || t == null) return this.transitions.direct.call(this, e, t);
                        var s = i(e.id),
                            o = i(t.id);
                        r === "Left" && (s.style.left = this.dom[0].offsetWidth + "px"), s.style.zIndex = r === "Right" ? 1 : 2, s.style.display = "", o.style.zIndex = r === "Right" ? 2 : 1, o.style.display = "", this.inTransition = !0, n = function (e) {
                            this.hideMenu(t), s.style.left = 0, this.inTransition = !1, e && e()
                        }.bind(this, n), $(r === "Right" ? o : s).animate({
                            left: r === "Right" ? this.dom[0].offsetWidth : 0
                        }, this.transitionDuration, this.transitionEasing, n)
                    },
                    slidingLeft: function (e, t, n) {
                        this.transitions._sliding.call(this, e, t, n, "Left")
                    },
                    slidingRight: function (e, t, n) {
                        this.transitions._sliding.call(this, e, t, n, "Right")
                    },
                    _sliding: function (e, t, n, r) {
                        if (e === t || t == null) return this.transitions.direct.call(this, e, t);
                        var s = i(e.id),
                            o = i(t.id);
                        s.style.left = (r === "Right" ? -1 : 1) * this.dom[0].offsetWidth + "px", s.style.zIndex = r === "Right" ? 1 : 2, s.style.display = "", o.style.zIndex = r === "Right" ? 2 : 1, o.style.display = "", this.inTransition = !0, n = function (e) {
                            this.hideMenu(t), s.style.left = 0, this.inTransition = !1, e && e()
                        }.bind(this, n), $(s).add(o).animate({
                            left: (r === "Right" ? "+=" : "-=") + this.dom[0].offsetWidth + "px"
                        }, this.transitionDuration, this.transitionEasing, n)
                    }
                },
                captureKeyboard: function () {
                    if (this.isKeyboardCaptured) return;
                    this.isKeyboardCaptured = !0, $(document).bind("keydown." + this.id, this.onKeyDown.bind(this)), this.keyboardCue && $(document).bind("keypress." + this.id, this.onKeyPress.bind(this))
                },
                releaseKeyboard: function () {
                    this.isKeyboardCaptured = !1, $(document).unbind("keydown." + this.id), this.keyboardCue && $(document).unbind("keypress." + this.id)
                },
                cueMatch: function (e, t, n, r) {
                    e = e || this._getActiveMenu();
                    if (!e) return !1;
                    n = n || 0, r = r || e.length;
                    for (var i = n; i < r; i++) {
                        if (e[i].role === "uiBackLink" || e[i].role === "uiLabel") continue;
                        if (e[i].label.charAt(0).toLowerCase() === t) return this.lastIndex = i, this.isVisible || this.show(!1), this.keyboardCueAction === "focus" ? this.focusItem(e[i], !0) : this.setValue(e[i].value, "keyboardCue"), this.onCueMatch(e[i]), !0
                    }
                    return !1
                },
                _getActiveMenu: function () {
                    return this.activeMenu || this.activeItem && this.activeItem.parentMenu || this.rootItem.menu
                },
                onKeyPress: function (e) {
                    var t = String.fromCharCode(e.charCode).toLowerCase(),
                        n = this._getActiveMenu();
                    if (!n) return;
                    if (e.charCode === 91) return;
                    if (this.lastActiveMenu !== n || this.lastKey !== t) this.lastIndex = -1;
                    this.lastActiveMenu = n, this.lastKey = t;
                    if (this.cueMatch(n, t, this.lastIndex + 1, n.length)) return;
                    if (this.cueMatch(n, t, 0, this.lastIndex + 1)) return
                },
                onKeyDown: function (e) {
                    if (!this.activeMenu) return;
                    var t = l.keyCodes;
                    switch (e.keyCode) {
                    case t.HOME:
                        e.preventDefault(), this.moveToStart();
                        break;
                    case t.END:
                        e.preventDefault(), this.moveToEnd();
                        break;
                    case t.PAGE_DOWN:
                        e.preventDefault(), this.pgDown();
                        break;
                    case t.PAGE_UP:
                        e.preventDefault(), this.pgUp();
                        break;
                    case t.DOWN:
                        e.preventDefault(), this.moveDown();
                        break;
                    case t.UP:
                        e.preventDefault(), this.moveUp();
                        break;
                    case t.LEFT:
                        e.preventDefault(), this.moveToLeft();
                        break;
                    case t.ENTER:
                    case t.NUMPAD_ENTER:
                    case t.RIGHT:
                    case t.TAB:
                        e.preventDefault(), this.activateItem(this.focusedItem, "keyboard")
                    }
                    this.trigger("keyDown", {
                        domEvent: e
                    })
                },
                getItemsPerPage: function () {
                    if (!this.activeMenu) return 0;
                    if (this.activeMenu.length === 0) return 0;
                    var e = this.dom[0],
                        t = this.itemToDom(this.activeMenu[0]);
                    return Math.floor(e.offsetHeight / t.offsetHeight)
                },
                _moveToItem: function (e, t) {
                    this.navigationMode = "keyboard";
                    if (!this.activeMenu) return;
                    var n;
                    if (this.focusedItem) {
                        var r = this.focusedItem.index + e;
                        e > 0 ? (n = this._getNextFocusableItem(this.activeMenu, r), !n && t === o && (n = this._getNextFocusableItem(this.activeMenu, 0))) : (n = this._getPrevFocusableItem(this.activeMenu, r), !n && t === u && (n = this._getPrevFocusableItem(this.activeMenu, this.activeMenu.length - 1)))
                    } else n = this._getNextFocusableItem(this.activeMenu, 0);
                    this.isKeyboardNavigation = !0, n && this.focusItem(n, !0)
                },
                _getNextFocusableItem: function (e, t) {
                    var n;
                    t = t || 0;
                    if (!e) return;
                    for (var r = t; r < e.length; r++) {
                        n = e[r];
                        if (this.itemIsFocusable(n)) return n
                    }
                },
                _getPrevFocusableItem: function (e, t) {
                    var n;
                    for (var r = t; r >= 0; r--) {
                        n = e[r];
                        if (this.itemIsFocusable(n)) return n
                    }
                },
                pgDown: function () {
                    this._moveToItem(this.getItemsPerPage(), this.goToStartAfterReachingEnd ? o : u)
                },
                pgUp: function () {
                    this._moveToItem(-this.getItemsPerPage(), this.goToEndAfterReachingStart ? u : o)
                },
                moveDown: function () {
                    this._moveToItem(1, this.goToStartAfterReachingEnd ? o : u)
                },
                moveUp: function () {
                    this._moveToItem(-1, this.goToEndAfterReachingStart ? u : o)
                },
                moveToStart: function () {
                    if (!this.activeMenu) return;
                    this.isKeyboardNavigation = !0;
                    var e = this._getNextFocusableItem(this.activeMenu, 0);
                    e && this.focusItem(e, !0)
                },
                moveToEnd: function () {
                    if (!this.activeMenu) return;
                    this.isKeyboardNavigation = !0;
                    var e = this._getPrevFocusableItem(this.activeMenu, this.activeMenu.length - 1);
                    e && this.focusItem(e, !0)
                },
                moveToLeft: function () {
                    if (!this.activeMenu || !this.focusedItem) return;
                    this.showMenu(this.focusedItem.parentMenu.parentMenu, this.focusedItem.parentMenu.parentItem, this.getTransition("Right"))
                }
            });
        r.makePlugin("zdMenu", l), n.exports = l
    }
}), this.require.define({
    "lib/core_widgets/select_menu": function (e, t, n) {
        var r = t("lib/core_widgets/menu"),
            i = t("lib/core_widgets/menu_utils"),
            s = i.K,
            o = {
                defaultValue: "",
                defaultValueLabel: "-",
                domHolderSelector: "body",
                preferredPosition: null,
                disabled: !1,
                clsSelectMenuScope: "zd-selectmenu",
                clsSelectMenuRoot: "zd-selectmenu zd-selectmenu-root",
                clsBaseButton: "zd-selectmenu-base",
                clsBaseContent: "zd-selectmenu-base-content",
                clsBaseArrow: "zd-selectmenu-base-arrow zd-icon-triangle-1-s",
                clsDefault: "zd-state-default",
                clsDisabled: "zd-state-disabled",
                clsFocused: "zd-state-focus",
                clsOpen: "zd-state-open",
                clsHover: "zd-state-hover",
                clsPositionUp: "zd-state-position-up",
                keyboardCue: !1,
                enableHtmlEscape: !0
            }, u = i.defineClass(i.OptionsMixin, i.ObservableMixin, i.PositionableMixin, i.CssScopingMixin, {
                init: function (e) {
                    this.type = "SelectMenu", this.setOptions(e, o), this.id = i.getUniqId(), this.baseId = i.getUniqId(), this.baseContentId = i.getUniqId(), this.dom = null, this.domBase = null, this.domBaseContent = null, this.domHolder = this.domHolder || $(this.domHolderSelector)[0], this.domMenuHolder = null, this.isFocused = !1, this.isInDom = !1, this.isDestroyed = !1, this.isKeyboardCaptured = !1, this.areDomEventsSet = !1, this.renderItemContentForBase = this.renderItemContentForBase || this.defaultRenderItemContentForBase, this.verticalMenuPositioner = new i.VerticalMenuPositioner, this.domBasePositionObserver = new i.DomPositionObserver, r.registerInstance(this), this.initUI(), this.setValue(this.menu.value)
                },
                loadData: function (e) {
                    if (!this.menu) return;
                    this.menu.loadData(e), this.onDataReady()
                },
                getItemByValue: function (e) {
                    return this.menu.getItemByValue(e)
                },
                initMenu: function () {
                    this.options.domHolder = this.domMenuHolder, this.options.isVisible = !1, this.options.keyboardCue = !0, this.options.keyboardCueAction = "focus";
                    var e = this.menu = new r(this.options);
                    e.container = this, e.onChange = this.menuDelegateHooks.onChange.bind(this), e.onChangeRequest = this.menuDelegateHooks.onChangeRequest.bind(this), e.onCueMatch = this.menuDelegateHooks.onCueMatch.bind(this);
                    var t = e.onKeyDown;
                    e.onKeyDown = function (n) {
                        var r = this.menuDelegateHooks.onKeyDown.call(this, n);
                        this.isOpen && r !== !1 && t.call(e, n)
                    }.bind(this), this.setupBasePositionObserver()
                },
                setupBasePositionObserver: function () {
                    var e;
                    this.domBasePositionObserver.beforeSensing = function () {
                        e = this.menu.dom[0].style.visibility, this.menu.dom[0].style.visibility = "hidden"
                    }.bind(this), this.domBasePositionObserver.afterSensing = function () {
                        this.menu.dom[0].style.visibility = e
                    }.bind(this)
                },
                menuDelegateHooks: {
                    onChange: function (e) {
                        this.setValue(e.value, e.source)
                    },
                    onChangeRequest: function (e) {
                        (e.source === "click" || e.source === "keyboard") && this.close(), this.onChangeRequest(e)
                    },
                    onCueMatch: function (e) {
                        this.isOpen || this.open(!1)
                    },
                    onKeyDown: function (e) {
                        var t = r.keyCodes;
                        switch (e.keyCode) {
                        case t.HOME:
                        case t.END:
                        case t.PAGE_DOWN:
                        case t.PAGE_UP:
                        case t.DOWN:
                        case t.UP:
                        case t.LEFT:
                        case t.ENTER:
                        case t.NUMPAD_ENTER:
                        case t.RIGHT:
                            if (!this.isOpen) return e.preventDefault(), this.open(), !1;
                            break;
                        case t.TAB:
                            if (this.isOpen && !this.menu.focusedItem) {
                                e.preventDefault(), this.close();
                                return
                            }
                            break;
                        case t.ESCAPE:
                            this.close()
                        }
                    }
                },
                setMenuSizes: function () {
                    this.menu.setMenuSizes(this.domBase)
                },
                setValue: function (e, t) {
                    if (this.value === e) return;
                    if (this.menu.setValue(e) === !1) return;
                    var n = this.value;
                    this.value = e, this.setBaseContent();
                    var r = {
                        oldValue: n,
                        value: e,
                        source: t,
                        userInitiated: t === "click" || t === "keyboard" || t === "keyboardCue"
                    };
                    this.onChange(r), this.trigger("change", r)
                },
                initUI: function () {
                    this.htmlBuffer = this.render(), this.buildDomMenuHolder(), this.buildCssClassStateManager(), this.putInDom(this.domHolder), this.postDomInsertionSetup(), this.initMenu()
                },
                buildDomMenuHolder: function () {
                    this.domMenuHolder = document.createElement("div"), this.domMenuHolder.className = this.clsSelectMenuScope, document.body.appendChild(this.domMenuHolder)
                },
                buildCssClassStateManager: function () {
                    this.clsStateManager = new i.CssClsStateMachine({
                        dom: function () {
                            return this.dom
                        }.bind(this),
                        domAux: function () {
                            return $(this.domMenuHolder)
                        }.bind(this),
                        clsZero: this.clsDefault,
                        clsStates: [this.clsDisabled, this.clsOpen, this.clsFocused, this.clsHover]
                    })
                },
                destroy: function () {
                    r.unregisterInstance(this), this.menu.destroy(), this.removeObservers(), this.destroyUI(), this.verticalMenuPositioner = null, this.domBasePositionObserver.destroy(), this.domBasePositionObserver = null, i.cleanObject(this), this.isDestroyed = !0
                },
                destroyUI: function () {
                    this.isInDom && (this.teardownDomEvents(), this.dom.remove(), $(this.domMenuHolder).remove()), this.isInDom = !1, this.domHolder = null, this.dom = null, this.domBase = null, this.domBaseContent = null, this.domMenuHolder = null
                },
                resetUI: function () {
                    this.isInDom && (this.close(), this.blur(), this.dom.removeClass(this.clsHover), this.domBaseContent.html(""), this.menu.resetUI())
                },
                syncViewWithValue: function () {
                    this.setBaseContent()
                },
                render: function () {
                    var e = '<div id="' + this.id + '" class="' + this.clsSelectMenuRoot + " " + this.clsDefault + '">' + '<button id="' + this.baseId + '" class="' + this.clsBaseButton + '" role="button" tabindex="0">' + '<span class="' + this.clsBaseArrow + '"></span>' + '<span id="' + this.baseContentId + '" class="' + this.clsBaseContent + '"></span>' + "</button>" + "</div>";
                    return e
                },
                defaultRenderItemContentForBase: function (e) {
                    return this.menu.getDisplayValue()
                },
                putInDom: function (e) {
                    if (this.isInDom) return;
                    $(e || this.domHolder).append(this.htmlBuffer), this.isInDom = !0, this.dom = $("#" + this.id), this.domBase = $("#" + this.baseId), this.domBaseContent = $("#" + this.baseContentId)
                },
                postDomInsertionSetup: function () {
                    this.disabled ? this.disable() : this.setupDomEvents()
                },
                setupDomEvents: function () {
                    if (!this.isInDom || this.areDomEventsSet || this.disabled) return;
                    this.domBase.bind("click", this.onBaseClick.bind(this)).bind("mousedown", this.onBaseMouseDown.bind(this)).bind("focus", this.onBaseFocus.bind(this)).bind("blur", this.onBaseBlur.bind(this)), this.dom.bind("mouseenter", this.onRootMouseEnter.bind(this)).bind("mouseleave", this.onRootMouseLeave.bind(this)), $(document).bind("mousedown." + this.id, this.onDocumentMouseDown.bind(this)), this.areDomEventsSet = !0
                },
                teardownDomEvents: function () {
                    if (!this.isInDom) return;
                    this.domBase.unbind(), this.dom.unbind(), $(document).unbind("mousedown." + this.id), this.areDomEventsSet = !1
                },
                setBaseContent: function () {
                    var e = this.menu.hashValues[this.value],
                        t = this.renderItemContentForBase(e || {
                            label: this.defaultValueLabel
                        });
                    this.domBaseContent.html(t)
                },
                focus: function () {
                    if (this.isFocused) return;
                    this.isFocused = !0, this.clsStateManager.addState(this.clsFocused), setTimeout(function () {
                        this.isFocused && this.menu.captureKeyboard()
                    }.bind(this), 1), this.onFocus(), this.trigger("focus")
                },
                blur: function () {
                    if (!this.isFocused) return;
                    this.isFocused = !1, this.clsStateManager.removeState(this.clsFocused), this.menu.releaseKeyboard(), this.onBlur(), this.trigger("blur")
                },
                open: function (e) {
                    if (this.isOpen) return;
                    this.isOpen = !0, this.menu.dom[0].style.visibility = "hidden", this.menu.show(e, !1), this.dom.addClass(this.clsSelectMenuRoot), this.clsStateManager.addState(this.clsOpen), this.setMenuSizes(), setTimeout(function () {
                        this.isFocused && this.menu.captureKeyboard(), this.observeDomBasePositionOnce(this.close.bind(this)), this.positionMenu(this.menu, this.domBase[0], this.preferredPosition), this.menu.dom[0].style.visibility = ""
                    }.bind(this), 1), this.focus(), this.onOpen(), this.trigger("open")
                },
                close: function () {
                    if (!this.isOpen) return;
                    this.isOpen = !1, this.stopObservingDomBasePosition(), this.setPosition("down"), this.menu.hide(), this.clsStateManager.removeState(this.clsOpen), this.onClose(), this.trigger("close")
                },
                toggle: function () {
                    this.isOpen ? this.close() : this.open()
                },
                disable: function () {
                    this.setDisableState(!0)
                },
                enable: function () {
                    this.setDisableState(!1)
                },
                setDisableState: function (e) {
                    this.disabled = e;
                    if (!this.isInDom) return;
                    this.disabled ? (this.close(), this.blur(), this.teardownDomEvents(), this.clsStateManager.addState(this.clsDisabled), this.domBase[0].disabled = !0) : (this.setupDomEvents(), this.domBase[0].disabled = !1, this.clsStateManager.removeState(this.clsDisabled)), this.onDisabledChanged(), this.trigger("disableChanged")
                },
                show: function () {
                    this.dom.show(), this.trigger("show")
                },
                hide: function () {
                    this.dom.hide(), this.trigger("hide")
                },
                getDomBaseForPositioning: function () {
                    return this.domBase[0]
                },
                onDataReady: s,
                onChange: s,
                onChangeRequest: s,
                onOpen: s,
                onClose: s,
                onFocus: s,
                onBlur: s,
                onDisabledChanged: s,
                onDestroy: s,
                onDocumentMouseDown: function (e) {
                    if (!this.isInDom || !e.target) return;
                    var t = $.contains(this.dom[0], e.target) || this.dom[0] === e.target,
                        n = $.contains(this.menu.dom[0], e.target) || this.menu.dom[0] === e.target;
                    if (t || n) return;
                    this.blur(), this.close()
                },
                onBaseClick: function (e) {},
                onBaseMouseDown: function (e) {
                    i.positionDomIntoView(this.domBase[0]), this.menu.syncViewWithValue(), this.toggle(), setTimeout(this.domBase.focus.bind(this.domBase), 1)
                },
                onBaseFocus: function () {
                    this.focus()
                },
                onBaseBlur: function () {
                    !this.isOpen && this.blur()
                },
                onRootMouseEnter: function (e) {
                    this.clsStateManager.addState(this.clsHover)
                },
                onRootMouseLeave: function (e) {
                    this.clsStateManager.removeState(this.clsHover)
                }
            });
        i.makePlugin("zdSelectMenu", u), n.exports = u
    }
}), this.require.define({
    "lib/core_widgets/combo_select_menu": function (e, t, n) {
        var r = t("lib/core_widgets/menu"),
            i = t("lib/core_widgets/menu_utils"),
            s = i.K,
            o = {
                defaultValue: "",
                defaultValueLabel: "-",
                domHolderSelector: "body",
                preferredPosition: null,
                filteredField: "label",
                disabled: !1,
                clsSelectMenuScope: "zd-combo-selectmenu",
                clsSelectMenuRoot: "zd-combo-selectmenu zd-combo-selectmenu-root",
                clsDefault: "zd-state-default",
                clsDisabled: "zd-state-disabled",
                clsFocused: "zd-state-focus",
                clsOpen: "zd-state-open",
                clsHover: "zd-state-hover",
                clsPositionUp: "zd-state-position-up",
                clsBaseButton: "zd-selectmenu-base",
                clsBaseContent: "zd-selectmenu-base-content",
                clsBaseArrow: "zd-selectmenu-base-arrow zd-icon-triangle-1-s",
                clsSearch: "zd-searchmenu-base",
                clsHighlight: "zd-highlight",
                maxSearchResults: Infinity,
                keyboardCue: !1,
                enableHtmlEscape: !0
            }, u = i.defineClass(i.OptionsMixin, i.ObservableMixin, i.PositionableMixin, i.CssScopingMixin, {
                init: function (e) {
                    this.type = "ComboSelectMenu", this.id = i.getUniqId(), this.baseId = i.getUniqId(), this.baseContentId = i.getUniqId(), this.searchId = i.getUniqId(), this.dom = null, this.domBase = null, this.domBaseContent = null, this.domSearch = null, this.domMenuHolder = null, this.isKeyboardCaptured = !1, this.areDomEventsSet = !1, this.isOpen = !1, this.isFocused = !1, this.isInDom = !1, this.isDestroyed = !1, this.state = null, this.selectMenu = null, this.searchMenu = null, this.typeToClassMapBase = null, this.typeToClassMapSearch = null, this.typeToClassMapSelect = null, this.enableSearchInput = !0, this.verticalMenuPositioner = new i.VerticalMenuPositioner, this.domBasePositionObserver = new i.DomPositionObserver, r.registerInstance(this), this.setOptions(e, o), this.domHolder = this.domHolder || $(this.domHolderSelector)[0], this.renderItemContentForBase = this.renderItemContentForBase || this.defaultRenderItemContentForBase, this.filteringDataSource = this.filteringDataSource || new i.FilteringDataSource(this.maxSearchResults, this.filteredField), this.modelParser = this.modelParser || new i.MenuDataParser.menuModelParsers.LabelConcatenator, this.initUI(), this.setState("display")
                },
                initUI: function () {
                    this.htmlBuffer = this.render(), this.buildDomMenuHolder(), this.buildCssClassStateManager(), this.putInDom(this.domHolder), this.initSelectMenu(), this.searchDataSource = this.filteringDataSource, this.highlighter = function (e, t) {
                        var n = this.searchDataSource.filterWord || "";
                        return n === "" ? this.enableHtmlEscape ? i.escapeHtml(t) : t : e.render(t, this.searchDataSource.filterWord, this.clsHighlight)
                    }.bind(this, new i.HighlightingRenderer), this.initSearchMenu(), this.initCommonMenuLogic(), this.postDomInsertionSetup(), this.setValue(this.selectMenu.initValue, "init")
                },
                buildDomMenuHolder: function () {
                    this.domMenuHolder = document.createElement("div"), this.domMenuHolder.className = this.clsSelectMenuScope, document.body.appendChild(this.domMenuHolder)
                },
                buildCssClassStateManager: function () {
                    this.clsStateManager = new i.CssClsStateMachine({
                        dom: function () {
                            return this.dom
                        }.bind(this),
                        domAux: function () {
                            return $(this.domMenuHolder)
                        }.bind(this),
                        clsZero: this.clsDefault,
                        clsStates: [this.clsDisabled, this.clsOpen, this.clsFocused, this.clsHover]
                    })
                },
                initSelectMenu: function () {
                    var e = this;
                    this.options.domHolder = this.domMenuHolder, this.options.isVisible = !1, this.renderItemContentForSelect && (this.options.renderItemContent = this.renderItemContentForSelect), this.options.typeToClassMap = this.typeToClassMapSelect, this.options.postParser = function (t) {
                        e.modelParser.parse(t)
                    };
                    var t = this.selectMenu = new r(this.options);
                    t.container = this, delete this.options.renderItemContent, delete this.options.typeToClassMap, delete this.options.postParser, t.onChange = function (e) {
                        this.setValue(e.value, "select:" + (e.source == null ? "" : e.source))
                    }.bind(this), t.onChangeRequest = function (e) {
                        if (e.source === "click" || e.source === "keyboard") t.hide(), this.setState("display")
                    }.bind(this), t.onShow = this.onMenuShow.bind(this, t, this.domBase)
                },
                initSearchMenu: function () {
                    this.options.domHolder = this.domMenuHolder, this.options.isVisible = !1, this.renderItemContentForSearch && (this.options.renderItemContent = this.renderItemContentForSearch), this.options.typeToClassMap = this.typeToClassMapSearch;
                    var e = this.searchMenu = new r(this.options);
                    e.container = this, delete this.options.renderItemContent, delete this.options.typeToClassMap, e.highlighter = this.highlighter;
                    var t = e.renderItemContent;
                    e.renderItemContent = function (e, n, r) {
                        return t(e.data.sourceItem, n, r)
                    }, e.onChangeRequest = function (e) {
                        if (e.source === "click" || e.source === "keyboard") this.setState("display"), this.setValue(e.value, "search:" + (e.source == null ? "" : e.source))
                    }.bind(this), this.searchDataSource.onDataReady = function (t) {
                        e.loadData(t), this.setState(t.length ? "fullSearch" : "displaySearch")
                    }.bind(this), e.onShow = this.onMenuShow.bind(this, e, this.domSearch)
                },
                initCommonMenuLogic: function () {
                    var e, t;
                    this.domBasePositionObserver.beforeSensing = function () {
                        e = this.searchMenu.dom[0].style.visibility, t = this.selectMenu.dom[0].style.visibility, this.searchMenu.dom[0].style.visibility = "hidden", this.selectMenu.dom[0].style.visibility = "hidden"
                    }.bind(this), this.domBasePositionObserver.afterSensing = function () {
                        this.searchMenu.dom[0].style.visibility = e, this.selectMenu.dom[0].style.visibility = t
                    }.bind(this)
                },
                loadData: function (e) {
                    this.selectMenu.loadData(e), this.onDataReady()
                },
                getItemByValue: function (e) {
                    return this.selectMenu.getItemByValue(e)
                },
                onMenuShow: function (e, t) {
                    setTimeout(function () {
                        this.domSearch && this.domSearch.focus()
                    }.bind(this), 1), e.dom.addClass(e.clsRoot), this.setMenuSizes(e, t)
                },
                setMenuSizes: function (e, t) {
                    e.setMenuSizes(t)
                },
                _sourceInMap: {
                    "select:click": 1,
                    "select:keyboard": 1,
                    "select:keyboardCue": 1,
                    "search:click": 1,
                    "search:keyboard": 1,
                    "search:keyboardCue": 1
                },
                setValue: function (e, t) {
                    e == null && (e = r.defaultOptions.defaultValue);
                    if (this.value === e) return;
                    if (this.selectMenu.setValue(e) === !1) return;
                    var n = this.value;
                    this.value = e, this.setState("display"), this.syncDomBaseContentWithValue();
                    var i = {
                        oldValue: n,
                        value: e,
                        source: t,
                        userInitiated: t in this._sourceInMap
                    };
                    this.onChange(i), this.trigger("change", i)
                },
                syncDomBaseContentWithValue: function () {
                    var e = this.selectMenu.hashValues[this.value],
                        t;
                    e && e.type && this.typeToClassMapBase && this.typeToClassMapBase[e.type] && (t = this.typeToClassMapBase[e.type]), this.lastBaseTypeClass && this.domBase.removeClass(this.lastBaseTypeClass), t && this.domBase.addClass(this.typeToClassMapBase[e.type]), this.lastBaseTypeClass = t;
                    var n = this.renderItemContentForBase(e || {
                        label: this.defaultValueLabel
                    });
                    this.domBaseContent.html(n)
                },
                destroy: function () {
                    this.selectMenu.destroy(), this.searchMenu.destroy(), this.removeObservers(), r.unregisterInstance(this), this.destroyUI(), this.domBasePositionObserver.destroy(), this.domBasePositionObserver = null, i.cleanObject(this), this.isDestroyed = !0
                },
                destroyUI: function () {
                    this.isInDom && (this.teardownDomEvents(), this.dom.remove(), $(this.domMenuHolder).remove()), this.isInDom = !1, this.domHolder = null, this.dom = null, this.domBase = null, this.domBaseContent = null, this.domSearch = null
                },
                resetUI: function () {
                    this.isInDom && (this.blur(), this.dom.removeClass(this.clsHover), this.selectMenu.resetUI(), this.searchMenu.resetUI())
                },
                postDomInsertionSetup: function () {
                    this.disabled ? this.disable() : this.setupDomEvents()
                },
                setupDomEvents: function () {
                    if (!this.isInDom || this.areDomEventsSet) return;
                    this.domBase.bind("click", this.onBaseClick.bind(this)).bind("mousedown", this.onBaseMouseDown.bind(this)).bind("focus", this.onBaseFocus.bind(this)).bind("blur", this.onBaseBlur.bind(this)), this.domSearch.bind("keyup", this.onSearchKeyUp.bind(this)).bind("focus", this.onSearchFocus.bind(this)).bind("click", this.onSearchClick.bind(this)), this.dom.bind("mouseenter", this.onRootMouseEnter.bind(this)).bind("mouseleave", this.onRootMouseLeave.bind(this)), $(document).bind("mousedown." + this.id, this.onDocumentMouseDown.bind(this)), this.areDomEventsSet = !0
                },
                teardownDomEvents: function () {
                    if (!this.isInDom) return;
                    this.domBase.unbind(), this.domSearch.unbind(), this.dom.unbind(), $(document).unbind("mousedown." + this.id), this.releaseKeyboard(), this.areDomEventsSet = !1
                },
                render: function () {
                    var e = '<div id="' + this.id + '" class="' + this.clsSelectMenuRoot + " " + this.clsDefault + '">' + '<button id="' + this.baseId + '" class="' + this.clsBaseButton + '" role="button" tabindex="0">' + '<span class="' + this.clsBaseArrow + '"></span>' + '<span id="' + this.baseContentId + '" class="' + this.clsBaseContent + '"></span>' + "</button>" + '<input id="' + this.searchId + '" class="' + this.clsSearch + '" tabindex="0">' + "</div>";
                    return e
                },
                defaultRenderItemContentForBase: function (e) {
                    return this.enableHtmlEscape && e.enableHtmlEscape ? i.escapeHtml(e.label) : e.label
                },
                putInDom: function (e) {
                    if (this.isInDom) return;
                    $(e || this.domHolder).append(this.htmlBuffer), this.isInDom = !0, this.dom = $("#" + this.id), this.domBase = $("#" + this.baseId), this.domBaseContent = $("#" + this.baseContentId), this.domSearch = $("#" + this.searchId)
                },
                setState: function (e) {
                    if (this.state === e) return;
                    this.oldState = this.state, this.state = e, this.states[e].enter.call(this), this.onStateChange()
                },
                states: {
                    display: {
                        enter: function () {
                            this.isOpen = !1, this.dom.addClass(this.clsSelectMenuRoot), this.stopObservingDomBasePosition(), this.setPosition("down"), this.searchMenu.hide(), this.domSearch.val(""), this.domSearch.hide(), this.searchDataSource.reset(), this.domBase.css("visibility", ""), this.isFocused && this.domBase.focus(), this.selectMenu.hide(), this.trigger("close")
                        },
                        keyDown: function (e) {
                            var t = r.keyCodes,
                                n = String.fromCharCode(e.keyCode);
                            if ((n >= "0" && n <= "9" || n >= "A" && n <= "z") && e.keyCode !== 91) return this.enableSearchInput = !1, setTimeout(function () {
                                this.setState("fullSearch"), this.domSearch.val(String.fromCharCode(this.lastKeyPressed)), this.searchDataSource.filter(this.selectMenu, this.domSearch.val())
                            }.bind(this), 1), !1;
                            switch (e.keyCode) {
                            case t.HOME:
                            case t.END:
                            case t.PAGE_DOWN:
                            case t.PAGE_UP:
                            case t.DOWN:
                            case t.UP:
                            case t.LEFT:
                            case t.ENTER:
                            case t.NUMPAD_ENTER:
                            case t.RIGHT:
                                this.isVisible || (this.setState("displaySearch"), e.preventDefault());
                                return;
                            case t.TAB:
                                return
                            }
                            this.selectMenu.onKeyDown(e)
                        }
                    },
                    displaySearch: {
                        enter: function () {
                            this.isOpen = !0, this.dom.addClass(this.clsSelectMenuRoot), this.stopObservingDomBasePosition(), this.searchMenu.hide(), this.oldState !== "fullSearch" && this.domSearch.val(""), this.domSearch.show(), this.domSearch.focus(), this.domBase.css("visibility", "hidden"), this.selectMenu.dom.css("visibility", "hidden"), this.selectMenu.show(), setTimeout(function () {
                                this.observeDomBasePositionOnce(this.close.bind(this)), this.positionMenu(this.selectMenu, this.domSearch[0], this.preferredPosition), this.selectMenu.dom[0].style.visibility = ""
                            }.bind(this), 1)
                        },
                        keyDown: function (e) {
                            this.selectMenu.onKeyDown(e)
                        }
                    },
                    fullSearch: {
                        enter: function () {
                            this.isOpen = !0, this.dom.addClass(this.clsSelectMenuRoot), this.stopObservingDomBasePosition(), this.searchMenu.dom.css("visibility", "hidden"), this.searchMenu.show(), this.domSearch.show(), this.domSearch.focus(), this.domBase.css("visibility", "hidden"), this.selectMenu.hide(), setTimeout(function () {
                                this.observeDomBasePositionOnce(this.close.bind(this)), this.positionMenu(this.searchMenu, this.domSearch[0], this.preferredPosition), this.searchMenu.dom[0].style.visibility = ""
                            }.bind(this), 1)
                        },
                        keyDown: function (e) {
                            this.searchMenu.onKeyDown(e)
                        }
                    }
                },
                commonKeyDown: function (e) {
                    var t = r.keyCodes;
                    return e.keyCode === t.ESCAPE ? (this.setState("display"), !1) : (this.enableSearchInput = !0, !0)
                },
                focus: function () {
                    if (this.isFocused) return;
                    this.isFocused = !0, this.clsStateManager.addState(this.clsFocused), this.captureKeyboard(), this.onFocus(), this.trigger("focus")
                },
                blur: function () {
                    if (!this.isFocused) return;
                    this.isFocused = !1, this.clsStateManager.removeState(this.clsFocused), this.releaseKeyboard(), this.selectMenu.blur(), this.searchMenu.blur(), this.domBase.blur(), this.onBlur(), this.trigger("blur")
                },
                open: function () {
                    this.clsStateManager.addState(this.clsOpen), this.setState("displaySearch")
                },
                close: function () {
                    this.clsStateManager.removeState(this.clsOpen), this.setState("display")
                },
                disable: function () {
                    this.setDisableState(!0)
                },
                enable: function () {
                    this.setDisableState(!1)
                },
                setDisableState: function (e) {
                    this.disabled = e, this.disabled ? (this.blur(), this.close(), this.teardownDomEvents(), this.clsStateManager.addState(this.clsDisabled), this.domBase[0].disabled = !0, this.domSearch[0].disabled = !0) : (this.setupDomEvents(), this.domBase[0].disabled = !1, this.domSearch[0].disabled = !1, this.clsStateManager.removeState(this.clsDisabled)), this.onDisabledChanged(), this.trigger("disableChanged")
                },
                show: function () {
                    this.dom.show(), this.trigger("show")
                },
                hide: function () {
                    this.dom.hide(), this.trigger("hide")
                },
                getDomBaseForPositioning: function () {
                    return this.domSearch[0]
                },
                captureKeyboard: function () {
                    if (this.isKeyboardCaptured) return;
                    this.isKeyboardCaptured = !0, $(document).bind("keypress." + this.id, this.onKeyPress.bind(this)), $(document).bind("keydown." + this.id, this.onKeyDown.bind(this))
                },
                releaseKeyboard: function () {
                    this.isKeyboardCaptured = !1, $(document).unbind("keypress." + this.id), $(document).unbind("keydown." + this.id)
                },
                onChange: s,
                onFocus: s,
                onBlur: s,
                onDataReady: s,
                onDisabledChanged: s,
                onDestroy: s,
                onStateChange: s,
                onKeyPress: function (e) {
                    this.lastKeyPressed = e.which
                },
                onKeyDown: function (e) {
                    this.commonKeyDown(e) && this.states[this.state].keyDown.call(this, e)
                },
                onDocumentMouseDown: function (e) {
                    if (!this.isInDom || !e.target) return;
                    var t = $.contains(this.dom[0], e.target) || this.dom[0] === e.target,
                        n = $.contains(this.domMenuHolder, e.target) || this.domMenuHolder === e.target;
                    t || n ? setTimeout(this.domSearch.focus.bind(this.domSearch), 1) : (this.blur(), this.close())
                },
                onBaseClick: function (e) {},
                onBaseMouseDown: function () {
                    i.positionDomIntoView(this.domBase[0]), this.focus(), this.selectMenu.syncViewWithValue(), this.open()
                },
                onBaseFocus: function () {
                    this.focus()
                },
                onBaseBlur: function () {
                    this.blur()
                },
                onSearchKeyUp: function () {
                    this.enableSearchInput && this.searchDataSource.filter(this.selectMenu, this.domSearch.val())
                },
                onSearchFocus: function () {
                    this.focus()
                },
                onSearchClick: function () {
                    this.close()
                },
                onRootMouseEnter: function (e) {
                    this.clsStateManager.addState(this.clsHover)
                },
                onRootMouseLeave: function (e) {
                    this.clsStateManager.removeState(this.clsHover)
                }
            });
        i.makePlugin("zdComboSelectMenu", u), n.exports = u
    }
}), this.require.define({
    "lib/views/select_view": function (e, t, n) {
        var r = t("lib/views/form_field_view"),
            i = t("lib/core_widgets/select_menu"),
            s = t("lib/core_widgets/combo_select_menu"),
            o = t("lib/core_widgets/menu"),
            u = function (e) {
                if (e.id != null) return e.id;
                if (e.value != null) return e.value;
                if (e.label != null) return e.label
            }, a = function (e) {
                var t = _.clone(e);
                return t.children = _.clone(e.children), t
            }, f = r.extend({
                delegateType: "SelectMenu",
                options: Em.computed.emptyArray(),
                init: function () {
                    this._resetHiddenOptionValues(), this._super()
                },
                buildDelegate: function () {
                    var e;
                    switch (this.get("delegateType")) {
                    case "SelectMenu":
                        e = i;
                        break;
                    case "ComboSelectMenu":
                        e = s;
                        break;
                    case "Menu":
                        e = o
                    }
                    var t = this.get("configOptions"),
                        n = this.get("options");
                    t.domHolder = t.domHolderSelector ? $(t.domHolderSelector)[0] : this.$()[0], t.data = n, t.defaultValueLabel = t.defaultValueLabel || this.get("defaultValueLabel"), t.backLinkLabel = t.backLinkLabel || this.get("backLinkLabel"), t.disabled = this.get("disabled"), this.delegate = new e(t), delete t.disabled, delete t.domHolder, delete t.data, this.delegate.setValue(this.get("value"), "ext_init"), this.delegate.addObserver("change", _(this.delegateDidChange).bind(this))
                },
                hideOptions: function () {
                    if (arguments.length === 0) return;
                    var e = this.get("hiddenOptionValues"),
                        t = !1;
                    this.beginPropertyChanges(), Array.prototype.forEach.call(arguments, function (n) {
                        if (e.has(n)) return;
                        e.set(n, !0), t = !0
                    }, this), this.endPropertyChanges(), t && this.notifyPropertyChange("hiddenOptionValues")
                },
                showOptions: function () {
                    if (arguments.length === 0) return;
                    var e = this.get("hiddenOptionValues"),
                        t = !1;
                    this.beginPropertyChanges(), Array.prototype.forEach.call(arguments, function (n) {
                        if (!e.has(n)) return;
                        e.remove(n), t = !0
                    }, this), this.endPropertyChanges(), t && this.notifyPropertyChange("hiddenOptionValues")
                },
                showAllOptions: function () {
                    this._resetHiddenOptionValues()
                },
                optionIsVisible: function (e) {
                    return this.get("hiddenOptionValues").get(e) !== !0
                },
                _resetHiddenOptionValues: function () {
                    this.set("hiddenOptionValues", new Em.Map)
                },
                _removeHiddenOptions: function (e, t, n) {
                    var r, i, s;
                    for (var o = 0; o < e.length; o++) {
                        if (t.has(u(e[o]))) continue;
                        r = e[o], s = r.children, s ? (i = a(r), n.push(i), this._removeHiddenOptions(s, t, i.children = [])) : n.push(r)
                    }
                },
                optionsDidChange: function () {
                    if (!this.delegate) return;
                    var e = this.get("hiddenOptionValues"),
                        t = this.get("value"),
                        n = this.get("options"),
                        r = [];
                    e.keys.isEmpty() ? r = n : this._removeHiddenOptions(n, e, r), this.delegate.loadData(r), this.delegate.setValue(t, "ext_options")
                }.observes("options", "hiddenOptionValues")
            });
        n.exports = f
    }
}), this.require.define({
    "lib/core_widgets/search_menu": function (e, t, n) {
        var r = t("lib/core_widgets/menu"),
            i = t("lib/core_widgets/menu_utils"),
            s = i.K,
            o = r.keyCodes,
            u = {
                domHolderSelector: "body",
                preferredPosition: null,
                disabled: !1,
                clsSearchMenuScope: "zd-searchmenu",
                clsSearchMenuRoot: "zd-searchmenu zd-searchmenu-root",
                clsBaseInput: "zd-searchmenu-base",
                clsDefault: "zd-state-default",
                clsDisabled: "zd-state-disabled",
                clsFocused: "zd-state-focus",
                clsOpen: "zd-state-open",
                clsHover: "zd-state-hover",
                clsPositionUp: "zd-state-position-up",
                clsHighlight: "zd-highlight",
                keyboardCue: !1,
                maxSearchResults: 10,
                enableHtmlEscape: !0
            }, a = i.defineClass(i.OptionsMixin, i.ObservableMixin, i.PositionableMixin, i.CssScopingMixin, {
                init: function (e) {
                    this.type = "SearchMenu", this.id = i.getUniqId(), this.baseId = i.getUniqId(), this.dom = null, this.domBase = null, this.domHolder = this.domHolder || $(this.domHolderSelector)[0], this.isFocused = !1, this.isInDom = !1, this.isDestroyed = !1, this.isKeyboardCaptured = !1, this.areDomEventsSet = !1, this.filterWord = "", this.filterData = [], this.value = this.value || "", this.typeToClassMapBase = null, this.typeToClassMapMenu = null, r.registerInstance(this), this.setupHighlighter(), this.setOptions(e, u), this.renderItemContentForBase = this.renderItemContentForBase || this.renderItemContentForBaseDefault, this.setupDataSources(), this.data && (delete this.options.data, this.loadData(this.data)), this.verticalMenuPositioner = new i.VerticalMenuPositioner, this.domBasePositionObserver = new i.DomPositionObserver, this.initUI(), this.setState("display")
                },
                initUI: function () {
                    this.htmlBuffer = this.render(), this.buildDomMenuHolder(), this.buildCssClassStateManager(), this.putInDom(this.domHolder), this.initMenu(), this.postDomInsertionSetup()
                },
                buildDomMenuHolder: function () {
                    this.domMenuHolder = document.createElement("div"), this.domMenuHolder.className = this.clsSearchMenuScope, document.body.appendChild(this.domMenuHolder)
                },
                buildCssClassStateManager: function () {
                    this.clsStateManager = new i.CssClsStateMachine({
                        dom: function () {
                            return this.dom
                        }.bind(this),
                        domAux: function () {
                            return $(this.domMenuHolder)
                        }.bind(this),
                        clsZero: this.clsDefault,
                        clsStates: [this.clsDisabled, this.clsOpen, this.clsFocused, this.clsHover]
                    })
                },
                loadData: function (e) {
                    if (!this.menu) return;
                    this.menu.loadData(e), e.length ? this.open() : this.close()
                },
                setupHighlighter: function () {
                    this.highlighter = function (e, t) {
                        var n = this.searchDataSource.filterWord || "";
                        return n === "" ? this.enableHtmlEscape ? i.escapeHtml(t) : t : e.render(t, this.searchDataSource.filterWord, this.clsHighlight)
                    }.bind(this, new i.HighlightingRenderer)
                },
                setupDataSources: function () {
                    this.searchDataSource = this.searchDataSource || new i.FilteringDataSource(this.maxSearchResults, "label"), this.searchDataSource.onDataReady = function (e) {
                        e = e || [], this.loadData(e)
                    }.bind(this)
                },
                initMenu: function () {
                    this.options.domHolder = this.domMenuHolder, this.options.isVisible = !1, this.renderItemContentForMenu && (this.options.renderItemContent = this.renderItemContentForMenu);
                    var e = this.menu = new r(this.options);
                    delete this.options.renderItemContent, e.container = this, e.highlighter = this.highlighter, e.onChange = this.menuDelegateHooks.onChange.bind(this), e.onChangeRequest = this.menuDelegateHooks.onChangeRequest.bind(this);
                    var t = e.onKeyDown;
                    e.onKeyDown = function (n) {
                        this.menuDelegateHooks.onKeyDown.call(this, n), this.isOpen && t.call(e, n)
                    }.bind(this), this.setupBasePositionObserver()
                },
                setupBasePositionObserver: function () {
                    var e;
                    this.domBasePositionObserver.beforeSensing = function () {
                        e = this.menu.dom[0].style.visibility, this.menu.dom[0].style.visibility = "hidden"
                    }.bind(this), this.domBasePositionObserver.afterSensing = function () {
                        this.menu.dom[0].style.visibility = e
                    }.bind(this)
                },
                menuDelegateHooks: {
                    onChange: function (e) {
                        if (e.source === "init") return;
                        this.setValue(e.value, e.source)
                    },
                    onChangeRequest: function (e) {
                        (e.source === "click" || e.source === "keyboard" || e.source === "keyboardCue") && this.setState("display")
                    },
                    onKeyDown: function (e) {
                        e.keyCode === o.ESCAPE && this.setState("display");
                        if (e.keyCode === o.TAB && this.isOpen && !this.menu.focusedItem) {
                            var t = this.getBaseContent();
                            t && t.length > 0 && this.setValue(t, "keyboard")
                        }
                    }
                },
                setMenuSizes: function () {
                    this.menu.setMenuSizes(this.domBase)
                },
                destroy: function () {
                    this.menu.destroy(), r.unregisterInstance(this), this.removeObservers(), this.destroyUI(), this.verticalMenuPositioner = null, this.domBasePositionObserver.destroy(), this.domBasePositionObserver = null, i.cleanObject(this), this.isDestroyed = !0
                },
                destroyUI: function () {
                    this.isInDom && (this.teardownDomEvents(), this.dom.remove(), $(this.domMenuHolder).remove()), this.isInDom = !1, this.domHolder = null
                },
                resetUI: function () {
                    this.isInDom && (this.close(), this.blur(), this.dom.removeClass(this.clsHover), this.setBaseContent(""), this.menu.resetUI())
                },
                render: function () {
                    var e = '<div id="' + this.id + '" class="' + this.clsSearchMenuRoot + " " + this.clsDefault + '">' + '<input id="' + this.baseId + '" class="' + this.clsBaseInput + '" tabindex="0">' + '<span class="icon"></span>' + "</div>";
                    return e
                },
                renderItemContentForBaseDefault: function (e) {
                    return e
                },
                putInDom: function (e) {
                    if (this.isInDom) return;
                    $(e || this.domHolder).append(this.htmlBuffer), this.isInDom = !0, this.dom = $("#" + this.id), this.domBase = $("#" + this.baseId)
                },
                postDomInsertionSetup: function () {
                    var e = this;
                    this.disabled ? this.disable() : this.setupDomEvents()
                },
                setupDomEvents: function () {
                    if (!this.isInDom || this.areDomEventsSet) return;
                    var e = this.onBaseContentChanged.bind(this);
                    this.domBase.bind("keyup", this.onBaseKeyUp.bind(this)).bind("focus", this.onBaseFocus.bind(this)).bind("blur", this.onBaseBlur.bind(this)).bind("paste", e).bind("drop", e).bind("cut", e), this.dom.bind("mouseenter", this.onRootMouseEnter.bind(this)).bind("mouseleave", this.onRootMouseLeave.bind(this)), $(document).bind("mousedown." + this.id, this.onDocumentMouseDown.bind(this)), this.areDomEventsSet = !0
                },
                teardownDomEvents: function () {
                    if (!this.isInDom) return;
                    this.domBase.unbind(), this.dom.unbind(), $(document).unbind("mousedown." + this.id), this.areDomEventsSet = !1
                },
                getBaseContent: function () {
                    return this.domBase.val()
                },
                setBaseContent: function (e) {
                    this.domBase.val(e)
                },
                syncViewWithValue: function () {
                    this.setBaseContent(this.renderItemContentForBase(this.value, this.getItemByValue(this.value)))
                },
                setValue: function (e, t) {
                    if (this.value === e) return;
                    var n = {
                        oldValue: this.value,
                        value: e,
                        source: t,
                        userInitiated: t === "click" || t === "keyboard" || t === "keyboardCue"
                    };
                    if (this.onBeforeChange(n) === !1) return;
                    this.value = e, this.syncViewWithValue(), this.setState("display"), this.onChange(n), this.trigger("change", n)
                },
                setState: function (e, t) {
                    if (this.state === e) return;
                    this.state = e, this.state === "search" ? this.menu.captureKeyboard() : this.state === "display" && (this.syncViewWithValue(), this.menu.releaseKeyboard(), this.close()), this.onStateChange()
                },
                focus: function () {
                    if (this.isFocused) return;
                    this.isFocused = !0, this.setState("search"), this.setBaseContent(""), this.clsStateManager.addState(this.clsFocused), this.onFocus(), this.trigger("focus")
                },
                blur: function () {
                    if (!this.isFocused) return;
                    this.onBeforeBlur(this.domBase.val()), this.isFocused = !1, this.searchDataSource && this.searchDataSource.abort && this.searchDataSource.abort(), this.setState("display"), this.clsStateManager.removeState(this.clsFocused), this.onBlur(), this.trigger("blur")
                },
                open: function () {
                    if (this.isOpen) return;
                    this.isOpen = !0, this.menu.show(!1), this.domBase[0].focus(), this.focus(), this.clsStateManager.addState(this.clsOpen), this.dom.addClass(this.clsSearchMenuRoot), this.setMenuSizes(), this.menu.dom[0].style.visibility = "hidden", setTimeout(function () {
                        this.observeDomBasePositionOnce(this.close.bind(this)), this.positionMenu(this.menu, this.domBase[0], this.preferredPosition), this.menu.dom[0].style.visibility = ""
                    }.bind(this), 1), this.onOpen(), this.trigger("open")
                },
                close: function () {
                    if (!this.isOpen) return;
                    this.isOpen = !1, this.stopObservingDomBasePosition(), this.setPosition("down"), this.menu.hide(), this.clsStateManager.removeState(this.clsOpen), this.onClose(), this.trigger("close")
                },
                toggle: function () {
                    this.isOpen ? this.close() : this.open()
                },
                disable: function () {
                    this.setDisableState(!0)
                },
                enable: function () {
                    this.setDisableState(!1)
                },
                setDisableState: function (e) {
                    this.disabled = e, this.disabled ? (this.blur(), this.close(), this.teardownDomEvents(), this.clsStateManager.addState(this.clsDisabled), this.domBase[0].disabled = !0) : (this.setupDomEvents(), this.domBase[0].disabled = !1, this.clsStateManager.removeState(this.clsDisabled)), this.onDisabledChanged(), this.trigger("disableChanged")
                },
                show: function () {
                    this.dom.show(), this.trigger("show")
                },
                hide: function () {
                    this.dom.hide(), this.trigger("hide")
                },
                getDomBaseForPositioning: function () {
                    return this.domBase[0]
                },
                getItemByValue: function (e) {
                    return this.menu.getItemByValue(e)
                },
                _invalidKeyInputs: [o.LEFT, o.ENTER, o.NUMPAD_ENTER, o.RIGHT, o.TAB, o.SHIFT, o.ESCAPE, o.DOWN, o.UP, o.PAGE_UP, o.PAGE_DOWN, o.HOME, o.END],
                _isValidKeyInput: function (e) {
                    return this._invalidKeyInputs.indexOf(e) === -1
                },
                onBeforeChange: s,
                onChange: s,
                onFocus: s,
                onBeforeBlur: s,
                onBlur: s,
                onOpen: s,
                onClose: s,
                onDataReady: s,
                onDisabledChanged: s,
                onDestroy: s,
                onStateChange: function () {},
                onDocumentMouseDown: function (e) {
                    if (!this.isInDom || !e.target) return;
                    var t = $.contains(this.dom[0], e.target) || this.dom[0] === e.target,
                        n = $.contains(this.menu.dom[0], e.target) || this.menu.dom[0] === e.target;
                    if (t || n) return;
                    this.blur(), this.close()
                },
                onBaseKeyUp: function (e) {
                    if (!this._isValidKeyInput(e.keyCode)) return;
                    this.onBaseContentChanged(e)
                },
                onBaseContentChanged: function (e) {
                    this.state === "display" && this.setState("search"), this.searchDataSource.filter(this, this.domBase.val()), this.trigger("input", e)
                },
                onBaseFocus: function () {
                    this.focus()
                },
                onBaseBlur: function () {
                    !this.isOpen && this.blur()
                },
                onRootMouseEnter: function (e) {
                    this.clsStateManager.addState(this.clsHover)
                },
                onRootMouseLeave: function (e) {
                    this.clsStateManager.removeState(this.clsHover)
                }
            });
        i.makePlugin("zdSearchMenu", a), n.exports = a
    }
}), this.require.define({
    "lib/views/autocomplete_view": function (e, t, n) {
        var r = t("lib/views/form_field_view"),
            i = t("lib/core_widgets/search_menu"),
            s = r.extend({
                buildDelegate: function () {
                    var e = this.get("configOptions");
                    e.searchDataSource = this.searchDataSource, e.domHolder = e.domHolderSelector ? $(e.domHolderSelector)[0] : this.$()[0], e.disabled = this.get("disabled"), this.delegate = new i(e), delete e.disabled, delete e.domHolder, delete e.searchDataSource, this.delegate.setValue(this.get("value"), "ext_init"), this.delegate.addObserver("change", _(this.delegateDidChange).bind(this)), this.get("delegate").addObserver("focus", _(this.onFocus).bind(this))
                },
                onFocus: function () {
                    var e = this;
                    this.defaultDataSource && this.defaultDataSource.fetchData(function (t) {
                        e.loadOptions(t), e.showMenu()
                    })
                },
                loadOptions: function (e) {
                    this.delegate.loadData(e)
                },
                showMenu: function () {
                    this.delegate.open()
                },
                destroy: function () {
                    this.searchDataSource = null, this._super.apply(this, arguments)
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/welcome_modal_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/user_settings_consumer"), {
            showForNewOwner: function (e) {
                var t = Zd.get("currentUser");
                if (Zd.get("currentUser.isAccountOwner") && !Zd.get("currentUser.last_login_at") && this.get("userSettings.showWelcomeDialog")) {
                    var n = this,
                        r = $("#welcome").modal().on("hidden", function () {
                            n.set("userSettings.showWelcomeDialog", !1), e()
                        });
                    this.set("email", t.get("email"))
                } else e()
            },
            lookForEmailMsg: function () {
                return I18n.t("txt.modal.welcome.look_for_an_email", {
                    email: this.get("email")
                })
            }.property("email").cacheable()
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "WelcomeModalController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/agreement": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                id: Number,
                name: String,
                type: String,
                status: String,
                partnerName: {
                    type: String,
                    path: "partner_name"
                },
                createdAt: {
                    type: Date,
                    path: "created_at"
                }
            }
        }).extend({
            inbound: function () {
                return this.get("type") === "inbound"
            }.property("type").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "models/agreements": function (e, t, n) {
        var r = t("models/agreement"),
            i = Em.ResourceCollection.extend({
                type: r,
                expireIn: 1800,
                url: "/api/v2/sharing_agreements",
                parse: function (e) {
                    var t = (e || {}).sharing_agreements;
                    return this._super(t || [])
                },
                active: function () {
                    return this.filter(function (e) {
                        return e.get("status") === "accepted" && !e.get("inbound")
                    })
                }.property("content.@each.status", "content.@each.inbound").cacheable()
            });
        n.exports = i
    }
}), this.require.define({
    "models/group": function (e, t, n) {
        function r() {
            t("models/assignable_groups").instance().expireNow(), t("models/groups").instance().expireNow()
        }
        var i = Em.Object.extend({}).reopenClass({
            toString: function () {
                return "Agent"
            }
        }),
            s = Em.Resource.define({
                url: "/api/v2/groups",
                schema: {
                    id: Number,
                    name: String,
                    agents: {
                        type: Em.ResourceCollection,
                        itemType: i,
                        nested: !0
                    }
                },
                parse: function (e) {
                    return this._super(e.groups || e)
                }
            }).extend({
                toJSON: function () {
                    var e = {
                        name: this.get("name")
                    };
                    return {
                        group: e
                    }
                },
                save: function () {
                    return this._super.apply(this, arguments).done(r)
                },
                destroyResource: function () {
                    return this._super.apply(this, arguments).done(r)
                }
            }).reopenClass({
                toString: function () {
                    return "Group"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "mixins/fetch_all_next_pages": function (e, t, n) {
        var r = Em.Mixin.create({
            init: function () {
                this._super.apply(this, arguments), Em.addListener(this, "didFetch", this, this.fetchNextPageIfNecessary)
            },
            parse: function (e, t) {
                return this.set("nextPage", t && t.nextPage), this._super.call(this, e)
            },
            fetchNextPageIfNecessary: function (e, t) {
                this.get("nextPage") && Em.Resource.ajax({
                    url: this.get("nextPage")
                }).done(function (t, n, r) {
                    e.appendNextPage(t), Em.sendEvent(e, "didFetch")
                })
            },
            appendNextPage: function (e) {
                this.pushObjects(this.instantiateItems(this.parse(e)))
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/groups": function (e, t, n) {
        var r = t("models/group"),
            i = t("mixins/fetch_all_next_pages"),
            s = Em.ResourceCollection.extend(i, {
                type: r,
                url: "/api/v2/groups",
                expireIn: 31536e3,
                remoteExpiryKey: "groups",
                parse: function (e) {
                    return this._super.call(this, e.groups, {
                        nextPage: e.next_page
                    })
                }
            });
        s.reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "All Groups"
            }
        }), n.exports = s
    }
}), this.require.define({
    "models/assignable_groups": function (e, t, n) {
        var r = t("models/group"),
            i = Em.ResourceCollection.extend({
                type: r,
                expireIn: 31536e3,
                remoteExpiryKey: "groups",
                url: "/api/v2beta/groups/assignable",
                agents: function () {
                    var e = [];
                    return this.map(function (t) {
                        t.get("agents").map(function (t) {
                            e.push(t.get("id"))
                        })
                    }), _.uniq(e)
                }.property("@each.length").cacheable(),
                hasAgentId: function (e) {
                    return this.get("agents").indexOf(e) != -1
                }
            });
        i.reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "Assignable Groups"
            }
        }), n.exports = i
    }
}), this.require.define({
    "models/forums/forum_display_type": function (e, t, n) {
        var r = t("lib/lotus/enum"),
            i = Em.Object.extend(r, {
                toString: function () {
                    return this.get("_toString")
                },
                _toString: function () {
                    return I18n.t("txt.entries.title." + this.get("label"))
                }.property("label").cacheable()
            });
        i.create({
            id: 1,
            label: "article"
        }), i.create({
            id: 2,
            label: "idea"
        }), i.create({
            id: 3,
            label: "question"
        }), n.exports = i
    }
}), this.require.define({
    "models/forums/forum": function (e, t, n) {
        var r = t("models/forums/forum_display_type"),
            i = Em.Resource.define({
                url: "/api/v1/forums",
                schema: {
                    id: Number,
                    position: Number,
                    name: String,
                    description: String,
                    is_locked: Boolean,
                    is_public: Boolean,
                    use_for_suggestions: Boolean,
                    entries_count: Number,
                    visibility_restriction_id: Number,
                    display_type_id: Number,
                    category_id: Number,
                    translation_locale_id: Number,
                    organization_id: Number,
                    created_at: Date,
                    updated_at: Date
                }
            }).extend({
                title: function () {
                    return this.get("name")
                }.property("name").cacheable(),
                type: function () {
                    return r[this.get("display_type_id")]
                }.property("display_type_id").cacheable(),
                url: function () {
                    return "/forums/" + this.get("id")
                }.property("id").cacheable()
            }).reopenClass({
                toString: function () {
                    return "Forum"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/forums/forum_entry": function (e, t, n) {
        var r = t("models/forums/forum"),
            i = Em.Resource.define({
                url: "/api/v1/entries",
                schema: {
                    id: Number,
                    submitter: {
                        type: "Zd.User"
                    },
                    forum: {
                        type: r
                    },
                    organization_id: Number,
                    position: Number,
                    hits: Number,
                    created_at: Date,
                    updated_at: Date,
                    title: String,
                    is_pinned: Boolean,
                    current_tags: String,
                    body: String,
                    votes_count: Number,
                    posts_count: Number,
                    flag_type: Number,
                    is_public: Boolean,
                    is_highlighted: Boolean,
                    attachments: Object
                }
            }).extend({
                classicHREF: function () {
                    return "/entries/" + this.get("id")
                }.property("id").cacheable(),
                zendeskHREF: function () {
                    return "https://support.zendesk.com/entries/" + this.get("id")
                }.property("id").cacheable()
            });
        n.exports = i
    }
}), this.require.define({
    "views/users/user_field_views": function (e, t, n) {
        n.exports = Em.Mixin.create({
            userFieldViews: null,
            init: function () {
                this._super(), this.set("userFieldViews", [])
            },
            registerUserFieldView: function (e) {
                this.get("userFieldViews").pushObject(e)
            },
            unregisterUserFieldView: function (e) {
                this.get("userFieldViews").removeObject(e)
            }
        })
    }
}), this.require.define({
    "views/users/register_user_view": function (e, t, n) {
        var r = t("views/users/user_field_views"),
            i = Em.Mixin.create({
                didInsertElement: function () {
                    this._super();
                    var e = this.nearestWithBehavior(r);
                    e && e.registerUserFieldView && e.registerUserFieldView(this)
                },
                willDestroyElement: function () {
                    this._super();
                    var e = this.nearestWithBehavior(r);
                    e && e.unregisterUserFieldView && e.unregisterUserFieldView(this)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/organization/related": function (e, t, n) {
        var r = Em.Resource.define({
            url: function (e) {
                return "/api/v2/organizations/" + e.get("organizationId") + "/related.json"
            },
            schema: {
                tickets: {
                    type: Number,
                    path: "organization_related.tickets_count"
                },
                users: {
                    type: Number,
                    path: "organization_related.users_count"
                }
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/organization": function (e, t, n) {
        var r = t("models/organization/related"),
            i = t("lib/lotus/global_events"),
            s = Em.Resource.define({
                url: "/api/v2/organizations",
                schema: {
                    id: Number,
                    name: String,
                    created_at: Date,
                    updated_at: Date,
                    details: String,
                    domain_names: Object,
                    notes: String,
                    tags: Object,
                    group_id: Number,
                    shared_tickets: Boolean,
                    shared_comments: Boolean,
                    customFields: {
                        type: Object,
                        path: "organization_fields"
                    }
                },
                parse: function (e) {
                    return e.organization || e
                }
            }).extend({
                globalPermissions: function (e, t) {
                    return arguments.length === 2 ? t : Zd.get("globalPermissions")
                }.property(),
                resourceName: "Organization",
                type: Em.computed.alias("resourceName"),
                toJSON: function () {
                    var e = {
                        name: this.get("name"),
                        notes: $.trim(this.get("notes") || ""),
                        details: $.trim(this.get("details") || ""),
                        group_id: this.get("group_id"),
                        shared_tickets: this.get("shared_tickets"),
                        domain_names: this.get("domain_names"),
                        shared_comments: this.get("shared_comments"),
                        tags: this.get("tags"),
                        organization_fields: this.get("customFields")
                    };
                    return e.details === "-" && (e.details = ""), e.notes === "-" && (e.notes = ""), {
                        organization: e
                    }
                },
                fetch: function () {
                    var e = this._super.apply(this, arguments),
                        t = this;
                    return e.fail(function (e) {
                        e.status === 404 && t.set("resourceState", Em.Resource.Lifecycle.DESTROYED)
                    }), e
                },
                isDeleted: function () {
                    return this.get("resourceState") === Em.Resource.Lifecycle.DESTROYED
                }.property("resourceState").volatile(),
                related: function () {
                    var e = this.get("id");
                    return e == null ? null : r.create({
                        organizationId: e
                    })
                }.property("id").cacheable(),
                domains: function (e, t) {
                    return arguments.length == 2 ? (this.set("domain_names", (t || "").split(" ")), t) : (this.get("domain_names") || []).join(" ")
                }.property("domain_names").cacheable(),
                didSave: function (e) {
                    if (e && e.created) return;
                    i.trigger("@organization:was_updated", this)
                },
                destroyResource: function () {
                    return this._super.apply(this, arguments).done(this.resourceDidDestroy.bind(this))
                },
                resourceDidDestroy: function () {
                    i.trigger("@organization:was_deleted", this)
                },
                href: function () {
                    var e = this.get("id");
                    return e ? "#/organizations/" + this.get("id") : null
                }.property("id").cacheable(),
                permissions: function () {
                    var e = this.get("globalPermissions"),
                        t = e ? e.get("organizationEditing") : !1,
                        n = e ? e.get("organizationNotes") : !1;
                    return {
                        can_edit_properties: t,
                        can_not_edit_properties: !t,
                        can_edit_notes: n,
                        can_not_edit_notes: !n
                    }
                }.property("id", "globalPermissions").cacheable(),
                collections: function () {
                    var e = [];
                    return _(this.constructor.schema).each(function (t, n) {
                        t.get("type").isEmberResourceCollection && e.push(this.get(n))
                    }, this), e
                }.property().cacheable(),
                expire: function () {
                    this._super(), this.expireCollections()
                },
                expireCollections: function () {
                    _(this.get("collections")).invoke("expire")
                }
            }).reopenClass({
                toString: function () {
                    return "Organization"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "views/users/properties/mixins": function (e, t, n) {
        var r = t("lib/profile_tracker"),
            i = t("views/users/register_user_view"),
            s = t("models/organization"),
            o = Em.Mixin.create(i, {
                controllerBinding: "controllerView.controller",
                userBinding: "controller.user"
            }),
            u = Em.Mixin.create({
                value: function (e, t) {
                    if (arguments.length === 2) {
                        var n = this.get("user");
                        return t === "-1" ? n && n.set("organization", null) : n && n.set("organization", s.create({
                            id: t
                        })), t == null ? "-1" : t
                    }
                    return this.get("user.organization.id") || "-1"
                }.property("user.organization").cacheable(),
                classNames: ["select", "value"],
                userDidChangeValue: function () {
                    Em.run.next(this, function () {
                        var e = this.nearestInstanceOf(t("lib/views/popover_view"));
                        e && e.dismissPopover(), r.track("fields:organization"), this.get("user").save({
                            update: !1
                        })
                    })
                }
            });
        n.exports = Object.freeze({
            UserProperties: o,
            UserOrganizationViewBase: u
        })
    }
}), this.require.define({
    "views/users/user_property_permissions": function (e, t, n) {
        n.exports = Object
            .freeze({
                UserCanEditProperties: Em.Mixin.create({
                    disabled: Em.computed.not("user.userPermissions.editProperties")
                }),
                UserCanEditOrganization: Em.Mixin.create({
                    disabled: Em.computed.not("user.userPermissions.editOrganization")
                }),
                UserCanEditGroups: Em.Mixin.create({
                    disabled: function () {
                        return !Zd.get("currentUser.isAdmin")
                    }.property("Zd.currentUser.isAdmin").cacheable()
                }),
                UserCanEditRole: Em.Mixin.create({
                    disabled: Em.computed.not("user.userPermissions.editRole")
                }),
                UserCanEditAccess: Em.Mixin.create({
                    disabled: Em.computed.not("user.userPermissions.editAccess")
                }),
                UserCanEditTags: Em.Mixin.create({
                    disabled: Em.computed.not("user.userPermissions.modifyTags")
                })
            })
    }
}), this.require.define({
    "lib/fetch_control": function (e, t, n) {
        var r = Em.Mixin.create({
            fetchData: function (e) {
                var t = this;
                if (e !== "all") {
                    var n = $.Deferred();
                    return this._fetchDataForState("all").always(function () {
                        t._fetchDataForState(e).done(function () {
                            n.resolve()
                        })
                    }), n
                }
                return this._fetchDataForState(e)
            },
            _fetchDataForState: function (e) {
                var t = new Em.Set($.makeArray(this.get("expirableObjects")[e])),
                    n = t.map(this._deferredFetchFor, this);
                return $.when.apply($, n)
            },
            _fetchChain: function (e, t, n) {
                var r = this;
                if (t.length === 0) {
                    e.done(function () {
                        n.resolve()
                    });
                    return
                }
                return e.done(function () {
                    r._fetchChain(r._deferredFetchFor(t[0]), t.slice(1), n)
                })
            },
            _deferredFetchFor: function (e) {
                if (Em.isArray(e)) return this._deferredFetchForChained(e);
                var t = this._objectFromPath(e);
                if (t && !t.get("dirty")) {
                    if (t.get("isFetching")) return this._deferredFetchForFetching(t);
                    if (t.get("isFetchable")) return this._deferredFetchForFetchable(t)
                }
                return $.when()
            },
            _deferredFetchForChained: function (e) {
                var t = $.Deferred();
                return this._fetchChain($.when(), e, t), this._toSuccessOnlyPromise(t.promise())
            },
            _deferredFetchForFetching: function (e) {
                return this._toSuccessOnlyPromise(e.fetched())
            },
            _deferredFetchForFetchable: function (e) {
                var t = Em.typeOf(e.fetchData) === "function" ? e.fetchData() : e.fetch();
                return this._toSuccessOnlyPromise(t)
            },
            _objectFromPath: function (e) {
                return Em.isGlobalPath(e) ? Em.get(e) : Em.get(this, e)
            },
            _toSuccessOnlyPromise: function (e) {
                var t = $.Deferred();
                return e.always(function () {
                    t.resolve()
                }), t.promise()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/group_membership": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = Em.Resource.define({
                url: "/api/v2/group_memberships",
                schema: {
                    id: Number,
                    "default": Boolean,
                    user: {
                        type: "Zendesk.User",
                        path: "user_id"
                    },
                    group: {
                        type: t("models/group"),
                        path: "group_id"
                    }
                }
            }).extend({
                toJSON: function () {
                    var e = {
                        user_id: this.get("user_id"),
                        group_id: this.get("group_id"),
                        "default": this.get("default")
                    };
                    return {
                        group_membership: e
                    }
                },
                save: function () {
                    var e = this.get("user"),
                        t = this.get("group");
                    return t.set("still_saving", !0), this._super.apply(this, arguments).done(function () {
                        e.get("group_memberships").refresh(), e.get("groups").refresh().done(function () {
                            t.set("still_saving", !1)
                        })
                    })
                },
                didSave: function () {
                    r.trigger("@group_memberships:was_updated", this)
                },
                destroyResource: function () {
                    var e = this.get("user"),
                        t = this.get("group");
                    return t.set("still_saving", !0), this._super.apply(this, arguments).done(function () {
                        e.get("group_memberships").refresh(), e.get("groups").refresh().done(function () {
                            r.trigger("@group_memberships:was_updated", e), t.set("still_saving", !1)
                        })
                    })
                }
            }).reopenClass({
                toString: function () {
                    return "GroupMembership"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/group_memberships_controller": function (e, t, n) {
        var r = t("models/group"),
            i = t("models/group_membership"),
            s = Em.Object.extend(t("lib/fetch_control"), {
                user: null,
                isModalSetup: !1,
                newGroup: null,
                groups: Em.computed.singleton("models/groups"),
                assignableGroups: Em.computed.singleton("models/assignable_groups"),
                expirableObjects: {
                    all: ["groups"]
                },
                setMembership: function (e) {
                    var t = i.create({
                        user_id: this.get("user.id"),
                        group_id: e
                    });
                    t.save()
                },
                removeMembership: function (e) {
                    var t = this.get("user.group_memberships"),
                        n = _.find(t.toArray(), function (t) {
                            return t.get("group_id") === e
                        });
                    n.destroyResource()
                },
                makeDefaultMembership: function (e) {
                    var t = this.get("user.group_memberships"),
                        n = _.find(t.toArray(), function (t) {
                            return t.get("group_id") === e
                        });
                    t.makeDefault(n)
                },
                addNewGroup: function () {
                    this.get("newGroup").save().done(_(function (e) {
                        this.setMembership(e.group.id), this.fetchData()
                    }).bind(this)), this.set("newGroup", r.create({
                        user_id: this.get("user.id")
                    }))
                },
                showModal: function () {
                    var e = this.get("modal");
                    e || (e = t("views/modals/group_memberships_modal").create({
                        controller: this
                    }), this.set("modal", e)), Em.run(function () {
                        e.get("state") !== "inDOM" && e.append(), e.showModal()
                    })
                },
                onHideModal: function () {
                    this.set("user", null), this.set("newGroup", null), this.get("assignableGroups").expireNow()
                },
                showGroupMembershipsForm: function (e) {
                    this.fetchData(), this.set("user", e), this.set("newGroup", r.create({
                        user_id: e.get("id")
                    })), this.get("user.group_memberships").fetch(), this.showModal()
                },
                modalTitle: function () {
                    var e = this.get("user.name"),
                        t = e == null ? null : new Handlebars.SafeString(e);
                    return I18n.t("txt.modal.group_management.title", {
                        name: t
                    })
                }.property("user.name").cacheable()
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "GroupMembershipsController"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "views/users/properties/groups/agent_groups_view": function (e, t, n) {
        var r = t("views/users/properties/mixins"),
            i = t("views/users/user_property_permissions"),
            s = Em.CollectionView.extend(r.UserProperties, i.UserCanEditGroups, {
                groupMembershipsController: Em.computed.singleton("controllers/group_memberships_controller"),
                name: "groups",
                classNames: "groups value",
                classNameBindings: ["disabled"],
                contentBinding: "user.groups",
                emptyView: Ember.View.extend({
                    template: function () {
                        return "-"
                    }
                }),
                click: function () {
                    this.get("disabled") || this.get("groupMembershipsController").showGroupMembershipsForm(this.get("user"))
                }
            });
        n.exports = s
    }
}), this.require.define({
    "views/users/properties/groups/membership_item_view": function (e, t, n) {
        var r = Em.View.extend({
            groupMembershipsController: Em.computed.singleton("controllers/group_memberships_controller"),
            classNameBindings: ["isSelected:selected", "content.still_saving:saving"],
            classNames: ["tile"],
            userBinding: "parentView.user",
            isSelected: function () {
                return this.get("user.groups") ? this.get("user.groups").findProperty("id", this.get("content.id")) != null : !1
            }.property("user.groups.@each").cacheable(),
            click: function () {
                var e = this.get("groupMembershipsController");
                if (this.get("isSelected")) {
                    if (this.get("user.group_memberships.default.group_id") === this.get("content.id")) return alert(I18n.t("txt.modal.group_management.default_group_error")), !1;
                    e.removeMembership(this.get("content.id"))
                } else e.setMembership(this.get("content.id"))
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/users/properties/groups/memberships_view": function (e, t, n) {
        var r = t("views/users/properties/groups/membership_item_view"),
            i = Em.CollectionView.extend({
                classNames: ["groups"],
                content: Em.computed.singleton("models/groups"),
                itemViewClass: r
            });
        n.exports = i
    }
}), this.require.define({
    "views/modals/dynamic_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            templateName: "templates/modals/modal_basic",
            options: {},
            titleView: Em.View.extend({
                templateName: "templates/modals/modal_title"
            }),
            bodyView: Em.View.extend({
                templateName: "templates/modals/modal_body"
            }),
            footerView: Em.View.extend({
                templateName: "templates/modals/modal_footer"
            }),
            didInsertElement: function () {
                return this.$().modal(this.get("options")), this.center(), $(window).bind("resize." + Em.guidFor(this), _(this.center).bind(this)), this._super.apply(this, arguments)
            },
            isInDom: function () {
                return Em.get(this, "state") === "inDOM"
            },
            center: function () {
                if (!this.isInDom()) return;
                r.centerModalDom(this.$())
            },
            centerIfOutsideView: function () {
                if (!this.isInDom() || r.isModalDomWithinView(this.$())) return;
                this.center()
            },
            onBodyChanged: function () {
                this.center()
            }.observes("body"),
            close: function () {
                this.$().modal("hide")
            },
            destroy: function () {
                $(window).unbind("resize." + Em.guidFor(this)), this._super()
            }
        }).reopenClass({
            create: function (e) {
                if (!e) return;
                var t = this._super.call(this, e);
                return t.append(), t
            },
            isModalDomWithinView: function (e) {
                var t = $(document).height(),
                    n = e[0].offsetTop,
                    r = e[0].offsetHeight;
                return t > n + r
            },
            centerModalDom: function (e) {
                var t = e.find(".modal-body"),
                    n = e.find(".modal-header"),
                    r = e.find(".modal-footer"),
                    i = $(document).height(),
                    s = 10;
                t.css("height", "auto");
                var o = t.outerHeight() - t.height();
                if (i - e.outerHeight() < 2 * s) {
                    var u = i - n.outerHeight() - r.outerHeight() - o - 2 * s;
                    t.css("height", u)
                }
                e.css("marginTop", parseInt(-e.outerHeight() / 2, 10) + "px")
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/quick_view_mixin": function (e, t, n) {
        var r = Em.Mixin.create({
            init: function () {
                this._super(), this.get("tooltip").on("@ticket_tooltip:hide", this, this.tooltipDidHide)
            },
            willDestroy: function () {
                this.get("tooltip").off("@ticket_tooltip:hide", this, this.tooltipDidHide), this._super && this._super()
            },
            quickviewEnabled: !1,
            quickview: function () {
                this.toggleProperty("quickviewEnabled")
            },
            tooltipUpdater: function () {
                this.get("quickviewEnabled") ? this.showTooltip(this.get("childViewInFocus")) : this.hideTooltip()
            }.observes("childViewInFocus", "quickviewEnabled"),
            showTooltip: function (e) {
                e && e.$().length && Em.run.next(this, function () {
                    this.get("tooltip").showForRow(e)
                })
            },
            hideTooltip: function () {
                this.get("tooltip").hide()
            },
            tooltipDidHide: function () {
                this.set("quickviewEnabled", !1)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/row_with_expandable_tags": function (e, t, n) {
        var r = Em.Mixin.create({
            expandableTooltipTemplate: function (e) {
                return '<div class="tooltip filter-tooltip ' + e + '">' + '<div class="tooltip-arrow"></div>' + '<div class="tooltip-inner"></div>' + "</div>"
            },
            expandableElementSelector: function () {
                return ".%@ > div".fmt(this.get("expandableColumns").join(" > div, ."))
            }.property(),
            hasExpandableTooltip: function (e) {
                return !!e.data("tooltip")
            },
            initExpandableTooltip: function (e, t) {
                var n = this.get("content." + t);
                return e.tooltip({
                    html: !0,
                    placement: "bottom",
                    title: "<span>" + n.join("</span><span>") + "</span>",
                    template: this.expandableTooltipTemplate(t)
                })
            },
            showExpandableTooltip: function (e) {
                this.hasExpandableTooltip(e) || this.initExpandableTooltip(e, e.parent().attr("class")).tooltip("show");
                if (e.data("tooltip").enabled) return;
                e.tooltip("enable").tooltip("show")
            },
            hideExpandableTooltip: function (e) {
                if (!e.data("tooltip")) return;
                e.tooltip("hide").tooltip("disable")
            },
            isElementTruncating: function (e) {
                return e.scrollWidth > e.offsetWidth
            },
            mouseOver: function (e) {
                var t = this.$(this.get("expandableElementSelector"));
                if (!t[0]) return;
                var n = this;
                t.each(function (t, r) {
                    var i = $(r).parent(),
                        s = $.contains(i[0], e.target),
                        o = n.isElementTruncating(r);
                    s && o && n.showExpandableTooltip($(r))
                }), this._super && this._super()
            },
            mouseOut: function (e) {
                var t = this.$(this.get("expandableElementSelector"));
                if (!t[0]) return;
                var n = this;
                t.each(function (t, r) {
                    var i = $(r).parent();
                    if ($.contains(i[0], e.target)) return;
                    n.hideExpandableTooltip($(r))
                }), this._super && this._super()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/table_row_view": function (e, t, n) {
        function i(e, t) {
            var n = String(e.get("id")),
                r = e.renderValue.call(t, Em.get(t, n));
            return '<td class="' + n + '">' + r + "</td>"
        }
        var r = t("lib/lotus/keyboard_listener").instance(),
            s = t("lib/lotus/collection_navigation_item"),
            o = t("lib/row_with_expandable_tags"),
            u = Em.View.extend(s, o, {
                tagName: "tr",
                expandableColumns: ["organization_id", "current_tags"],
                mouseDown: function (e) {
                    var t = e.ctrlKey || r.get("currentKeyCode") === $.ui.keyCode.COMMAND;
                    this.activate(t)
                },
                click: function (e) {
                    (e.ctrlKey || r.get("currentKeyCode") === $.ui.keyCode.COMMAND) && e.preventDefault(), this.get("parentView").setChildViewInFocus(this)
                },
                activate: Em.K,
                columns: Em.computed.oneWay("parentView.columns"),
                render: function (e) {
                    var t = this.get("content");
                    return this.get("columns").forEach(function (n) {
                        e.push(i(n, t))
                    }), this._super(e)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TableRowView"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "lib/views/row_with_tooltip_mixin": function (e, t, n) {
        var r = Em.Mixin.create({
            tooltip: Em.computed.oneWay("parentView.tooltip"),
            showTooltip: function (e) {
                this.get("tooltip").showForRow(this, e)
            },
            hideTooltip: function () {
                this.get("tooltip").hide()
            },
            mouseDown: function (e) {
                this.hideTooltip(), this._super && this._super(e)
            },
            mouseOver: function (e) {
                var t = $(e.target);
                t.is(".pop") && this.showTooltip(t)
            },
            mouseOut: function (e) {
                $(e.target).is(".pop") && this.hideTooltip()
            },
            mouseLeave: function () {
                this.hideTooltip()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/row_with_selection_mixin": function (e, t, n) {
        function r(e) {
            if (Em.get(e, "isSelectable")) {
                var t = Em.get(e, "selected") ? 'checked="checked"' : "",
                    n = Em.get(e, "enabled") ? "" : 'disabled="disabled"';
                return '<td class="selection"><input type="checkbox" %@ %@/></td>'.fmt(t, n)
            }
            return '<td class="selection"></td>'
        }
        var i = Em.Mixin.create({
            classNameBindings: ["content.selected"],
            setSelected: function (e) {
                var t = e ? "addToSelection" : "removeFromSelection",
                    n = this.get("controller") || this.get("parentView.controller");
                n && n[t] && n[t]([this.get("content.id")])
            },
            toggleSelected: function (e) {
                var t = this.get("content"),
                    n = Em.get(t, "selected") ? "deselectItem" : "selectItem";
                this.get("controller")[n](t, e)
            },
            click: function (e) {
                this.isElementInSelectionColumn(e.target) && this.toggleSelected(e.shiftKey), this._super && this._super(e)
            },
            mouseDown: function (e) {
                if (this.isElementInSelectionColumn(e.target)) return !1;
                this._super && this._super(e)
            },
            isElementInSelectionColumn: function (e) {
                var t = $(e),
                    n = t.parents("td.selection")[0];
                return t.is("td.selection") || n && $.contains(n, e)
            },
            updateSelected: function () {
                var e = this.get("content.selected");
                this.$("td.selection input").prop("checked", e), this.setSelected(e)
            }.observes("content.selected"),
            updateEnabledStatus: function () {
                var e = this.get("content.enabled");
                this.$("td.selection input").prop("disabled", !e), this.$("td.selection input").prop("checked", !1);
                var t = this.$("td.selection").data("tooltip");
                this.$("td.selection").toggleClass("disabled", !e), e ? t && (t.enabled = !1) : t ? t.enabled = !0 : this.buildSelectionTooltip()
            }.observes("content.enabled"),
            buildSelectionTooltip: function () {
                this.$("td.selection").tooltip({
                    html: !1,
                    placement: "right",
                    title: I18n.t("txt.ticket.bulk.selection_limit_message")
                })
            },
            render: function (e) {
                var t = this.get("content");
                return e.push(r(t)), this._super(e)
            }
        });
        n.exports = i
    }
}), this.require.define({
    "lib/views/row_with_grouping_mixin": function (e, t, n) {
        function i(e, t) {
            var n = Em.get(t, String(e.get("id"))),
                i = r({
                    header: e.renderGroupingHeader(),
                    value: e.renderGroupingValue(n, !0, t)
                });
            return new Handlebars.SafeString(i)
        }

        function s(e, t) {
            return '<tr class="grouping"><td colspan="100">' + i(e, t) + "</td>" + "</tr>"
        }
        var r = t("lib/environment").test ? Handlebars.compile("<span class='grouper'>{{header}}</span>: {{{value}}}") : Handlebars.compile(I18n.translations["txt.views.ticket_table_row_view.grouping_header"]),
            o = Em.Mixin.create({
                didInsertElement: function () {
                    var e = this.get("newGrouping"),
                        t = this.get("content");
                    e && (this.groupHeader = $(s(e, t)), this.$().before(this.groupHeader)), this._super()
                },
                previousContent: function () {
                    var e = this.get("contentIndex");
                    if (e > 0) {
                        var t = this.get("parentView.content");
                        if (t) return t.objectAt(e - 1)
                    }
                },
                newGrouping: function () {
                    var e = this.get("collectionView.groupingColumn");
                    if (!e) return !1;
                    var t = this.get("content"),
                        n = this.previousContent(),
                        r = e.get("id"),
                        i = e.renderGroupingValue(Em.get(t, String(r)), !0, t),
                        s = n && e.renderGroupingValue(Em.get(n, String(r)), !0, n);
                    return n && i === s ? !1 : e
                }.property("content.id").cacheable(),
                willDestroyElement: function () {
                    this.groupHeader && this.groupHeader.remove(), this._super && this._super()
                }
            });
        n.exports = o
    }
}), this.require.define({
    "lib/views/ticket_table_row_view": function (e, t, n) {
        var r = t("lib/views/table_row_view"),
            i = r.extend(t("lib/views/row_with_tooltip_mixin"), t("lib/views/row_with_selection_mixin"), t("lib/views/row_with_grouping_mixin"), {
                classNameBindings: ["content.isViewedByOthers", "content.statusName", "content.isSaving:saving"],
                activate: function (e) {
                    this.get("controller").openTicket(this.get("content"), e)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "lib/ticket_tooltip": function (e, t, n) {
        var r = t("helpers/truncate_and_trim"),
            i = function (e, t) {
                return function () {
                    return r.call(this, e, {
                        hash: {
                            length: t
                        }
                    })
                }.property(e).cacheable()
            }, s = {
                offsetH: 10,
                offsetV: 10,
                offsetFromDocEdge: 20
            }, o = Em.View.extend({
                init: function () {
                    $(document).on("mousedown." + Em.guidFor(this), this.hide.bind(this)), this._super()
                },
                willDestroy: function () {
                    $(document).off("mousedown." + Em.guidFor(this)), this.$().off(), this._super && this._super()
                },
                didInsertElement: function () {
                    var e = this;
                    this.$().on("mouseover", function (t) {
                        return e.hide(), t.stopPropagation(), !1
                    })
                },
                templateName: "templates/filters/ticket_tooltip",
                classNames: "popover ticket_summary".w(),
                content: null,
                isVisible: !1,
                suspendedContent: i("content.content", 200),
                description: i("content.description", 250),
                lastComment: i("content.lastComment.value", 250),
                showForRow: function (e, t) {
                    this.set("content", e.get("content")), this.showForElement(t || e.$(".pop"))
                },
                showForElement: function (e) {
                    this.positionForElement(e), this.set("isVisible", !0)
                },
                hide: function () {
                    this.set("isVisible", !1)
                },
                positionForElement: function (e) {
                    var t, n, r, i = this.$(),
                        o = e.offset(),
                        u = e.outerHeight(),
                        a = o.top + u / 2,
                        f = $(document).height();
                    a < f / 2 ? (t = o.top + u + s.offsetV, n = "auto", r = f - t - s.offsetFromDocEdge) : (t = "auto", n = f - o.top + s.offsetV, r = r - n - s.offsetFromDocEdge);
                    var l = i.width(),
                        c = o.left + s.offsetH,
                        h = $(document).width();
                    c + l > h && (c = Math.max(s.offsetH, h - l - 2 * s.offsetH)), i.css({
                        left: c,
                        top: t,
                        bottom: n
                    }), i.find(".popover-inner").css("max-height", r)
                },
                resetEffects: function () {
                    this.$().stop().css("opacity", 1)
                },
                execShowEffect: function () {
                    this.$().fadeIn(180)
                },
                visibilityDidChange: function () {
                    this.resetEffects(), this.get("isVisible") ? this.execShowEffect() : this.trigger("@ticket_tooltip:hide")
                }.observes("isVisible")
            }).reopenClass({
                toString: function () {
                    return "TicketTooltip"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "lib/views/table_body_view": function (e, t, n) {
        function o() {
            var e = this.get("childViewInFocus");
            e && e.activate()
        }
        var r = t("lib/lotus/collection_navigation"),
            i = t("lib/lotus/responder_view"),
            s = t("lib/views/table_row_view"),
            u = Em.CollectionView.extend(r, i, {
                tagName: "tbody",
                itemViewClass: s,
                activate: o,
                navigateRight: o,
                didInsertElement: function () {
                    return this.setupScrollElement(), this._super.apply(this, arguments)
                },
                setupScrollElement: function () {
                    this.set("scrollElement", this.$().closest(".pane"))
                },
                navigateOutOfBoundsNegative: function (e) {
                    return this.get("controller.isFirstPage") ? this._super.apply(this, arguments) : (this.get("controller").previousPage(), this.get("controller.perPage") - 1)
                },
                navigateOutOfBoundsPositive: function (e) {
                    return this.get("controller.morePages") ? (this.get("controller").nextPage(), 0) : this._super.apply(this, arguments)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TableBodyView"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "lib/views/tickets_table_body_view": function (e, t, n) {
        var r = t("lib/views/quick_view_mixin"),
            i = t("lib/views/table_body_view"),
            s = t("lib/ticket_tooltip"),
            o = t("lib/views/ticket_table_row_view"),
            u = t("lib/monitoring/metrics").instance(),
            a = i.extend(r, {
                init: function () {
                    return this.set("ticketTooltip", s.create().append()), this.set("suspendedTooltip", s.create({
                        templateName: "templates/filters/suspended_tooltip"
                    }).append()), this._super()
                },
                tooltip: function () {
                    var e = this.get("controller.isSuspendedMode") ? "suspendedTooltip" : "ticketTooltip";
                    return this.get(e)
                }.property("controller.isSuspendedMode").cacheable(),
                itemViewClass: o,
                render: function () {
                    this._super.apply(this, arguments), u.timeEnd("filter/load")
                }
            }).reopenClass({
                toString: function () {
                    return "TicketsTableBodyView"
                }
            });
        n.exports = a
    }
}),
function () {
    Zd.Organization = require("models/organization"), Zendesk.Comment = {
        create: function () {
            var e = require("models/events/comment");
            return e.create.apply(e, arguments)
        }
    }, Zendesk.Group = require("models/group"), Zendesk.groups = require("models/groups").instance(), Zendesk.assignableGroups = require("models/assignable_groups").instance(), Zendesk.SelectView = require("lib/views/select_view"), Zendesk.Timezone = require("models/time_zone"), Zendesk.ForumEntry = require("models/forums/forum_entry"), Zendesk.Computed = Ember.computed, Zendesk.AgentGroupsView = require("views/users/properties/groups/agent_groups_view"), Zendesk.GroupMembershipsView = require("views/users/properties/groups/memberships_view"), Zendesk.DynamicModal = require("views/modals/dynamic_modal"), Zendesk.growl = require("lib/growl"), Zendesk.welcomeModalController = require("controllers/welcome_modal_controller").create(), require.cache["lib/computed"] = Ember.computed
}(), this.require.define({
    "lib/agreements_consumer": function (e, t, n) {
        n.exports = Em.Mixin.create({
            agreements: t("models/agreements").create()
        })
    }
}), this.require.define({
    "lib/ajax_poller": function (e, t, n) {
        var r = function (e, t, n, r) {
            this.url = e, this.checkFn = t, this.timeout = n || 1e3, this.maxAttempts = r || 10, this.attempts = 0, this.dfd = null
        };
        r.prototype.poll = function () {
            return this.dfd ? this.dfd.promise() : this._poll().promise()
        }, r.prototype._poll = function () {
            return this.dfd = this.dfd || $.Deferred(), Em.Resource.ajax({
                url: this.url,
                context: this
            }).done(function (e) {
                if (this.checkFn(e)) this.dfd.resolve(), this.dfd = null;
                else {
                    if (this.attempts > this.maxAttempts - 1) {
                        this.dfd.reject();
                        return
                    }
                    this.attempts = this.attempts + 1, setTimeout(this._poll.bind(this), this.timeout)
                }
            }).fail(function () {
                this.dfd.reject(), this.dfd = null
            }), this.dfd
        }, n.exports = r
    }
}), this.require.define({
    "lib/alter_ego": function (e, t, n) {
        var r = Em.Mixin.create({
            resetForEditing: function () {
                this.get("isForEditing") && this.get("serverCopy").resetForEditing(), this.get("forEditingInstance") && this.get("forEditingInstance").destroy(), this.set("forEditingInstance", null)
            },
            forEditing: function () {
                if (this.get("isInitializing")) return undefined;
                if (this.get("isForEditing")) return this;
                var e = this.get("forEditingInstance");
                if (!e) {
                    var t = Em.copy(this.get("data")),
                        n = {
                            skipIdentityMap: !0,
                            serverCopyInstance: this,
                            isForEditing: !0
                        };
                    e = this.constructor.create(n, t), this.get("isNew") && e.set("comment.body", this.get("comment.body")), this.set("forEditingInstance", e)
                }
                return e
            }.property("isInitializing", "isForEditing").volatile(),
            serverCopy: function () {
                var e = this.get("serverCopyInstance");
                return e ? e : this.get("isForEditing") ? undefined : this
            }.property("serverCopyInstance", "isForEditing").volatile(),
            updateForEditing: function () {
                var e = this.get("serverCopy"),
                    t;
                return this.get("isForEditing") ? e.updateForEditing() : e.get("isNew") ? $.when() : e.fetch().done(function (n) {
                    t = e.get("forEditing"), t.updateWithApiData(n), t.setDefaultValues && t.setDefaultValues(), Em.sendEvent(e.get("forEditing"), "didFetch")
                })
            },
            setWithoutMarkingDirty: function (e, t) {
                this.set("serverCopy.%@".fmt(e), t), this.set("forEditing.%@".fmt(e), t)
            },
            dirtyAttributes: function () {
                if (this.get("isInitializing")) return {};
                var e = {}, t, n, r = function (e, t) {
                        return (e || 0).valueOf() === (t || 0).valueOf()
                    }, i = function (e, t) {
                        if (e.length !== t.length) return !1;
                        var n = _.clone(e).sort(),
                            r = _.clone(t).sort();
                        for (var i = 0; i < e.length; i++)
                            if (n[i] !== r[i]) return !1;
                        return !0
                    }, s = function (e, t) {
                        return i(e.get("content") || [], t.get("content") || [])
                    };
                return Em.keys(this.constructor.schema).filter(function (o) {
                    var u;
                    t = this.get("forEditing.%@".fmt(o)), n = this.get("serverCopy.%@".fmt(o)), t && t.isEmberResourceCollection ? u = s : u = t instanceof Array ? i : r, u(t, n) || (e[o] = t)
                }, this), e
            }.property().volatile(),
            resetDirtyAttributes: function () {
                if (this.get("isNew")) return;
                for (var e in this.get("dirtyAttributes")) this.set("forEditing.%@".fmt(e), this.get("serverCopy.%@".fmt(e)))
            },
            dirty: function () {
                return Em.keys(this.get("dirtyAttributes")).length > 0
            }.property("dirtyAttributes").volatile(),
            isAttrDirty: function (e) {
                return this.get("forEditing." + e) !== this.get("serverCopy." + e)
            },
            resourcePropertyDidChange: function (e, t) {
                this._super.apply(this, arguments), this.propertyDidChange("dirty"), this.propertyDidChange("dirtyAttributes")
            },
            fetch: function () {
                return this._super.apply(this.get("serverCopy"), arguments)
            },
            expireAt: function (e, t) {
                var n = this.get("serverCopy");
                return n ? (arguments.length === 1 ? t = this.get("serverCopy").realExpireAt : this.get("serverCopy").realExpireAt = t, t) : undefined
            }.property().volatile()
        });
        n.exports = r
    }
}), this.require.define({
    "lib/apps_post_installation": function (e, t, n) {
        function r(e) {
            return e.type === "appsPostInstallation" && e.appId != null && e.installationId != null
        }

        function i() {
            Zendesk.Routes.setLocation("#/admin/installed_apps")
        }

        function s(e) {
            if (e.message == null) return;
            $.jGrowl(e.message, {
                themeState: e.status || "notice",
                life: 5e3
            })
        }

        function o(e) {
            e = e.originalEvent;
            if (e.data == null) return;
            try {
                var t = JSON.parse(e.data);
                r(t) && (i(), s(t))
            } catch (n) {}
        }
        var u = !1;
        n.exports = {
            init: function () {
                if (u) return;
                u = !0, $(window).on("message", o)
            }
        }
    }
}), this.require.define({
    "lib/autocompleters/at_mentions_data": function (e, t, n) {
        function r(e) {
            return e.replace("@", "")
        }
        n.exports = Object.freeze({
            pattern: "@",
            dictionary: function (e, n) {
                var r = {}, i = n ? n : t("models/assignable_groups").instance();
                return i.map(function (e) {
                    e.get("agents").map(function (e) {
                        r[e.email] = "@" + e.name
                    })
                }), r
            },
            asText: function (e) {
                return e ? r(e) + "," : e
            },
            onComplete: function (e, t) {
                $.event.trigger({
                    type: "add-collaborator",
                    name: r(t[e]),
                    email: e
                })
            }
        })
    }
}), this.require.define({
    "lib/autocompleters/autocompleters": function (e, t, n) {
        function i(e, t) {
            $.ajax({
                url: "/tags/autocomplete.json",
                data: {
                    name: e,
                    per_page: r
                },
                type: "POST",
                success: function (n) {
                    _.any(n) && t(n, e)
                }
            })
        }

        function s(e, t) {
            $.ajax({
                url: "/api/v2/users/autocomplete.json?name=" + e + "&per_page=" + r,
                type: "POST",
                dataType: "json",
                success: function (n) {
                    t(n.users, e)
                }
            })
        }
        var r = 8;
        n.exports = Object.freeze({
            perPage: r,
            tagAutocompleterLookup: i,
            userAutocompleterLookup: s
        })
    }
}), this.require.define({
    "lib/autocompleters/configuration": function (e, t, n) {
        var r = {
            maxLength: 30,
            maxBoxHeight: 200
        };
        n.exports = Object.freeze({
            config: r
        })
    }
}), this.require.define({
    "lib/autocompleters/data": function (e, t, n) {
        var r = t("lib/features"),
            i = [];
        r.hasFeature("atMentions") && i.push(t("lib/autocompleters/at_mentions_data")), i.push(t("lib/autocompleters/emoji_data")), r.hasFeature("placeholders") && i.push(t("lib/autocompleters/placeholder_data")), n.exports = Object.freeze(i)
    }
}), this.require.define({
    "lib/autocompleters/emoji_data": function (e, t, n) {
        n.exports = Object.freeze({
            pattern: ":",
            renderItem: function (e, t) {
                return '<li class="suggest-li suggest-emoji"><img src="//assets.zendesk.com/images/emojis/' + e + '.png" height="24px" width="24px" alt="' + t[e] + '" title="' + t[e] + '" style="vertical-align: middle; padding-right: 10px"/>' + '<span class="suggest-detail">' + t[e] + "</span>" + "</li>"
            },
            dictionary: function () {
                return {
                    "+1": ":+1:",
                    "-1": ":-1:",
                    100: ":100:",
                    1234: ":1234:",
                    "8ball": ":8ball:",
                    a: ":a:",
                    ab: ":ab:",
                    abc: ":abc:",
                    abcd: ":abcd:",
                    accept: ":accept:",
                    aerial_tramway: ":aerial_tramway:",
                    airplane: ":airplane:",
                    alarm_clock: ":alarm_clock:",
                    alien: ":alien:",
                    ambulance: ":ambulance:",
                    anchor: ":anchor:",
                    angel: ":angel:",
                    anger: ":anger:",
                    angry: ":angry:",
                    anguished: ":anguished:",
                    ant: ":ant:",
                    apple: ":apple:",
                    aquarius: ":aquarius:",
                    aries: ":aries:",
                    arrow_backward: ":arrow_backward:",
                    arrow_double_down: ":arrow_double_down:",
                    arrow_double_up: ":arrow_double_up:",
                    arrow_down: ":arrow_down:",
                    arrow_down_small: ":arrow_down_small:",
                    arrow_forward: ":arrow_forward:",
                    arrow_heading_down: ":arrow_heading_down:",
                    arrow_heading_up: ":arrow_heading_up:",
                    arrow_left: ":arrow_left:",
                    arrow_lower_left: ":arrow_lower_left:",
                    arrow_lower_right: ":arrow_lower_right:",
                    arrow_right: ":arrow_right:",
                    arrow_right_hook: ":arrow_right_hook:",
                    arrow_up: ":arrow_up:",
                    arrow_up_down: ":arrow_up_down:",
                    arrow_up_small: ":arrow_up_small:",
                    arrow_upper_left: ":arrow_upper_left:",
                    arrow_upper_right: ":arrow_upper_right:",
                    arrows_clockwise: ":arrows_clockwise:",
                    arrows_counterclockwise: ":arrows_counterclockwise:",
                    art: ":art:",
                    articulated_lorry: ":articulated_lorry:",
                    astonished: ":astonished:",
                    atm: ":atm:",
                    b: ":b:",
                    baby: ":baby:",
                    baby_bottle: ":baby_bottle:",
                    baby_chick: ":baby_chick:",
                    baby_symbol: ":baby_symbol:",
                    baggage_claim: ":baggage_claim:",
                    balloon: ":balloon:",
                    ballot_box_with_check: ":ballot_box_with_check:",
                    bamboo: ":bamboo:",
                    banana: ":banana:",
                    bangbang: ":bangbang:",
                    bank: ":bank:",
                    bar_chart: ":bar_chart:",
                    barber: ":barber:",
                    baseball: ":baseball:",
                    basketball: ":basketball:",
                    bath: ":bath:",
                    bathtub: ":bathtub:",
                    battery: ":battery:",
                    bear: ":bear:",
                    bee: ":bee:",
                    beer: ":beer:",
                    beers: ":beers:",
                    beetle: ":beetle:",
                    beginner: ":beginner:",
                    bell: ":bell:",
                    bento: ":bento:",
                    bicyclist: ":bicyclist:",
                    bike: ":bike:",
                    bikini: ":bikini:",
                    bird: ":bird:",
                    birthday: ":birthday:",
                    black_circle: ":black_circle:",
                    black_joker: ":black_joker:",
                    black_nib: ":black_nib:",
                    black_square: ":black_square:",
                    black_square_button: ":black_square_button:",
                    blossom: ":blossom:",
                    blowfish: ":blowfish:",
                    blue_book: ":blue_book:",
                    blue_car: ":blue_car:",
                    blue_heart: ":blue_heart:",
                    blush: ":blush:",
                    boar: ":boar:",
                    boat: ":boat:",
                    bomb: ":bomb:",
                    book: ":book:",
                    bookmark: ":bookmark:",
                    bookmark_tabs: ":bookmark_tabs:",
                    books: ":books:",
                    boom: ":boom:",
                    boot: ":boot:",
                    bouquet: ":bouquet:",
                    bow: ":bow:",
                    bowling: ":bowling:",
                    bowtie: ":bowtie:",
                    boy: ":boy:",
                    bread: ":bread:",
                    bride_with_veil: ":bride_with_veil:",
                    bridge_at_night: ":bridge_at_night:",
                    briefcase: ":briefcase:",
                    broken_heart: ":broken_heart:",
                    bug: ":bug:",
                    bulb: ":bulb:",
                    bullettrain_front: ":bullettrain_front:",
                    bullettrain_side: ":bullettrain_side:",
                    bus: ":bus:",
                    busstop: ":busstop:",
                    bust_in_silhouette: ":bust_in_silhouette:",
                    busts_in_silhouette: ":busts_in_silhouette:",
                    cactus: ":cactus:",
                    cake: ":cake:",
                    calendar: ":calendar:",
                    calling: ":calling:",
                    camel: ":camel:",
                    camera: ":camera:",
                    cancer: ":cancer:",
                    candy: ":candy:",
                    capital_abcd: ":capital_abcd:",
                    capricorn: ":capricorn:",
                    car: ":car:",
                    card_index: ":card_index:",
                    carousel_horse: ":carousel_horse:",
                    cat: ":cat:",
                    cat2: ":cat2:",
                    cd: ":cd:",
                    chart: ":chart:",
                    chart_with_downwards_trend: ":chart_with_downwards_trend:",
                    chart_with_upwards_trend: ":chart_with_upwards_trend:",
                    checkered_flag: ":checkered_flag:",
                    cherries: ":cherries:",
                    cherry_blossom: ":cherry_blossom:",
                    chestnut: ":chestnut:",
                    chicken: ":chicken:",
                    children_crossing: ":children_crossing:",
                    chocolate_bar: ":chocolate_bar:",
                    christmas_tree: ":christmas_tree:",
                    church: ":church:",
                    cinema: ":cinema:",
                    circus_tent: ":circus_tent:",
                    city_sunrise: ":city_sunrise:",
                    city_sunset: ":city_sunset:",
                    cl: ":cl:",
                    clap: ":clap:",
                    clapper: ":clapper:",
                    clipboard: ":clipboard:",
                    clock1: ":clock1:",
                    clock10: ":clock10:",
                    clock1030: ":clock1030:",
                    clock11: ":clock11:",
                    clock1130: ":clock1130:",
                    clock12: ":clock12:",
                    clock1230: ":clock1230:",
                    clock130: ":clock130:",
                    clock2: ":clock2:",
                    clock230: ":clock230:",
                    clock3: ":clock3:",
                    clock330: ":clock330:",
                    clock4: ":clock4:",
                    clock430: ":clock430:",
                    clock5: ":clock5:",
                    clock530: ":clock530:",
                    clock6: ":clock6:",
                    clock630: ":clock630:",
                    clock7: ":clock7:",
                    clock730: ":clock730:",
                    clock8: ":clock8:",
                    clock830: ":clock830:",
                    clock9: ":clock9:",
                    clock930: ":clock930:",
                    closed_book: ":closed_book:",
                    closed_lock_with_key: ":closed_lock_with_key:",
                    closed_umbrella: ":closed_umbrella:",
                    cloud: ":cloud:",
                    clubs: ":clubs:",
                    cn: ":cn:",
                    cocktail: ":cocktail:",
                    coffee: ":coffee:",
                    cold_sweat: ":cold_sweat:",
                    collision: ":collision:",
                    computer: ":computer:",
                    confetti_ball: ":confetti_ball:",
                    confounded: ":confounded:",
                    confused: ":confused:",
                    congratulations: ":congratulations:",
                    construction: ":construction:",
                    construction_worker: ":construction_worker:",
                    convenience_store: ":convenience_store:",
                    cookie: ":cookie:",
                    cool: ":cool:",
                    cop: ":cop:",
                    copyright: ":copyright:",
                    corn: ":corn:",
                    couple: ":couple:",
                    couple_with_heart: ":couple_with_heart:",
                    couplekiss: ":couplekiss:",
                    cow: ":cow:",
                    cow2: ":cow2:",
                    credit_card: ":credit_card:",
                    crocodile: ":crocodile:",
                    crossed_flags: ":crossed_flags:",
                    crown: ":crown:",
                    cry: ":cry:",
                    crying_cat_face: ":crying_cat_face:",
                    crystal_ball: ":crystal_ball:",
                    cupid: ":cupid:",
                    curly_loop: ":curly_loop:",
                    currency_exchange: ":currency_exchange:",
                    curry: ":curry:",
                    custard: ":custard:",
                    customs: ":customs:",
                    cyclone: ":cyclone:",
                    dancer: ":dancer:",
                    dancers: ":dancers:",
                    dango: ":dango:",
                    dart: ":dart:",
                    dash: ":dash:",
                    date: ":date:",
                    de: ":de:",
                    deciduous_tree: ":deciduous_tree:",
                    department_store: ":department_store:",
                    diamond_shape_with_a_dot_inside: ":diamond_shape_with_a_dot_inside:",
                    diamonds: ":diamonds:",
                    disappointed: ":disappointed:",
                    disappointed_relieved: ":disappointed_relieved:",
                    dizzy: ":dizzy:",
                    dizzy_face: ":dizzy_face:",
                    do_not_litter: ":do_not_litter:",
                    dog: ":dog:",
                    dog2: ":dog2:",
                    dollar: ":dollar:",
                    dolls: ":dolls:",
                    dolphin: ":dolphin:",
                    donut: ":donut:",
                    door: ":door:",
                    doughnut: ":doughnut:",
                    dragon: ":dragon:",
                    dragon_face: ":dragon_face:",
                    dress: ":dress:",
                    dromedary_camel: ":dromedary_camel:",
                    droplet: ":droplet:",
                    dvd: ":dvd:",
                    "e-mail": ":e-mail:",
                    ear: ":ear:",
                    ear_of_rice: ":ear_of_rice:",
                    earth_africa: ":earth_africa:",
                    earth_americas: ":earth_americas:",
                    earth_asia: ":earth_asia:",
                    egg: ":egg:",
                    eggplant: ":eggplant:",
                    eight: ":eight:",
                    eight_pointed_black_star: ":eight_pointed_black_star:",
                    eight_spoked_asterisk: ":eight_spoked_asterisk:",
                    electric_plug: ":electric_plug:",
                    elephant: ":elephant:",
                    email: ":email:",
                    end: ":end:",
                    envelope: ":envelope:",
                    es: ":es:",
                    euro: ":euro:",
                    european_castle: ":european_castle:",
                    european_post_office: ":european_post_office:",
                    evergreen_tree: ":evergreen_tree:",
                    exclamation: ":exclamation:",
                    expressionless: ":expressionless:",
                    eyeglasses: ":eyeglasses:",
                    eyes: ":eyes:",
                    facepunch: ":facepunch:",
                    factory: ":factory:",
                    fallen_leaf: ":fallen_leaf:",
                    family: ":family:",
                    fast_forward: ":fast_forward:",
                    fax: ":fax:",
                    fearful: ":fearful:",
                    feelsgood: ":feelsgood:",
                    feet: ":feet:",
                    ferris_wheel: ":ferris_wheel:",
                    file_folder: ":file_folder:",
                    finnadie: ":finnadie:",
                    fire: ":fire:",
                    fire_engine: ":fire_engine:",
                    fireworks: ":fireworks:",
                    first_quarter_moon: ":first_quarter_moon:",
                    first_quarter_moon_with_face: ":first_quarter_moon_with_face:",
                    fish: ":fish:",
                    fish_cake: ":fish_cake:",
                    fishing_pole_and_fish: ":fishing_pole_and_fish:",
                    fist: ":fist:",
                    five: ":five:",
                    flags: ":flags:",
                    flashlight: ":flashlight:",
                    floppy_disk: ":floppy_disk:",
                    flower_playing_cards: ":flower_playing_cards:",
                    flushed: ":flushed:",
                    foggy: ":foggy:",
                    football: ":football:",
                    fork_and_knife: ":fork_and_knife:",
                    fountain: ":fountain:",
                    four: ":four:",
                    four_leaf_clover: ":four_leaf_clover:",
                    fr: ":fr:",
                    free: ":free:",
                    fried_shrimp: ":fried_shrimp:",
                    fries: ":fries:",
                    frog: ":frog:",
                    frowning: ":frowning:",
                    fuelpump: ":fuelpump:",
                    full_moon: ":full_moon:",
                    full_moon_with_face: ":full_moon_with_face:",
                    game_die: ":game_die:",
                    gb: ":gb:",
                    gem: ":gem:",
                    gemini: ":gemini:",
                    ghost: ":ghost:",
                    gift: ":gift:",
                    gift_heart: ":gift_heart:",
                    girl: ":girl:",
                    globe_with_meridians: ":globe_with_meridians:",
                    goat: ":goat:",
                    goberserk: ":goberserk:",
                    godmode: ":godmode:",
                    golf: ":golf:",
                    grapes: ":grapes:",
                    green_apple: ":green_apple:",
                    green_book: ":green_book:",
                    green_heart: ":green_heart:",
                    grey_exclamation: ":grey_exclamation:",
                    grey_question: ":grey_question:",
                    grimacing: ":grimacing:",
                    grin: ":grin:",
                    grinning: ":grinning:",
                    guardsman: ":guardsman:",
                    guitar: ":guitar:",
                    gun: ":gun:",
                    haircut: ":haircut:",
                    hamburger: ":hamburger:",
                    hammer: ":hammer:",
                    hamster: ":hamster:",
                    hand: ":hand:",
                    handbag: ":handbag:",
                    hash: ":hash:",
                    hatched_chick: ":hatched_chick:",
                    hatching_chick: ":hatching_chick:",
                    headphones: ":headphones:",
                    hear_no_evil: ":hear_no_evil:",
                    heart: ":heart:",
                    heart_decoration: ":heart_decoration:",
                    heart_eyes: ":heart_eyes:",
                    heart_eyes_cat: ":heart_eyes_cat:",
                    heartbeat: ":heartbeat:",
                    heartpulse: ":heartpulse:",
                    hearts: ":hearts:",
                    heavy_check_mark: ":heavy_check_mark:",
                    heavy_division_sign: ":heavy_division_sign:",
                    heavy_dollar_sign: ":heavy_dollar_sign:",
                    heavy_exclamation_mark: ":heavy_exclamation_mark:",
                    heavy_minus_sign: ":heavy_minus_sign:",
                    heavy_multiplication_x: ":heavy_multiplication_x:",
                    heavy_plus_sign: ":heavy_plus_sign:",
                    helicopter: ":helicopter:",
                    herb: ":herb:",
                    hibiscus: ":hibiscus:",
                    high_brightness: ":high_brightness:",
                    high_heel: ":high_heel:",
                    hocho: ":hocho:",
                    honey_pot: ":honey_pot:",
                    honeybee: ":honeybee:",
                    horse: ":horse:",
                    horse_racing: ":horse_racing:",
                    hospital: ":hospital:",
                    hotel: ":hotel:",
                    hotsprings: ":hotsprings:",
                    hourglass: ":hourglass:",
                    hourglass_flowing_sand: ":hourglass_flowing_sand:",
                    house: ":house:",
                    house_with_garden: ":house_with_garden:",
                    hurtrealbad: ":hurtrealbad:",
                    hushed: ":hushed:",
                    ice_cream: ":ice_cream:",
                    icecream: ":icecream:",
                    id: ":id:",
                    ideograph_advantage: ":ideograph_advantage:",
                    imp: ":imp:",
                    inbox_tray: ":inbox_tray:",
                    incoming_envelope: ":incoming_envelope:",
                    information_desk_person: ":information_desk_person:",
                    information_source: ":information_source:",
                    innocent: ":innocent:",
                    interrobang: ":interrobang:",
                    iphone: ":iphone:",
                    it: ":it:",
                    izakaya_lantern: ":izakaya_lantern:",
                    jack_o_lantern: ":jack_o_lantern:",
                    japan: ":japan:",
                    japanese_castle: ":japanese_castle:",
                    japanese_goblin: ":japanese_goblin:",
                    japanese_ogre: ":japanese_ogre:",
                    jeans: ":jeans:",
                    joy: ":joy:",
                    joy_cat: ":joy_cat:",
                    jp: ":jp:",
                    key: ":key:",
                    keycap_ten: ":keycap_ten:",
                    kimono: ":kimono:",
                    kiss: ":kiss:",
                    kissing: ":kissing:",
                    kissing_cat: ":kissing_cat:",
                    kissing_closed_eyes: ":kissing_closed_eyes:",
                    kissing_face: ":kissing_face:",
                    kissing_heart: ":kissing_heart:",
                    kissing_smiling_eyes: ":kissing_smiling_eyes:",
                    koala: ":koala:",
                    koko: ":koko:",
                    kr: ":kr:",
                    large_blue_circle: ":large_blue_circle:",
                    large_blue_diamond: ":large_blue_diamond:",
                    large_orange_diamond: ":large_orange_diamond:",
                    last_quarter_moon: ":last_quarter_moon:",
                    last_quarter_moon_with_face: ":last_quarter_moon_with_face:",
                    laughing: ":laughing:",
                    leaves: ":leaves:",
                    ledger: ":ledger:",
                    left_luggage: ":left_luggage:",
                    left_right_arrow: ":left_right_arrow:",
                    leftwards_arrow_with_hook: ":leftwards_arrow_with_hook:",
                    lemon: ":lemon:",
                    leo: ":leo:",
                    leopard: ":leopard:",
                    libra: ":libra:",
                    light_rail: ":light_rail:",
                    link: ":link:",
                    lips: ":lips:",
                    lipstick: ":lipstick:",
                    lock: ":lock:",
                    lock_with_ink_pen: ":lock_with_ink_pen:",
                    lollipop: ":lollipop:",
                    loop: ":loop:",
                    loudspeaker: ":loudspeaker:",
                    love_hotel: ":love_hotel:",
                    love_letter: ":love_letter:",
                    low_brightness: ":low_brightness:",
                    m: ":m:",
                    mag: ":mag:",
                    mag_right: ":mag_right:",
                    mahjong: ":mahjong:",
                    mailbox: ":mailbox:",
                    mailbox_closed: ":mailbox_closed:",
                    mailbox_with_mail: ":mailbox_with_mail:",
                    mailbox_with_no_mail: ":mailbox_with_no_mail:",
                    man: ":man:",
                    man_with_gua_pi_mao: ":man_with_gua_pi_mao:",
                    man_with_turban: ":man_with_turban:",
                    mans_shoe: ":mans_shoe:",
                    maple_leaf: ":maple_leaf:",
                    mask: ":mask:",
                    massage: ":massage:",
                    meat_on_bone: ":meat_on_bone:",
                    mega: ":mega:",
                    melon: ":melon:",
                    memo: ":memo:",
                    mens: ":mens:",
                    metal: ":metal:",
                    metro: ":metro:",
                    microphone: ":microphone:",
                    microscope: ":microscope:",
                    milky_way: ":milky_way:",
                    minibus: ":minibus:",
                    minidisc: ":minidisc:",
                    mobile_phone_off: ":mobile_phone_off:",
                    money_with_wings: ":money_with_wings:",
                    moneybag: ":moneybag:",
                    monkey: ":monkey:",
                    monkey_face: ":monkey_face:",
                    monorail: ":monorail:",
                    moon: ":moon:",
                    mortar_board: ":mortar_board:",
                    mount_fuji: ":mount_fuji:",
                    mountain_bicyclist: ":mountain_bicyclist:",
                    mountain_cableway: ":mountain_cableway:",
                    mountain_railway: ":mountain_railway:",
                    mouse: ":mouse:",
                    mouse2: ":mouse2:",
                    movie_camera: ":movie_camera:",
                    moyai: ":moyai:",
                    muscle: ":muscle:",
                    mushroom: ":mushroom:",
                    musical_keyboard: ":musical_keyboard:",
                    musical_note: ":musical_note:",
                    musical_score: ":musical_score:",
                    mute: ":mute:",
                    nail_care: ":nail_care:",
                    name_badge: ":name_badge:",
                    neckbeard: ":neckbeard:",
                    necktie: ":necktie:",
                    negative_squared_cross_mark: ":negative_squared_cross_mark:",
                    neutral_face: ":neutral_face:",
                    "new": ":new:",
                    new_moon: ":new_moon:",
                    new_moon_with_face: ":new_moon_with_face:",
                    newspaper: ":newspaper:",
                    ng: ":ng:",
                    nine: ":nine:",
                    no_bell: ":no_bell:",
                    no_bicycles: ":no_bicycles:",
                    no_entry: ":no_entry:",
                    no_entry_sign: ":no_entry_sign:",
                    no_good: ":no_good:",
                    no_mobile_phones: ":no_mobile_phones:",
                    no_mouth: ":no_mouth:",
                    no_pedestrians: ":no_pedestrians:",
                    no_smoking: ":no_smoking:",
                    "non-potable_water": ":non-potable_water:",
                    nose: ":nose:",
                    notebook: ":notebook:",
                    notebook_with_decorative_cover: ":notebook_with_decorative_cover:",
                    notes: ":notes:",
                    nut_and_bolt: ":nut_and_bolt:",
                    o: ":o:",
                    o2: ":o2:",
                    ocean: ":ocean:",
                    octocat: ":octocat:",
                    octopus: ":octopus:",
                    oden: ":oden:",
                    office: ":office:",
                    ok: ":ok:",
                    ok_hand: ":ok_hand:",
                    ok_woman: ":ok_woman:",
                    older_man: ":older_man:",
                    older_woman: ":older_woman:",
                    on: ":on:",
                    oncoming_automobile: ":oncoming_automobile:",
                    oncoming_bus: ":oncoming_bus:",
                    oncoming_police_car: ":oncoming_police_car:",
                    oncoming_taxi: ":oncoming_taxi:",
                    one: ":one:",
                    open_file_folder: ":open_file_folder:",
                    open_hands: ":open_hands:",
                    open_mouth: ":open_mouth:",
                    ophiuchus: ":ophiuchus:",
                    orange_book: ":orange_book:",
                    outbox_tray: ":outbox_tray:",
                    ox: ":ox:",
                    page_facing_up: ":page_facing_up:",
                    page_with_curl: ":page_with_curl:",
                    pager: ":pager:",
                    palm_tree: ":palm_tree:",
                    panda_face: ":panda_face:",
                    paperclip: ":paperclip:",
                    parking: ":parking:",
                    part_alternation_mark: ":part_alternation_mark:",
                    partly_sunny: ":partly_sunny:",
                    passport_control: ":passport_control:",
                    paw_prints: ":paw_prints:",
                    peach: ":peach:",
                    pear: ":pear:",
                    pencil: ":pencil:",
                    pencil2: ":pencil2:",
                    penguin: ":penguin:",
                    pensive: ":pensive:",
                    performing_arts: ":performing_arts:",
                    persevere: ":persevere:",
                    person_frowning: ":person_frowning:",
                    person_with_blond_hair: ":person_with_blond_hair:",
                    person_with_pouting_face: ":person_with_pouting_face:",
                    phone: ":phone:",
                    pig: ":pig:",
                    pig2: ":pig2:",
                    pig_nose: ":pig_nose:",
                    pill: ":pill:",
                    pineapple: ":pineapple:",
                    pisces: ":pisces:",
                    pizza: ":pizza:",
                    plus1: ":plus1:",
                    point_down: ":point_down:",
                    point_left: ":point_left:",
                    point_right: ":point_right:",
                    point_up: ":point_up:",
                    point_up_2: ":point_up_2:",
                    police_car: ":police_car:",
                    poodle: ":poodle:",
                    post_office: ":post_office:",
                    postal_horn: ":postal_horn:",
                    postbox: ":postbox:",
                    potable_water: ":potable_water:",
                    pouch: ":pouch:",
                    poultry_leg: ":poultry_leg:",
                    pound: ":pound:",
                    pouting_cat: ":pouting_cat:",
                    pray: ":pray:",
                    princess: ":princess:",
                    punch: ":punch:",
                    purple_heart: ":purple_heart:",
                    purse: ":purse:",
                    pushpin: ":pushpin:",
                    put_litter_in_its_place: ":put_litter_in_its_place:",
                    question: ":question:",
                    rabbit: ":rabbit:",
                    rabbit2: ":rabbit2:",
                    racehorse: ":racehorse:",
                    radio: ":radio:",
                    radio_button: ":radio_button:",
                    rage: ":rage:",
                    rage1: ":rage1:",
                    rage2: ":rage2:",
                    rage3: ":rage3:",
                    rage4: ":rage4:",
                    railway_car: ":railway_car:",
                    rainbow: ":rainbow:",
                    raised_hand: ":raised_hand:",
                    raised_hands: ":raised_hands:",
                    raising_hand: ":raising_hand:",
                    ram: ":ram:",
                    ramen: ":ramen:",
                    rat: ":rat:",
                    recycle: ":recycle:",
                    red_car: ":red_car:",
                    red_circle: ":red_circle:",
                    registered: ":registered:",
                    relaxed: ":relaxed:",
                    relieved: ":relieved:",
                    repeat: ":repeat:",
                    repeat_one: ":repeat_one:",
                    restroom: ":restroom:",
                    revolving_hearts: ":revolving_hearts:",
                    rewind: ":rewind:",
                    ribbon: ":ribbon:",
                    rice: ":rice:",
                    rice_ball: ":rice_ball:",
                    rice_cracker: ":rice_cracker:",
                    rice_scene: ":rice_scene:",
                    ring: ":ring:",
                    rocket: ":rocket:",
                    roller_coaster: ":roller_coaster:",
                    rooster: ":rooster:",
                    rose: ":rose:",
                    rotating_light: ":rotating_light:",
                    round_pushpin: ":round_pushpin:",
                    rowboat: ":rowboat:",
                    ru: ":ru:",
                    rugby_football: ":rugby_football:",
                    runner: ":runner:",
                    running: ":running:",
                    running_shirt_with_sash: ":running_shirt_with_sash:",
                    sa: ":sa:",
                    sagittarius: ":sagittarius:",
                    sailboat: ":sailboat:",
                    sake: ":sake:",
                    sandal: ":sandal:",
                    santa: ":santa:",
                    satellite: ":satellite:",
                    satisfied: ":satisfied:",
                    saxophone: ":saxophone:",
                    school: ":school:",
                    school_satchel: ":school_satchel:",
                    scissors: ":scissors:",
                    scorpius: ":scorpius:",
                    scream: ":scream:",
                    scream_cat: ":scream_cat:",
                    scroll: ":scroll:",
                    seat: ":seat:",
                    secret: ":secret:",
                    see_no_evil: ":see_no_evil:",
                    seedling: ":seedling:",
                    seven: ":seven:",
                    shaved_ice: ":shaved_ice:",
                    sheep: ":sheep:",
                    shell: ":shell:",
                    ship: ":ship:",
                    shipit: ":shipit:",
                    shirt: ":shirt:",
                    shoe: ":shoe:",
                    shower: ":shower:",
                    signal_strength: ":signal_strength:",
                    six: ":six:",
                    six_pointed_star: ":six_pointed_star:",
                    ski: ":ski:",
                    skull: ":skull:",
                    sleeping: ":sleeping:",
                    sleepy: ":sleepy:",
                    slot_machine: ":slot_machine:",
                    small_blue_diamond: ":small_blue_diamond:",
                    small_orange_diamond: ":small_orange_diamond:",
                    small_red_triangle: ":small_red_triangle:",
                    small_red_triangle_down: ":small_red_triangle_down:",
                    smile: ":smile:",
                    smile_cat: ":smile_cat:",
                    smiley: ":smiley:",
                    smiley_cat: ":smiley_cat:",
                    smiling_imp: ":smiling_imp:",
                    smirk: ":smirk:",
                    smirk_cat: ":smirk_cat:",
                    smoking: ":smoking:",
                    snail: ":snail:",
                    snake: ":snake:",
                    snowboarder: ":snowboarder:",
                    snowflake: ":snowflake:",
                    snowman: ":snowman:",
                    sob: ":sob:",
                    soccer: ":soccer:",
                    soon: ":soon:",
                    sos: ":sos:",
                    sound: ":sound:",
                    space_invader: ":space_invader:",
                    spades: ":spades:",
                    spaghetti: ":spaghetti:",
                    sparkler: ":sparkler:",
                    sparkles: ":sparkles:",
                    sparkling_heart: ":sparkling_heart:",
                    speak_no_evil: ":speak_no_evil:",
                    speaker: ":speaker:",
                    speech_balloon: ":speech_balloon:",
                    speedboat: ":speedboat:",
                    squirrel: ":squirrel:",
                    star: ":star:",
                    star2: ":star2:",
                    stars: ":stars:",
                    station: ":station:",
                    statue_of_liberty: ":statue_of_liberty:",
                    steam_locomotive: ":steam_locomotive:",
                    stew: ":stew:",
                    straight_ruler: ":straight_ruler:",
                    strawberry: ":strawberry:",
                    stuck_out_tongue: ":stuck_out_tongue:",
                    stuck_out_tongue_closed_eyes: ":stuck_out_tongue_closed_eyes:",
                    stuck_out_tongue_winking_eye: ":stuck_out_tongue_winking_eye:",
                    sun_with_face: ":sun_with_face:",
                    sunflower: ":sunflower:",
                    sunglasses: ":sunglasses:",
                    sunny: ":sunny:",
                    sunrise: ":sunrise:",
                    sunrise_over_mountains: ":sunrise_over_mountains:",
                    surfer: ":surfer:",
                    sushi: ":sushi:",
                    suspect: ":suspect:",
                    suspension_railway: ":suspension_railway:",
                    sweat: ":sweat:",
                    sweat_drops: ":sweat_drops:",
                    sweat_smile: ":sweat_smile:",
                    sweet_potato: ":sweet_potato:",
                    swimmer: ":swimmer:",
                    symbols: ":symbols:",
                    syringe: ":syringe:",
                    tada: ":tada:",
                    tanabata_tree: ":tanabata_tree:",
                    tangerine: ":tangerine:",
                    taurus: ":taurus:",
                    taxi: ":taxi:",
                    tea: ":tea:",
                    telephone: ":telephone:",
                    telephone_receiver: ":telephone_receiver:",
                    telescope: ":telescope:",
                    tennis: ":tennis:",
                    tent: ":tent:",
                    thought_balloon: ":thought_balloon:",
                    three: ":three:",
                    thumbsdown: ":thumbsdown:",
                    thumbsup: ":thumbsup:",
                    ticket: ":ticket:",
                    tiger: ":tiger:",
                    tiger2: ":tiger2:",
                    tired_face: ":tired_face:",
                    tm: ":tm:",
                    toilet: ":toilet:",
                    tokyo_tower: ":tokyo_tower:",
                    tomato: ":tomato:",
                    tongue: ":tongue:",
                    top: ":top:",
                    tophat: ":tophat:",
                    tractor: ":tractor:",
                    traffic_light: ":traffic_light:",
                    train: ":train:",
                    train2: ":train2:",
                    tram: ":tram:",
                    triangular_flag_on_post: ":triangular_flag_on_post:",
                    triangular_ruler: ":triangular_ruler:",
                    trident: ":trident:",
                    triumph: ":triumph:",
                    trolleybus: ":trolleybus:",
                    trollface: ":trollface:",
                    trophy: ":trophy:",
                    tropical_drink: ":tropical_drink:",
                    tropical_fish: ":tropical_fish:",
                    truck: ":truck:",
                    trumpet: ":trumpet:",
                    tshirt: ":tshirt:",
                    tulip: ":tulip:",
                    turtle: ":turtle:",
                    tv: ":tv:",
                    twisted_rightwards_arrows: ":twisted_rightwards_arrows:",
                    two: ":two:",
                    two_hearts: ":two_hearts:",
                    two_men_holding_hands: ":two_men_holding_hands:",
                    two_women_holding_hands: ":two_women_holding_hands:",
                    u5272: ":u5272:",
                    u5408: ":u5408:",
                    u55b6: ":u55b6:",
                    u6307: ":u6307:",
                    u6708: ":u6708:",
                    u6709: ":u6709:",
                    u6e80: ":u6e80:",
                    u7121: ":u7121:",
                    u7533: ":u7533:",
                    u7981: ":u7981:",
                    u7a7a: ":u7a7a:",
                    uk: ":uk:",
                    umbrella: ":umbrella:",
                    unamused: ":unamused:",
                    underage: ":underage:",
                    unlock: ":unlock:",
                    up: ":up:",
                    us: ":us:",
                    v: ":v:",
                    vertical_traffic_light: ":vertical_traffic_light:",
                    vhs: ":vhs:",
                    vibration_mode: ":vibration_mode:",
                    video_camera: ":video_camera:",
                    video_game: ":video_game:",
                    violin: ":violin:",
                    virgo: ":virgo:",
                    volcano: ":volcano:",
                    vs: ":vs:",
                    walking: ":walking:",
                    waning_crescent_moon: ":waning_crescent_moon:",
                    waning_gibbous_moon: ":waning_gibbous_moon:",
                    warning: ":warning:",
                    watch: ":watch:",
                    water_buffalo: ":water_buffalo:",
                    watermelon: ":watermelon:",
                    wave: ":wave:",
                    wavy_dash: ":wavy_dash:",
                    waxing_crescent_moon: ":waxing_crescent_moon:",
                    waxing_gibbous_moon: ":waxing_gibbous_moon:",
                    wc: ":wc:",
                    weary: ":weary:",
                    wedding: ":wedding:",
                    whale: ":whale:",
                    whale2: ":whale2:",
                    wheelchair: ":wheelchair:",
                    white_check_mark: ":white_check_mark:",
                    white_circle: ":white_circle:",
                    white_flower: ":white_flower:",
                    white_square: ":white_square:",
                    white_square_button: ":white_square_button:",
                    will_the_intern: ":will_the_intern:",
                    wind_chime: ":wind_chime:",
                    wine_glass: ":wine_glass:",
                    wink: ":wink:",
                    wolf: ":wolf:",
                    woman: ":woman:",
                    womans_clothes: ":womans_clothes:",
                    womans_hat: ":womans_hat:",
                    womens: ":womens:",
                    worried: ":worried:",
                    wrench: ":wrench:",
                    x: ":x:",
                    yellow_heart: ":yellow_heart:",
                    yen: ":yen:",
                    yum: ":yum:",
                    zap: ":zap:",
                    zero: ":zero:",
                    zzz: ":zzz:"
                }
            }
        })
    }
}), this.require.define({
    "lib/autocompleters/list_helper": function (e, t, n) {
        function r() {}
        r.prototype.getTopIndex = function (e, t) {
            var n = 0,
                r = 0;
            while (r + this._trueHeight(e, n) < e.scrollTop() && n < t) r += this._trueHeight(e, n), n++;
            return n
        }, r.prototype.getBottomIndex = function (e, t) {
            var n = 0,
                r = 0;
            while (r < e.scrollTop() + e.height() && n < t) r += this._trueHeight(e, n), n++;
            return n
        }, r.prototype.scrollBoxHeight = function (e, t, n) {
            var r = 0;
            for (var i = 0; i < t.length; i++) {
                r += this._trueHeight(e, i);
                if (n && r >= n) return n
            }
            return r
        }, r.prototype.bottomOf = function (e, t) {
            return this.topOf(e, t) + this._trueHeight(e, t)
        }, r.prototype.topOf = function (e, t) {
            var n = 0;
            for (var r = 0; r < t; r++) n += this._trueHeight(e, r);
            return n
        }, r.prototype.getHoveredIndex = function (e) {
            var t = e.children().toArray();
            return t.indexOf(this._hoveredLi())
        }, r.prototype.makeScrollable = function (e) {
            e.addClass("scrollable-ul")
        }, r.prototype.makeNonScrollable = function (e) {
            e.removeClass("scrollable-ul")
        }, r.prototype._hoveredLi = function () {
            return $(":hover").filter("li")[0]
        }, r.prototype._trueHeight = function (e, t) {
            return e.children()[t] ? e.children()[t + 1] ? this._itemAt(e, t + 1).offset().top - this._itemAt(e, t).offset().top : this._itemAt(e, t).outerHeight() : 0
        }, r.prototype._itemAt = function (e, t) {
            return $(e.children()[t])
        }, n.exports = r
    }
}), this.require.define({
    "lib/autocompleters/placeholder_data": function (e, t, n) {
        function s(e) {
            return e.reduce(function (e, t) {
                var n = I18n.t("txt.ticket.autocompletes.placeholders." + t);
                return e[n] = "{{" + t + "}}", e
            }, {})
        }
        var r = s(["ticket.requester.first_name", "ticket.requester.name", "ticket.requester.email", "ticket.organization.name", "ticket.assignee.name", "ticket.assignee.first_name", "current_user.first_name", "current_user.name", "current_user.email"]),
            i = $.extend({}, r, s(["ticket.title", "ticket.description", "ticket.url", "ticket.id", "ticket.external_id", "ticket.via", "ticket.status", "ticket.priority", "ticket.ticket_type", "ticket.group.name", "ticket.organization.external_id", "ticket.account", "ticket.assignee.last_name", "ticket.requester.last_name", "ticket.requester.language", "ticket.requester.phone", "ticket.requester.external_id", "ticket.cc_names", "ticket.tags", "current_user.organization.name", "current_user.organization.notes", "current_user.organization.details", "current_user.external_id", "current_user.phone", "current_user.details", "current_user.notes", "current_user.language"]));
        n.exports = Object.freeze({
            pattern: "{{",
            dictionary: function (e) {
                return e.length == 2 ? r : i
            }
        })
    }
}), this.require.define({
    "lib/autocompleters/selectable": function (e, t, n) {
        function o(e) {
            r = !1, this.detach(), this.container = $('<div class="suggest"></div>'), this.list = this._createList(), this.container.append(this.list), this.stayclosed = !1, this.lastToken = "", this._attach(e);
            var n = t("lib/autocompleters/suggest");
            this.suggest = new n;
            var i = t("lib/autocompleters/list_helper");
            this.list_helper = new i;
            var s = t("lib/autocompleters/token_helper");
            this.token_helper = new s
        }
        var r = !1,
            i = !1,
            s = t("lib/autocompleters/configuration").config;
        o.prototype.detach = function () {
            $(".suggest").remove()
        }, o.prototype._hide = function () {
            return this.lastToken = "", this.selected = 0, this.list.scrollTop(0), this.active = !1, this.container._hide(), this
        }, o.prototype._show = function () {
            return this.container.show(), this
        }, o.prototype._attach = function (e) {
            var t = this;
            $(e).unbind(".suggest").bind("keydown.suggest", function (e) {
                t._keyDown(e)
            }), $(e).bind("keyup.suggest", function (e) {
                t._keyUp(e)
            }), this.textArea = e, r || ($("body").append(this.container), r = !0)
        }, o.prototype._update = function (e) {
            var t = this.active;
            this.selected = 0, this.list.scrollTop(0), this.matches = e, this.active = Boolean(e && this.matches.items.length > 0), t != this.active && (this.active ? this._place() : this._hide())
        }, o.prototype.keyMap = {
            backspace: 8,
            tab: 9,
            enter: 13,
            esc: 27,
            up: 38,
            down: 40
        }, o.prototype.keyMapReverse = [8, 9, 13, 27, 38, 40], o.prototype._keyDown = function (e) {
            if (!this.active) return;
            var t = o.prototype.keyMap;
            switch (e.keyCode) {
            case t.up:
                this.selected = Math.max(this.selected - 1, 0), this.list_helper.getTopIndex(this.list, s.maxBoxHeight) >= this.selected && (this._upOne(), this._topAlign(this.selected)), e.preventDefault(), this._refreshSelected();
                break;
            case t.down:
                this.selected = Math.min(this.selected + 1, Math.min(s.maxLength - 1, this.matches.items.length - 1)), this.list_helper.getBottomIndex(this.list, s.maxBoxHeight) - 1 <= this.selected && (this._downOne(), this._bottomAlign(this.selected)), e.preventDefault(), this._refreshSelected();
                break;
            case t.tab:
                e.preventDefault(), this._render();
                break;
            case t.enter:
                this._complete(), this._hide(), e.preventDefault()
            }
        }, o.prototype._textFor = function (e) {
            return this.matches.asText(this.matches.dictionary[this.matches.items[e]])
        }, o.prototype._render = function (e) {
            if (!e) return;
            var t = this,
                n = Math.min(e.length, s.maxLength),
                r = [];
            if (typeof this.matches.renderItem == "function")
                for (var i = 0; i < n; i++) r.push(this.matches.renderItem(e[i], this.matches.dictionary));
            this.list.html(r.join(""));
            var o = this.list_helper.scrollBoxHeight(this.list, e, s.maxBoxHeight);
            return o < s.maxBoxHeight ? this.list_helper.makeNonScrollable(this.list) : this.list_helper.makeScrollable(this.list), this.list.css("height", "" + o + "px"), this._refreshSelected(), this
        }, o.prototype._complete = function () {
            this.matches.onComplete && this.matches.onComplete(this.matches.items[this.selected], this.matches.dictionary), this.token_helper.complete(this.textArea, this._textFor(this.selected))
        }, o.prototype._createList = function () {
            var e = $('<ul class="suggest-ul"></ul>'),
                t = this;
            return e.mouseover(function (e) {
                if (i) {
                    e.stopPropagation(), i = !1;
                    return
                }
                var n = t.list_helper.getHoveredIndex(t.list);
                n !== -1 && (t.selected = n), t._refreshSelected()
            }), e.click(function (e) {
                var n = t.list_helper.getHoveredIndex(t.list);
                n !== -1 && (t.selected = n), t._complete()
            }), e
        }, o.prototype._refreshSelected = function () {
            $(".suggest-li-focus").removeClass("suggest-li-focus"), this._itemAt(this.selected).addClass("suggest-li-focus")
        }, o.prototype._bottomAlign = function (e) {
            i = !0, this.list.scrollTop(this.list_helper.bottomOf(this.list, e) - this.list.outerHeight())
        }, o.prototype._topAlign = function (e) {
            i = !0, this.list.scrollTop(this.list_helper.topOf(this.list, e))
        }, o.prototype._upOne = function () {
            i = !0, this.list.scrollTop(this.list.scrollTop() - this._itemAt(this.selected).outerHeight())
        }, o.prototype._downOne = function () {
            i = !0, this.list.scrollTop(this.list.scrollTop() + this._itemAt(this.selected).outerHeight())
        }, o.prototype._itemAt = function (e) {
            return $(this.list.children()[e])
        }, o.prototype._move = function (e) {
            return this.container.css(e), this
        }, o.prototype._place = function () {
            this._move(this.token_helper.placementCSS(this.textArea))._show()
        }, o.prototype._keyUp = function (e) {
            var t = this.token_helper.getToken(this.textArea);
            switch (e.keyCode) {
            case this.keyMap.esc:
                this.stayclosed = !0, this._hide();
                break;
            case this.keyMap.backspace:
                this.stayclosed = !1, this._show()
            }
            this.lastToken != t && !this.stayclosed && (this._update(this.suggest.match(t)), this._render(this.matches.items), this.lastToken = t)
        }, n.exports = o
    }
}), this.require.define({
    "lib/autocompleters/suggest": function (e, t, n) {
        function r() {
            var e = t("lib/autocompleters/data");
            this.regs = i(e)
        }

        function i(e) {
            var t = [];
            for (var n = 0; n < e.length; n++) {
                if (!e[n].pattern || !e[n].dictionary) continue;
                t.push({
                    re: new RegExp("^" + e[n].pattern + ".*"),
                    start: new RegExp("^" + e[n].pattern + "$"),
                    renderItem: e[n].renderItem || s,
                    suggestions: e[n].dictionary,
                    asText: e[n].asText || o,
                    onComplete: e[n].onComplete
                })
            }
            return t
        }

        function s(e, t) {
            return '<li class="suggest-li suggest-text ">' + t[e] + '<div class="suggest-detail">' + e + "</div></li>"
        }

        function o(e) {
            return e
        }
        r.prototype.match = function (e) {
            var t = [];
            for (var n = 0; n < this.regs.length; n++) {
                if (!this.regs[n].re.test(e)) continue;
                var r = this.regs[n].suggestions(e);
                for (var i in r) e.length <= r[i].length && r.hasOwnProperty(i) && r[i].substr(0, e.length).toLowerCase() === e.toLowerCase() && t.push(i);
                return {
                    items: t,
                    dictionary: r,
                    renderItem: this.regs[n].renderItem,
                    asText: this.regs[n].asText,
                    onComplete: this.regs[n].onComplete
                }
            }
            return {
                items: t
            }
        }, r.prototype.isStartToken = function (e) {
            for (var t = 0; t < this.regs.length; t++)
                if (this.regs[t].start.test(e)) return !0;
            return !1
        }, n.exports = r
    }
}), this.require.define({
    "lib/autocompleters/token_helper": function (e, t, n) {
        function r() {}
        r.prototype.complete = function (e, t) {
            $(e).focus();
            var n = e.value,
                r = this._getTokenPos(n, this._getCaretPos(e));
            $(e).val(n.substr(0, r.start) + t + " " + n.substr(r.end)), $(e).trigger("change"), this._setCaret(e, (n.substr(0, r.start) + t).length + 1)
        }, r.prototype.getToken = function (e) {
            var t = e.value,
                n = this._getTokenPos(t, this._getCaretPos(e));
            return t.substring(n.start, n.end)
        }, r.prototype.placementCSS = function (e) {
            var t = this._getTokenPos(e.value, this._getCaretPos(e)),
                n = this._getTextAreaCoordsByIndex(e, t.start),
                r = $(e).position();
            return {
                top: n.top + r.top,
                left: n.left + r.left
            }
        }, r.prototype._getTextAreaCoordsByIndex = function (e, t) {
            var n = ["height", "width", "padding-top", "padding-right", "padding-bottom", "padding-left", "lineHeight", "textDecoration", "letterSpacing", "font-family", "font-size", "font-style", "font-variant", "font-weight"],
                r = {
                    position: "absolute",
                    overflow: "auto",
                    "white-space": "pre-wrap",
                    top: 0,
                    left: 0
                }, i, s, o, u;
            if (!$(e).is("textarea") || t == null) return;
            for (var a = 0, f = n.length; a < f; a++) r[n[a]] = $(e).css(n[a]);
            return o = document.createElement("span"), o.innerHTML = "&nbsp;", s = document.createElement("div"), $(s).css(r).text(e.value.substring(0, t)).insertAfter(e), s.scrollTop = s.scrollHeight, s.appendChild(o), u = $(o).offset(), $(s).remove(), u
        }, r.prototype._setCaret = function (e, t) {
            e.setSelectionRange(t, t)
        }, r.prototype._getCaretPos = function (e) {
            return e.selectionEnd
        }, r.prototype._getTokenPos = function (e, t) {
            var n = /\s/,
                r = e.length,
                i = t,
                s = t - 1;
            for (; i > 0; i--)
                if (n.test(e[i - 1])) break;
            for (; s < r; s++)
                if (n.test(e[s]) || t === 0) break;
            return {
                start: i,
                end: s
            }
        }, n.exports = r
    }
}), this.require.define({
    "lib/back_off": function (e, t, n) {
        var r = Em.Object.extend({
            run: function () {
                var e = $.Deferred(),
                    t = [],
                    n = this,
                    r = this.get("delayList"),
                    i = this.get("check");
                return $.each(r, function (n, s) {
                    var o = n == r.length - 1,
                        u = setTimeout(function () {
                            i && i() ? e.resolve(s) : o && e.reject(s)
                        }, s * 1e3);
                    t.push(u)
                }), e.done(function (e) {
                    $.each(t, function (e, t) {
                        clearTimeout(t)
                    })
                }).fail(function (e) {}), e.promise()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/back_off_enumerable": function (e, t, n) {
        function r() {
            var e = Array.prototype.slice.call(arguments),
                t;
            this.current = function () {
                return e[t]
            }, this.next = function () {
                return t < e.length - 1 && ++t, this.current()
            }, this.reset = function () {
                return t = 0, this.current()
            }, this.reset()
        }
        r.prototype.valueOf = function () {
            return this.current()
        }, n.exports = r
    }
}), this.require.define({
    "lib/clean_up_on_destroy": function (e, t, n) {
        n.exports = Em.Mixin.create({
            willDestroy: function () {
                var e = this.get("cleanUpOnDestroy") || [],
                    t;
                return e.forEach(function (e) {
                    t = this.get(e), t && t.destroy(), this.set(e, null)
                }, this), this._super && this._super.apply(this, arguments)
            }
        })
    }
}), this.require.define({
    "lib/closet": function (e, t, n) {
        var r = function (e) {
            return e === "SECURITY_ERR" || e === "SecurityError"
        }, i = function (e) {
                return e || !i.hasLocalStorage() ? new i.NativeStore : new i.LocalStore
            };
        i.hasLocalStorage = function () {
            var e, t;
            try {
                return e = window.localStorage, e == null ? !1 : (e.setItem("__hasLocalStorage__", "true"), t = e.getItem("__hasLocalStorage__") === "true", e.removeItem("hasLocalStorage"), t)
            } catch (n) {
                if (n.name === "QUOTA_EXCEEDED_ERR" || r(n.name)) return !1;
                throw n
            }
        };
        var s, o, u = function (e, t) {
                var n = [];
                t = new RegExp(t);
                for (var r in e)
                    if (e.hasOwnProperty(r)) {
                        if (t && !t.test(r)) continue;
                        n.push(r)
                    }
                return n
            };
        i.NativeStore = function () {
            s = {}, o = function () {
                var e = 0;
                for (var t in s) s.hasOwnProperty(t) && (e += 1);
                this.length = e
            }
        }, i.NativeStore.prototype = {
            length: 0,
            getItem: function (e) {
                return typeof s[e] == "undefined" ? null : s[e]
            },
            setItem: function (e, t) {
                s[e] = t, o.call(this)
            },
            removeItem: function (e) {
                delete s[e], o.call(this)
            },
            clear: function () {
                s = {}, o.call(this)
            },
            keys: function (e) {
                return u(s, e)
            },
            storageType: function () {
                return "Native"
            }
        }, i.LocalStore = function () {
            o = function () {
                this.length = window.localStorage.length
            }
        }, i.LocalStore.prototype = {
            length: 0,
            getItem: function (e) {
                try {
                    return JSON.parse(window.localStorage.getItem(e))
                } catch (t) {
                    return null
                }
            },
            setItem: function (e, t) {
                var n = window.localStorage.setItem(e, JSON.stringify(t));
                return o.call(this), n
            },
            removeItem: function (e) {
                var t = window.localStorage.removeItem(e);
                return o.call(this), t
            },
            clear: function () {
                var e = window.localStorage.clear();
                return o.call(this), e
            },
            keys: function (e) {
                return u(window.localStorage, e)
            },
            storageType: function () {
                return "LocalStorage"
            }
        }, n.exports = i
    }
}), this.require.define({
    "lib/collapsible_sidebar": function (e, t, n) {
        var r = Em.Mixin.create({
            classNames: ["flush_top", "collapsible"],
            classNameBindings: ["collapsedSidebar:collapsed"],
            collapsedSidebar: !1,
            didInsertElement: function () {
                this._super(), this.$(".pane.left").hover(function () {
                    $(this).addClass("expand")
                }, function () {
                    $(this).removeClass("expand")
                })
            },
            toggleSidebar: function () {
                var e = this.get("collapsedSidebar"),
                    t;
                this.set("collapsedSidebar", !e);
                if (!e) {
                    try {
                        t = this.$(".pane.left")
                    } catch (n) {}
                    t && t.removeClass("expand")
                }
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/collision/agent_collision": function (e, t, n) {
        var r = {
            getUserNames: function (e, t) {
                var n = [],
                    r = [],
                    i = Zendesk.currentUser.get("id");
                _.each(e, function (e) {
                    var t;
                    if (e == i) return;
                    t = Zendesk.User.create({
                        id: e
                    }), r.push(t), n.push(t.fetch())
                }), $.when.apply($, n).done(function () {
                    var e = _.map(r, function (e) {
                        return e.get("name")
                    });
                    t(e)
                })
            },
            manageWatching: function (e, t) {
                return e == null ? this : (t(), this)
            },
            unwatchPresence: function (e, t) {
                t = t || {}, t.quietMode || RadarClient.presence("ticket/" + e).set("offline"), RadarClient.presence("ticket/" + e).unsubscribe()
            },
            unwatchStatus: function (e) {
                RadarClient.status("ticket/" + e).unsubscribe()
            },
            watchPresence: function (e, t, n) {
                n = n || {}, n.quietMode || RadarClient.presence("ticket/" + e).set("online"), RadarClient.presence("ticket/" + e).on(function (n) {
                    t(e, n)
                }).sync()
            },
            watchStatus: function (e, t) {
                RadarClient.status("ticket/" + e).on(function (n) {
                    t(e, n)
                }).subscribe()
            }
        };
        n.exports = Object.freeze(r)
    }
}), this.require.define({
    "lib/comment_drafts": function (e, t, n) {
        var r = t("lib/closet"),
            i = "CD",
            s = 2e3,
            o = 6048e5,
            u = 18e5,
            a = function () {
                this.storage = new r, this.collectGarbage = this.collectGarbage.bind(this)
            };
        a.prototype = {
            fetchDraft: function (e, t) {
                var n = this.draftKey(e, t),
                    r = this.storage.getItem(n);
                if (r && !this.removeIfExpired(n)) return r
            },
            saveDraft: _.throttle(function (e, t, n) {
                if (n == null || n.comment == null) return;
                var r = this.draftKey(e, t),
                    i = n.comment,
                    s = {
                        draft: i,
                        state: n.state,
                        date: this.currentDate()
                    };
                i && i.trim() ? this.storage.setItem(r, s) : this.storage.removeItem(r)
            }, s),
            removeDraft: function (e, t) {
                var n = this.draftKey(e, t);
                this.storage.removeItem(n), this.saveDraft(e, t)
            },
            draftKey: function (e, t) {
                return [i, e, t].join(":")
            },
            removeIfExpired: function (e) {
                var t = this.storage.getItem(e);
                return this.isExpired(t) ? (this.storage.removeItem(e), !0) : !1
            },
            isExpired: function (e) {
                return this.timeToExpire(e) <= 0
            },
            timeToExpire: function (e) {
                var t = +(new Date(e.date)),
                    n = +this.currentDate(),
                    r = o;
                return t + r - n
            },
            currentDate: function () {
                return new Date
            },
            collectGarbage: function () {
                var e = "^" + i + ":\\d+:\\d+$",
                    t = this.storage.keys(e);
                for (var n = 0; n < t.length; n++) this.removeIfExpired(t[n])
            },
            startGarbageCollection: function (e) {
                e = e || u, this.collectGarbage(), window.setInterval(this.collectGarbage, e)
            }
        }, n.exports = new a
    }
}), this.require.define({
    "fixtures/user_views/conditions": function (e, t, n) {
        n.exports = [{
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }],
            target: null,
            title: "Active",
            value: "is_active",
            values: {
                list: [{
                    value: !0,
                    title: "true"
                }, {
                    value: !1,
                    title: "false"
                }],
                type: "list"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "before",
                value: "less_than"
            }, {
                title: "before or on",
                value: "less_than_or_equal_to"
            }, {
                title: "after",
                value: "greater_than"
            }, {
                title: "after or on",
                value: "greater_than_or_equal_to"
            }, {
                field_type: "integer",
                title: "is within the previous",
                value: "within_previous_n_days"
            }, {
                field_type: "integer",
                title: "is within the next",
                value: "within_next_n_days"
            }],
            target: null,
            title: "Created at",
            value: "created_at",
            values: {
                labels: {
                    "default": "YYYY-MM-DD",
                    integer: " days"
                },
                list: [],
                type: "date"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "before",
                value: "less_than"
            }, {
                title: "before or on",
                value: "less_than_or_equal_to"
            }, {
                title: "after",
                value: "greater_than"
            }, {
                title: "after or on",
                value: "greater_than_or_equal_to"
            }, {
                field_type: "integer",
                title: "is within the previous",
                value: "within_previous_n_days"
            }, {
                field_type: "integer",
                title: "is within the next",
                value: "within_next_n_days"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Last login",
            value: "last_login",
            values: {
                labels: {
                    "default": "YYYY-MM-DD",
                    integer: " days"
                },
                list: [],
                type: "date"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Language",
            value: "language",
            values: {
                list: [{
                    title: "English",
                    value: 1
                }, {
                    title: "Deutsch",
                    value: 8
                }, {
                    title: "Español",
                    value: 2
                }, {
                    title: "Français",
                    value: 16
                }, {
                    title: "Italiano",
                    value: 22
                }, {
                    title: "Português (Brasil)",
                    value: 19
                }, {
                    title: "日本語 (Japanese)",
                    value: 67
                }],
                type: "list"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Organization",
            value: "organization_id",
            values: {
                list: [{
                    title: "Ops",
                    value: 17
                }, {
                    title: "Support",
                    value: 1
                }, {
                    title: "Engineering",
                    value: 2
                }, {
                    title: "QA",
                    value: 3
                }, {
                    title: "Business Development",
                    value: 4
                }],
                type: "list"
            }
        }, {
            group: "user",
            operators: [{
                title: "includes",
                value: "includes"
            }, {
                title: "does not include",
                value: "not_includes"
            }],
            target: null,
            title: "Tags",
            value: "current_tags",
            values: {
                list: [],
                type: "tags"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }],
            target: null,
            title: "Plan Type",
            value: "requester.custom_fields.plan_type",
            values: {
                list: [{
                    title: "Platinum",
                    value: "platinum"
                }, {
                    title: "Gold",
                    value: "gold"
                }, {
                    title: "Silver",
                    value: "silver"
                }],
                type: "list"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "less than",
                value: "less_than"
            }, {
                title: "less than or equal to",
                value: "less_than_or_equal_to"
            }, {
                title: "greater than",
                value: "greater_than"
            }, {
                title: "greater than or equal to",
                value: "greater_than_or_equal_to"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Monthly spend",
            value: "requester.custom_fields.monthly_spend",
            values: {
                list: [],
                type: "integer"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Gateway",
            value: "requester.custom_fields.gateway",
            values: {
                list: [{
                    title: "Braintree",
                    value: "braintree"
                }, {
                    title: "Chase Paymentech",
                    value: "chase_paymentech"
                }, {
                    title: "Paypal",
                    value: "paypal"
                }, {
                    title: "Recurly",
                    value: "recurly"
                }],
                type: "list"
            }
        }, {
            group: "user",
            operators: [{
                title: "is",
                value: "is"
            }, {
                title: "is not",
                value: "is_not"
            }, {
                title: "is present",
                value: "present",
                values: []
            }, {
                title: "is not present",
                value: "not_present",
                values: []
            }],
            target: null,
            title: "Account type",
            value: "requester.custom_fields.account_type",
            values: {
                list: [{
                    title: "customer",
                    value: "customer"
                }, {
                    title: "partner",
                    value: "partner"
                }, {
                    title: "employee",
                    value: "employee"
                }],
                type: "list"
            }
        }]
    }
}), this.require.define({
    "lib/conditions_adapter": function (e, t, n) {
        var r = {
            transform: function (e) {
                var t = {
                    field: {},
                    operator: {},
                    value: {}
                };
                return e.forEach(function (e) {
                    var n = e.title,
                        r = e.value,
                        i = e.operators,
                        s = e.values;
                    t.field[r] = {
                        title: n
                    }, t.operator[r] = {
                        type: "list",
                        list: i.reduce(function (e, t) {
                            return e[t.value] = t, e
                        }, {}),
                        title: n
                    }, t.value[r] = {}, i.forEach(function (e) {
                        var n, i, o;
                        if (e.values && e.values.length === 0) return;
                        n = e.value, i = t.value[r][n] = $.extend({}, s), i.type = e.field_type || i.type, o = i.labels, i.list = i.list.reduce(function (e, t) {
                            return e[t.value] = t, e
                        }, {}), o && (i.label = o[i.type] || o["default"], delete i.labels)
                    })
                }), t
            }
        };
        n.exports = Object.freeze(r)
    }
}), this.require.define({
    "lib/controllers/activity_watching": function (e, t, n) {
        n.exports = Em.Mixin.create({
            idleTimer: Em.computed.singleton("lib/lotus/idle_timer"),
            onBrowserActivity: Em.K,
            _watchingActivity: !1,
            watchForActivity: function () {
                if (this.get("_watchingActivity")) return;
                this.get("idleTimer").on("active", this.get("onBrowserActivity").bind(this)), this.set("_watchingActivity", !0)
            }
        })
    }
}), this.require.define({
    "lib/sideload_parser": function (e, t, n) {
        var r = function (e) {
            return e.reduce(function (e, t) {
                return e[t.id] = t, e
            }, {})
        };
        n.exports = Object.freeze({
            extractSideloads: function (e, t, n) {
                var i = {}, s, o, u, a;
                e.forEach(function (e) {
                    Object.keys(n).forEach(function (f) {
                        s = n[f], i[s] || (i[s] = r(t[s])), f.match(/_ids$/) ? (u = e[f] || [], e[f.replace(/_ids$/, "s")] = u.map(function (e) {
                            return i[s][e]
                        })) : (o = e[f], a = f.replace(/_id$/, ""), o === null ? e[a] = null : e[a] = i[s][o])
                    })
                })
            }
        })
    }
}), this.require.define({
    "lib/ticket_parser": function (e, t, n) {
        var r = t("models/ticket/types"),
            i = {
                mention: r.Vias.TWITTER,
                direct_message: r.Vias.TWITTER_DM,
                favorite: r.Vias.TWITTER_FAVORITE,
                email: r.Vias.MAIL,
                chat: r.Vias.CHAT,
                voicemail: r.Vias.VOICE,
                inbound: r.Vias.PHONE_INBOUND,
                outbound: r.Vias.PHONE_OUTBOUND,
                post: r.Vias.FACEBOOK,
                message: r.Vias.FACEBOOK_MESSAGE,
                forum: r.Vias.TOPIC,
                feedback_tab: r.Vias.DROPBOX
            }, s = {
                parse: function (e) {
                    if (!e || !e.ticket) return e;
                    var t = e;
                    return e = e.ticket, e = Em.copy(e), delete e.comments, e = s._extractSideloads(e, t), e = s._parseCustomFields(e), e = s.parseSubject(e), e = s.parseV2Attributes(e), e = s.parseVia(e), e
                },
                parseV2Attributes: function (e) {
                    return e.status ? e.status_id = r.Statuses[e.status.toUpperCase()] : e.status_id = 0, e.type ? e.ticket_type_id = r.Types[e.type.toUpperCase()] : e.ticket_type_id = 0, e.priority ? e.priority_id = r.Priorities[e.priority.toUpperCase()] : e.priority_id = 0, e
                },
                parseVia: function (e) {
                    var t = e.via || {}, n = t.source || {}, r;
                    return _.include(["twitter", "voice", "facebook", "web"], t.channel) ? r = n.rel : _.include(["email", "chat", "forum"], t.channel) && (r = t.channel), e.via_id = i[r], e
                },
                parseTags: function (e, t, n) {
                    var r = t || "current_tags",
                        i = n || t || "tags",
                        s = e[r];
                    return s === null || s === "" ? e[i] = [] : s !== undefined && (e[i] = $.trim(s).split(/\s+/).uniq()), r !== i && delete e[r], e
                },
                _extractSideloads: function (e, n) {
                    var r = t("lib/sideload_parser");
                    return r.extractSideloads([e], n, {
                        requester_id: "users",
                        submitter_id: "users",
                        assignee_id: "users",
                        group_id: "groups",
                        organization_id: "organizations",
                        collaborator_ids: "users"
                    }), ["requester_id", "submitter_id", "assignee_id", "collaborator_ids", "group_id", "organization_id"].forEach(function (t) {
                        delete e[t]
                    }), e.collaborators = e.collaborators.map(function (e) {
                        return Zd.User.create(e)
                    }), e
                },
                _parseCustomFields: function (e) {
                    var t = e.custom_fields,
                        n, r;
                    return t && _.each(t, function (t) {
                        n = "custom_field_" + t.id, r = Zendesk.TicketFields.byAttributeName(n), r && (e[n] = r.deserializeValue(t.value))
                    }), e
                },
                parseSubject: function (e) {
                    return (e.subject === "" || e.subject == null) && e.description && (e.subject = e.description.substring(0, 50) + "..."), e
                }
            };
        n.exports = Object.freeze({
            parse: function (e) {
                return s.parse(e)
            },
            parseTags: function (e, t, n) {
                return s.parseTags(e, t, n)
            },
            parseSubject: function (e) {
                return s.parseSubject(e)
            }
        })
    }
}), this.require.define({
    "controllers/next_ticket_controller": function (e, t, n) {
        var r = t("lib/monitoring/metrics").instance(),
            i = t("lib/growl");
        n.exports = Em.Object.extend({
            app: function (e, t) {
                return t || Zendesk
            }.property(),
            workspaces: Em.computed.oneWay("app.workspaces"),
            workspace: Em.computed.oneWay("workspaces.current"),
            router: Em.computed.oneWay("app.Routes"),
            playOn: !1,
            nextTicket: function () {
                return this.get("workspace.origin.playOn") ? this.nextPlayTicket() : this.nextFilterTicket()
            },
            nextFilterTicket: function () {
                r.count("play/opened");
                var e = this.get("workspace.ticket"),
                    t = this.get("workspace.origin.filter.tickets");
                if (e == null || t == null) return !1;
                var n = t.mapProperty("id");
                this.get("workspaces.ticketWorkspaces").length > 1 && (n = _.difference(n, this._workspaceTicketIds().without(e.get("id"))));
                var i = n.objectAt(n.indexOf(e.get("id")) + 1);
                if (!i && t.get("morePages")) {
                    t.nextPage();
                    var s = this;
                    t.refresh().done(function () {
                        s.nextFilterTicket()
                    })
                } else {
                    if (!i) return this._closeCurrentWorkspace();
                    var o = Zendesk.Ticket.create({
                        id: i
                    });
                    this.get("workspace").replaceTicket(o)
                }
            },
            nextPlayTicket: function (e, n) {
                r.count("play/opened"), e = e || this.get("workspace.origin.filter"), n = n || [];
                var s = new Date;
                Em.Resource.ajax({
                    url: e.playNextUrl()
                }).done(_(function (o, u, a) {
                    if (a.status === 204 || !o.ticket || !o.ticket.id || _.include(n, o.ticket.id)) {
                        if (this.get("workspace")) this._closeCurrentWorkspace();
                        else {
                            var f = I18n.t("txt.play.empty_msg");
                            i.notice(f)
                        }
                        return !1
                    }
                    if (_.include(this._workspaceTicketIds(), o.ticket.id)) return n.push(o.ticket.id), this.nextPlayTicket(e, n);
                    var l = Zendesk.Ticket.create(t("lib/ticket_parser").parse(o));
                    r.storeTime("models/ticket/%@/fetch".fmt(o.ticket.id), new Date - s), Em.set(l, "resourceState", Em.Resource.Lifecycle.FETCHED), l.set("expireAt", new Date((new Date).getTime() + 3e5)), this.get("workspace") ? this.get("workspace").replaceTicket(l) : this.get("router").goToHash("#/tickets/" + o.ticket.id)
                }).bind(this))
            },
            _closeCurrentWorkspace: function () {
                return this.get("workspaces").closeWorkspace(this.get("workspace"), Em.K, !0)
            },
            _workspaceTicketIds: function () {
                return this.get("workspaces.ticketWorkspaces").map(function (e) {
                    return e.get("ticket.id")
                })
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "NextTicketController"
            }
        })
    }
}), this.require.define({
    "views/modals/problem_solve_notice": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            templateName: "templates/modals/problem_solve_notice",
            title: I18n.t("txt.modal.problem_solve_notice.title"),
            cancelLabel: I18n.t("txt.modal.problem_solve_notice.cancel"),
            onConfirm: Em.required(),
            confirmLabel: function () {
                var e = this.get("incidentCount");
                return e ? I18n.t("txt.modal.problem_solve_notice.confirm", {
                    count: e
                }) : ""
            }.property("incidentCount").cacheable(),
            userDidConfirm: function () {
                this.get("onConfirm")(), this.hideModal()
            },
            userDidCancel: function () {
                this.hideModal()
            }
        });
        r.reopenClass({
            toString: function () {
                return "ProblemSolveNoticeModal"
            }
        }), n.exports = r
    }
}), this.require.define({
    "lib/controllers/ticket_footer_controller_mixin": function (e, t, n) {
        var r = t("views/modals/problem_solve_notice"),
            i = Em.Mixin.create({
                save: Em.required(Function),
                ticket: Em.required(Zendesk.Ticket),
                nextOnTicketSubmit: !1,
                showMacroList: !1,
                nextTicketController: Em.computed.singleton("controllers/next_ticket_controller"),
                _isSavable: function (e) {
                    return this.get("submitButtonDisabled") ? !1 : !this.get("statusController").statusIsDisabled(e)
                },
                toggleMacro: function () {
                    return this.set("showMacroList", !this.get("showMacroList")), !1
                },
                nextTicket: function () {
                    this.get("nextTicketController").nextTicket()
                },
                saveAsNew: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.NEW)) return;
                    this.get("ticket").set("status_id", Zendesk.Ticket.Statuses.NEW), this.save()
                },
                saveAsOpen: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.OPEN)) return;
                    this.get("ticket").set("status_id", Zendesk.Ticket.Statuses.OPEN), this.save()
                },
                saveAsPending: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.PENDING)) return;
                    this.get("ticket").set("status_id", Zendesk.Ticket.Statuses.PENDING), this.save()
                },
                saveAsHold: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.HOLD)) return;
                    this.get("ticket").set("status_id", Zendesk.Ticket.Statuses.HOLD), this.save()
                },
                saveAsSolvedWithConfirmation: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.SOLVED)) return;
                    this.get("ticket").set("status_id", Zendesk.Ticket.Statuses.SOLVED), this.save()
                },
                saveAsSolved: function () {
                    if (!this._isSavable(Zendesk.Ticket.Statuses.SOLVED)) return;
                    this.get("shouldShowProblemWarning") ? this.showProblemWarning() : this.saveAsSolvedWithConfirmation()
                },
                shouldShowProblemWarning: function (e, t, n) {
                    return arguments.length > 1 ? t : !this.get("ticket.isSolved") && !! this.get("ticket.hasIncidents")
                }.property("ticket.isSolved", "ticket.hasIncidents").cacheable(),
                showProblemWarning: function () {
                    r.create({
                        onConfirm: this.saveAsSolvedWithConfirmation.bind(this),
                        controller: this,
                        incidentCount: this.get("ticket.incidentsTotal")
                    }).append()
                }
            });
        n.exports = i
    }
}), this.require.define({
    "lib/core_widgets/configs": function (e, t, n) {
        var r = Object.freeze({
            comboSelect: {
                searchResultFormat1: {
                    filteredField: "concatenatedLabel",
                    renderItemContentForSearch: function (e, t) {
                        return e ? e.concatenatedLabel ? t(e.concatenatedLabel) : e.label ? t(e.label) : "" : ""
                    }
                }
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/countdown_timer": function (e, t, n) {
        function r(e) {
            this.duration = e, this.reset()
        }
        r.prototype.reset = function () {
            this.tickInterval && clearTimeout(this.tickInterval), this.resetOn = null, this.secondsLeft = null, this.tickInterval = null
        }, r.prototype.tick = function (e) {
            return this.secondsLeft = this.duration - Math.floor(((new Date).getTime() - this.resetOn.getTime()) / 1e3), this.secondsLeft <= 0 && (this.secondsLeft = 0, clearInterval(this.tickInterval)), e && e(this.secondsLeft), this
        }, r.prototype.start = function (e) {
            if (!this.duration) throw new Error("Timer needs a duration");
            return this.resetOn = new Date, this.tick(e), this.tickInterval = setInterval(this.tick.bind(this, e), 1e3), this
        }, r.prototype.secondsRemaining = function () {
            return this.secondsLeft
        }, n.exports = r
    }
}), this.require.define({
    "lib/date_helper": function (e, t, n) {
        var r = function (e) {
            e = e || new Date;
            var t = new Date(e),
                n = t.getDay() || 7;
            if (n !== 1) {
                var r = -24 * (n - 1);
                t.setHours(t.getHours() + r)
            }
            return t.setHours(0), t.setMinutes(0), Math.floor((e - t) / 36e5)
        };
        n.exports = Object.freeze({
            hoursSinceMonday: r
        })
    }
}), this.require.define({
    "lib/debug/installer": function (e, t, n) {
        var r = function () {
            var e = !1,
                t = !1;
            this.installHooks = function () {
                if (e) return;
                this.install(), e = !0
            }, this.start = function () {
                t = !0
            }, this.stop = function () {
                t = !1
            }, this.started = function () {
                return t
            }, this.stopped = function () {
                return !t
            }
        };
        n.exports = r
    }
}), this.require.define({
    "lib/debug/level": function (e, t, n) {
        var r = function (e) {
            this.levels = {}, this.visitFn = e
        };
        r.mixin = function (e) {
            this.reset = function () {
                e.reset()
            }, this.level = function (t) {
                e.level(t)
            }, this.diff = function (t) {
                return e.diff(t)
            }, this.count = function (t) {
                return e.count(t)
            }
        };
        var i = r.prototype;
        i.reset = function () {
            this.levels = {}
        }, i.level = function (e) {
            var t;
            _.isString(e) ? t = e : t = Em.guidFor(e), this.levels[t] = this.count(e)
        }, i.count = function (e) {
            var t = {};
            return this.visitFn(e, function (e, n) {
                t[e] = n
            }), t
        }, i.diff = function (e) {
            var t = {}, n = this.levels[Em.guidFor(e)],
                r = this.count(e);
            if (!n || !r) return;
            return Em.keys(n).forEach(function (e) {
                var i = n[e],
                    s = r[e];
                i && s && i != s && (t[e] = s - i)
            }), t
        }, n.exports = r
    }
}), this.require.define({
    "lib/debug/object_counter": function (e, t, n) {
        var r = t("lib/debug/level"),
            i = function () {
                var e = {}, t = function (t, n) {
                        Em.keys(e).forEach(function (t) {
                            n(t, e[t])
                        })
                    }, n = new r(t);
                r.mixin.call(this, n);
                var i = this.reset;
                this.install = function () {
                    var e = this;
                    Em.Object.reopen({
                        init: function () {
                            var t = this._super.apply(this, arguments);
                            return e.incrementCount(this), t
                        },
                        destroy: function () {
                            var t;
                            return this._super && (t = this._super.apply(this, arguments)), e.decrementCount(this), t
                        }
                    })
                }, this.incrementCount = function (t) {
                    if (this.stopped()) return;
                    var n = t.constructor.toString();
                    typeof e[n] == "undefined" ? e[n] = 1 : e[n] = e[n] + 1
                }, this.decrementCount = function (t) {
                    if (this.stopped()) return;
                    var n = t.constructor.toString();
                    typeof e[n] == "undefined" ? e[n] = 0 : e[n] = e[n] - 1, e[n] === 0 && delete e[n]
                }, this.reset = function () {
                    e = {}, i()
                }, this.data = function () {
                    return e
                }
            }, s = t("lib/debug/installer"),
            o = function () {
                i.apply(this), s.apply(this)
            };
        n.exports = Object.freeze(new o)
    }
}), this.require.define({
    "lib/debug": function (e, t, n) {
        var r = t("lib/debug/object_counter"),
            i = t("lib/debug/views_perf/view_sneaker"),
            s = function () {
                return r.installHooks(), i.installHooks(), {
                    counter: r,
                    viewSneaker: i
                }
            };
        n.exports = {
            initialize: s,
            counter: r
        }
    }
}), this.require.define({
    "lib/debug/chain_counter": function (e, t, n) {
        var r = t("lib/debug/level"),
            i = function (e, t) {
                var n = Em.meta(e || Zendesk).watching;
                Em.keys(n).forEach(function (e) {
                    var r = n[e];
                    t(e, r)
                })
            }, s = function () {
                var e = new r(i);
                r.mixin.call(this, e)
            };
        n.exports = Object.freeze(new s)
    }
}), this.require.define({
    "lib/debug/views_perf/tracker": function (e, t, n) {
        var r = function () {
            var e = {};
            this.trackChild = function (t, n) {
                var r = t.guid;
                e[r] = e[r] || {
                    name: t.name,
                    children: []
                };
                var i = n;
                i.parentGuid = r, e[r].children.push(i)
            }, this.reset = function () {
                e = {}
            }, this.dump = function () {
                return e
            }, this.sortedDump = function () {
                var t = _.map(e, function (e) {
                    return e.children
                }),
                    n = _.flatten(t),
                    r = _.sortBy(n, function (e) {
                        return e.sequence
                    });
                return r
            }
        };
        n.exports = Object.freeze(new r)
    }
}), this.require.define({
    "lib/debug/views_perf/view_sneaker": function (e, t, n) {
        var r = function () {
            this.time = function () {
                return Date.now()
            };
            var e = 0;
            this.nextSequence = function () {
                if (this.stopped()) return;
                return e++, e
            };
            var n = t("lib/debug/views_perf/tracker");
            this.viewTracker = function () {
                return n
            }, this.reset = function () {
                e = 0, n.reset()
            }, this.nameFor = function (e) {
                return e.constructor.toString()
            }, this.guidFor = function (e) {
                return Ember.guidFor(e)
            }, this.trackChild = function (e, t) {
                if (this.stopped()) return;
                n.trackChild(e, t)
            }, this.install = function () {
                var e = this;
                Ember.View.reopen({
                    appendChild: function () {
                        var t = this,
                            n = e.time(),
                            r = this._super.apply(this, arguments),
                            i = e.time(),
                            s = {
                                guid: e.guidFor(t),
                                name: e.nameFor(t)
                            }, o = {
                                guid: e.guidFor(r),
                                name: e.nameFor(r),
                                sequence: e.nextSequence(),
                                startTime: n,
                                endTime: i,
                                createAndRenderTime: i - n
                            };
                        return e.trackChild(s, o), r
                    }
                })
            }
        }, i = t("lib/debug/installer"),
            s = function () {
                r.apply(this), i.apply(this)
            }, o = new s;
        n.exports = o
    }
}), this.require.define({
    "lib/feature_category_collection_consumer": function (e, t, n) {
        var r = t("models/feature_category"),
            i = ["tickets", "customer_portal", "voice_and_chat", "social_media", "feedback_tab", "email", "users_and_orgs", "surveys", "security", "account"];
        n.exports = Em.Mixin.create({
            featureCategoryCollection: i.map(function (e) {
                return r.create({
                    name: e
                })
            })
        })
    }
}), this.require.define({
    "lib/feature_collection_consumer": function (e, t, n) {
        var r = t("models/feature"),
            i = [
                ["advanced_analytics", "account", "plus", "#/reporting/analytics/period:0"],
                ["light_agents", "users_and_orgs", "enterprise", "#/admin/people/agents"],
                ["ticket_forms", "tickets", "enterprise", "#/admin/ticket_forms"],
                ["ticket_tagging", "tickets", "starter", "#/admin/tickets"],
                ["user_tagging", "users_and_orgs", "starter", "#/admin/customers"],
                ["agent_forwarding", "email", "starter", "#/admin/agents"],
                ["bcc_archiving", "email", "enterprise", "#/admin/tickets"],
                ["allow_ccs", "email", "starter", "#/admin/tickets"],
                ["customer_satisfaction", "surveys", "regular", "#/admin/customers/satisfaction"],
                ["suspended_ticket_notification", "tickets", "starter", "#/admin/tickets"],
                ["markdown", "tickets", "starter", "#/admin/tickets"],
                ["topic_suggestion", "customer_portal", "starter", "#/admin/portal"],
                ["on_hold_status", "tickets", "regular", "#/admin/ticket_fields"],
                ["screencasts", "tickets", "plus", "#/admin/tickets"],
                ["forum_analytics", "customer_portal", "plus", "#/admin/portal"],
                ["language_detection", "email", "plus", "#/admin/email"],
                ["feedback_tabs", "feedback_tab", "starter", "#/admin/dropboxes"],
                ["chat", "voice_and_chat", "regular", "#/admin/chat"],
                ["chat_about_my_ticket", "voice_and_chat", "regular", "#/admin/chat"],
                ["twitter", "social_media", "starter", "#/admin/twitter"],
                ["facebook", "social_media", "starter", "#/admin/facebook"],
                ["voice", "voice_and_chat", "starter", "#/admin/voice"],
                ["sandbox", "account", "plus", "#/admin/sandbox"],
                ["facebook_login", "security", "starter", "#/admin/security"],
                ["twitter_login", "security", "starter", "#/admin/security"],
                ["google_login", "security", "starter", "#/admin/security"],
                ["user_org_fields", "users_and_orgs", "regular", "#/admin/user_fields"]
            ].map(function (e) {
                return r.create({
                    name: e[0],
                    category: e[1],
                    plan: e[2],
                    settingUrl: e[3]
                })
            });
        n.exports = Em.Mixin.create({
            featureCollection: i
        })
    }
}), this.require.define({
    "lib/feature_usage_metrics_consumer": function (e, t, n) {
        n.exports = Em.Mixin.create({
            featureUsageMetrics: t("models/feature_usage_metrics").create()
        })
    }
}), this.require.define({
    "lib/fetch_filter": function (e, t, n) {
        var r = Em.Mixin.create({
            fetchResponseFilter: function (e) {
                return !0
            },
            fetchCounter: 0,
            hasOutstandingFetch: function () {
                return this.get("fetchCounter") > 0
            }.property("fetchCounter").cacheable(),
            fetch: function () {
                var e;
                return this._bumpCounter(1), e = this._super.apply(this, arguments), e.done(function () {
                    this._bumpCounter(-1)
                }.bind(this)), e
            },
            updateWithApiData: function (e) {
                this.fetchResponseFilter(e) && this._super.apply(this, arguments)
            },
            _bumpCounter: function (e) {
                this.set("fetchCounter", this.get("fetchCounter") + e)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/filter_tickets_poller": function (e, t, n) {
        var r = function () {
            this.pollPeriod = 9e4, this._timeout = null, this.pollerCallback = null
        };
        r.prototype = {
            idleTimer: t("lib/lotus/idle_timer").instance(),
            startPolling: function (e) {
                this.pollerCallback = e, this._timeout = chronos.setInterval(this.poll.bind(this), this.pollPeriod)
            },
            stopPolling: function () {
                this._timeout !== null && (chronos.clearInterval(this._timeout), this._timeout = null)
            },
            poll: function () {
                var e = t("controllers/ticket_filter_manager_controller").instance();
                if (this.idleTimer.isIdle()) return;
                Em.Resource.ajax({
                    url: "/api/v2/views/%@/feed.json?per_page=30".fmt(e.get("currentFilter.id")),
                    type: "GET",
                    dataType: "json"
                }).done(_(function (e) {
                    this.pollerCallback(e.rows)
                }).bind(this))
            }
        };
        var i = new r;
        n.exports = i
    }
}), this.require.define({
    "lib/formatting_helper": function (e, t, n) {
        n.exports = Object.seal({
            truncateWithEllipsis: function (e, t) {
                if (!e) return "";
                var n = $.trim(e);
                return n.length > t && (n = n.substring(0, t) + I18n.t("txt.ellipsis")), n
            }
        })
    }
}), this.require.define({
    "lib/initialization_hooks": function (e, t, n) {
        var r = t("controllers/main_panes_controller").instance();
        n.exports = Object.freeze({
            uiReady: r.uiReadyForView("mainPane")
        })
    }
}), this.require.define({
    "lib/macro_ticket_serializer": function (e, t, n) {
        var r = {
            serializers: {
                addSubmitterId: function (e, t) {
                    t.get("isNew") && (e.submitter_id = Zd.get("currentUser.id"))
                },
                addSharingAgreementId: function (e, t) {
                    var n = t.get("agreementIdToShare") || "";
                    n === -1 ? e.unshare_ticket = "1" : e.agreement_id = n
                },
                addRequester: function (e, t) {
                    t.get("requester.id") ? e.requester_id = t.get("requester.id") : t.get("requester.email") && (e.requester_email = t.get("requester.email"), e.requester_name = t.get("requester.name"))
                },
                addCollaborators: function (e, t) {
                    var n = t.get("collaborators") || _([]);
                    e.set_collaborators = n.map(function (e) {
                        return e.get("id") || e.get("email")
                    }), e.set_collaborators.length === 0 && (e.set_collaborators = [""])
                },
                addCustomFields: function (e, t) {
                    var n;
                    e.fields || (e.fields = {}), Zendesk.ticketFields.get("custom").forEach(function (n) {
                        var r = t.get(n.get("attributeName"));
                        e.fields[n.get("id")] = n.serializeValue(r)
                    }, t)
                },
                addDueDate: function (e, t) {
                    t.get("ticket_type_id") === Zendesk.Ticket.Types.TASK && (t.get("due_date") instanceof Date ? e.due_date = t.get("due_date").toISOString() : e.due_date = t.get("due_date"))
                },
                addComment: function (e, t) {
                    var n = t.get("comment"),
                        r, i, s, o;
                    n && (r = n.get("body"), r && (t.get("id") ? (e.comment = n.toJSON(), e.comment.is_public === undefined && (e.comment.is_public = t.get("isDefaultPublicComment"))) : (e.comment = {
                        value: r
                    }, s = t.get("submitter.id"), o = t.get("requester.id"), o != s && (e.comment.author_id = s), i = n.get("uploadSet.token"), i && (e.comment.uploads = i))))
                },
                addExternalLinks: function (e, t) {
                    e.external_links = t.get("external_links")
                },
                addViaId: function (e, t) {
                    if (t.get("via_followup_source_id")) e.via_id = Zendesk.Ticket.Vias.CLOSED_TICKET;
                    else if (!t.get("isNew") || !t.get("via_id")) e.via_id = Zendesk.Ticket.Vias.LOTUS
                },
                addScreencasts: function (e, t) {
                    var n = t.get("comment"),
                        r;
                    n && (r = n.get("recordedScreencasts"), r.length > 0 && (e.screencasts = r))
                },
                addSubject: function (e, t) {
                    var n = Zendesk.ticketFields.byAttributeName("subject") !== undefined,
                        r = t.get("userPermissions.updateTicket");
                    n && r && (e.subject = t.get("subject"))
                },
                addTicketSharingCustomAttributes: function (e, t) {
                    var n = t.get("sharingAgreementOptions");
                    n != null && (e.sharing_agreement_custom_fields = n)
                },
                addTicketFormId: function (e, t) {
                    t.get("hasTicketForms") && (e.ticket_form_id = t.get("ticketFormId"))
                }
            },
            filterFormFields: function (e) {
                var n = e.ticket_form_id,
                    r, i;
                n && (r = t("modules/ticket_forms_data/main").getTicketFormFields(n), r && (i = Zd.TicketFields.removable(), this.deleteFieldsAbsentOnForm(e, r, i)))
            },
            deleteFieldsAbsentOnForm: function (e, t, n) {
                n.forEach(function (n) {
                    if (t.findProperty("attributeName", n.get("attributeName"))) return;
                    n.get("isCustomField") ? delete e.fields[n.get("id")] : delete e[n.get("attributeName")]
                })
            },
            serializeAttributes: function (e) {
                var t = {
                    ticket_type_id: e.get("ticket_type_id"),
                    status_id: e.get("status_id"),
                    problem_id: e.get("problem_id") || "",
                    group_id: e.get("group_id") || "",
                    assignee_id: e.get("assignee_id") || "",
                    priority_id: e.get("priority_id"),
                    set_tags: e.get("tags").join(" "),
                    via_followup_source_id: e.get("via_followup_source_id"),
                    via_id: e.get("via_id")
                };
                return _.values(this.serializers).invoke("call", null, t, e), this.filterFormFields(t), t
            },
            serialize: function (e) {
                var t = {
                    ticket: this.serializeAttributes(e)
                };
                return e.get("macro_applied") && (t.macro_applied = e.get("macro_applied")), t
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "views/modals/keyboard_shortcuts_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["modal", "keyboardshortcuts-modal"],
            title: I18n.t("txt.keyboard_shortcuts.title"),
            templateName: "templates/modals/keyboard_shortcuts"
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/keyboard_shortcuts_modal_controller": function (e, t, n) {
        var r = t("views/modals/keyboard_shortcuts_modal"),
            i = Em.Object.extend(t("lib/user_settings_consumer"), {
                viewClass: r,
                showModal: function () {
                    this.get("viewClass").create({
                        controller: this
                    }).append()
                },
                keyboardShortcutsEnabled: Em.computed.alias("userSettings.keyboardShortcutsEnabled")
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "KeyboardShortcutsModalController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "lib/main_pane_keyboard_shortcuts": function (e, t, n) {
        var r = t("controllers/keyboard_shortcuts_modal_controller");
        n.exports = Object.freeze({
            goHome: function () {
                Zendesk.Routes.goToHash("#/dashboard")
            },
            goToFilters: function () {
                Zendesk.Routes.goToHash("#/filters")
            },
            goToSearch: function () {
                Zendesk.router.transitionTo("search")
            },
            goToNewTicket: function () {
                Zendesk.Routes.goToHash("#/tickets/new")
            },
            showKeyboardHelp: function (e) {
                r.instance().showModal()
            }
        })
    }
}), this.require.define({
    "lib/monitoring/page_load_performance": function (e, t, n) {
        function f() {
            function t() {
                var t, n, r = [];
                return e.forEach(function (e) {
                    t = a.getTime(e.startEvent), n = a.getTime(e.endEvent), t && n && r.push({
                        name: e.name,
                        time: n - t
                    })
                }), r
            }
            var e = [{
                name: "Total server delay",
                startEvent: "navigationStart",
                endEvent: "responseEnd"
            }, {
                name: "Server delay in network time",
                startEvent: "navigationStart",
                endEvent: "connectEnd"
            }, {
                name: "Server delay in fetch",
                startEvent: "requestStart",
                endEvent: "responseEnd"
            }, {
                name: "Browser rendering time",
                startEvent: "domLoading",
                endEvent: "loadEventEnd"
            }, {
                name: "Total user-perceived time",
                startEvent: "navigationStart",
                endEvent: "loadEventEnd"
            }];
            u = new r, a = i.instance(), this.displayTimes = function () {
                var e = t();
                e.forEach(function (e) {
                    s.storeTime(e.name, e.time), u.info(e.name + ": " + e.time)
                })
            }
        }
        var r = t("lib/logging/console_logger"),
            i = t("lib/lotus/timing"),
            s = t("lib/monitoring/metrics").instance(),
            o, u, a;
        f.instance = function () {
            return o || (o = new f), o
        }, n.exports = f
    }
}), this.require.define({
    "lib/nested_hash": function (e, t, n) {
        var r = function (t, n) {
            for (var r = 0, i = t.length; r < i; r++)
                if (t[r] === n) {
                    t.splice(r, 1);
                    return
                }
        }, i = function o(e, t, n) {
                var r = [],
                    i, s = function (r) {
                        if (t.length === 0) return;
                        var i = t.slice();
                        i.push(r.label), r.nestedLabel = i.join(n)
                    };
                return t = t || [], (e || []).forEach(function (e) {
                    i = e.label, s(e), r.push(e), typeof e.children != "undefined" && (t.push(i), r.push.apply(r, o(e.children, t, n)))
                }), r
            }, s = function (e) {
                this.leaves = {}, this.tree = {
                    root: {
                        children: []
                    }
                }, this.delim = e || "::"
            };
        s.prototype = {
            add: function (e, t, n) {
                e = e || "";
                var i = this.tree,
                    s = "",
                    o = "root",
                    u, a, f = e.split(this.delim),
                    l;
                for (var c = 0, h = f.length; c < h; c++) {
                    u = f[c], s = o + this.delim + u;
                    if (c === h - 1) a = {
                        label: u,
                        id: t,
                        type: n
                    }, i[s] ? (l = i[s].children, l._sameLabelLeafInsertionIndex == null && (l._sameLabelLeafInsertionIndex = 0), l.splice(l._sameLabelLeafInsertionIndex, 0, a), l._sameLabelLeafInsertionIndex++) : (this.leaves[s] ? Object.prototype.toString.call(this.leaves[s]) === "[object Array]" ? this.leaves[s].push(a) : this.leaves[s] = [this.leaves[s], a] : this.leaves[s] = a, i[o].children.push(a));
                    else if (!i[s]) {
                        if (this.leaves[s]) {
                            i[s] = {
                                label: u,
                                children: [].concat(this.leaves[s])
                            };
                            for (var p = 0, d = i[s].children.length; p < d; p++) r(i[o].children, i[s].children[p])
                        } else i[s] = {
                            label: u,
                            children: []
                        };
                        i[o].children.push(i[s])
                    }
                    o = o + this.delim + u
                }
                return this
            },
            toList: function () {
                return this.tree.root.children
            },
            toFlattenedList: function () {
                return i(this.tree.root.children, null, this.delim)
            }
        }, n.exports = s
    }
}), this.require.define({
    "lib/operating_system": function (e, t, n) {
        var r = {
            WINDOWS: "windows",
            MAC: "mac",
            OTHER: "other"
        };
        r.platform = function () {
            switch (navigator.platform) {
            case "Win32":
                return r.WINDOWS;
            case "MacPPC":
            case "MacIntel":
                return r.MAC;
            default:
                return r.OTHER
            }
        }(), n.exports = Object.freeze(r)
    }
}), this.require.define({
    "lib/pagination": function (e, t, n) {
        n.exports = Em.Mixin.create({
            perPage: 100,
            init: function (e) {
                this.setProperties({
                    nextPage: 1,
                    hasMorePages: !0
                }), this._super.apply(this, arguments), e = e || {}, e.perPage && this.set("perPage", e.perPage), Em.addListener(this, "willFetch", this, this._resetPagination), Em.addListener(this, "didFetch", this, this._recalculatePaginationState)
            },
            _resetPagination: function () {
                this.setProperties({
                    nextPage: 1,
                    hasMorePages: !0
                })
            },
            _recalculatePaginationState: function () {
                var e = this.get("nextPage"),
                    t = this.get("length") >= this.get("perPage") * e;
                this.setProperties({
                    nextPage: e + 1,
                    hasMorePages: t
                })
            },
            fetchMore: function () {
                if (!this.get("hasMorePages")) return;
                if (this.get("isFetching")) return;
                Em.set(this, "resourceState", Em.Resource.Lifecycle.FETCHING);
                var e = this.url || this.type.resourceURL(),
                    t = this.get("nextPage");
                e.indexOf("?") > 0 ? e = e + "&page=" + t : e = e + "?page=" + t;
                var n = this;
                return Em.Resource.ajax({
                    url: e,
                    success: function (e) {
                        n.replace(n.get("length"), 0, n.instantiateItems(n.parse(e))), Em.sendEvent(n, "didFetch")
                    }
                })
            }
        })
    }
}), this.require.define({
    "models/recent_problems": function (e, t, n) {
        var r = Em.ResourceCollection.create({
            type: Em.Object,
            url: "/api/v2/problems.json?per_page=20",
            parse: function (e) {
                var t;
                return e.tickets && (t = e.tickets.map(function (e, t, n) {
                    return {
                        id: e.id,
                        subject: e.subject
                    }
                })), t
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/problems_data_source": function (e, t, n) {
        var r = Em.Object.create({
            recentProblems: t("models/recent_problems"),
            topLabelOption: {
                label: I18n.t("txt.tickets.recently_updated.problems.label")
            },
            bottomLabelOption: {
                label: I18n.t("txt.tickets.recent.problems.search")
            },
            fetchData: function (e) {
                this.recentProblems.refresh(), this.set("callback", e)
            },
            refreshData: function () {
                if (!this.get("recentProblems.isFetched")) return;
                var e = this.recentProblems.map(function (e, t, n) {
                    var r = "#%@ %@".fmt(e.id, e.subject);
                    return {
                        value: e.id,
                        label: r
                    }
                }),
                    t = [];
                t.addObject(this.topLabelOption), t.addObjects(e), t.addObject(this.bottomLabelOption), this.get("callback")(t)
            }.observes("recentProblems.isFetched")
        });
        n.exports = r
    }
}), this.require.define({
    "models/recent_tickets": function (e, t, n) {
        var r, i = Em.ResourceCollection.create({
                type: Em.Object,
                local: [],
                expireIn: 3600,
                url: "/api/v2/tickets/recent.json?include=users",
                parse: function (e) {
                    var t = [],
                        n = e.tickets,
                        r = e.users;
                    return _(n).forEach(function (e) {
                        var n = {
                            id: e.id,
                            title: e.subject,
                            status: e.status,
                            href: "#/tickets/" + e.id
                        }, i = r.findProperty("id", e.requester_id);
                        i && (n.requesterName = i.name), t.push(n)
                    }), this.set("local", t), t
                },
                push: function (e) {
                    var t = e.get("subject");
                    if (t === "") return !0;
                    var n = {
                        id: e.get("id"),
                        title: t,
                        status: e.get("statusName"),
                        href: e.get("href"),
                        requesterName: e.get("requester.name")
                    }, r = this.get("local");
                    r = _(r).reject(function (t) {
                        return t.id === e.get("id")
                    }), r.unshift(n), r.length > 5 && r.pop(), this.set("local", r), this.fetch()
                }
            });
        n.exports = i
    }
}), this.require.define({
    "lib/recent_tickets_consumer": function (e, t, n) {
        var r = t("models/recent_tickets"),
            i = Em.Mixin.create({
                recentTickets: r
            });
        n.exports = i
    }
}), this.require.define({
    "lib/routing/deferred_route": function (e, t, n) {
        function r(e) {
            this.invoke = function (t) {
                var n = $.Deferred();
                return e.call(undefined, t, n).done(function (e) {
                    n.resolve(e)
                }), n.promise()
            }
        }
        n.exports = r
    }
}), this.require.define({
    "lib/routing/redirect": function (e, t, n) {
        function r(e, n) {
            Zendesk.Routes.get(e, function () {
                var e = t("lib/routing/deferred_route");
                if ($.isFunction(n)) {
                    var r = n.call(undefined, this.params);
                    this.replaceLocation(r)
                } else if (n instanceof e) {
                    var i = this;
                    n.invoke(this.params).done(function (e) {
                        i.replaceLocation(e)
                    })
                } else this.replaceLocation(n)
            })
        }
        n.exports = r
    }
}), this.require.define({
    "models/filter/pagination": function (e, t, n) {
        var r = Em.Mixin.create({
            pageOptions: Em.computed.oneWay("content.pageOptions"),
            page: Em.computed.oneWay("content.page"),
            perPage: Em.computed.oneWay("content.perPage"),
            notFirstPage: Em.computed.bool("content.notFirstPage"),
            morePages: Em.computed.bool("content.morePages"),
            hasMultiplePages: Em.computed.bool("content.hasMultiplePages"),
            isEmpty: Em.computed.not("content.length"),
            nextPage: function () {
                this.get("content").nextPage()
            },
            previousPage: function () {
                this.get("content").previousPage()
            },
            goToFirstPage: function () {
                this.get("content").goToFirstPage()
            },
            goToLastPage: function () {
                this.get("content").goToLastPage()
            },
            goToPage: function (e) {
                this.get("content").goToPage(e)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_actions_mixin": function (e, t, n) {
        var r = t("lib/growl"),
            i = t("lib/lotus/global_events"),
            s = Em.Mixin.create({
                activate: function () {
                    var e = this.get("resource");
                    return e.set("active", !0), e.save().done(function () {
                        var e = I18n.t("txt.user_filters.activation_successful", {
                            view: this.get("title")
                        });
                        i.trigger("@user_filter:activated", this), r.notice(e)
                    }.bind(this))
                },
                deactivate: function () {
                    var e;
                    return this.restore(), e = this.get("resource"), e.set("active", !1), e.save().done(function () {
                        var e = I18n.t("txt.user_filters.deactivation_successful", {
                            view: this.get("title")
                        });
                        i.trigger("@user_filter:deactivated", this), r.notice(e)
                    }.bind(this))
                },
                clone: function () {
                    var e = this.constructor.create();
                    return e.set("resource", this.get("resource").clone()), e.set("resource.filter", e), e
                },
                edit: function () {
                    var e = this.get("_stashedResource"),
                        t;
                    return e || (t = this.get("resource"), this.setProperties({
                        _stashedResource: t,
                        resource: t.clone()
                    })), this
                },
                restore: function () {
                    var e = this.get("resource"),
                        t = this.get("_stashedResource");
                    return t && e && (this.setProperties({
                        _stashedResource: null,
                        resource: t
                    }), e.destroy()), this
                },
                delete_: function () {
                    return this.restore(), this.get("resource").destroyResource().done(function () {
                        i.trigger("@user_filter:deleted", this), r.notice(I18n.t("txt.user_filters.deletion_successful", {
                            view: this.get("title")
                        }))
                    }.bind(this)).fail(function () {
                        r.error(I18n.t("txt.user_filters.deletion_failed", {
                            view: this.get("title")
                        }))
                    })
                }
            });
        n.exports = s
    }
}), this.require.define({
    "models/filter/filter_sort_manager": function (e, t, n) {
        function s(e) {
            return ["created", "updated", "assigned", "solved", "updated_requester", "updated_assignee"].indexOf(e) > -1
        }
        var r = "desc",
            i = "asc",
            o = Em.Object.extend({
                column: null,
                _descending: !0,
                order: function () {
                    return this.get("_descending") ? r : i
                }.property("_descending").cacheable(),
                setColumn: function (e) {
                    this.get("column") === e ? this.toggleOrder() : (this.set("column", e), this.set("_descending", s(e)))
                },
                toggleOrder: function () {
                    this.set("_descending", !this.get("_descending"))
                }
            });
        n.exports = o
    }
}), this.require.define({
    "models/filter/filter_sorting_mixin": function (e, t, n) {
        var r = t("models/filter/filter_sort_manager"),
            i = Em.Mixin.create({
                columnClass: null,
                isSortingEnabled: !0,
                _sortOrder: null,
                sortOrder: function (e, t) {
                    return arguments.length === 2 ? (this.set("_sortOrder", t), t) : this.get("sortManager.order") || this.get("_sortOrder")
                }.property("_sortOrder", "sortManager.order").cacheable(),
                _sortBy: null,
                sortBy: function (e, t) {
                    return arguments.length === 2 ? (this.set("_sortBy", t), t) : this.get("sortManager.column") || this.get("_sortBy")
                }.property("_sortBy", "sortManager.column").cacheable(),
                toggleSort: function (e) {
                    this.get("sortManager") || this.set("sortManager", r.create()), this.get("sortManager").setColumn(e), this.set("groupBy", null), this.set("groupOrder", null), Em.run.sync(), this.refreshContent()
                },
                sort: function () {
                    return this.get("sortManager") ? {
                        column: this.get("sortBy") ? this.get("sortBy") : null,
                        desc: this.get("sortOrder") ? this.get("sortOrder") === "desc" : null
                    } : {}
                }.property("sortOrder", "sortBy").cacheable(),
                groupingColumn: function () {
                    var e = this.get("columnClass"),
                        t = this.get("sortBy") && this.get("sortManager") ? null : this.get("groupBy");
                    return t && e.byId(t) ? e.byId(t) : null
                }.property("groupBy", "sortBy", "sortManager").cacheable(),
                groupBy: null,
                groupOrder: null
            });
        n.exports = i
    }
}), this.require.define({
    "mixins/factory_with_identity_map": function (
        e, t, n) {
        var r = Em.get,
            i = function (e) {
                return this.getIdentityMap().get(String(e))
            }, s = function (e) {
                var t;
                if (e == null) return;
                return typeof e == "number" || typeof e == "string" ? t = e : t = r(e, "id"), this.getIdentityMap().remove(String(t))
            }, o = function (e, t) {
                e != null && this.getIdentityMap().set(String(e), t)
            }, u = function (e) {
                var t = e.id,
                    n = this.getIdentityMap(),
                    i;
                return t != null && n.has(t) ? n.get(t) : (this.factoryName === "create" ? i = this._super.apply(this, arguments) : i = this.create.apply(this, arguments), r(i, "id") != null && o.call(this, r(i, "id"), i), i)
            }, a = function (e) {
                var t = {
                    factoryName: e || "create",
                    identityMap: null,
                    byId: i,
                    removeFromMap: s,
                    getIdentityMap: function () {
                        return this.identityMap || (this.identityMap = new Em.Map)
                    }
                };
                return t[e] = u, Em.Mixin.create(t)
            };
        n.exports = a
    }
}), this.require.define({
    "models/generic_filter": function (e, t, n) {
        function o(e) {
            return JSON.stringify(e.toJSON())
        }
        var r = t("models/filter/filter_actions_mixin"),
            i = t("models/filter/filter_sorting_mixin"),
            s = t("models/filter/pagination"),
            u = Em.Object.extend(s, r, i, {
                id: null,
                content: null,
                columnClass: null,
                columns: null,
                title: null,
                _sortBy: null,
                _sortOrder: null,
                groupBy: null,
                groupOrder: null,
                restriction: null,
                slaId: null,
                isSortingEnabled: !0,
                isEmpty: Em.computed.equal("content.length", 0),
                isRefreshable: Em.computed.bool("_stashedResource"),
                hasNoContent: Em.computed.equal("content.total", 0),
                isDirty: function () {
                    var e = this.get("_stashedResource"),
                        t = this.get("resource");
                    return e ? o(e) !== o(t) : t.get("isNew")
                }.property().volatile(),
                parseContent: function (e) {
                    return e
                },
                refreshContent: function () {
                    return this.get("content").refresh()
                },
                expireContent: function () {
                    this.get("content").expireNow()
                },
                fetchContent: function () {
                    return this.get("content").fetch()
                },
                destroy: function () {
                    var e = this.get("content");
                    return e && e.destroy && e.destroy(), this._super()
                }
            }).reopenClass({
                toString: function () {
                    return "GenericFilter"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "views/filters/renderers/value_renderers": function (e, t, n) {
        var r = t("lib/utils").htmlEscape,
            i = t("models/ticket/types"),
            s = "/images/types/user_sm.png",
            o = t("lib/views/timestamp_view"),
            u = function (e, t, n) {
                var r = e ? new Date(e) : null;
                if (r)
                    if (t) {
                        var i = r.getWeekYear();
                        i !== "" ? r = I18n.t("txt.filters.columns.date_as_week_with_year", {
                            year: i,
                            number: r.getWeek()
                        }) : r = I18n.t("txt.filters.columns.date_as_week", {
                            number: r.getWeek()
                        })
                    } else {
                        var s = n === "due_date" || n === "date" ? !1 : !0;
                        r = o.renderDateTime(r, {
                            relative: s
                        })
                    }
                return r
            }, a = {
                statusRenderer: function (e) {
                    if (e == null) return "";
                    var t = String(e).toLowerCase(),
                        n = I18n.t("txt.ticket.status.mnemonic_" + t);
                    return '<span class="pop ticket_status_label compact %@">%@</span>'.fmt(t, n)
                },
                statusRendererForGroupingHeading: function (e) {
                    return e ? I18n.t("type.status." + String(e).toLowerCase()) : "-"
                },
                priorityRenderer: function (e) {
                    return e ? I18n.t("type.priority." + e) : "-"
                },
                typeRenderer: function (e) {
                    return e ? I18n.t("type.ticket." + e) : "-"
                },
                subjectRenderer: function (e) {
                    var t = e != null ? r(e) : "-";
                    return '<a href="#/tickets/' + Em.get(this, "id") + '" class="pop" tabindex="-1">' + t + "</a>"
                },
                dateRenderer: function (e, t) {
                    return e != null ? u(e, t) : "-"
                },
                dueDateRenderer: function (e, t) {
                    return e != null ? u(e, t, "due_date") : "-"
                },
                ticketDateRenderer: function (e, t) {
                    return e != null ? u(e, t, this.get("type")) : "-"
                },
                dayRenderer: function (e) {
                    return e ? o.renderDisplayDate(new Date(e), !1, !0) : "-"
                },
                longDateRenderer: function (e) {
                    return e ? (new Date(e)).to_s("time.formats.long") : "-"
                },
                idRenderer: function (e) {
                    return "#" + e
                },
                objectNameRenderer: function (e) {
                    return e == null ? "-" : r(Em.get(e, "name"))
                },
                checkboxRenderer: function (e) {
                    if (e == null) return "-";
                    var t = e === "1" || e === !0 ? "checked_label" : "unchecked_label";
                    return I18n.t("ticket_fields.field_checkbox." + t)
                },
                tagsRenderer: function (e) {
                    return e && e.length > 0 ? "<div><span>" + e.join("</span><span>") + "</span></div>" : "-"
                },
                organizationRenderer: function (e) {
                    return Array.isArray(e) && e.length > 0 ? (e = e.map(r), "<span>" + e.join("</span>, <span>") + "</span>") : e == null || e === "" ? "-" : r(e)
                },
                emptyRenderer: function () {
                    return ""
                },
                defaultRenderer: function (e) {
                    return e == null || e === "" ? "-" : r(e)
                },
                photoRenderer: function (e) {
                    return '<img class="profile-photo" src="' + (e || s) + '">'
                },
                usernameRenderer: function (e) {
                    var t = e != null ? r(e) : "-";
                    return '<a href="#/users/' + Em.get(this, "id") + '" tabindex="-1">' + t + "</a>"
                }
            };
        n.exports = a
    }
}), this.require.define({
    "views/filters/renderers/column_renderers": function (e, t, n) {
        var r = t("views/filters/renderers/value_renderers"),
            i = r,
            s = Em.Object.create({
                status: i.statusRenderer,
                priority: i.priorityRenderer,
                type: i.typeRenderer,
                subject: i.subjectRenderer,
                description: i.subjectRenderer,
                created: i.dateRenderer,
                updated: i.dateRenderer,
                assigned: i.dateRenderer,
                solved: i.dateRenderer,
                updated_requester: i.dateRenderer,
                updated_assignee: i.dateRenderer,
                due_date: i.dueDateRenderer,
                created_at: i.dateRenderer,
                updated_at: i.dateRenderer,
                assigned_at: i.dateRenderer,
                solved_at: i.dateRenderer,
                requester_updated_at: i.dateRenderer,
                assignee_updated_at: i.dateRenderer,
                due_date_at: i.dueDateRenderer,
                satisfaction_score: i.defaultRenderer,
                requester: i.objectNameRenderer,
                submitter: i.objectNameRenderer,
                assignee: i.objectNameRenderer,
                organization: i.objectNameRenderer,
                group: i.objectNameRenderer,
                ticket_id: i.idRenderer,
                nice_id: i.idRenderer,
                id: i.idRenderer,
                tagger: i.defaultRenderer,
                textext: i.defaultRenderer,
                textarea: i.defaultRenderer,
                integer: i.defaultRenderer,
                decimal: i.defaultRenderer,
                checkbox: i.checkboxRenderer,
                date: i.ticketDateRenderer,
                regexp: i.defaultRenderer,
                unknownProperty: function () {
                    return i.defaultRenderer
                }
            }),
            o = Em.Object.create({
                status: i.statusRendererForGroupingHeading,
                unknownProperty: function (e) {
                    return s.get(e)
                }
            }),
            u = Em.Object.create({
                status: i.emptyRenderer
            }),
            a = Em.Object.create(),
            f = Em.Object.extend({
                rendererMap: null,
                getRendererFor: function (e) {
                    return this.get("rendererMap." + e)
                }
            }),
            l = Em.Object.extend({
                rendererMap: null,
                getRendererFor: function (e, t) {
                    var n = this.get("rendererMap." + e);
                    return n || function () {
                        return Em.get(t, "title")
                    }
                }
            }),
            c = {
                valueRenderers: f.create({
                    rendererMap: s
                }),
                groupingValueRenderers: f.create({
                    rendererMap: o
                }),
                headerRenderers: l.create({
                    rendererMap: u
                }),
                groupingHeaderRenderers: l.create({
                    rendererMap: a
                })
            }, h = Em.Object.create({
                id: i.idRenderer,
                organization_id: i.organizationRenderer,
                current_tags: i.tagsRenderer,
                created_at: i.dateRenderer,
                created: i.dateRenderer,
                checkbox: i.checkboxRenderer,
                Checkbox: i.checkboxRenderer,
                date: i.ticketDateRenderer,
                photo: i.photoRenderer,
                last_login: i.longDateRenderer,
                name: i.usernameRenderer,
                unknownProperty: function () {
                    return i.defaultRenderer
                }
            }),
            p = Em.Object.create({
                date: i.dayRenderer,
                last_login: i.dayRenderer,
                created: i.dayRenderer,
                created_at: i.dayRenderer,
                unknownProperty: function (e) {
                    return h.get(e)
                }
            }),
            d = Em.Object.create({
                photo: i.emptyRenderer
            }),
            v = Em.Object.create(),
            m = {
                valueRenderers: f.create({
                    rendererMap: h
                }),
                groupingValueRenderers: f.create({
                    rendererMap: p
                }),
                headerRenderers: l.create({
                    rendererMap: d
                }),
                groupingHeaderRenderers: l.create({
                    rendererMap: v
                })
            };
        n.exports = Object.seal({
            ticketColumnRenderers: c,
            userColumnRenderers: m
        })
    }
}), this.require.define({
    "models/column": function (e, t, n) {
        var r = t("mixins/factory_with_identity_map"),
            i = new Em.Set(["status", "photo"]),
            s = Em.Object.extend({
                id: null,
                columnRenderers: t("views/filters/renderers/column_renderers").ticketColumnRenderers,
                sortable: function () {
                    return !i.contains(this.get("id"))
                }.property("id").cacheable(),
                type: null,
                title: "",
                renderValue: null,
                renderGroupingValue: null,
                renderHeader: null,
                renderGroupingHeader: null,
                init: function () {
                    this.setupRenderers()
                },
                typeDidChange: function () {
                    this.get("type") && this.setupRenderers()
                }.observes("type"),
                setupRenderers: function () {
                    var e = this.get("type");
                    if (e == null || e === "system") e = this.get("id");
                    var t = this.get("columnRenderers");
                    this.renderValue = t.valueRenderers.getRendererFor(e), this.renderGroupingValue = t.groupingValueRenderers.getRendererFor(e), this.renderHeader = t.headerRenderers.getRendererFor(e, this), this.renderGroupingHeader = t.groupingHeaderRenderers.getRendererFor(e, this)
                },
                destroy: function () {
                    this.constructor.removeFromMap(this), this._super()
                }
            }).reopenClass(r("createColumn"), {
                toString: function () {
                    return "Column"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "models/ticket_column": function (e, t, n) {
        var r = t("models/column"),
            i = r.extend({
                columnRenderers: t("views/filters/renderers/column_renderers").ticketColumnRenderers
            }),
            s = {
                status: I18n.t("ticket_fields.status.label"),
                priority: I18n.t("ticket_fields.priority.label"),
                type: I18n.t("ticket_fields.type.label"),
                subject: I18n.t("ticket_fields.subject.label"),
                description: I18n.t("ticket_fields.description.label"),
                created: I18n.t("ticket_fields.created.label"),
                updated: I18n.t("ticket_fields.updated.label"),
                assigned: I18n.t("ticket_fields.assigned.label"),
                solved: I18n.t("ticket_fields.solved.label"),
                updated_requester: I18n.t("ticket_fields.updated_requester.label"),
                updated_assignee: I18n.t("ticket_fields.updated_assignee.label"),
                due_date: I18n.t("ticket_fields.due_date.label"),
                created_at: I18n.t("ticket_fields.created.label"),
                updated_at: I18n.t("ticket_fields.updated.label"),
                assigned_at: I18n.t("ticket_fields.assigned.label"),
                solved_at: I18n.t("ticket_fields.solved.label"),
                requester_updated_at: I18n.t("ticket_fields.updated_requester.label"),
                assignee_updated_at: I18n.t("ticket_fields.updated_assignee.label"),
                due_date_at: I18n.t("ticket_fields.due_date.label"),
                updated_by_type: I18n.t("ticket_fields.updated_by_type.label"),
                locale: I18n.t("ticket_fields.locale_id.label"),
                satisfaction_score: I18n.t("ticket_fields.satisfaction_score.label"),
                requester: I18n.t("ticket_fields.requester.label"),
                submitter: I18n.t("ticket_fields.submitter.label"),
                assignee: I18n.t("ticket_fields.assignee.label"),
                organization: I18n.t("ticket_fields.organization.label"),
                group: I18n.t("ticket_fields.group.label"),
                ticket_id: I18n.t("ticket_fields.id.label"),
                nice_id: I18n.t("ticket_fields.id.label"),
                id: I18n.t("ticket_fields.id.label")
            };
        _(s).forEach(function (e, t) {
            i.createColumn({
                id: t,
                title: e
            })
        }), n.exports = i
    }
}), this.require.define({
    "mixins/paginated_collection": function (e, t, n) {
        var r = 10,
            i = Em.Mixin.create({
                source: Em.required(),
                page: 1,
                perPage: 30,
                total: 0,
                firstPage: Em.computed.equal("page", 1),
                notFirstPage: Em.computed.not("firstPage"),
                morePages: function () {
                    return this.get("page") < this.get("numPages")
                }.property("page", "numPages").cacheable(),
                numPages: function (e, t) {
                    return typeof t != "undefined" ? t : Math.ceil(this.get("total") / this.get("perPage"))
                }.property("total").cacheable(),
                pageOptions: function () {
                    var e = Math.floor(r / 2),
                        t = r - e - 1,
                        n, i, s = this.get("page"),
                        o = this.get("numPages"),
                        u = [];
                    s <= e ? n = 1 : o - s < t ? n = o - r + 1 : n = s - e, n < 1 && (n = 1), i = n + r - 1, i > o && (i = o);
                    for (var a = n, f = i; a <= f; a++) u.push(a);
                    return u
                }.property("page", "numPages").cacheable(),
                hasMultiplePages: function () {
                    return this.get("numPages") > 1
                }.property("numPages").cacheable(),
                nextPage: function () {
                    this.get("morePages") && this.set("page", this.get("page") + 1)
                },
                previousPage: function () {
                    this.get("page") > 1 && this.set("page", this.get("page") - 1)
                },
                goToFirstPage: function () {
                    this.goToPage(1)
                },
                goToLastPage: function () {
                    this.goToPage(this.get("numPages"))
                },
                goToPage: function (e) {
                    e > 0 && e <= this.get("numPages") && this.set("page", e)
                },
                pageChanged: function () {
                    this.refresh()
                }.observes("page")
            });
        n.exports = i
    }
}), this.require.define({
    "models/paginated_collection_for_filter": function (e, t, n) {
        var r = Em.ResourceCollection.extend(t("mixins/paginated_collection"), {
            _fetch: function (e) {
                return this.get("source").fetchContent()
            },
            descending: Em.computed.equal("source.sortOrder", "desc"),
            sortByBinding: Em.Binding.oneWay("source.sortBy"),
            parse: function (e) {
                var t = this.get("source").parseContent(e);
                return this.set("total", e.count), t
            }
        }).reopenClass({
            toString: function () {
                return "PaginatedTicketCollection"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/ticket_collision_properties_mixin": function (e, t, n) {
        var r = Em.Mixin.create({
            init: function () {
                this.set("otherUpdaters", []), this._super.apply(this, arguments)
            },
            isViewedByOthers: function () {
                var e = this.get("otherViewers");
                return e != null && e.length && e.length > 0
            }.property("otherViewers").cacheable(),
            otherViewersMessage: function () {
                var e = this.get("otherViewers");
                return e == null || e.length === 0 ? null : e.length === 1 ? I18n.t("txt.ticket.collision.other_viewers.one", {
                    person: e[0]
                }) : e.length === 2 ? I18n.t("txt.ticket.collision.other_viewers.two", {
                    person1: e[0],
                    person2: e[1]
                }) : I18n.t("txt.ticket.collision.other_viewers.many", {
                    count: e.length
                })
            }.property("otherViewers").cacheable(),
            hasMoreThanTwoViewers: function () {
                var e = this.get("otherViewers");
                return e != null && e.length && e.length > 2
            }.property("otherViewers").cacheable(),
            moreThanTwoViewersDetailMessage: function () {
                var e = this.get("otherViewers");
                return e != null ? e.join(", ") : ""
            }.property("otherViewers").cacheable(),
            wasUpdatedByOthers: function () {
                return !_.isEmpty(this.get("otherUpdaters"))
            }.property("otherUpdaters.length").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "models/audits/attachment_parser": function (e, t, n) {
        var r = {
            parse: function (e) {
                var t = [],
                    n = [];
                return _.each(e, function (e) {
                    var i = {};
                    i.contentType = e.content_type, i.fileName = e.file_name, i.displayName = r.nameShortener(e.file_name), i.contentUrl = e.content_url, _.isEmpty(i) || (e.content_type.indexOf("image/") > -1 ? (e.thumbnails && e.thumbnails[0] && (i.thumbnailContentUrl = e.thumbnails[0].content_url), t.push(i)) : n.push(i))
                }), {
                    imageAttachments: t,
                    nonImageAttachments: n
                }
            },
            nameShortener: function (e) {
                var t = e,
                    n = e.split("."),
                    r = n.length === 1 ? "" : n.pop(),
                    i = n.join(".");
                return i.length > 20 && (t = i.slice(0, 20) + "..." + r), t
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/event_via_parser": function (e, t, n) {
        var r = {
            parse: function (e) {
                var t = e && e.source || {}, n = t.rel,
                    r;
                switch (n) {
                case "trigger":
                case "macro":
                case "automation":
                    if (!t.from) return "";
                    return r = "event.via_rule_" + n, I18n.t(r, {
                        rule_title: t.from.title
                    });
                case "problem":
                case "merge":
                case "follow_up":
                    if (!t.from) return "";
                    return r = "event.via_ticket_" + n, I18n.t(r, {
                        ticket_id: t.from.id,
                        ticket_title: t.from.title
                    });
                default:
                    return ""
                }
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/via_parser": function (e, t, n) {
        var r = {
            parse: function (e) {
                var n = e && e.channel,
                    r = e && e.source || {}, i = "";
                switch (n) {
                case "api":
                    return I18n.t("txt.via_types.by_via_type", {
                        via_type: I18n.t("txt.via_types.web_service")
                    });
                case "email":
                    return r.from && Em.isArray(r.from.original_recipients) && (i = I18n.t("txt.via_types.by_email_to", {
                        user: r.from.original_recipients.join(" ")
                    })), i;
                case "forum":
                    return I18n.t("txt.via_types.by_via_type", {
                        via_type: I18n.t("txt.via_types.topic")
                    });
                default:
                    return t("models/audits/event_via_parser").parse(e)
                }
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/voice_comment_parser": function (e, t, n) {
        var r = {
            timeZone: function () {
                return Ember.get("Zd.currentUser.timeZone")
            },
            formatUrl: function (e) {
                return e.match(/\.mp3$|\.wav$/) ? e : e + ".mp3"
            },
            parse: function (e, t) {
                var n = t;
                n.id = t.id, n.callDuration = t.data.call_duration, n.callID = t.data.call_id, n.from = t.data.from, n.formattedFrom = t.formatted_from, n.formattedTo = t.formatted_to, n.recordingDuration = t.data.recording_duration, t.data.recording_url && (n.recordingURL = this.formatUrl(t.data.recording_url)), n.to = t.data.to, n.transcriptionStatus = t.data.transcription_status, n.transcriptionText = t.data.transcription_text, n.transcriptionVisible = t.transcription_visible, n.startedAt = t.data.started_at, n.location = t.data.location, n.locationLabel = I18n.t("event.voice.details.location");
                if (t.data.answered_by_id) {
                    var r = e.users.findProperty("id", parseInt(t.data.answered_by_id, 10));
                    r && (n.agentName = r.name)
                }
                n = this.setUserData(n), n.lengthOfPhoneCall = I18n.timeInterval(n.recordingDuration), n.lengthOfPhoneCallLabel = I18n.t("event.voice.details.length");
                var i = n.startedAt || n.created_at;
                if (i) {
                    var s = this.timeZone().utcToLocal(i),
                        o = [I18n.t("date.formats.long"), I18n.t("time.formats.short_time_with_seconds")].join(" ");
                    n.formattedStartedAt = s.strftime(o)
                }
                n.formattedStartedAtLabel = I18n.t("event.voice.details.time");
                var u = "completed";
                return n.transcriptionStatus === u ? n.transcription = t.data.transcription_text : n.transcription = I18n.t("event.voice.transcription.not_available"), n.transcriptionLabel = I18n.t("event.voice.transcription.header"), n.headerLabel = I18n.t("event.voice.details.header"), typeof t.html_body == "string" && (n.value = t.html_body.replace('a target="_blank" href="/tickets', 'a href="#/tickets').split("<br />")[0]), n
            },
            setUserData: function (e) {
                var t = e;
                return e.callToLabel = I18n.t("event.voice.details.to"), e.callFromLabel = I18n.t("event.voice.details.from"), e.callFrom = t.formatted_from || t.data.from, e.callTo = t.formatted_to || t.data.to, t.data.outbound ? e.agentLabel = I18n.t("event.voice.details.calledBy") : e.agentLabel = I18n.t("event.voice.details.answeredBy"), e
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/screencast_parser": function (e, t, n) {
        var r = t("models/screencast"),
            i = {
                parse: function (e, t) {
                    return typeof e.system == "undefined" || typeof e.system.screencasts == "undefined" ? [] : _.map(e.system.screencasts, function (e) {
                        return e.comment_id = t, r.create(e), e
                    })
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/audits/field_name_parser": function (e, t, n) {
        var r = {
            parse: function (e) {
                var t;
                if (e)
                    if (e == "priority" || e == "subject" || e == "status" || e == "type" || e == "due_at") {
                        e == "due_at" && (e = "due_date");
                        var n = "ticket_fields.%@.label".fmt(e);
                        t = I18n.t(n)
                    } else {
                        e.match(/^\d+$/) && (e = "custom_field_" + e);
                        var r = Zendesk.TicketFields.byAttributeName(e);
                        r ? t = r.get("humanizedName") : t = I18n.t("event.change.no_such_field", {
                            field: e
                        })
                    }
                return t
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/label_parser": function (e, t, n) {
        var r = {
            parse: function (e) {
                switch (e.type) {
                case "SmsEvent":
                    return I18n.t("event.sms.label");
                case "Error":
                    return I18n.t("event.error.label");
                case "TicketSharingEvent":
                case "TicketUnShareEvent":
                    return e.action == "shared" ? I18n.t("event.ticket_sharing.label") : I18n.t("event.ticket_unshare.label");
                case "External":
                    return I18n.t("event.external.label");
                case "Notification":
                    return I18n.t("event.notification.label");
                case "Cc":
                    return I18n.t("event.cc.label");
                case "Create":
                case "Change":
                    return t("models/audits/field_name_parser").parse(e.field_name);
                case "Push":
                    return e.value_reference;
                case "MacroReference":
                    return I18n.t("event.macro_reference.label");
                case "CommentPrivacyChange":
                    return I18n.t("event.comment_privacy_change.label");
                case "FacebookEvent":
                    return I18n.t("event.facebook.label");
                case "Comment":
                case "VoiceComment":
                case "FacebookComment":
                    return null;
                case "Tweet":
                    return e.direct_message ? I18n.t("txt.ticket.actions.twitter.direct_message") : I18n.t("txt.ticket.actions.twitter.tweet_mention");
                case "TwitterAction":
                    return I18n.t("event.twitter_action.label");
                default:
                    return (e.type || "") + I18n.t("event.event_types.not_implemented")
                }
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/ticket_sharing_event_parser": function (e, t, n) {
        function r(e, t) {
            var n = e.agreement_id && t && t.findProperty("id", e.agreement_id);
            return n ? n.name : ""
        }
        n.exports = {
            parseValue: r
        }
    }
}), this.require.define({
    "models/audits/field_value_parser": function (e, t, n) {
        var r = {
            parse: function (e, n, r, i) {
                if (n == null) return "";
                var s;
                switch (e) {
                case "priority":
                    s = I18n.t("type.priority.%@".fmt(n));
                    break;
                case "type":
                    s = I18n.t("type.ticket.%@".fmt(n));
                    break;
                case "status":
                    s = I18n.t("type.status.%@".fmt(n));
                    break;
                case "subject":
                case "due_at":
                case "satisfaction_comment":
                    s = n;
                    break;
                case "assignee_id":
                case "requester_id":
                    var o = r.users.findProperty("id", parseInt(n, 10));
                    o && (s = o.name);
                    break;
                case "group_id":
                    var u = r.groups.findProperty("id", parseInt(n, 10));
                    u && (s = u.name);
                    break;
                case "organization_id":
                    var a = r.organizations.findProperty("id", parseInt(n, 10));
                    a && (s = a.name);
                    break;
                case "problem_id":
                    s = "#" + n;
                    break;
                case "satisfaction_score":
                    ["bad", "good"].contains(n) && i.findProperty("field_name", "satisfaction_comment") && (n = "%@_with_comment".fmt(n)), s = Zendesk.Ticket.SatisfactionTypes[n];
                    break;
                case "tags":
                    s = n.join(" ");
                    break;
                case "ticket_form_id":
                    var f = r.ticket_forms.findProperty("id", parseInt(n, 10));
                    f && (s = f.name);
                    break;
                case "locale_id":
                    var l = parseInt(n, 10),
                        c = t("models/locale").byId(l);
                    c && (s = c.get("name"));
                    break;
                case "current_collaborators":
                    s = n;
                    break;
                default:
                    if (!e || !e.match(/^\d+$/)) return null;
                    var h = Zendesk.TicketFields.byAttributeName("custom_field_%@".fmt(e));
                    if (h) {
                        s = h.humanizeValue(n);
                        if (s) return new Handlebars.SafeString(s)
                    } else s = n
                }
                return s
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/value_parser": function (e, t, n) {
        var r = t("models/audits/ticket_sharing_event_parser"),
            i = {
                _getComment: function (e, t) {
                    var n;
                    return _.all(e.audits, function (e) {
                        return n = e.events.findProperty("id", parseInt(t, 10)), !n
                    }), n
                },
                _getRecipient: function (e, t) {
                    var n = [];
                    return _.each(t, function (t) {
                        var r = e.users.findProperty("id", parseInt(t, 10));
                        r && n.push(r.name)
                    }), n.join(", ")
                },
                _getMacro: function (e) {
                    var t = e.macro_title || "";
                    return t
                },
                _getTwitterLink: function (e) {
                    return "<a href='http://twitter.com/%@'>%@</a>".fmt(e, e)
                },
                parse: function (e, n, s) {
                    var o = i._getRecipient(e, s.recipients || []);
                    switch (s.type) {
                    case "Notification":
                    case "Cc":
                        return o;
                    case "Tweet":
                        return I18n.t("event.tweet.tweet_back", {
                            recipient: o,
                            event_id: s.id
                        });
                    case "TicketSharingEvent":
                    case "TicketUnShareEvent":
                        return r.parseValue(s, e.sharing_agreements);
                    case "Create":
                    case "SmsEvent":
                    case "External":
                    case "Change":
                        var u;
                        return typeof s.value != "undefined" && (u = t("models/audits/field_value_parser").parse(s.field_name, s.value, e, n)), u;
                    case "Error":
                        return s.message;
                    case "Push":
                        return s.value;
                    case "MacroReference":
                        return '"' + i._getMacro(s) + '"';
                    case "FacebookEvent":
                        var a = "/facebook/communications/" + s.communication,
                            f = "<a href='http://facebook.com/" + s.page.graph_id + '\' tabindex="-1">' + s.page.name + "</a>";
                        return new Handlebars.SafeString(I18n.t("event.facebook_event.%@".fmt(s.ticket_via), {
                            pageLink: f,
                            communicationHref: a
                        }));
                    case "CommentPrivacyChange":
                        var l = i._getComment(e, s.comment_id),
                            c = l ? l.body : I18n.t("event.comment_privacy_change.text_not_available"),
                            h = s["public"] ? "public" : "private",
                            p = I18n.t("event.comment_privacy_change.%@".fmt(h));
                        return "%@ &rarr; %@".fmt(c, p);
                    case "TwitterAction":
                        var d = i._getComment(e, s.comment_id);
                        return new Handlebars.SafeString(I18n.t("event.twitter_action." + s.action, {
                            comment: d.body,
                            agent_link: i._getTwitterLink(s.sender_handle),
                            user_link: i._getTwitterLink(s.requester_handle)
                        }));
                    default:
                        return
                    }
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/audits/event_parser": function (e, t, n) {
        var r = function (e) {
            return e.type === "Notification" || e.type === "Cc"
        }, i = function (e) {
                return e.type === "Error" ? "icon-remove-sign" : "icon-ok-sign"
            }, s = {
                parse: function (e, n, s) {
                    var o = {};
                    return o.label = t("models/audits/label_parser").parse(s), o.value = t("models/audits/value_parser").parse(e, n, s), o.showLink = r(s), o.type = s.type, o.subject = s.subject, o.body = s.body, o.id = s.id, o.iconClass = i(s), s.type == "Change" && typeof s.previous_value != "undefined" && (o.previous_value = t("models/audits/field_value_parser").parse(s.field_name, s.previous_value, e, n)), s.type === "Create" && s.value === null ? null : (typeof s.via != "undefined" && (o.via = t("models/audits/event_via_parser").parse(s.via)), o)
                }
            };
        n.exports = Object.seal(s)
    }
}), this.require.define({
    "models/audits/author_parser": function (e, t, n) {
        var r = {
            assignableGroups: t("models/assignable_groups").instance(),
            parse: function (e, t) {
                var n = {}, r, i;
                Em.get(t, "events.0.type") === "Comment" && (i = t.events[0]), i && i.author_id ? (r = this.retrieveUserFromData(e, i.author_id), r || (r = this.retrieveUserFromData(e, t.author_id))) : r = this.retrieveUserFromData(e, t.author_id);
                if (r) {
                    n.name = r.name, n.id = r.id, r.photo && r.photo.content_url ? n.profileImageUrl = r.photo.content_url : n.profileImageUrl = (new Zendesk.Photo(null, r.email)).url();
                    var s = r.id;
                    s && s !== -1 && (n.href = "#/users/" + s), (r.role == "agent" || r.role == "admin") && Zd.currentUser.get("isAssignable") && this.assignableGroups.hasAgentId(r.id) && (n.assignToText = I18n.t("event.agent_assign_to")), this.addMetaInfo(r, n)
                }
                return n
            },
            addMetaInfo: function (e, t) {
                var n = [];
                (e.role == "agent" || e.role == "admin") && n.push("agent"), (e.shared || e.shared_agent) && n.push("shared"), e.shared && !e.shared_agent && n.push("end_user"), t.metaInfo = n.join(" ")
            },
            retrieveUserFromData: function (e, t) {
                return t === -1 ? Zd.systemUser : e.users.findProperty("id", parseInt(t, 10))
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audits/facebook_author_parser": function (e, t, n) {
        var r = t("models/audits/author_parser"),
            i = {
                parse: function (e, t) {
                    var n = e.users.findProperty("id", parseInt(t.author_id, 10)),
                        i = t.via.source.from;
                    return i.name != n.name && i.facebook_id != t.via.source.to.facebook_id ? {
                        name: i.name,
                        href: "http://facebook.com/" + i.facebook_id,
                        profileImageUrl: "http://graph.facebook.com/" + i.facebook_id + "/picture?type=square"
                    } : r.parse(e, t)
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/audits/comment_parser": function (e, t, n) {
        var r = {
            parse: function (e, n) {
                var r = "";
                typeof n.html_body == "string" && (r = n.html_body.replace(/a target="_blank" href="\/tickets/g, 'a href="#/tickets'));
                var i = {
                    id: n.id,
                    value: r,
                    created_at: e.created_at,
                    is_public: n["public"]
                };
                return n.via != null && (i.via = t("models/audits/event_via_parser").parse(n.via)), i.label = t("models/audits/label_parser").parse(n), i
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/audit_parser": function (e, t, n) {
        var r = t("lib/views/timestamp_view"),
            i = {
                parse: function (e, t) {
                    var n = [],
                        r = this;
                    return t = t || "audits", _.each(e[t], function (t) {
                        r.parseAudit(t, n, e)
                    }), n
                },
                parseAudit: function (e, n, i) {
                    var s = {}, o = this,
                        u = e.via && e.via.channel === "facebook",
                        a = u ? "facebook_author_parser" : "author_parser",
                        f = t("models/audits/" + a);
                    s.id = e.id, s.author = f.parse(i, e), s.system = e.metadata ? e.metadata.system : {}, s.via = t("models/audits/via_parser").parse(e.via), s.viaSource = e.via, s.hasRawEmail = typeof s.system.raw_email_identifier != "undefined", s.rawEmailLabel = I18n.t("ticket.audit.show_email"), s.createdAt = e.created_at && new Date(e.created_at), s.created_at = e.created_at && r.renderDateTime(s.createdAt, {
                        live: "true",
                        full: "true",
                        relative: "true"
                    }), typeof e.events != "undefined" ? _.each(e.events, function (t) {
                        o.parseEvent(t, s, e, i)
                    }) : this.parseEvent(e, s, e, i), n.push(s)
                },
                parseEvent: function (e, n, r, s) {
                    switch (e.type) {
                    case "Comment":
                        n.comment = t("models/audits/comment_parser").parse(r, e), n.metaInfo = i._metaInfo(r, e);
                        if (e.attachments) {
                            var o = t("models/audits/attachment_parser").parse(e.attachments);
                            n.comment.imageAttachments = o.imageAttachments, n.comment.nonImageAttachments = o.nonImageAttachments
                        }
                        r.metadata && (n.comment.screencasts = t("models/audits/screencast_parser").parse(r.metadata, e.id)), r.via && r.via.channel === "twitter" && i._setTwitterAudit(n);
                        break;
                    case "VoiceComment":
                        n.voiceComment = t("models/audits/voice_comment_parser").parse(s, e), n.metaInfo = i._metaInfo(r, e);
                        break;
                    case "FacebookComment":
                        n.facebookComment = t("models/audits/facebook_comment_parser").parse(s, e), n.metaInfo = i._metaInfo(r, e);
                        break;
                    default:
                        n.events = n.events || [];
                        var u = t("models/audits/event_parser").parse(s, r.events, e);
                        u && n.events.push(u)
                    }
                },
                _setTwitterAudit: function (e) {
                    var t = e.viaSource.source,
                        n = t.to,
                        r = Handlebars.Utils.escapeExpression,
                        i;
                    e.author.id == -1 && (e.author.name = t.from.name, e.systemUser = "system-user"), i = {
                        account_link: '<a href="%@" target="_blank">@%@</a>'.fmt(r(n.profile_url), r(n.username)),
                        rel_link: '<a data-action="tweet-link" data-comment-id="%@">%@</a>'.fmt(e.comment.id, I18n.t("txt.ticket.actions.twitter." + t.rel))
                    }, e.tweet = !0, e.attribution = I18n.t("txt.ticket.twitter_comments.attribution", i), e.follow_label = I18n.t("txt.ticket.twitter_comments.follow_label"), e.following_label = I18n.t("txt.ticket.twitter_comments.following_label"), e.unfollow_label = I18n.t("txt.ticket.twitter_comments.unfollow_label"), e.retweet_label = I18n.t("txt.ticket.twitter_comments.retweet_label"), e.retweeted_label = I18n.t("txt.ticket.twitter_comments.retweeted_label"), e.favorite_label = I18n.t("txt.ticket.twitter_comments.favorite_label"), e.favorited_label = I18n.t("txt.ticket.twitter_comments.favorited_label"), e.reply_label = I18n.t("txt.ticket.twitter_comments.reply_label")
                },
                _metaInfo: function (e, t) {
                    var n = [];
                    return typeof t["public"] != "undefined" && t["public"] && n.push("is-public"), typeof e.via != "undefined" && (e.via.channel == "voice" ? n.push("voice_" + e.via.source.rel) : n.push(e.via.channel)), n.join(" ")
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/feed_ticket": function (e, t, n) {
        var r = Em.Object.extend(Zendesk.TicketSharedProperties, t("models/ticket_collision_properties_mixin"), {
            comments: function () {
                return Em.ResourceCollection.create({
                    type: Object,
                    url: "/api/v2/tickets/%@/comments.json?include=users".fmt(this.get("id")),
                    parse: function (e) {
                        return t("models/audit_parser").parse(e, "comments").reverse()
                    }
                })
            }.property().cacheable()
        });
        r.reopenClass({
            parse: function (e) {
                var t = e.ticket;
                return t.subject = e.subject, t.status_id = Zendesk.Ticket.Statuses[t.status.toUpperCase()], t.requester = Zendesk.User.create({
                    id: e.requester_id
                }), t.created_at = new Date(e.created), _.each(t.last_comments, function (e) {
                    e.created_at = new Date(e.created_at), e.author = Zendesk.User.create({
                        id: e.author_id
                    })
                }), t
            }
        }), n.exports = r
    }
}), this.require.define({
    "models/url": function (e, t, n) {
        function r(e, t) {
            this.baseUrl = e, this.parameters = t
        }
        r.prototype = {
            toString: function () {
                return this.baseUrl + this.queryString()
            },
            queryString: function () {
                var e = _.map(this.parameters, function (e, t) {
                    return t + "=" + e
                });
                return e.length ? "?" + e.join("&") : ""
            }
        }, r.toString = function () {
            return "URL"
        }, n.exports = Object.seal(r)
    }
}), this.require.define({
    "models/paginated_ticket_collection_for_feed": function (e, t, n) {
        var r = Em.ResourceCollection.extend(t("mixins/paginated_collection"), {
            type: t("models/feed_ticket"),
            expireIn: 864e4,
            perPage: 15,
            url: function () {
                var e = "/api/v2/views/%@/feed.json".fmt(this.get("source.id")),
                    n = {
                        per_page: this.get("perPage"),
                        include: "users"
                    };
                this.get("page") > 1 && (n.page = this.get("page"));
                var r = t("models/url");
                return new r(e, n)
            }.property("source.id", "page").cacheable(),
            parse: function (e) {
                var t = this.get("type");
                this.set("total", e.count), _.each(e.users, function (e) {
                    Zendesk.User.create(Zendesk.User.parse(e))
                });
                var n = _.map(e.rows, function (e) {
                    return t.create(t.parse(e))
                });
                return n.length > 0 && this.get("page") === 1 && this.set("source.lastUpdatedAt", new Date(e.rows[0].updated)), n
            },
            refresh: function () {
                return this.get("source").resetUpdates(), this._super()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_record": function (e, t, n) {
        var r = Em.Object.extend({
            isSelectable: !0,
            enabled: !0,
            selected: function (e, t) {
                return arguments.length === 2 && (t = t && this.get("isSelectable")), t
            }.property().cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_ticket": function (e, t, n) {
        var r = Em.get,
            i = t("models/filter/filter_record"),
            s = function (e) {
                return e instanceof Date ? e : e ? new Date(e) : null
            }, o = i.extend(t("models/ticket_collision_properties_mixin"), {
                isSaving: !1,
                init: function () {
                    var e = r(this, "priority"),
                        t = r(this, "status"),
                        n = r(this, "type") || "ticket",
                        i = r(this, "last_comment");
                    return Em.setProperties(this, {
                        created_at: s(this.get("created_at")),
                        updated_at: s(this.get("updated_at")),
                        due_date_at: s(this.get("due_date_at")),
                        solved_at: s(this.get("solved_at")),
                        assigned_at: s(this.get("assigned_at")),
                        requester_updated_at: s(this.get("requester_updated_at")),
                        assignee_updated_at: s(this.get("assignee_updated_at")),
                        created: s(this.get("created")),
                        updated: s(this.get("updated")),
                        due_date: s(this.get("due_date")),
                        solved: s(this.get("solved")),
                        assigned: s(this.get("assigned")),
                        updated_requester: s(this.get("updated_requester")),
                        updated_assignee: s(this.get("updated_assignee")),
                        statusName: t,
                        statusDisplayName: t ? I18n.t("type.status." + t) : "",
                        priorityDisplayName: e ? I18n.t("type.priority." + e) : "-",
                        priorityClassName: e ? "priority_" + e : "priority_-",
                        type: n,
                        typeDisplayName: I18n.t("type.ticket." + n),
                        lastComment: i,
                        isSuspended: !! r(this, "isSuspended"),
                        isSelectable: t !== "closed"
                    }), i && (r(this, "description") === $.trim(r(i, "body")) ? Em.set(this, "lastComment", !1) : Em.setProperties(i, {
                        created_at: s(r(i, "created_at")),
                        value: r(i, "body")
                    })), this._super.apply(this, arguments)
                }
            });
        n.exports = o
    }
}), this.require.define({
    "models/filter/filter_output": function (e, t, n) {
        var r = Em.Object.extend({
            columnClass: Em.required(),
            columnDefs: null,
            columns: function () {
                var e = this.get("columnDefs") || [],
                    t = this.get("columnClass");
                return e.map(function (e) {
                    var n, r, i;
                    typeof e == "string" ? r = e : e && typeof e == "object" && (r = e.id, i = e.title, n = e.type);
                    var s = t.byId(r);
                    return s ? (i && s.set("title", i), n && s.set("type", n), s) : t.createColumn({
                        id: r,
                        title: i,
                        type: n
                    })
                })
            }.property("columnDef").cacheable(),
            toJSON: function () {
                return {
                    columns: this.get("columns").map(function (e) {
                        return e.id.replace(/^custom_fields:/, "custom_fields.")
                    })
                }
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_condition": function (e, t, n) {
        var r = Em.Object.extend({
            toJSON: function () {
                var e = this.getProperties("field", "operator", "value", "label"),
                    t = e.field;
                return t && (e.field = t.replace(/^custom_fields:/, "custom_fields.")), e
            }
        }).reopenClass({
            create: function (e) {
                var t = e.field;
                return t && (e.field = t.replace(/^custom_fields\./, "custom_fields:")), this._super.apply(this, arguments)
            },
            toString: function () {
                return "FilterCondition"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_conditions": function (e, t, n) {
        var r = t("models/filter/filter_condition"),
            i = Em.ArrayProxy.extend({
                init: function () {
                    var e = this.get("content");
                    this.replace(0, e.length, e), this._super()
                },
                replaceContent: function (e, t, n) {
                    var i = n && n.map(function (e) {
                        return e instanceof r ? e : r.create(e)
                    });
                    this.get("content").replace(e, t, i)
                },
                toJSON: function () {
                    return this.map(function (e) {
                        return e.toJSON()
                    })
                }
            }).reopenClass({
                toString: function () {
                    return "FilterConditions"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/filter/filter_condition_set": function (e, t, n) {
        var r = Object.freeze(["all", "any"]),
            i = t("models/filter/filter_conditions"),
            s = Em.Object.extend({
                init: function () {
                    this._super(), r.forEach(function (e) {
                        this.set(e, i.create({
                            content: this.get(e) || []
                        }))
                    }, this)
                },
                toJSON: function () {
                    var e = {};
                    return r.forEach(function (t) {
                        var n = this.get(t);
                        n && n.get("length") > 0 && (e[t] = n.toJSON())
                    }, this), e
                }
            });
        n.exports = s
    }
}), this.require.define({
    "models/filter/filter_resource_parser": function (e, t, n) {
        var r = t("models/filter/filter_condition_set"),
            i = function (e) {
                e.execution && e.execution.sort_by === "nice_id" && (e.execution.sort_by = "id")
            }, s = Em.Object.extend({
                normalizeFields: function (e) {
                    i(e)
                },
                payloadKey: "view",
                parseGroup: Em.K,
                parseSort: Em.K,
                parse: function (e) {
                    return e == null ? null : (e = e[this.get("payloadKey")] || e, this.normalizeFields(e), this.parseConditions(e), e.execution && (this.parseColumns(e.execution.columns), this.parseGroup(e.execution.group), this.parseSort(e.execution.sort)), e)
                },
                parseConditions: function (e) {
                    var t = e.conditions;
                    if (!t) return;
                    e.conditions = r.create(t)
                },
                parseColumns: function (e) {
                    if (!e) return;
                    var t = e.findProperty("id", "nice_id");
                    t && (t.id = "id");
                    var n = e.findProperty("id", "score");
                    n && e.removeObject(n);
                    var r = e.findProperty("id", "status");
                    r ? e.removeObject(r) : r = {
                        title: I18n.t("ticket_fields.status.label"),
                        id: "status"
                    }, e.unshift(r), e.forEach(function (e) {
                        e.id = String(e.id)
                    })
                }
            });
        n.exports = s
    }
}), this.require.define({
    "models/filter/filter_resource": function (e, t, n) {
        var r = t("models/filter/filter_condition_set"),
            i = t("models/filter/filter_output"),
            s = t("models/filter/filter_resource_parser").create(),
            o = Em.Resource.define({
                schema: {
                    id: String,
                    title: String,
                    updated_at: Date,
                    created_at: Date,
                    url: String,
                    restriction: Object,
                    conditions: Object,
                    execution: Object,
                    active: Boolean,
                    group: {
                        type: Object,
                        path: "execution.group"
                    },
                    sort: {
                        type: Object,
                        path: "execution.sort"
                    },
                    slaId: {
                        type: Object,
                        path: "sla_id"
                    }
                },
                parse: function (e) {
                    return this._super(s.parse(e))
                }
            }).reopen({
                resourceName: "TicketFilterResource",
                columnClass: t("models/ticket_column"),
                resourceURL: function () {
                    var e = this.get("id") || this.get("filter.id");
                    return this.get("url") || "/api/v2/views/" + e
                },
                output: function () {
                    if (!this.get("execution")) return null;
                    var e = this.get("execution.columns"),
                        t = this.get("execution.group");
                    t && this.get("columnClass").createColumn({
                        id: Em.get(t, "id"),
                        title: Em.get(t, "title")
                    });
                    if (e) return i.create({
                        columnClass: this.get("columnClass"),
                        columnDefs: e
                    })
                }.property("execution.columns", "execution.group").cacheable(),
                clone: function () {
                    var e = Em.copy(this.get("data"));
                    return e.conditions = r.create(e.conditions.toJSON()), e.execution = Em.copy(e.execution), e.execution.columns = e.execution.columns.concat(), this.constructor.create({
                        skipIdentityMap: !0,
                        columnClass: this.get("columnClass")
                    }, e)
                }
            }).reopenClass({
                createFromDefinition: function (e, t) {
                    t && (t = this.parse(t));
                    var n = this.create({
                        fetch: $.when.bind($),
                        expire: Em.K
                    }, t);
                    return e && n.reopen(e), n
                }
            });
        n.exports = o
    }
}), this.require.define({
    "models/filter/filter_ticket_parser": function (e, t, n) {
        var r = t("models/filter/filter_ticket"),
            i = function (e, t) {
                return function (n, r) {
                    var i = n[e],
                        s = r[t],
                        o = s.find(function (e) {
                            return e.id == i
                        });
                    return o
                }
            }, s = i("author_id", "users"),
            o = {
                requester: i("requester_id", "users"),
                submitter: i("submitter_id", "users"),
                assignee: i("assignee_id", "users"),
                organization: i("organization_id", "organizations"),
                group: i("group_id", "groups")
            }, u = Em.Object.extend({
                filter: null,
                getRows: function (e) {
                    return e.rows || []
                },
                getParseColumnIds: function () {
                    var e = this.get("filter.columns").map(function (e) {
                        return String(e.id)
                    }),
                        t = this.get("filter.groupBy");
                    return e.indexOf(t) === -1 && e.push(t), e
                },
                parse: function (e) {
                    var t = this.getParseColumnIds();
                    return this.getRows(e).map(function (n) {
                        return r.create(this.parseRow(n, e, t))
                    }, this)
                },
                parseRow: function (e, t, n) {
                    var r = {};
                    return n = n || this.getParseColumnIds(), this.parseLastComment(e, t), n.forEach(function (n) {
                        var i = o[n];
                        r[n] = i ? i(e, t) : e[n]
                    }, this), r.subject && e.ticket && delete e.ticket.subject, _.extend(r, e.ticket), r
                },
                parseLastComment: function (e, t) {
                    var n = e.ticket && e.ticket.last_comment;
                    n && n.author_id && (n.author = s(n, t))
                }
            });
        n.exports = u
    }
}), this.require.define({
    "models/filter/filter_preset_executor": function (e, t, n) {
        var r = Em.Object.extend({
            filter: null,
            execute: function (e) {
                var t = e.get("page"),
                    n = e.get("perPage"),
                    r = this.executeURL(t, n);
                return Em.Resource.ajax({
                    url: r,
                    type: "GET",
                    contentType: "application/json"
                })
            },
            urlParams: function (e, t) {
                var n = this.get("filter"),
                    r = n.get("sortBy"),
                    i = n.get("sortOrder"),
                    s = n.get("groupBy"),
                    o = n.get("groupOrder"),
                    u = {
                        per_page: t,
                        page: e
                    };
                return !s && r && i && (u.sort_by = r, u.sort_order = i, u.group_by = " "), u.sort_by === "ticket_id" && (u.sort_by = "id"), u
            },
            executeURL: function (e, t) {
                var n = this.urlParams(e, t);
                return "/api/v2/views/" + this.get("filter.id") + "/execute.json?" + $.param(n)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/filter_executor": function (e, t, n) {
        var r = Em.Object.extend({
            filter: null,
            url: "/api/v2/views/preview.json",
            execute: function (e) {
                var t = e.get("page"),
                    n = e.get("perPage"),
                    r = this.executeURL(t, n);
                return Em.Resource.ajax({
                    url: r,
                    type: "POST",
                    contentType: "application/json",
                    data: this.executeParams()
                })
            },
            executeURL: function (e, t) {
                var n = {
                    per_page: t,
                    page: e
                };
                return "%@?%@".fmt(this.get("url"), $.param(n))
            },
            executeParams: function () {
                var e = this.get("filter"),
                    t = e.get("filterId"),
                    n = e.get("conditions").toJSON(),
                    r = e.get("output").toJSON(),
                    i = e.get("sortBy"),
                    s = e.get("sortOrder"),
                    o = e.get("groupBy"),
                    u = e.get("groupOrder");
                o && u && (r.group_by = o, r.group_order = u), i && s && (r.sort_by = i, r.sort_order = s), r.columns = r.columns.without("photo"), n.output = r, t && (n.id = t);
                var a = {
                    view: n
                };
                return JSON.stringify(a)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter": function (e, t, n) {
        var r = t("models/generic_filter"),
            i = t("mixins/factory_with_identity_map"),
            s = t("models/filter/filter_executor"),
            o = t("models/filter/filter_preset_executor"),
            u = t("models/filter/filter_resource"),
            a = t("models/filter/filter_resource_parser").create(),
            f = t("models/filter/filter_ticket"),
            l = t("models/filter/filter_ticket_parser"),
            c = t("models/ticket_column"),
            h = t("lib/lotus/global_events"),
            p = r.extend({
                isDynamic: !1,
                resource: null,
                ticketParser: null,
                executor: null,
                content: Em.computed.alias("tickets"),
                active: Em.computed.oneWay("resource.active"),
                output: Em.computed.oneWay("resource.output"),
                conditions: Em.computed.oneWay("resource.conditions"),
                columns: Em.computed.oneWay("output.columns"),
                title: Em.computed.oneWay("resource.title"),
                columnClass: c,
                _sortBy: Em.computed.oneWay("resource.execution.sort.id"),
                _sortOrder: Em.computed.oneWay("resource.execution.sort.order"),
                groupBy: Em.computed.oneWay("resource.execution.group.id"),
                groupOrder: Em.computed.oneWay("resource.execution.group.order"),
                restriction: Em.computed.oneWay("resource.restriction"),
                isSuspendedFilter: !1,
                feedMode: !1,
                init: function () {
                    return h.on("@ticket:expire", this, "expirationHandler"), h.on("@ticket:bulk_expire", this, "expirationHandler"), h.on("@ticket:merge", this, "expirationHandler"), h.on("@user:merge", this, "expirationHandler"), this.get("ticketParser") ? this.set("ticketParser.filter", this) : this.set("ticketParser", l.create({
                        filter: this
                    })), this.get("executor") ? this.set("executor.filter", this) : this.set("executor", o.create({
                        filter: this
                    })), this._super()
                },
                ticketCount: Em.computed.oneWay("content.total"),
                tickets: function () {
                    return this.get("feedMode") ? t("models/paginated_ticket_collection_for_feed").extend({
                        remoteExpiryKey: function () {
                            return "views/" + this.get("source.id") + "/tickets"
                        }.property("source.id").cacheable()
                    }).create({
                        source: this
                    }) : t("models/paginated_collection_for_filter").extend({
                        remoteExpiryKey: function () {
                            return "views/" + this.get("source.id") + "/tickets"
                        }.property("source.id").cacheable()
                    }).create({
                        source: this,
                        type: f
                    })
                }.property("feedMode").cacheable(),
                expireContent: function () {
                    return this.get("content").expireNow && this.get("content").expireNow(), this._super()
                },
                parseContent: function (e) {
                    return this.get("ticketParser").parse(e)
                },
                fetchContent: function () {
                    return this.get("executor").execute(this.get("tickets")).done(function () {
                        Em.run.next(this, function () {
                            this.get("page") > 1 && this.get("content.length") === 0 && this.goToFirstPage()
                        })
                    }.bind(this)).fail(function () {
                        this.get("page") > 1 && this.goToFirstPage()
                    }.bind(this))
                },
                fetch: function () {
                    return this.get("resource").fetch()
                },
                expire: function () {
                    return this.get("resource").expire()
                },
                playNextUrl: function () {
                    return "/api/v2/views/" + this.get("id") + "/next.json?include=%@".fmt(Zd.Ticket.sideloads.join(","))
                },
                href: function () {
                    var e = this.get("id");
                    return e === "incoming" ? "#/dashboard" : "#/filters/" + (e || "")
                }.property("id").cacheable(),
                isOwnedBy: function (e) {
                    var t = this.get("restriction");
                    return t ? t.type === "User" && t.id === e.get("id") : !1
                },
                reset: function () {
                    this.expireContent(), this.set("content.content", [])
                },
                expirationHandler: function () {
                    this.expireContent()
                },
                destroy: function () {
                    var e = this.get("resource"),
                        t = this.get("executor"),
                        n = this.get("content");
                    e && e.destroy && e.destroy(), t && t.destroy && t.destroy(), n && n.destroy && n.destroy(), h.off("@ticket:expire", this, "expirationHandler"), h.off("@ticket:bulk_expire", this, "expirationHandler"), h.off("@ticket:merge", this, "expirationHandler"), h.off("@user:merge", this, "expirationHandler"), this.constructor.removeFromMap(this), this._super()
                }
            }).reopenClass(i("create")).reopenClass({
                toString: function () {
                    return "Filter"
                },
                create: function (e, t) {
                    e = e || {}, e.id == null && t && t.id && (e.id = t.id), e.id && (e.id = String(e.id));
                    var n = this._super(e);
                    return t && (t = a.parse(t)), n.get("resource") ? (n.set("resource.filter", n), t && n.set("resource.data", t)) : n.set("resource", u.create({
                        filter: n
                    }, t)), n
                },
                createDynamic: function (e) {
                    var t = e.id;
                    if (this.byId(t)) return this.byId(t);
                    var n = {
                        id: t,
                        title: e.title,
                        conditions: e.conditions,
                        execution: {
                            columns: e.output.map(function (e) {
                                return {
                                    id: e
                                }
                            }),
                            group_by: e.groupBy,
                            group_order: e.groupOrder,
                            group: {
                                id: e.groupBy,
                                order: e.groupOrder
                            },
                            sort_by: e.sortBy,
                            sort_order: e.sortOrder,
                            sort: {
                                id: e.sortBy,
                                order: e.sortOrder
                            }
                        }
                    }, r = this.create({
                            id: t,
                            isDynamic: !0,
                            resource: u.createFromDefinition(null, n),
                            ticketParser: l.create(),
                            executor: s.create()
                        });
                    return r
                }
            });
        n.exports = p
    }
}), this.require.define({
    "lib/rule_count_updater": function (e, t, n) {
        function a(e) {
            var n;
            return e.view_id === "suspended" ? n = t("models/filter/suspended_filter").instance() : n = s.create({
                id: e.view_id
            }), n.setCounts({
                count: e.value,
                freshCount: e.fresh,
                countApproximation: e.pretty
            }), n
        }
        var r = t("lib/lotus/batcher"),
            i = t("lib/back_off_enumerable"),
            s = t("models/filter/view_filter"),
            o = new i(500, 2e3, 5e3, 1e4, 3e4, 3e5),
            u = new r({
                timeout: o,
                run: function (e) {
                    var t = e.map(function (e) {
                        return e.get("id")
                    });
                    return $.ajax({
                        url: "/api/v2/views/count_many",
                        data: {
                            ids: t.join()
                        },
                        dataType: "json"
                    })
                }
            });
        u.onSuccess.add(function (e) {
            var t = _.inject(e.view_counts, function (e, t) {
                var n = a(t);
                return u[t.fresh ? "remove" : "add"](n), e && t.fresh
            }, !0);
            o[t ? "reset" : "next"]()
        }), n.exports = Object.freeze({
            add: u.add.bind(u)
        })
    }
}), this.require.define({
    "lib/split_button_menu": function (e, t, n) {
        var r = Em.View.extend(t("lib/account_consumer"), {
            disabled: null
        });
        n.exports = r
    }
}), this.require.define({
    "lib/subscription/advertised_features": function (e, t, n) {
        var r = t("lib/subscription/subscription_plan_type"),
            i = {
                1: Em.Object.create({
                    features: {
                        included: [I18n.t("txt.admin.subscriptions.available_features.max_agents", {
                            count_agents: 3
                        }), I18n.t("txt.admin.subscriptions.available_features.macros"), I18n.t("txt.admin.subscriptions.available_features.triggers_automations"), I18n.t("txt.admin.subscriptions.available_features.custom_fields"), I18n.t("txt.admin.subscriptions.available_features.sla"), I18n.t("txt.admin.subscriptions.available_features.ticket_sharing")],
                        missing: [I18n.t("txt.admin.subscriptions.available_features.domain_mapping"), I18n.t("txt.admin.subscriptions.available_features.satisfaction_ratings"), I18n.t("txt.admin.subscriptions.available_features.granular_forums"), I18n.t("txt.admin.subscriptions.available_features.chat"), I18n.t("txt.admin.subscriptions.available_features.personal_rules"), I18n.t("txt.admin.subscriptions.available_features.email_support"), I18n.t("txt.admin.subscriptions.available_features.multiple_phone_numbers")]
                    }
                }),
                2: Em.Object.create({
                    features: {
                        included: [I18n.t("txt.admin.subscriptions.available_features.domain_mapping"), I18n.t("txt.admin.subscriptions.available_features.satisfaction_ratings"), I18n.t("txt.admin.subscriptions.available_features.granular_forums"), I18n.t("txt.admin.subscriptions.available_features.chat"), I18n.t("txt.admin.subscriptions.available_features.personal_rules"), I18n.t("txt.admin.subscriptions.available_features.email_support"), I18n.t("txt.admin.subscriptions.available_features.multiple_phone_numbers"), I18n.t("txt.admin.subscriptions.available_features.includes_small_features", {
                            plan_name: "Starter"
                        })],
                        missing: [I18n.t("txt.admin.subscriptions.available_features.analytics"), I18n.t("txt.admin.subscriptions.available_features.dynamic_content"), I18n.t("txt.admin.subscriptions.available_features.group_rules"), I18n.t("txt.admin.subscriptions.available_features.agent_collision"), I18n.t("txt.admin.subscriptions.available_features.business_hours"), I18n.t("txt.admin.subscriptions.available_features.rule_filtering"), I18n.t("txt.admin.subscriptions.available_features.sandbox"), I18n.t("txt.admin.subscriptions.available_features.agent_display_name"), I18n.t("txt.admin.subscriptions.available_features.paper_invoicing"), I18n.t("txt.admin.subscriptions.available_features.phone_support")]
                    }
                }),
                3: Em.Object.create({
                    features: {
                        included: [I18n.t("txt.admin.subscriptions.available_features.analytics"), I18n.t("txt.admin.subscriptions.available_features.dynamic_content"), I18n.t("txt.admin.subscriptions.available_features.group_rules"), I18n.t("txt.admin.subscriptions.available_features.agent_collision"), I18n.t("txt.admin.subscriptions.available_features.business_hours"), I18n.t("txt.admin.subscriptions.available_features.rule_filtering"), I18n.t("txt.admin.subscriptions.available_features.sandbox"), I18n.t("txt.admin.subscriptions.available_features.agent_display_name"), I18n.t("txt.admin.subscriptions.available_features.paper_invoicing"), I18n.t("txt.admin.subscriptions.available_features.phone_support"), I18n.t("txt.admin.subscriptions.available_features.includes_small_and_medium", {
                            small_plan_name: "Starter",
                            medium_plan_name: "Basic"
                        })],
                        missing: [I18n.t("txt.admin.subscriptions.available_features.light_agents"), I18n.t("txt.admin.subscriptions.available_features.agent_roles"), I18n.t("txt.admin.subscriptions.available_features.rule_analysis"), I18n.t("txt.admin.subscriptions.available_features.ip_restriction"), I18n.t("txt.admin.subscriptions.available_features.email_archiving"), I18n.t("txt.admin.subscriptions.available_features.multi_branding"), I18n.t("txt.admin.subscriptions.available_features.weekend_phone_support"), I18n.t("txt.admin.subscriptions.available_features.improved_search")]
                    }
                }),
                4: Em.Object.create({
                    features: {
                        included: [I18n.t("txt.admin.subscriptions.available_features.light_agents"), I18n.t("txt.admin.subscriptions.available_features.agent_roles"), I18n.t("txt.admin.subscriptions.available_features.ip_restriction"), I18n.t("txt.admin.subscriptions.available_features.email_archiving"), I18n.t("txt.admin.subscriptions.available_features.multi_branding"), I18n.t("txt.admin.subscriptions.available_features.weekend_phone_support"), I18n.t("txt.admin.subscriptions.available_features.improved_search"), I18n.t("txt.admin.subscriptions.available_features.includes_all_plans")],
                        missing: [I18n.t("txt.admin.subscriptions.available_features.all_features")]
                    }
                })
            }, s = {
                lookupByPlanType: function (e) {
                    return i[e]
                }
            };
        n.exports = s
    }
}), this.require.define({
    "lib/subscription/subscription_plan_type": function (e, t, n) {
        var r = {
            1: "starter",
            2: "regular",
            3: "plus",
            4: "enterprise"
        }, i = {
                starter: 1,
                regular: 2,
                plus: 3,
                enterprise: 4
            }, s = {
                lookupPlanName: function (e) {
                    return r[e]
                },
                lookupPlanType: function (e) {
                    return i[e]
                }
            };
        n.exports = s
    }
}), this.require.define({
    "lib/tabs_com/channel": function (e, t, n) {
        function s(e) {
            i = i || [], i.forEach(function (t) {
                t(e.key, JSON.parse(e.newValue))
            })
        }

        function o() {
            window.addEventListener("storage", s, !1)
        }

        function u(e, t) {
            t.sentAt = Date.now(), r.setItem(e, JSON.stringify(t))
        }

        function a(e) {
            i = i || [], i.push(e)
        }
        var r = window.localStorage,
            i;
        n.exports = Object.seal({
            start: o,
            send: u,
            subscribe: a,
            listenToStorage: s
        })
    }
}), this.require.define({
    "lib/tabs_com/tabs_com": function (e, t, n) {
        function s(e, t) {
            var n = r[e] || [];
            n.forEach(function (e) {
                e(t)
            })
        }

        function o() {
            i.start(), i.subscribe(s)
        }

        function u(e, t) {
            r[e] = r[e] || [], r[e].push(t)
        }

        function a(e, t) {
            i.send(e, t)
        }
        var r = {}, i = t("lib/tabs_com/channel");
        n.exports = Object.seal({
            start: o,
            subscribe: u,
            publish: a
        })
    }
}), this.require.define({
    "lib/ticket_forms_consumer": function (e, t, n) {
        var r = Em.Mixin.create(t("lib/features").consumer, {
            hasTicketForms: Em.computed.alias("features.hasTicketForms"),
            isTicketFormsInitialized: !1,
            ticketFormsData: t("modules/ticket_forms_data/main"),
            ticketFields: function (e, t) {
                return arguments.length > 1 ? t : Zendesk.get("ticketFields")
            }.property("Zendesk.ticketFields").cacheable(),
            init: function () {
                this._super();
                if (this.get("hasTicketForms")) {
                    var e = this;
                    this.get("ticketFormsData").initialize().done(function () {
                        e.set("isTicketFormsInitialized", !0)
                    })
                }
            },
            shouldShowTicketFormField: function () {
                if (!this.get("isTicketFormsInitialized")) return !1;
                if (this.get("hasTicketForms")) {
                    var e = this.get("ticketFormsData").getTicketForms();
                    return e.length > 1
                }
                return !1
            }.property("hasTicketForms", "ticketFormsData", "isTicketFormsInitialized").cacheable(),
            currentTicketFormId: function () {
                if (this.get("isTicketFormsInitialized")) return this.get("ticket.ticketFormId") || this.get("_defaultTicketFormId")
            }.property("isTicketFormsInitialized", "ticket.ticketFormId", "_defaultTicketFormId").cacheable(),
            ticketFormsFieldsWithoutAssignee: function () {
                if (!this.get("isTicketFormsInitialized")) return;
                var e, t, n, r, i = this.get("ticketFields"),
                    s = [i.byAttributeName("ticket_form_id")].concat(i.ticketProperties(!0)),
                    o = this.get("currentTicketFormId"),
                    u = this.get("ticketFormsData"),
                    a = u.getTicketFormFields(o) || [],
                    f = a.filterProperty("removable");
                r = f.length;
                for (var l = 0; l < r; l++) {
                    e = f[l], s.push(e);
                    if (e.get("type") === "tickettype") {
                        t = i.byAttributeName("problem_id"), n = i.byAttributeName("due_date"), e = f[l + 1], e && e.get("type") === "priority" && (s.push(e), l += 1), s.push(t), s.push(n), s = s.concat(f.slice(l + 1));
                        break
                    }
                }
                return s.filter(function (e) {
                    var t = e.get("type") !== "assignee";
                    return t && e.get("active")
                })
            }.property("isTicketFormsInitialized", "ticketFormsData", "currentTicketFormId", "ticketFields").cacheable(),
            ticketForms: function () {
                if (this.get("isTicketFormsInitialized")) return this.get("ticketFormsData").getTicketForms()
            }.property("isTicketFormsInitialized", "ticketFormsData").cacheable(),
            _defaultTicketFormId: function () {
                if (this.get("isTicketFormsInitialized")) return this.get("ticketFormsData").getDefaultTicketForm().id
            }.property("isTicketFormsInitialized", "ticketFormsData").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "lib/ticket_validator": function (e, t, n) {
        var r = Em.Object.extend(t("lib/settings_consumer"), {
            validate: function (e, t, n) {
                var r = _.compact([].concat(this._errorResettingAssigneeWithinGroup(e)).concat(this._errorSolvingTicketWithoutAssignee(e, n)).concat(this._errorAttachmentMissingComment(e)).concat(this._errorNewTicketBaseFieldsMissing(e)).concat(this._errorMissingSolveFields(e, t)));
                return r.length > 0 ? r : null
            },
            _errorResettingAssigneeWithinGroup: function (e) {
                if (!e.get("assignee_id") && e.isAttrDirty("assignee_id") && !e.isAttrDirty("group")) return I18n.t("ticket.client_errors.messages.assignee_reset")
            },
            _errorSolvingTicketWithoutAssignee: function (e, t) {
                if (this.get("settings.assignTicketsUponSolve")) return;
                if (!e.get("assignee_id") && e.get("isSolved") && e.isAttrDirty("status_id")) {
                    if (t && t.get("agents.length") === 1) return;
                    if (!e.get("id")) return;
                    if (!e.get("group_id") || t.findProperty("name", e.get("group.name")).get("agents.length") !== 1) return I18n.t("ticket.client_errors.messages.assignee_required_when_solving")
                }
            },
            _errorAttachmentMissingComment: function (e) {
                var t = e.get("comment");
                if (t && t.get("body") === "" && t.get("uploadSet.attachments.length") > 0) return I18n.t("ticket.client_errors.messages.missing_comment_with_attachment")
            },
            _errorNewTicketBaseFieldsMissing: function (e) {
                var t = [];
                return e.get("id") || ((!e.get("comment.body") || e.get("comment.body") === "") && t.push(I18n.t("ticket.client_errors.messages.missing_comment_for_new_ticket")), !e.get("subject") && Zendesk.ticketFields.byAttributeName("subject") && t.push(I18n.t("ticket.client_errors.messages.missing_subject_for_new_ticket"))), t
            },
            _errorMissingSolveFields: function (e, t) {
                if (!e.get("isSolved") || !e.isAttrDirty("status_id")) return;
                var n = [];
                return t.forEach(function (t) {
                    t.get("data.required") && t.isBlank(e) && n.push(I18n.t("ticket.client_errors.messages.field_is_required_when_solving", {
                        title: t.get("data.title")
                    }))
                }), n
            }
        });
        r.reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "Ticket Validator"
            }
        }), n.exports = r
    }
}), this.require.define({
    "lib/user_assume/chat_extension": function (e, t, n) {
        n.exports = Em.Object.extend({
            chatService: ChatLotus.Service,
            chatsController: null,
            hasChatEnabled: Em.computed.oneWay("chatService.hasChatEnabled"),
            previousAvailablity: !1,
            isActive: function () {
                return this.get("chatsController.current")
            },
            detach: function () {
                this.get("hasChatEnabled") && this._isChatAvailable() && (this.set("previousAvailablity", !0), this._toggleChatAvailability())
            },
            reattach: function () {
                this.get("previousAvailablity") && (this._toggleChatAvailability(), this.set("previousAvailablity", !1))
            },
            _isChatAvailable: function () {
                return this.get("chatService.Availability.available")
            },
            _toggleChatAvailability: function () {
                this.get("chatService.Availability").toggleAvailability()
            }
        })
    }
}), this.require.define({
    "lib/voice/availability": function (e, t, n) {
        function a() {
            var e = "client",
                t, n = [];
            this.change = function (e) {
                n.contains(e) || n.push(e)
            };
            var i = function () {
                n.forEach(function (e) {
                    e()
                })
            };
            this.is = function (n, r) {
                return e = n, t = r, i(), this
            }, this.isAvailable = function () {
                return t
            }, this.via = function (t) {
                return e = t, this
            }, this.getVia = function () {
                return e
            }, this.toggle = function () {
                return t = !t, this
            }, this.off = function () {
                return t = !1, this
            }, this.availability = function () {
                return t ? e : "off"
            }, this.sync = function () {
                var n = this,
                    i = {
                        is_available: t,
                        via: e
                    };
                return $.ajax({
                    url: "/voice/settings/available_via",
                    type: "POST",
                    data: i,
                    dataType: "json",
                    success: function (e) {
                        n.is(e.via, e.is_available)
                    },
                    error: function (e, t, n) {
                        s.error({
                            short_message: "module:error:ec5",
                            _status: t,
                            _message: e && e.responseText
                        }), r.error(I18n.t("txt.voice.error.ec5"))
                    }
                })
            }
        }
        var r = t("lib/growl"),
            i = t("lib/current_account"),
            s = Minilog("voice-availability"),
            o = t("lib/voice/state").instance(),
            u;
        a.instance = function () {
            return u || (u = new a), u
        }, a.initialize = function () {
            i.get("settings.has_voice_enabled") && o.get("voiceResource").fetch().done(function () {
                var e = o.get("voiceResource"),
                    t = a.instance();
                t.is(e.get("via"), e.get("is_available"))
            })
        }, n.exports = a
    }
}), this.require.define({
    "lib/voice/twilio_connection": function (e, t, n) {
        n.exports = function () {};
        var r, i = function (e, t) {
                e.forEach(function (e) {
                    e(t)
                })
            }, s = Ember.Object.extend({
                callbacks: Em.computed.emptyArray(),
                on: function (e) {
                    if (this.get("callbacks").contains(e)) return;
                    this.get("callbacks").push(e)
                },
                connection: function (e, t) {
                    return arguments.length === 1 ? this.get("_connection") : (t && this.get("_connection") !== t && i(this.get("callbacks"), !0), this.set("_connection", t), t)
                }.property("_connection").cacheable(),
                unset: function () {
                    this.set("_connection", null), i(this.get("callbacks"), !1)
                },
                isConnected: function () {
                    return !!this.get("connection")
                }.property("connection").cacheable()
            });
        n.exports.instance = function () {
            return r || (r = s.create()), r
        }, n.exports.reset = function () {
            r = null
        }
    }
}), this.require.define({
    "lib/voice/voice_initializer": function (e, t, n) {
        function r() {
            this.callbacks = []
        }
        r.prototype.once = function (e, t) {
            if (this.callbacks.contains(e)) return;
            this.callbacks.push(e), _.delay(e.bind(t), 200)
        }, n.exports = r
    }
}), this.require.define({
    "lib/voice/integration": function (e, t, n) {
        var r = Em.Object.extend({
            subscribeToVoiceTickets: function (e) {
                RadarClient.alloc("voice_integration_tickets", function () {
                    RadarClient.status("voice_integration_tickets/" + e).on(function (e) {
                        Zendesk.Routes.goToHash("/tickets/" + e.value)
                    }).subscribe()
                })
            },
            subscribeToUserProfiles: function (e) {
                RadarClient.alloc("voice_integration_users", function () {
                    RadarClient.status("voice_integration_users/" + e).on(function (e) {
                        Zendesk.Routes.goToHash("/users/" + e.value + "/tickets")
                    }).subscribe()
                })
            }
        }).reopenClass(t("lib/lotus/singleton"));
        n.exports = r
    }
}), this.require.define({
    "models/voice/poller": function (e, t, n) {
        function o() {
            var e = this,
                t;
            this._poll = function (n) {
                var s = i.get("voiceResource"),
                    o = s && s.get("currentCall.status");
                if (["completed", "voicemail", "voicemail_transcription_completed", "cancelled", "queued", "ended"].contains(o)) {
                    r.debug({
                        short_message: "poll:stop",
                        _status: o
                    }), t = o;
                    return
                }
                if (!n) {
                    n = {};
                    var u = s && s.get("currentCall");
                    if (!u) {
                        r.debug({
                            short_message: "poll:no-data"
                        }), setTimeout(e.repoll, 1);
                        return
                    }
                    n.call_id = u.get("id"), n.outgoing_sid = u.get("outgoing_sid"), n.sid = u.get("sid")
                }
                r.debug({
                    short_message: "poll:data",
                    _data: n
                }), $.ajax({
                    url: "/voice/calls/incoming_info",
                    type: "GET",
                    data: n,
                    dataType: "json"
                }).done(function (n) {
                    r.debug({
                        short_message: "poll:ok",
                        _got: !! n
                    });
                    if (!n) return;
                    r.debug({
                        short_message: "poll:last_status",
                        _status: t
                    }), r.debug({
                        short_message: "poll:new_status",
                        _status: n.status
                    }), !t || t != n.status ? (e.poll.resetBackoff(), s.updateCall(n)) : (r.debug({
                        short_message: "poll:repoll"
                    }), e.repoll()), t = n.status
                }).fail(function (t, n, i) {
                    r.debug({
                        short_message: "poll:fail",
                        _status: n
                    }), e.repoll()
                })
            }, this.poll = o.debounce(this._poll, 1e3, 5e3), this.repoll = function () {
                e.poll()
            }
        }
        n.exports = o;
        var r = Minilog("voice-poller"),
            i = t("lib/voice/state").instance(),
            s;
        o.debounce = function (e, t, n) {
            function u() {
                var t = this,
                    u = arguments,
                    a = function () {
                        i = null, r.debug({
                            short_message: "debounce:later:fire",
                            _wait: o
                        }), s = e.apply(t, u), o = Math.round(o * 1.2), o > n && (o = n)
                    };
                return clearTimeout(i), i = setTimeout(a, o), s
            }
            var i, s, o = t;
            return u.timeout = function () {
                return i
            }, u.resetBackoff = function () {
                r.debug({
                    short_message: "debounce:resetBackoff",
                    _wait: o
                }), clearTimeout(i), i = null, o = t
            }, u
        }, o.instance = function () {
            return s || (s = new o), s
        }
    }
}), this.require.define({
    "models/attachment": function (e, t, n) {
        var r = Em.Resource.define({
            url: "/api/v2/attachments",
            schema: {
                id: Number,
                size: Number,
                filename: {
                    type: String,
                    path: "file_name"
                },
                contentUrl: {
                    type: String,
                    path: "content_url"
                },
                contentType: {
                    type: String,
                    path: "content_type"
                }
            }
        }),
            i = r.define({
                schema: {
                    thumbnails: {
                        type: Em.ResourceCollection,
                        itemType: r,
                        nested: !0
                    }
                }
            }).reopen({
                account: t("lib/current_account"),
                uploading: !1,
                uploadSet: null,
                displayFilename: Em.computed.alias("filename"),
                fileUrl: Em.computed.alias("contentUrl"),
                deleting: Em.computed.equal("resourceState", Em.Resource.Lifecycle.DELETING),
                label: Em.computed.oneWay("_toString"),
                url: function () {
                    return "/api/v2/attachments/%@.json".fmt(this.get("id"))
                }.property("id").cacheable(),
                deletable: function () {
                    var e = this.get("resourceState");
                    return this.get("id") != null && this.get("uploadSet.token") != null && (e == Em.Resource.Lifecycle.UNFETCHED || e === Em.Resource.Lifecycle.FETCHED)
                }.property("id", "resourceState", "uploadSet.token").cacheable(),
                thumbnailUrl: function () {
                    var e = this.get("thumbnails");
                    if (!e) return null;
                    var t = e.objectAt(0);
                    return t ? t.get("contentUrl") : null
                }.property("thumbnails.@each.contentUrl").cacheable(),
                toString: function () {
                    return this.get("_toString")
                },
                _toString: function () {
                    return this.get("filename") || this.get("contentUrl") || "Attachment " + this.get("id")
                }.property("filename", "contentUrl", "id").cacheable()
            });
        n.exports = i
    }
}), this.require.define({
    "models/core_user": function (e, t, n) {
        var r = t("models/time_zones").instance(),
            i = t("models/time_zone"),
            s = Ember.Resource.define({
                url: "/api/v2/users",
                schema: {
                    id: Number,
                    external_id: String,
                    name: String,
                    alias: String,
                    created_at: Date,
                    updated_at: Date,
                    active: Boolean,
                    verified: Boolean,
                    locale: String,
                    locale_id: Number,
                    shared: {
                        type: Boolean
                    },
                    sharedAgent: {
                        type: Boolean,
                        path: "shared_agent"
                    },
                    timeZoneName: {
                        type: String,
                        path: "time_zone"
                    },
                    last_login_at: Date,
                    email: String,
                    phone: String,
                    signature: String,
                    details: String,
                    notes: String,
                    role: String,
                    moderator: Boolean,
                    ticket_restriction: String,
                    restrictedAgent: {
                        type: Boolean,
                        path: "restricted_agent"
                    },
                    only_private_comments: Boolean,
                    tags: Object,
                    authenticity_token: String,
                    customFields: {
                        type: Object,
                        path: "user_fields"
                    },
                    photo: {
                        type: "models/attachment",
                        nested: !0
                    }
                },
                parse: function (e) {
                    return e.user || e
                }
            }).extend({
                isAgent: function () {
                    var e = this.get("role");
                    return e === "agent" || e === "admin"
                }.property("role").cacheable(),
                isAdmin: function () {
                    return this.get("role") === "admin"
                }.property("role").cacheable(),
                isAgentNotAdmin: function () {
                    return this.get("role") === "agent"
                }.property("role").cacheable(),
                isEndUser: function () {
                    var e = this.get("role");
                    return e === "end-user" || !e
                }.property("role").cacheable(),
                roleDisplayName: function () {
                    var e = this.get("role") || "end-user";
                    return I18n.t("type.updated_by.%@".fmt(e).underscore())
                }.property("role").volatile(),
                displayName: function () {
                    return this.get("name") || this.get("email")
                }.property("name", "email").cacheable(),
                time_zone: function () {
                    return Ember.deprecate("User#time_zone is deprecated. Use timeZone or timeZoneName"), this.get("timeZoneName")
                }.property("timeZoneName").volatile(),
                timeZone: function () {
                    var e = r.findByName(this.get("timeZoneName"));
                    return e || i.Local
                }.property("timeZoneName").cacheable(),
                profileImageUrl: function () {
                    var e = new Zendesk.Photo(this.get("photo.contentUrl"), this.get("email"));
                    return e.url()
                }.property("photo", "email").cacheable()
            });
        n.exports = s
    }
}), this.require.define({
    "models/ticket/types": function (e, t, n) {
        var r = {
            Types: {
                0: "ticket",
                1: "question",
                2: "incident",
                3: "problem",
                4: "task",
                TICKET: 0,
                QUESTION: 1,
                INCIDENT: 2,
                PROBLEM: 3,
                TASK: 4
            },
            Statuses: {
                0: "new",
                1: "open",
                2: "pending",
                3: "solved",
                4: "closed",
                5: "deleted",
                6: "hold",
                NEW: 0,
                OPEN: 1,
                PENDING: 2,
                SOLVED: 3,
                CLOSED: 4,
                DELETED: 5,
                HOLD: 6
            },
            Priorities: {
                0: "-",
                1: "low",
                2: "normal",
                3: "high",
                4: "urgent",
                NONE: 0,
                LOW: 1,
                NORMAL: 2,
                HIGH: 3,
                URGENT: 4
            },
            PrioritySets: {
                0: "FULL",
                1: "BASIC",
                FULL: 0,
                BASIC: 1
            },
            SatisfactionTypes: {
                0: I18n.t("type.satisfaction.unoffered"),
                1: I18n.t("type.satisfaction.offered"),
                4: I18n.t("type.satisfaction.bad"),
                5: I18n.t("type.satisfaction.bad_with_comment"),
                16: I18n.t("type.satisfaction.good"),
                17: I18n.t("type.satisfaction.good_with_comment"),
                UNOFFERED: 0,
                OFFERED: 1,
                BAD: 4,
                BADWITHCOMMENT: 5,
                GOOD: 16,
                GOODWITHCOMMENT: 17,
                unoffered: I18n.t("type.satisfaction.unoffered"),
                offered: I18n.t("type.satisfaction.offered"),
                bad: I18n.t("type.satisfaction.bad"),
                bad_with_comment: I18n.t("type.satisfaction.bad_with_comment"),
                good: I18n.t("type.satisfaction.good"),
                good_with_comment: I18n.t("type.satisfaction.good_with_comment")
            },
            UpdatedByTypes: {
                0: I18n.t("type.updated_by.agent"),
                1: I18n.t("type.updated_by.end_user"),
                AGENT: 0,
                END_USER: 1
            },
            Vias: {
                0: I18n.t("type.via.web-form"),
                4: I18n.t("type.via.mail"),
                5: I18n.t("type.via.api"),
                8: I18n.t("type.via.rule"),
                9: I18n.t("type.via.ticket-linked"),
                10: I18n.t("type.via.group-deletion"),
                11: I18n.t("type.via.user-change"),
                12: I18n.t("type.via.user-deletion"),
                13: I18n.t("type.via.group-change"),
                14: I18n.t("type.via.resource-push"),
                15: I18n.t("type.via.iphone"),
                16: I18n.t("type.via.getsatisfaction"),
                17: I18n.t("type.via.dropbox"),
                19: I18n.t("type.via.ticket-merge"),
                20: I18n.t("type.via.batch"),
                21: I18n.t("type.via.ticket-suspended"),
                22: I18n.t("type.via.solution-suggest"),
                23: I18n.t("type.via.twitter-favorite"),
                24: I18n.t("type.via.topic"),
                25: I18n.t("type.via.user-merge"),
                26: I18n.t("type.via.twitter-dm"),
                27: I18n.t("type.via.closed-ticket"),
                28: I18n.t("type.via.logmein"),
                29: I18n.t("type.via.chat"),
                30: I18n.t("type.via.twitter"),
                31: I18n.t("type.via.ticket-sharing"),
                32: I18n.t("type.via.macro-reference"),
                33: I18n.t("type.via.voice-mail"),
                34: I18n.t("type.via.phone-inbound"),
                35: I18n.t("type.via.phone-outbound"),
                36: I18n.t("type.via.blog"),
                37: I18n.t("type.via.text-message"),
                38: I18n.t("type.via.facebook"),
                WEB_FORM: 0,
                MAIL: 4,
                API: 5,
                RULE: 8,
                TICKET_LINKED: 9,
                GROUP_DELETION: 10,
                USER_CHANGE: 11,
                USER_DELETION: 12,
                GROUP_CHANGE: 13,
                RESOURCE_PUSH: 14,
                IPHONE: 15,
                GETSATISFATION: 16,
                DROPBOX: 17,
                TICKET_MERGE: 19,
                BACTH: 20,
                TICKET_SUSPENDED: 21,
                SOLUTION_SUGGEST: 22,
                TWITTER_FAVORITE: 23,
                TOPIC: 24,
                USER_MERGE: 25,
                TWITTER_DM: 26,
                CLOSED_TICKET: 27,
                LOGMEIN: 28,
                CHAT: 29,
                TWITTER: 30,
                TICKET_SHARING: 31,
                MACRO_REFERENCE: 32,
                VOICE: 33,
                PHONE_INBOUND: 34,
                PHONE_OUTBOUND: 35,
                BLOG: 36,
                TEXT_MESSAGE: 37,
                FACEBOOK: 38,
                FACEBOOK_MESSAGE: 41,
                LOTUS: 42
            },
            ViasReverse: {}
        };
        for (var i in r.Vias) r.ViasReverse[r.Vias[i]] = i.toLowerCase();
        n.exports = r
    }
}), this.require.define({
    "models/ticket/serializer": function (e, t, n) {
        var r = t("modules/ticket_forms_data/main"),
            i = {
                serializers: {
                    addSubmitterId: function (e, t) {
                        t.get("isNew") && (e.submitter_id = Zd.get("currentUser.id"))
                    },
                    addRequester: function (e, t) {
                        t.get("requester.id") ? e.requester_id = t.get("requester.id") : t.get("requester.email") && (e.requester = {
                            name: t.get("requester.name"),
                            email: t.get("requester.email")
                        })
                    },
                    addViaId: function (e, t) {
                        var n = !t.get("isNew"),
                            r = !t.get("via");
                        if (t.get("via_followup_source_id")) e.via = {
                            channel: "closed_ticket"
                        };
                        else if (n || r) e.via = {
                            channel: "Web form"
                        }
                    },
                    addCollaborators: function (e, t) {
                        var n = t.get("collaborators") || _([]);
                        e.collaborators = n.map(function (e) {
                            return e.get("id") || e.get("email")
                        }), e.collaborators.length === 0 && (e.collaborators = [])
                    },
                    addCustomFields: function (e, t) {
                        var n;
                        e.custom_fields || (e.custom_fields = []), Zendesk.ticketFields.get("custom").forEach(function (n) {
                            var r = t.get(n.get("attributeName"));
                            e.custom_fields.push({
                                id: n.get("id"),
                                value: r === "-" ? null : n.serializeValue(r)
                            })
                        })
                    },
                    addDueDate: function (e, t) {
                        t.get("ticket_type_id") === Zendesk.Ticket
                            .Types.TASK && (t.get("due_date") instanceof Date ? e.due_at = t.get("due_date").toISOString() : e.due_at = t.get("due_date"))
                    },
                    addComment: function (e, t) {
                        var n = t.get("comment"),
                            r, i, s, o;
                        if (n) {
                            r = n.get("body");
                            if (r) {
                                t.get("id") ? (e.comment = n.toJSON(), e.comment["public"] === undefined && (e.comment["public"] = t.get("isDefaultPublicComment"))) : (e.comment = {
                                    body: r
                                }, s = t.get("submitter.id"), o = t.get("requester.id"), o != s && (e.comment.author_id = s), i = n.get("uploadSet.token"), i && (e.comment.uploads = i));
                                var u = n.get("recordedScreencasts");
                                u && u.length > 0 && (e.comment.screencasts = u.map(function (e) {
                                    return {
                                        id: e.id,
                                        position: e.position,
                                        content_url: e.url,
                                        thumbnail_url: e.thumbnail
                                    }
                                }))
                            }
                        }
                    },
                    addExternalLinks: function (e, t) {
                        e.external_links = t.get("external_links")
                    },
                    addSubject: function (e, t) {
                        var n = Zendesk.ticketFields.byAttributeName("subject") !== undefined,
                            r = t.get("userPermissions.updateTicket");
                        n && r && (e.subject = t.get("subject"))
                    },
                    addSharingAgreementAttributes: function (e, t) {
                        var n = t.get("agreementIdToShare") || "";
                        if (n === -1) e.sharing_agreements = [{}];
                        else if (n !== "") {
                            var r = t.get("sharingAgreementOptions");
                            r != null ? e.sharing_agreements = [{
                                id: n,
                                custom_fields: r
                            }] : e.sharing_agreements = [{
                                id: n
                            }]
                        }
                    },
                    addTicketFormId: function (e, t) {
                        t.get("hasTicketForms") && (e.ticket_form_id = t.get("ticketFormId"), e.ticket_form_id == null && t.get("userPermissions.updateTicket") && (e.ticket_form_id = r.getDefaultTicketForm().id))
                    },
                    addOrganizationId: function (e, t) {
                        t.get("requester.organizations.length") > 1 && t.get("organization") && (e.organization_id = t.get("organization.id"))
                    }
                },
                filterFormFields: function (e) {
                    var t = e.ticket_form_id,
                        n, i;
                    t && (n = r.getTicketFormFields(t), n && (i = Zd.TicketFields.removable(), this.deleteFieldsAbsentOnForm(e, n, i)))
                },
                deleteFieldsAbsentOnForm: function (e, t, n) {
                    n.forEach(function (n) {
                        if (t.findProperty("attributeName", n.get("attributeName"))) return;
                        n.get("isCustomField") ? delete e.custom_fields[n.get("id")] : delete e[n.get("v2AttributeName")]
                    })
                },
                serializeAttributes: function (e) {
                    var n = t("models/ticket/types"),
                        r = e.get("priority_id"),
                        i = e.get("ticket_type_id"),
                        s = {
                            status: n.Statuses[e.get("status_id")],
                            problem_id: e.get("problem_id") || "",
                            group_id: e.get("group_id") || "",
                            assignee_id: e.get("assignee_id") || "",
                            tags: e.get("tags"),
                            via_followup_source_id: e.get("via_followup_source_id"),
                            via: e.get("via")
                        };
                    return r > 0 && (s.priority = n.Priorities[r]), i > 0 && (s.type = n.Types[i]), _.values(this.serializers).invoke("call", null, s, e), this.filterFormFields(s), s
                },
                serialize: function (e) {
                    var t = {
                        ticket: this.serializeAttributes(e)
                    };
                    return e.get("macro_applied") && (t.ticket.macro_id = e.get("macro_applied")), t
                }
            };
        n.exports = Object.seal(i)
    }
}), this.require.define({
    "models/filter/incidents_filter_factory": function (e, t, n) {
        var r = t("models/filter/filter_resource"),
            i = t("models/filter/filter_preset_executor"),
            s = t("models/filter/filter_ticket_parser"),
            o = {
                id: null,
                active: !0,
                title: "Incidents",
                execution: {
                    columns: [{
                        id: "status"
                    }, {
                        id: "id"
                    }, {
                        id: "subject"
                    }, {
                        id: "requester"
                    }, {
                        id: "created_at"
                    }, {
                        id: "group"
                    }, {
                        id: "assignee"
                    }],
                    group_by: null,
                    group_order: null,
                    sort_by: null,
                    sort_order: null
                }
            }, u = i.extend({
                executeURL: function (e, t) {
                    var n = this.urlParams(e, t),
                        r = this.get("filter.relatedTicket.id");
                    return "/api/v2/tickets/%@/incidents.json?include=groups,users&%@".fmt(r, $.param(n))
                }
            }),
            a = function (e) {
                return e.tickets || []
            }, f = function (e) {
                return e = e || {}, Em.assert("Incidents filter needs to have a relatedTicket!", e.relatedTicket != null), e.executor = e.executor || u.create(), e.ticketParser = e.ticketParser || s.create({
                    getRows: a
                }), e.resource = e.resource || r.createFromDefinition(null, Em.copy(o, !0)), e.isSortingEnabled = !1, t("models/filter").create(e)
            };
        n.exports = f
    }
}), this.require.define({
    "models/twitter_status": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                id: Number,
                tweet_id: String,
                timestamp: String,
                retweeted: Boolean,
                following_user: Boolean,
                favorited: Boolean,
                user_name: String,
                user_image_url: String
            }
        }),
            i = Em.ResourceCollection.extend({
                ticketId: null,
                type: r,
                expireIn: 6e5,
                url: function () {
                    return "/api/v2/channels/twitter/tickets/%@/statuses".fmt(this.get("ticketId"))
                }.property("ticketId").cacheable(),
                parse: function (e) {
                    return e.followed_by_requester && this.set("followedByRequester", e.followed_by_requester), (e || {}).twitter_comments || []
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/events/event": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                id: Number,
                type: String,
                created_at: Date,
                viaObject: {
                    type: Object,
                    path: "via"
                },
                value: String,
                value_previous: String
            }
        }).extend({
            parse: function (e) {
                return e && (e.events && (e.eventsJson = _.map(e.events, r.prototype.parse)), e.attachmentsJson = e.attachments, delete e.events, delete e.attachments), e
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/upload_set": function (e, t, n) {
        function i(e) {
            if (/iframe/.test(e.dataType)) {
                var t = e.result[0].getElementsByTagName("pre")[0].innerHTML;
                return JSON.parse(t)
            }
            return typeof e.result == "string" ? JSON.parse(e.result) : e.result || {}
        }

        function s(e, t) {
            var n = e.get("token");
            if (!n) e.set("token", t);
            else if (t !== n) throw "Cannot add upload with mismatched token"
        }

        function o(e, t, n, r) {
            var i = e.attachment,
                s = t.get("attachments"),
                o = r.find(function (e) {
                    return e && e.url === n
                });
            i.set("uploading", !1), i.set("uploadSet", t), i.updateWithApiData(o), t.notifyPropertyChange("uploadedAttachments")
        }
        var r = t("models/attachment"),
            u = Em.ArrayProxy.extend({
                getByFilename: function (e) {
                    return this.findProperty("filename", e)
                }
            }),
            a = Em.Object.extend({
                attachments: function () {
                    return u.create({
                        content: []
                    })
                }.property().cacheable(),
                beginUploadingFiles: function (e) {
                    var t = this.get("attachments");
                    _(e.files || []).each(function (e) {
                        var n;
                        if (e == null) return;
                        if (e.name == null || e.name === "") return;
                        if (t.getByFilename(e.name)) return;
                        n = r.create({
                            filename: e.name,
                            contentType: e.type,
                            uploading: !0
                        }), e.attachment = n, t.pushObject(n)
                    })
                },
                uploadSucceeded: function (e) {
                    if (!e) return;
                    var t = i(e),
                        n = Em.get(t, "upload.token"),
                        r = Em.get(t, "upload.attachments"),
                        u = e.jqXHR.getResponseHeader("Location");
                    if (n == null) throw "Cannot add null, undefined, or empty upload";
                    s(this, n), o(e.files[0], this, u, r)
                },
                remove: function (e) {
                    var t = this.get("attachments");
                    e.destroyResource().done(t.removeObject.bind(t, e)())
                },
                removeAll: function () {
                    var e = this.get("attachments"),
                        t = this;
                    e.forEach(function (e) {
                        t.remove(e)
                    })
                }
            });
        n.exports = a
    }
}), this.require.define({
    "models/events/comment": function (e, t, n) {
        var r = t("models/events/event"),
            i = r.define({
                schema: {
                    body: String,
                    is_public: Boolean,
                    add_short_url: Boolean,
                    channel_back: String,
                    twitter_channel_back: String,
                    attachments: {
                        type: Em.ResourceCollection,
                        itemType: "models/attachment",
                        nested: !0
                    },
                    screencasts: {
                        type: Em.ResourceCollection,
                        itemType: "models/screencast",
                        nested: !0
                    }
                }
            }).extend({
                isNotPublic: Em.computed.not("is_public"),
                uploadSet: function () {
                    return t("models/upload_set").create({})
                }.property().cacheable(),
                recordedScreencasts: null,
                init: function () {
                    this._super.apply(this, arguments), this.set("recordedScreencasts", [])
                },
                destroy: function () {
                    this.get("uploadSet") && this.get("uploadSet").destroy(), this._super()
                },
                addScreencast: function (e) {
                    this.get("recordedScreencasts").pushObject(e)
                },
                removeScreencast: function (e) {
                    this.get("recordedScreencasts").removeObject(e)
                },
                toJSON: function () {
                    var e = {
                        body: this.get("body"),
                        "public": this.get("is_public"),
                        uploads: this.get("uploadSet.token")
                    }, t = this.get("add_short_url"),
                        n = this.get("channel_back"),
                        r = this.get("twitter_channel_back");
                    return t != null && (e.add_short_url = t ? "1" : "0"), n != null && (e.channel_back = n), r != null && (e.channel_back = r), e
                },
                hasBody: function () {
                    var e = this.get("body");
                    return e && $.trim(e) !== ""
                }.property("body").cacheable()
            });
        n.exports = i
    }
}), this.require.define({
    "models/ticket/new_ticket": function (e, t, n) {
        var r = Em.Mixin.create({
            destroy: function () {
                this.get("isNew") && this.constructor.newTickets.remove(this.get("newTicketId")), this._super()
            }
        }),
            i = Em.Mixin.create({
                newTickets: new Em.Map,
                nextNewTicketId: 1,
                newTicket: function (e) {
                    var t;
                    if (e != null) {
                        t = this.newTickets.get(parseInt(e, 10));
                        if (t) return t
                    }
                    return t = this.create({
                        status_id: this.Statuses.NEW,
                        permissions: {
                            can_update_ticket: !0,
                            can_make_public_comments: !0,
                            can_mark_as_spam: !1,
                            can_delete_ticket: !1,
                            can_merge_ticket: !1,
                            can_edit_ticket_tags: !0,
                            can_make_comments: !0
                        }
                    }), t.set("submitter", Zd.User.create({
                        id: Zendesk.get("currentUser.id")
                    })), t.set("newTicketId", this.nextNewTicketId), this.newTickets.set(this.nextNewTicketId, t), this.nextNewTicketId++, t
                },
                newFollowUpTicket: function (e) {
                    Ember.assert("Follow-up ticket needs a source ticket!", e != null);
                    var t = this.newTicket();
                    return t.set("via_followup_source_id", e.get("id")), t.set("subject", I18n.t("txt.ticket.followup_subject", {
                        source_subject: e.get("subject")
                    })), t.set("requester", e.get("requester")), t.set("tags", Em.copy(e.get("tags"))), t.set("comment.body", I18n.t("ticket.followup.comment") + " #" + e.get("id")), t.set("ticketFormId", e.get("ticketFormId")), t
                }
            });
        n.exports = Object.seal({
            PrototypeMixin: r,
            ClassMixin: i
        })
    }
}),
function () {
    function f(e) {
        return e.sort(function (e, t) {
            var n = +e.createdAt,
                r = +t.createdAt;
            return n == r ? e.id > t.id ? -1 : 1 : n > r ? -1 : 1
        })
    }
    var e = require("lib/lotus/global_events"),
        t = require("mixins/fetch_all_next_pages"),
        n = require("models/filter/incidents_filter_factory"),
        r = require("models/twitter_status"),
        i = require("models/events/comment"),
        s = require("lib/monitoring/metrics").instance(),
        o = require("models/ticket/types"),
        u = Em.ResourceCollection.extend({
            expireIn: 31536e3,
            type: "Zendesk.User",
            parse: function (e) {
                var t = {};
                return _(e).each(function (e) {
                    t[e.id] = t[e.id] || e
                }), this._super(_(t).values())
            }
        });
    Zendesk.TicketSharedProperties = Em.Mixin.create({
        href: function () {
            return "#/tickets/" + (this.get("id") || "new/%@".fmt(this.get("newTicketId")))
        }.property("id").cacheable(),
        title: function () {
            return this.get("subject") || this.get("description")
        }.property("subject", "description").cacheable(),
        isNotNew: Em.computed.not("isNew"),
        isSolved: Em.computed.equal("status_id", o.Statuses.SOLVED),
        isClosed: Em.computed.equal("status_id", o.Statuses.CLOSED),
        isProblem: Em.computed.equal("ticket_type_id", o.Types.PROBLEM),
        isIncident: Em.computed.equal("ticket_type_id", o.Types.INCIDENT),
        isTask: Em.computed.equal("ticket_type_id", o.Types.TASK),
        hasNewStatus: function () {
            return this.get("status_id") === Zendesk.Ticket.Statuses.NEW || this.get("status_id") === undefined
        }.property("status_id").cacheable(),
        statusName: function () {
            return Zendesk.Ticket.Statuses[this.get("status_id")]
        }.property("status_id").cacheable(),
        statusMnemonic: function () {
            var e = this.get("statusName").toLowerCase();
            return e ? I18n.t("txt.ticket.status.mnemonic_" + e) : ""
        }.property().cacheable(),
        statusDisplayName: function () {
            var e = this.get("statusName");
            return e ? I18n.t("type.status." + e) : ""
        }.property("statusName").cacheable(),
        statusClassName: Em.computed.fmt("statusName", "status_%@"),
        typeName: function () {
            return Zendesk.Ticket.Types[this.get("ticket_type_id") || Zendesk.Ticket.Types.TICKET]
        }.property("ticket_type_id").cacheable(),
        typeDisplayName: function () {
            return I18n.t("type.ticket." + this.get("typeName"))
        }.property("typeName").cacheable(),
        typeClassName: Em.computed.fmt("typeName", "type_%@"),
        priorityName: function () {
            return Zendesk.Ticket.Priorities[this.get("priority_id")]
        }.property("priority_id").cacheable(),
        priorityDisplayName: function () {
            var e = this.get("priorityName");
            return e === "-" ? e : I18n.t("type.priority." + e)
        }.property("priority_id").cacheable(),
        priorityClassName: Em.computed.fmt("priorityName", "priority_%@"),
        viaClass: function () {
            var e = this.get("via_id"),
                t = {
                    4: "mail",
                    23: "twitter",
                    26: "twitter",
                    30: "twitter",
                    29: "chat",
                    33: "voice_voicemail",
                    34: "voice_inbound",
                    35: "voice_outbound",
                    17: "feedback tab",
                    24: "topic",
                    38: "facebook",
                    41: "fb_private_message"
                };
            return t[e] || "web"
        }.property("via_id").cacheable(),
        selected: function (e, t) {
            return arguments.length === 2 && (t = t && !this.get("isClosed")), t
        }.property().cacheable()
    });
    var a = function (e) {
        var n = function (e) {
            var t = e.match(/tickets\/(\d+)\//);
            return t && t[1]
        }, r = function () {
                var t = n(this.get("url"));
                t && s.time("models/%@/%@/fetch".fmt(e, t))
            }, i = function () {
                var t = n(this.get("url"));
                t && s.timeEnd("models/%@/%@/fetch".fmt(e, t))
            };
        return Em.ResourceCollection.extend(t, {
            init: function () {
                return Ember.addListener(this, "willFetch", this, r), Ember.addListener(this, "didFetch", this, i), this._super()
            }
        })
    };
    Zendesk.Ticket = Em.Resource.define({
        url: "/api/v2/tickets",
        sideloads: ["permissions", "users", "groups", "organizations"],
        identityMapLimit: 20,
        errors: !1,
        schema: {
            id: Number,
            subject: String,
            description: String,
            priority_id: Number,
            problem_id: Number,
            status_id: Number,
            ticket_type_id: Number,
            via_id: Number,
            updated_by_type_id: Number,
            satisfaction_score: Number,
            assigned_at: Date,
            created_at: Date,
            due_date: {
                type: Date,
                path: "due_at"
            },
            initially_assigned_at: Date,
            solved_at: Date,
            status_updated_at: Date,
            updated_at: Date,
            requester_updated_at: Date,
            assignee_updated_at: Date,
            has_incidents: Boolean,
            permissions: Object,
            tags: Object,
            recipient: String,
            via_followup_source_id: Number,
            channel: Object,
            locale_id: Number,
            ticketFormId: {
                type: Number,
                path: "ticket_form_id"
            },
            requester: {
                type: "Zendesk.User",
                nested: !0
            },
            organization: {
                type: "models/organization",
                nested: !0
            },
            assignee: {
                type: "Zendesk.User",
                nested: !0
            },
            submitter: {
                type: "Zendesk.User",
                nested: !0
            },
            group: {
                type: require("models/group"),
                nested: !0
            },
            audits: {
                type: a("audits"),
                itemType: "Object",
                url: "/api/v2/tickets/%@/audits.json?include=users,organizations,groups,tickets,ticket_forms,sharing_agreements&sort_order=desc",
                parse: function (e) {
                    return this._super.call(this, e.audits, {
                        nextPage: e.next_page
                    }), require("models/audit_parser").parse(e)
                }
            },
            comments: {
                type: a("comments"),
                itemType: "Object",
                url: "/api/v2/tickets/%@/comments.json?include=users&sort_order=desc",
                parse: function (e) {
                    var t;
                    return this._super.call(this, e.comments, {
                        nextPage: e.next_page
                    }), t = require("models/audit_parser").parse(e, "comments"), f(t)
                }
            },
            last_comment: {
                type: i,
                nested: !0
            },
            collaborators: {
                type: Object,
                nested: !0
            }
        },
        parse: require("lib/ticket_parser").parse
    }).extend(Zendesk.TicketSharedProperties, require("lib/alter_ego"), require("models/ticket_collision_properties_mixin"), require("lib/settings_consumer"), require("lib/features").consumer, {
        init: function () {
            this.set("tags", this.get("tags") || []), this.set("collaborators", this.get("collaborators") || []);
            var e = n({
                isSortingEnabled: !1,
                relatedTicket: this
            });
            return this.set("incidentsFilter", e), this._super()
        },
        resourceName: "Ticket",
        type: Em.computed.alias("resourceName"),
        isDefaultPublicComment: function () {
            return this.get("userPermissions.makePublicComments") && this.get("settings.comments_public_by_default")
        }.property("userPermissions.makePublicComments").volatile(),
        setDefaultsForEditing: function () {
            if (this.get("isDestroyed")) return;
            var e = this.get("forEditingInstance");
            if (!e || !this.get("userPermissions")) return;
            var t = this.get("isDefaultPublicComment"),
                n = {
                    "comment.is_public": t || !1,
                    "comment.add_short_url": !1,
                    "comment.channel_back": this.get("viaClass") === "facebook" ? "1" : null,
                    "comment.twitter_channel_back": this.get("viaClass") === "twitter" ? "1" : null,
                    agreementIdToShare: null
                };
            _.each(n, function (t, n) {
                e.get(n) === undefined && e.set(n, t)
            })
        }.observes("isFetched"),
        eventsHref: Em.computed.fmt("href", "%@/events"),
        comment: function (e, t) {
            if (!t) return this.get("_comment") ? this.get("_comment") : (this.set("_comment", i.create({
                type: "Comment"
            })), this.get("_comment"));
            this.set("_comment", t)
        }.property("id", "newTicketId").volatile(),
        resetNewComment: function () {
            this.set("comment", i.create({
                type: "Comment"
            })), this.setDefaultsForEditing()
        },
        related: function () {
            var e = this.get("id");
            return e == null ? null : this.get("_related") ? this.get("_related") : (this.set("_related", require("models/ticket/related").create({
                ticket: this,
                ticketId: e
            })), this.get("_related"))
        }.property("id").volatile(),
        incidents: function () {
            if (this.get("hasIncidents")) return this.get("incidentsFilter.content")
        }.property("id", "hasIncidents", "isProblem", "incidentsFilter").cacheable(),
        incidentsTotal: function () {
            return this.get("hasIncidents") ? this.get("incidentsFilter.ticketCount") : null
        }.property("ticket.isProblem", "ticket.hasIncidents", "incidentsFilter.ticketCount").cacheable(),
        hasIncidents: function () {
            return this.get("id") ? this.get("has_incidents") && this.get("isProblem") : !1
        }.property("id", "has_incidents", "isProblem").cacheable(),
        problem: function () {
            var e = this.get("problem_id");
            return this.get("isIncident") && e ? Zendesk.Ticket.create({
                id: e
            }) : null
        }.property("ticket_type_id", "problem_id").volatile(),
        problemDidChange: function () {
            var e = this.get("problem");
            e && e.fetch()
        }.observes("problem"),
        incidentNotice: function () {
            var e = this.get("problem");
            if (e == null) return "";
            var t = Zendesk.Helpers.linkTo.urlFor(e),
                n = "#" + e.get("id");
            return I18n.t("txt.ticket.show.associated_problem.message", {
                associated_link: new Handlebars.SafeString('<a href="%@" tabindex="-1">%@</a>'.fmt(t, n))
            })
        }.property("problem.id").cacheable(),
        incidentsUrl: Em.computed.fmt("id", "#/tickets/%@/incidents"),
        requesterIsNotSubmitter: function () {
            return this.get("requester_id") === undefined ? !1 : this.get("requester_id") !== this.get("submitter_id")
        }.property("requester_id").cacheable(),
        agreementIdToShare: null,
        userPermissions: function () {
            return require("models/ticket_permissions").create({
                ticket: this
            })
        }.property(),
        primaryIdentityForChannel: function () {
            var e = this.get("requester.twitterIdentities.0");
            if (e) return e.get("data.screen_name")
        }.property("requester.twitterIdentities.@each").volatile(),
        monitoredTwitterHandle: Em.computed.oneWay("channel.monitored_twitter_account"),
        hasTicketForms: Em.computed.alias("features.hasTicketForms"),
        toJSON: function () {
            return require("models/ticket/serializer").serialize(this)
        },
        wasNew: !1,
        save: function () {
            var e = this.get("collaborators"),
                t = this.get("isNew");
            return this._super.apply(this, arguments).done(function (e) {
                return this.globalExpire(), this.set("wasNew", t), this.resetNewComment(), e
            }.bind(this)).fail(function () {
                this.get("isNew") && this.set("collaborators", e)
            }.bind(this))
        },
        destroy: function () {
            this.get("related") && this.get("related").destroy(), this.get("comment") && this.get("comment").destroy(), this.get("audits") && this.get("audits").destroy(), this.get("incidentsFilter") && this.get("incidentsFilter").destroy(), this.set("incidentsFilter", null), this._super()
        },
        destroyResource: function () {
            return this.globalExpire(), this._super()
        },
        destroyAllCopies: function () {
            this.expire();
            var e = this.get("serverCopy"),
                t = this.get("forEditing");
            e && e.destroy && e.destroy(), t && t.destroy && t.destroy()
        },
        globalExpire: function () {
            this.get("isDestroyed") || this.expire(), e.trigger("@ticket:expire", this)
        },
        expire: function () {
            if (this.get("isDestroyed")) return;
            this.expireNow(), this.get("problem") && this.get("problem").expireNow(), this.expireCollections()
        },
        fetchData: function () {
            return this.updateForEditing()
        },
        expireCollections: function () {
            _(this.get("collections")).invoke("expireNow")
        },
        collections: function () {
            var e = [];
            return _(this.constructor.schema).each(function (t, n) {
                t.get("type").isEmberResourceCollection && e.push(this.get(n))
            }, this), e
        }.property().cacheable(),
        toggleReply: function () {
            this.set("comment.is_public", !0)
        },
        toggleNote: function () {
            this.set("comment.is_public", !1)
        },
        isNotShared: function () {
            if (this.get("isNew")) return !0;
            var e = this.get("sharedWith");
            return _.isArray(e) && e.length === 0
        }.property("isNew", "sharedWith.length").cacheable(),
        sharedWith: function () {
            return this.get("related.shared")
        }.property("related.shared").cacheable(),
        setAssignee: function (e, t) {
            t === undefined && (t = null), this.setProperties({
                group_id: e,
                assignee_id: t
            })
        },
        dueDateChanged: function () {
            var e = this.get("dirtyAttributes");
            return e ? e.due_date !== undefined : !1
        }.property("dirtyAttributes").volatile(),
        canBeAddedToCalendar: function () {
            return !this.get("isNew") && this.get("serverCopy.due_date") != null && !this.get("dueDateChanged")
        }.property("isNew", "dueDateChanged", "serverCopy.due_date").cacheable(),
        twitterStatuses: function () {
            if (this.get("isNew") || this.get("viaClass") !== "twitter") return;
            return r.create({
                ticketId: this.get("id")
            })
        }.property("id", "viaClass").cacheable(),
        willFetch: function () {
            s.time("models/ticket/%@/fetch".fmt(this.get("id"))), this._super()
        },
        didFetch: function () {
            s.timeEnd("models/ticket/%@/fetch".fmt(this.get("id"))), this._super()
        }
    }), Zd.Ticket.reopen(require("models/ticket/new_ticket").PrototypeMixin).reopenClass(require("models/ticket/new_ticket").ClassMixin), Zendesk.IncidentTicket = Zendesk.Ticket.define({}), Zendesk.TicketCollection = Em.ResourceCollection.extend(require("lib/pagination"), {
        type: Zendesk.Ticket
    }), Zendesk.setupTicketSchema = function (e) {
        var t = {};
        e.get("custom").forEach(function (e) {
            var n;
            n = e.get("type"), t["custom_field_" + e.get("id")] = n === "checkbox" ? Boolean : String
        }), Zendesk.Ticket = Zendesk.Ticket.define({
            schema: t
        })
    }, Zendesk.Ticket.reopenClass(require("models/ticket/types"))
}(), this.require.define({
    "models/group_memberships": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = Em.ResourceCollection.extend({
                type: t("models/group_membership"),
                parse: function (e) {
                    return this._super(e.group_memberships)
                },
                "default": function () {
                    return this.findProperty("default", !0)
                }.property("@each.default").cacheable(),
                makeDefault: function (e) {
                    Em.Resource.ajax({
                        url: "/api/v2/users/%@/group_memberships/%@/make_default.json".fmt(e.get("user_id"), e.get("id")),
                        type: "PUT"
                    }).done(_(function (t) {
                        this.refresh(), r.trigger("@group_memberships:was_updated", e)
                    }).bind(this))
                }
            }).reopenClass({
                toString: function () {
                    return "GroupMemberships"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/organization_membership": function (e, t, n) {
        var r = Em.Resource.define({
            url: function (e) {
                return "/api/v2/users/%@/organization_memberships/%@".fmt(e.get("user_id"), e.get("id"))
            },
            schema: {
                id: Number,
                "default": Boolean,
                user: {
                    type: "Zendesk.User",
                    path: "user_id"
                },
                organization: {
                    type: "models/organization",
                    nested: !0
                }
            }
        }).extend({
            toJSON: function () {
                var e = {
                    user_id: this.get("user_id"),
                    organization_id: this.get("organization_id"),
                    "default": this.get("default")
                };
                return {
                    organization_membership: e
                }
            }
        }).reopenClass({
            toString: function () {
                return "OrganizationMembership"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/organization_memberships": function (e, t, n) {
        var r = t("lib/sideload_parser"),
            i = Em.ResourceCollection.extend({
                type: t("models/organization_membership"),
                itemType: t("models/organization_membership"),
                parse: function (e) {
                    var t = e.organization_memberships || [];
                    return r.extractSideloads(t, e, {
                        organization_id: "organizations"
                    }), t

                },
                "default": function () {
                    return this.findProperty("default", !0)
                }.property("@each.default").cacheable()
            }).reopenClass({
                toString: function () {
                    return "OrganizationMembershipCollection"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "models/user/identity": function (e, t, n) {
        var r = null,
            i = t("lib/lotus/global_events"),
            s = Em.Resource.define({
                url: function () {
                    return r.get("identities.url")
                },
                schema: {
                    id: Number,
                    created_at: Date,
                    primary: Boolean,
                    verified: Boolean,
                    updated_at: Date,
                    type: String,
                    value: String,
                    user: {
                        type: "Zendesk.User",
                        path: "user_id"
                    }
                }
            }).extend({
                resourceName: "Identity",
                resourceURL: function () {
                    return this.get("user.identities.url") + "/" + this.get("id")
                },
                toJSON: function () {
                    return {
                        identity: {
                            type: this.get("type"),
                            value: this.get("value"),
                            verified: this.get("verified")
                        }
                    }
                },
                verify: function () {
                    if (this.get("type") !== "email" && this.get("verified")) return;
                    return this.set("verified", !0), this.save()
                },
                save: function () {
                    return r = this.get("user"), this._super.apply(this, arguments).done(function () {
                        r.get("identities").expire(), Em.run.next(this, function () {
                            r.get("identities").fetch()
                        })
                    })
                },
                didSave: function () {
                    i.trigger("@identity:was_updated", this)
                },
                remove: function () {
                    return r = this.get("user"), this.destroyResource().done(function () {
                        r.get("identities").expire(), i.trigger("@identity:was_updated", this), Em.run.next(this, function () {
                            r.get("identities").fetch()
                        })
                    }.bind(this))
                },
                isEmailBased: function () {
                    return this.get("type") === "email" || this.get("type") === "google"
                }.property("type").cacheable()
            });
        n.exports = s
    }
}), this.require.define({
    "models/user/identity_collection": function (e, t, n) {
        var r = Em.ResourceCollection.extend({
            type: t("models/user/identity"),
            parse: function (e) {
                return this._super(e.identities || e)
            },
            hasDirectLine: function () {
                return this.get("phoneIdentities.length") > 0
            }.property("phoneIdentities.length").cacheable(),
            phoneIdentities: function () {
                return this.getIdentitiesOfType("phone_number")
            }.property("content.length").cacheable(),
            twitterIdentities: function () {
                return this.getIdentitiesOfType("twitter")
            }.property("content.length").cacheable(),
            getIdentitiesOfType: function (e) {
                var t = this.get("content") || [];
                return t.filterProperty("type", e)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/filter/ccd_filter_factory": function (e, t, n) {
        var r = t("models/filter"),
            i = t("models/filter/filter_resource"),
            s = t("models/filter/filter_preset_executor"),
            o = t("models/filter/filter_ticket_parser"),
            u = {
                id: null,
                active: !0,
                title: "Ccd",
                execution: {
                    columns: [{
                        id: "status"
                    }, {
                        id: "id"
                    }, {
                        id: "subject"
                    }, {
                        id: "requester"
                    }, {
                        id: "created_at"
                    }, {
                        id: "group"
                    }, {
                        id: "assignee"
                    }],
                    group: {
                        id: "status",
                        order: "asc"
                    },
                    sort: {
                        id: "created",
                        order: "desc"
                    }
                }
            }, a = s.extend({
                executeURL: function (e, t) {
                    var n = this.urlParams(e, t),
                        r = this.get("filter.relatedUserId");
                    return "/api/v2/users/%@/tickets/ccd.json?include=groups,users&%@".fmt(r, $.param(n))
                }
            }),
            f = function (e) {
                return e.tickets || []
            }, l = function (e) {
                return e = e || {}, e.executor = e.executor || a.create(), e.ticketParser = e.ticketParser || o.create({
                    getRows: f
                }), e.resource = e.resource || i.createFromDefinition(null, Em.copy(u, !0)), e.isSortingEnabled = !0, r.create(e)
            };
        n.exports = l
    }
}), this.require.define({
    "models/user_permissions": function (e, t, n) {
        var r = Em.Object.extend(t("lib/account_consumer"), {
            user: null,
            currentUser: null,
            globalPermissions: null,
            helpCenterSettings: Em.computed.alias("currentAccount.helpCenterSettings"),
            createPassword: Em.computed.bool("user.abilities.can_create_password"),
            changePassword: Em.computed.bool("user.abilities.can_change_password"),
            editAgentForwarding: Em.computed.bool("user.abilities.can_edit_agent_forwarding"),
            editPassword: Em.computed.bool("user.abilities.can_edit_password"),
            editProperties: Em.computed.bool("user.abilities.can_edit"),
            manageIdentities: Em.computed.bool("user.abilities.can_manage_identities_of"),
            sendVerificationEmail: Em.computed.bool("user.abilities.can_send_verification_email"),
            setAlias: Em.computed.bool("user.abilities.can_set_alias"),
            verifyNow: Em.computed.bool("user.abilities.can_verify_now"),
            modifyTags: Em.computed.bool("user.abilities.can_modify_user_tags"),
            canMakeCommentPrivate: Em.computed.bool("user.abilities.can_make_comment_private"),
            canAssume: Em.computed.bool("user.abilities.can_assume"),
            canViewReports: Em.computed.bool("user.abilities.can_view_reports"),
            viewAndManageAgentForwarding: function () {
                return this.get("yourProfile") ? this.get("globalPermissions.voiceAccess") : this.get("editAgentForwarding")
            }.property("globalPermissions.voiceAccess", "yourProfile", "editAgentForwarding").cacheable(),
            yourProfile: function () {
                return this.get("currentUser.id") === this.get("user.id")
            }.property("currentUser.id", "user.id").cacheable(),
            _canEditAndIsNotMe: function () {
                return this.get("editProperties") && !this.get("yourProfile")
            }.property("yourProfile", "editProperties").volatile(),
            _canEditRoleAndIsNotMe: function () {
                return this.get("currentUser.isAdmin") && this.get("_canEditAndIsNotMe")

            }.property("currentUser.isAdmin", "_canEditAndIsNotMe").volatile(),
            _canEditAccessAndIsNotMe: function () {
                return this.get("currentUser.isAgent") && this.get("_canEditAndIsNotMe")
            }.property("currentUser.isAgent", "_canEditAndIsNotMe").volatile(),
            _canAssumeUser: function () {
                return this.get("user.isEndUser") && this.get("canAssume")
            }.property("user.isEndUser", "canAssume").volatile(),
            _canResetPassword: function () {
                return this.get("user.abilities.can_reset_password") && !this.get("helpCenterSettings.hidePasswordReset")
            }.property("helpCenterSettings.hidePasswordReset", "user.abilities.can_reset_password").cacheable(),
            _canSetPassword: function () {
                return this.get("user.abilities.can_set_password") && !this.get("helpCenterSettings.hidePasswordSet")
            }.property("helpCenterSettings.hidePasswordSet", "user.abilities.can_set_password").cacheable(),
            notEditProperties: Em.computed.not("editProperties"),
            editOrganization: Em.computed.oneWay("editProperties"),
            editGroups: Em.computed.oneWay("editProperties"),
            deleteUser: Em.computed.oneWay("_canEditAndIsNotMe"),
            mergeUser: Em.computed.oneWay("_canEditAndIsNotMe"),
            suspendUser: Em.computed.oneWay("_canEditAndIsNotMe"),
            editRole: Em.computed.oneWay("_canEditRoleAndIsNotMe"),
            editAccess: Em.computed.oneWay("_canEditAccessAndIsNotMe"),
            setPassword: Em.computed.oneWay("_canSetPassword"),
            resetPassword: Em.computed.oneWay("_canResetPassword"),
            assumeUser: Em.computed.oneWay("_canAssumeUser")
        });
        r.reopenClass({
            toString: function () {
                return "UserPermissions"
            }
        }), n.exports = r
    }
}), this.require.define({
    "models/user/related": function (e, t, n) {
        n.exports = Em.Resource.define({
            url: function (e) {
                return "/api/v2/users/" + e.get("userId") + "/related.json"
            },
            schema: {
                requestedTickets: {
                    type: Number,
                    path: "user_related.requested_tickets"
                },
                ccdTickets: {
                    type: Number,
                    path: "user_related.ccd_tickets"
                },
                topics: {
                    type: Number,
                    path: "user_related.topics"
                },
                topicComments: {
                    type: Number,
                    path: "user_related.topic_comments"
                },
                votes: {
                    type: Number,
                    path: "user_related.votes"
                },
                subscriptions: {
                    type: Number,
                    path: "user_related.subscriptions"
                }
            }
        }).reopenClass({
            toString: function () {
                return "User-Related"
            }
        })
    }
}),
function () {
    var e = require("models/core_user"),
        t = require("models/group"),
        n = require("models/group_memberships"),
        r = require("models/user/identity_collection"),
        i = require("models/user/identity"),
        s = require("models/user_permissions"),
        o = require("lib/lotus/global_events"),
        u = e.define({
            schema: {
                suspended: Boolean,
                organization: {
                    type: require("models/organization")
                },
                groups: {
                    type: Em.ResourceCollection,
                    itemType: t,
                    url: "/api/v2/users/%@/groups",
                    parse: function (e) {
                        return this._super(e.groups || e)
                    }
                },
                identities: {
                    type: r,
                    url: "/api/v2/users/%@/identities"
                },
                abilities: Object,
                organizationMemberships: {
                    type: require("models/organization_memberships"),
                    url: "/api/v2/users/%@/organization_memberships?include=organizations"
                }
            },
            parse: function (e) {
                return e && e.abilities && e.abilities[0] && (e.user && (e.user.abilities = e.abilities[0]), delete e.abilities), e = this._super(e), e && e.hasOwnProperty("ticket_restriction") && e.ticket_restriction === null && (e.ticket_restriction = "agent_access_all"), e
            },
            url: "/api/v2/users",
            sideloads: ["abilities"]
        }).extend(require("lib/settings_consumer"), {
            resourceName: "User",
            type: Em.computed.alias("resourceName"),
            remoteExpiryKey: "users",
            assignableGroups: Em.computed.singleton("models/assignable_groups"),
            toJSON: function () {
                var e = this.get("email"),
                    t = {
                        name: this.get("name"),
                        locale_id: this.get("locale_id"),
                        notes: $.trim(this.get("notes") || ""),
                        details: $.trim(this.get("details") || ""),
                        organization_id: this.get("organization.id") || null,
                        time_zone: this.get("timeZoneName"),
                        phone: this.get("phone"),
                        role: this.get("role"),
                        moderator: this.get("moderator"),
                        signature: $.trim(this.get("signature") || ""),
                        alias: $.trim(this.get("alias") || ""),
                        ticket_restriction: this.get("ticket_restriction"),
                        only_private_comments: this.get("only_private_comments"),
                        tags: this.get("tags"),
                        suspended: this.get("suspended"),
                        custom_role_id: this.get("custom_role_id"),
                        external_id: this.get("external_id"),
                        user_fields: this.get("customFields")
                    };
                return e && (t.email = e), t.details === "-" && (t.details = ""), t.notes === "-" && (t.notes = ""), t.ticket_restriction === "agent_access_all" && (t.ticket_restriction = null), {
                    user: t
                }
            },
            href: function () {
                var e = this.get("id");
                return e ? "#/users/%@".fmt(e) : null
            }.property("id").cacheable(),
            assumeUrl: function () {
                var e = this.get("id");
                return e ? "/users/%@/assume".fmt(e) : null
            }.property("id").cacheable(),
            thumbnail: function () {
                var e = this.get("photo.thumbnails.firstObject.contentUrl");
                if (!e && !this.get("isFetched")) return "";
                if (e) return e;
                var t = new Zd.Gravatar(this.get("email"), "/images/types/user_sm.png");
                return t.url()
            }.property("photo.thumbnails.firstObject.contentUrl", "isFetched").volatile(),
            isNotOrganizationRestricted: function () {
                return this.get("ticket_restriction") !== "organization" || this.get("isAdmin")
            }.property("ticket_restriction", "isAdmin").volatile(),
            setRole: function (e) {
                Ember.propertyWillChange(this, "getRole"), ["end-user", "agent", "admin"].indexOf(e) > -1 ? (this.set("role", e), this.set("custom_role_id", null)) : typeof e == "number" && (this.set("custom_role_id", e), this.set("role", "agent")), Ember.propertyDidChange(this, "getRole")
            },
            getRole: function () {
                return this.get("role") == "admin" || this.get("role") == "end-user" ? this.get("role") : this.get("custom_role_id") || this.get("role")
            }.property("role", "custom_role_id").cacheable(),
            hasOrganization: function () {
                return !!this.get("organization")
            }.property("organization").cacheable(),
            hasLanguageSelection: function () {
                return this.get("isAgent") || this.get("settings.hasIndividualLanguageSelection")
            }.property("isAgent", "settings.hasIndividualLanguageSelection").cacheable(),
            emailDomain: function () {
                var e = this.get("email");
                return e ? e.replace(/.*@/, "") : !1
            }.property("email").cacheable(),
            mainIdentity: function () {
                return this.get("email") ? "<%@>".fmt(this.get("email")) : ""
            }.property("email").cacheable(),
            firstName: function () {
                var e = this.get("name");
                return typeof e != "string" ? "" : _.first(_.last(e.split(",")).trim().split(" ")).trim()
            }.property("name").cacheable(),
            uses_12_hour_clock: function () {
                var e = require("lib/current_account");
                return e.get("uses12HourClock")
            }.property("id").cacheable(),
            groups: function () {
                var e = this.get("id");
                return e == null ? null : Em.ResourceCollection.create({
                    type: t,
                    url: "/api/v2/users/%@/groups".fmt(e),
                    parse: function (e) {
                        return this._super(e.groups || e)
                    }
                })
            }.property("id").cacheable(),
            group_memberships: function () {
                var e = this.get("id");
                return e ==
                    null ? null : n.create({
                        url: "/api/v2/users/%@/group_memberships".fmt(e)
                    })
            }.property("id").cacheable(),
            refreshGroups: function () {
                return this.get("groups").refresh()
            },
            isAssignable: function () {
                return this.get("assignableGroups").hasAgentId(this.get("id"))
            }.property("id", "assignableGroups.agents.@each").cacheable(),
            isLightAgent: function () {
                return this.get("custom_role.name") === "Light Agent"
            }.property("custom_role.name").cacheable(),
            isAccountOwner: function () {
                var e = require("lib/current_account");
                return this.get("id") == e.get("owner.id")
            }.property("id").cacheable(),
            assignTo: function (e) {
                var t = this.get("group_memberships");
                t.fetch().done(_(function (n) {
                    if (t.findProperty("group_id", e.get("group_id"))) return e.setProperties({
                        assignee_id: this.get("id")
                    }), !0;
                    var r = t.get("default.group_id");
                    if (!r) {
                        r = t.get("content")[0];
                        if (!r) return !0;
                        r = r.get("group_id")
                    }
                    e.setProperties({
                        group_id: r,
                        assignee_id: this.get("id")
                    })
                }).bind(this))
            },
            identities: function () {
                var e = this.get("id");
                return e == null ? null : Em.ResourceCollection.create({
                    type: i,
                    url: "/api/v2beta/users/%@/identities".fmt(e)
                })
            }.property("id").cacheable(),
            emailIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "email")
            }.property("identities.@each").cacheable(),
            phoneIdentitiesBinding: "identities.phoneIdentities",
            hasDirectLineBinding: Ember.Binding.oneWay("identities.hasDirectLine"),
            hasPhoneNumber: function () {
                return !Em.empty(this.get("phone")) || this.get("phoneIdentities.length") > 0
            }.property("phone", "phoneIdentities.length").cacheable(),
            googleIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "google")
            }.property("identities.@each").cacheable(),
            twitterIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "twitter")
            }.property("identities.@each").cacheable(),
            facebookIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "facebook")
            }.property("identities.@each").cacheable(),
            openIdIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "openid")
            }.property("identities.@each").cacheable(),
            agentForwardingIdentities: function () {
                var e = this.get("identities") || [];
                return e.filterProperty("type", "agent_forwarding")
            }.property("identities.@each").cacheable(),
            userPermissions: function () {
                return s.create({
                    user: this,
                    currentUser: Zd.currentUser
                })
            }.property("abilities", "id").cacheable(),
            canCreateOrganization: function () {
                if (this.get("isAdmin")) return !0;
                var e = this.get("custom_role");
                return e ? e.canCreateOrganization() : !1
            }.property("id", "role").volatile(),
            canCreateUser: function () {
                return Zd.get("globalPermissions.userEditing")
            }.property("id").volatile(),
            collections: function () {
                var e = [];
                return _(this.constructor.schema).each(function (t, n) {
                    t.get("type").isEmberResourceCollection && e.push(this.get(n))
                }, this), e
            }.property().cacheable(),
            didSave: function (e) {
                if (e && e.created) return;
                o.trigger("@user:was_updated", this)
            },
            expire: function () {
                this._super(), this.expireCollections(), o.trigger("@user:expire", this)
            },
            expireCollections: function () {
                _(this.get("collections")).invoke("expire")
            },
            destroyResource: function () {
                return this.expire(), this._super()
            },
            related: function () {
                var e = this.get("id");
                return e == null ? null : require("models/user/related").create({
                    id: e,
                    userId: e
                })
            }.property("id").cacheable(),
            organizations: function () {
                var e = this.get("organizationMemberships");
                return e ? e.mapProperty("organization") : []
            }.property("organizationMemberships.@each").cacheable(),
            defaultOrganization: Em.computed.oneWay("organizationMemberships.default.organization")
        });
    Zd.User = u.define({
        schema: {
            custom_role: {
                type: require("models/custom_role")
            }
        }
    }), Zd.systemUser = Ember.Object.create({
        id: -1,
        name: "Zendesk",
        role: "admin",
        photo: {
            content_url: "/images/zd_user.png"
        }
    }), Zd.CurrentUser = u.define({
        schema: {
            custom_role: {
                type: "models/custom_role",
                nested: !0
            }
        },
        sideloads: "abilities roles".w(),
        parse: function (e) {
            return e && e.user && e.roles && e.roles[0] && (e.user.custom_role = e.roles[0], delete e.roles), this._super(e)
        }
    }).reopen({
        populateWithSessionData: function (e) {
            this.updateWithApiData(e), this.set("resourceState", Ember.Resource.Lifecycle.FETCHED)
        }
    }), Zendesk.set("currentUser", Zd.CurrentUser.create())
}(), this.require.define({
    "models/global_permissions": function (e, t, n) {
        var r = t("lib/account_consumer"),
            i = t("lib/settings_consumer"),
            s = Em.Object.extend(r, i, {
                user: null,
                permissionFlags: Em.computed.oneWay("user.custom_role.configuration"),
                chatAccess: Em.computed.oneWay("permissionFlags.chat_access"),
                voiceAccess: Em.computed.oneWay("permissionFlags.voice_access"),
                expirableSettings: Em.computed.oneWay("currentAccount.expirableSettings"),
                organizationEditing: Em.computed.bool("permissionFlags.organization_editing"),
                organizationNotes: Em.computed.oneWay("permissionFlags.organization_notes_editing"),
                userEditing: Em.computed.notEqual("permissionFlags.end_user_profile_access", "readonly"),
                userListing: Em.computed.notEqual("permissionFlags.end_user_list_access", "none"),
                manageExtensionsAndChannels: Em.computed.bool("permissionFlags.manage_extensions_and_channels"),
                manageBusinessRules: Em.computed.bool("permissionFlags.manage_business_rules"),
                manageDynamicContent: Em.computed.bool("permissionFlags.manage_dynamic_content"),
                manageMacros: Em.computed.notEqual("permissionFlags.macro_access", "readonly"),
                manageViews: Em.computed.notEqual("permissionFlags.view_access", "readonly"),
                manageSharedUserViews: Em.computed.equal("permissionFlags.user_view_access", "full"),
                manageUserViews: Em.computed.notEqual("permissionFlags.user_view_access", "readonly"),
                showUserViews: Em.computed.notEqual("permissionFlags.user_view_access", "none"),
                manageTicketForms: Em.computed.equal("user.isAdmin", !0),
                manageSubscription: Em.computed.equal("user.isAccountOwner", !0),
                manageWebPortal: Em.computed.equal("currentAccount.helpCenterSettings.webPortalEnabled", !0),
                moderateForums: Em.computed.equal("permissionFlags.moderate_forums", !0),
                manageSubscriptionReadOnly: function () {
                    return this.get("user.isAdmin") || this.get("user.isAccountOwner")
                }.property("user.isAdmin", "user.isAccountOwner").cacheable(),
                chatEnabled: function () {
                    return this._channelEnabled("chat")
                }.property("expirableSettings.has_chat_enabled", "user.isLightAgent", "chatAccess").cacheable(),
                voiceEnabled: function () {
                    return this._channelEnabled("voice")
                }.property("expirableSettings.has_voice_enabled", "user.isLightAgent", "voiceAccess").cacheable(),
                _channelEnabled: function (e) {
                    var t = this.get("expirableSettings.has_" + e + "_enabled"),
                        n = this.get("user.isLightAgent"),
                        r = this.get(e + "Access");
                    return !!(t && !n && r)
                }
            });
        n.exports = s
    }
}),
function (e) {
    var t = require("models/user_permissions"),
        n = require("models/global_permissions"),
        r = n.create({
            user: Zd.get("currentUser")
        });
    Zd.set("globalPermissions", r), t.reopen({
        globalPermissions: r
    })
}(this), this.require.define({
    "controllers/voice/voice_ui_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/views/view_registrar_mixin"), {}).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "VoiceUIController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/voice/voice_controller": function (e, t, n) {
        var r = t("lib/account_consumer"),
            i = Minilog("voice-controller"),
            s = t("lib/voice/capability_token").instance(),
            o = t("lib/voice/twilio_connection").instance(),
            u = t("lib/voice/voice_initializer"),
            a = t("lib/voice/availability").instance(),
            f = t("lib/voice/integration").instance(),
            l = t("lib/voice/webrtc").instance(),
            c = t("models/voice/poller").instance(),
            h = t("lib/features"),
            p = t("lib/back_off"),
            d = t("controllers/voice/voice_ui_controller").instance(),
            v = t("lib/growl"),
            m = t("lib/voice/state").instance(),
            v = t("lib/growl"),
            g = new u,
            y = function () {
                this.subscribeToAvailability(), this.subscribeToSplitAvailability(), this.subscribeToCallStatus(), this.subscribeToNotifications()
            }, b = Em.Object.extend(r, {
                voiceUIController: d,
                voiceIcon: Em.computed.oneWay("voiceUIController.views.voiceIcon"),
                callTimerView: Em.computed.oneWay("voiceUIController.views.callTimer"),
                voiceState: m,
                isConnecting: Em.computed.bool("voiceState.isConnecting"),
                voiceCallStateManager: Em.computed.singleton("states/voice_call"),
                onVoiceEnabled: function () {
                    var e = this.get("voiceState.hasVoiceEnabled");
                    e && g.once(y, this), i.info({
                        short_message: "hasVoiceEnabled",
                        _value: e
                    })
                }.observes("voiceState.hasVoiceEnabled"),
                subscribeToAvailability: function () {
                    var e = this;
                    RadarClient.alloc("voice_availability", function () {
                        RadarClient.status("voice_availability/" + e.get("currentAccount.subdomain")).get(e.availabilityGetCallback).on(e.availabilityOnCallback).subscribe()
                    })
                },
                availabilityGetCallback: function (e) {
                    if (!e || !e.value) return;
                    var t = e.value && e.value[this.get("voiceState.currentUser.id")];
                    if (!t) return;
                    var n = t || "off";
                    m.set("availability", n)
                },
                availabilityOnCallback: function (e) {
                    if (!e || !e.value) return;
                    var t = parseInt(e.key, 10);
                    t === m.get("currentUser.id") && m.set("availability", e.value)
                },
                subscribeToSplitAvailability: function () {
                    var e = this;
                    RadarClient.alloc("voice_split_availability", function () {
                        RadarClient.status("voice_split_availability/" + e.get("currentAccount.subdomain")).on(e.splitAvailabilityOnCallback).subscribe()
                    })
                },
                splitAvailabilityOnCallback: function (e) {
                    if (!e || !e.value) return;
                    var t = parseInt(e.key, 10);
                    t === m.get("currentUser.id") && (e = e.value, a.is(e.via, e.is_available))
                },
                subscribeToCallStatus: function () {
                    RadarClient.alloc("voice_call_console").once("ready", function () {
                        RadarClient.status("call_console/" + m.get("currentUser.id")).on(function (e) {
                            e = e.value;
                            var t = e.name,
                                n = e.data,
                                r = m.get("currentCall.id");
                            if (_.isUndefined(t)) {
                                i.info({
                                    short_message: "voice_call_console:undefined"
                                });
                                return
                            }
                            r != n.id && (i.info({
                                short_message: "voice_call_console:different",
                                _prev: r,
                                _next: n.id
                            }), m.set("currentCall", null), m.get("voiceResource").resetLastCall()), m.get("voiceResource").updateCall(n)
                        }).subscribe()
                    })
                },
                subscribeToNotifications: function () {
                    RadarClient.alloc("voice_notifications").once("ready", function () {
                        RadarClient.status("voice/notifications/" + m.get("currentUser.id")).on(function (e) {
                            v[e.value.type](e.value.message)
                        }).subscribe()
                    })
                },
                toggleAvailability: function () {
                    a.toggle().sync(), this.promptMicAccess({
                        hasVoiceWebRTC: h.hasFeature("voiceWebRTC")
                    })
                },
                promptMicAccess: function (e) {
                    e = e || {};
                    var t = a.isAvailable();
                    t && e.hasVoiceWebRTC && l.isEnabled() && l.promptMicAccess(Em.K, Em.K)
                },
                toggleMute: function () {
                    m.set("callConsoleMuted", !m.get("callConsoleMuted")), this.syncMuteButton()
                },
                syncMuteButton: function () {
                    var e = o.get("connection");
                    e && (m.get("callConsoleMuted") ? e.mute() : e.unmute())
                },
                getTwilioSource: function (e) {
                    e = e || {};
                    var t = e.hasVoiceWebRTC ? l.TWILIO_CLIENT_VERSION : "1.0";
                    return "//static.twilio.com/libs/twiliojs/%@/twilio.min.js".fmt(t)
                },
                setup: function () {
                    this.onVoiceEnabled();
                    if (!this.get("voiceState.hasVoiceEnabled")) return;
                    var e = this;
                    if (m.get("twilioSetUp") || !this.get("voiceState.clientCapabilityToken")) return;
                    _.delay(function () {
                        var t = e.getTwilioSource({
                            hasVoiceWebRTC: h.hasFeature("voiceWebRTC")
                        });
                        $.getScript(t, function (t, n, r) {
                            n === "success" ? (e.hookUp(), m.set("twilioSetUp", !0)) : (i.error({
                                short_message: "error:ec10"
                            }), v.error(I18n.t("txt.voice.error.ec10")))
                        }), $(window).unload(function () {
                            window.voiceUnloading = !0
                        })
                    }, 100)
                }.observes("voiceState.clientCapabilityToken", "voiceState.hasVoiceEnabled", "currentAccount.deployments.voiceWebRTC"),
                hookUp: function () {
                    i.info({
                        short_message: "twilio:hookUp"
                    }), Twilio.Device.incoming(this.incoming.bind(this)), Twilio.Device.connect(this.connect.bind(this)), Twilio.Device.disconnect(this.disconnect.bind(this)), Twilio.Device.cancel(this.cancel.bind(this)), Twilio.Device.offline(this.onlyClient(this.offline)), Twilio.Device.error(this.onlyClient(this.error)), this.initializeTwilioDevice()
                },
                initializeTwilioDevice: function () {
                    $("#__soundFlash__").css("visibility", "hidden"), i.info({
                        short_message: "twilio:initialize"
                    });
                    var e = this;
                    Em.run.next(this, function () {
                        window.WebSocket && !window.WebSocket.__flash && window.WebSocket.__initialize && WebSocket.__initialize(), $("#__soundFlash__").css("visibility", "hidden"), this.catchFlash(function () {
                            e.twilioDeviceSetup()
                        });
                        var t = p.create({
                            delayList: [1, 2, 4, 8],
                            check: function () {
                                return Twilio.MediaStream && Twilio.MediaStream.initialized
                            }
                        });
                        t.run().done(function () {
                            Twilio.MediaStream.__queue(function () {
                                $("#__soundFlash__").css("visibility", "hidden"), $("#__connectionFlash__").next("button").addClass("btn small")
                            })
                        }).fail(function () {
                            e.catchFlash(function () {
                                e.twilioDeviceSetup()
                            })
                        })
                    })
                },
                twilioDeviceSetup: function (e) {
                    e || (e = m.get("clientCapabilityToken"));
                    var t = m.get("logging");
                    i.info({
                        short_message: "twilio:setup",
                        _token: e,
                        _debug: t
                    }), Twilio.Device.setup(e, {
                        debug: t
                    })
                },
                incoming: function (e) {
                    i.info({
                        short_message: "twilio:incoming",
                        conn: e.parameters
                    }), o.set("connection", e), this.hasPollerEnabled() && (c.poll.resetBackoff(), h.hasFeature("voiceQueuedCalls") || m.set("currentCall", null), c.poll({
                        outgoing_sid: e.parameters.CallSid,
                        sid: e.parameters.CallSid
                    })), e.error(function (t) {
                        i.error({
                            short_message: "twilio:error2",
                            conn: e.parameters,
                            message: t.message,
                            code: t.code
                        })
                    }), m.get("dialing") && (i.info({
                        short_message: "twilio:incoming:dialing",
                        conn: e.parameters
                    }), Em.run.next(this, this.accept))
                },
                connect: function (e) {
                    this.logCall("twilio:connect", e)
                },
                checkForCurrentConnectionBackoff: function (e) {
                    this.logCall("checkForCurrentConnectionBackoff");
                    var t = p.create({
                        delayList: [0, 1, 2, 4, 8, 16, 32],
                        check: _(function (e) {
                            return e.get("connection") ? !0 : !1
                        }).bind(this, e)
                    });
                    t.run().done(_(function (e) {
                        m.set("checkingForConnection", !1), this.accept()
                    }).bind(this, e)).fail(_(function () {
                        m.set("checkingForConnection", !1), m.resetDialer(), this.logCall("checkAndSetConn:failed-after-many-attempts")
                    }).bind(this))
                },
                checkForCurrentConnection: function (e) {
                    m.get("checkingForConnection") || (m.set("checkingForConnection", !0), this.checkForCurrentConnectionBackoff(e))
                },
                accept: function () {
                    this.logCall("accept");
                    var e = m.get("currentCall");
                    if (this.get("onTwilioClient")) {
                        var t = o.get("connection");
                        if (!t) {
                            this.checkForCurrentConnection(o);
                            return
                        }
                        this.blockActions(I18n.t("txt.voice.console.messages.connecting")), i.info({
                            short_message: "accept:client:conn",
                            conn: t.parameters
                        }), t.accept()
                    } else this.blockActions(I18n.t("txt.voice.console.messages.connecting")), i.info({
                        short_message: "accept:phone",
                        _call_id: e.get("id"),
                        _status: e.get("status")
                    }), e.get("status") === "routing" && e.fire("agent_accepts")
                },
                sendDigits: function (e) {
                    var t = o.get("connection");
                    t && (e = e.replace(/[^#*0-9]/g, ""), e && t.sendDigits(e))
                },
                decline: function () {
                    this.logCall("decline");
                    var e = m.get("currentCall");
                    if (this.get("onTwilioClient")) {
                        var t = o.get("connection");
                        t ? (i.info({
                            short_message: "decline:client:conn",
                            conn: t.parameters
                        }), t.disconnect(), e.fire("agent_declines"), m.set("ignoreMissedCallMessaging", !0)) : i.error({
                            short_message: "decline:client:no-conn"
                        })
                    } else i.info({
                        short_message: "decline:phone",
                        _call_id: e.get("id"),
                        _status: e.get("status")
                    }), e.get("status") === "routing" && (e.fire("agent_declines"), this.get("voiceCallStateManager").goToState("cancelled"), this.get("voiceIcon.status").goToState("cancelled"))
                },
                hang_up: function () {
                    this.logCall("hang_up"), m.set("callConsoleVisible", !1), this.blockActions(I18n.t("txt.voice.console.messages.ending"));
                    var e = o.get("connection"),
                        t = m.get("currentCall");
                    _.contains(["outbound_initial", "agent_leg"], t.get("status")) && m.resetDialer(), t.get("outbound") && (t.fire("agent_hangs_up"), m.set("ignoreMissedCallMessaging", !0)), this.get("onTwilioClient") && e ? (i.info({
                        short_message: "hang_up:client:conn",
                        conn: e.parameters
                    }), e.reject(), e.disconnect(), t.fire("agent_hangs_up")) : (i.info({
                        short_message: "decline",
                        status: t.get("status")
                    }), !t.get("outbound") && t.get("status") === "in_conference" && (t.fire("agent_end_call"), this.get("voiceCallStateManager").goToState("cancelled"), this.get("voiceIcon.status").goToState("cancelled")))
                },
                finish: function () {
                    this.logCall("finish"), m.set("ticketConsoleVisible", !1), m.set("waitingMessage", I18n.t("txt.voice.console.messages.wrapping_up")), m.resetDialer();
                    var e = m.get("currentCall");
                    e.fire("finish")
                },
                blockActions: function (e) {
                    m.set("waitingMessage", e), this.get("callTimerView").goToState("messaging")
                },
                disconnect: function (e) {
                    this.logCall("twilio:disconnect", e), o.unset(), this.hasPollerEnabled() && (c.poll.resetBackoff(), c.poll())
                },
                cancel: function (e) {
                    this.logCall("twilio:cancel", e), o.unset()
                },
                logCall: function (e, t) {
                    var n = m.get("currentCall"),
                        r = {
                            short_message: e
                        };
                    n && (r._call_id = n.get("id"), r._status = n.get("status")), t && (r.conn = t.parameters), i.info(r)
                },
                offline: function (e) {
                    i.error({
                        short_message: "twilio:offline",
                        _status: e._status,
                        _token: e.token
                    });
                    if (!a.isAvailable() || m.get("checkingOffline")) return;
                    var t = this,
                        n = p.create({
                            delayList: [2, 4, 8, 16],
                            check: function () {
                                return Twilio.Device.status() !== "ready" ? (t.initializeTwilioDevice(), !1) : !0
                            }
                        });
                    n.run().fail(function () {
                        t.knockOfflineIfNotUnloading()
                    }).always(function () {
                        m.set("checkingOffline", !1)
                    }), m.set("checkingOffline", !0)
                },
                knockOfflineIfNotUnloading: function () {
                    var e = p.create({
                        delayList: [1, 2, 3],
                        check: function () {
                            return window.voiceUnloading
                        }
                    }),
                        t = this;
                    e.run().fail(function () {
                        t.notAvailable("offline"), this.get("voiceCallStateManager").goToState("cancelled"), this.get("voiceIcon.status").goToState("cancelled"), i.error({
                            short_message: "error:ec1"
                        }), v.error(I18n.t("txt.voice.error.ec1"))
                    })
                },
                error: function (e) {
                    i.error({
                        short_message: "twilio:error",
                        message: e.message,
                        code: e.code
                    }), m.set("dialing", !1), e.message === "No microphone is available" ? (i.error({
                        short_message: "error:ec2"
                    }), v.error(I18n.t("txt.voice.error.ec2")), this.notAvailable("error-ec2")) : e.message === "This AccessToken is no longer valid" ? (i.error({
                        short_message: "error:access_token"
                    }), this.refreshCapabilityToken()) : (i.error({
                        short_message: "error:ec3"
                    }), v.error(I18n.t("txt.voice.error.ec3")), this.notAvailable("error-ec3"))
                },
                onlyClient: function (e) {
                    return function () {
                        if (this.get("onTwilioClient") || o.get("isConnected")) {
                            var t = Array.prototype.slice.call(arguments);
                            e && e.apply(this, t)
                        }
                    }.bind(this)
                },
                refreshCapabilityToken: function () {
                    if (m.get("refreshing")) return;
                    if (m.get("invalidTokenCount") >= 5) {
                        i.info({
                            short_message: "twilio:error:ec13"
                        }), this.notAvailable("error-token"), v.error(I18n.t("txt.voice.error.ec13"));
                        return
                    }
                    m.set("refreshing", !0), m.set("invalidTokenCount", m.get("invalidTokenCount") + 1), i.debug({
                        short_message: "refreshCapabilityToken",
                        count: m.get("invalidTokenCount")
                    });
                    var e = this;
                    s.fetch(function (t) {
                        e.swapCapabilityToken(m.get("clientCapabilityToken"), t)
                    })
                },
                swapCapabilityToken: function (e, t) {
                    var n = this;
                    if (e != t) {
                        n.twilioDeviceSetup(t);
                        var r = p.create({
                            delayList: [1, 1],
                            check: function () {
                                return Twilio.Device.status() === "ready"
                            }
                        });
                        r.run().done(function () {
                            m.set("refreshing", !1)
                        }).fail(function () {
                            m.set("refreshing", !1)
                        })
                    } else i.info({
                        short_message: "refreshCapabilityToken:stale",
                        count: m.get("invalidTokenCount"),
                        token: t
                    }), m.set("refreshing", !1)
                },
                goToCaller: function () {
                    var e = m.get("currentCall.caller.href");
                    e && Zendesk.Routes.goToHash(e)
                },
                goToOrganization: function () {
                    var e = m.get("currentCall.organization.href");
                    e && Zendesk.Routes.goToHash(e)
                },
                goToCurrentTicket: function () {
                    var e = m.get("currentCall.ticket");
                    this.goToTicket(e)
                },
                goToTicket: function (e) {
                    if (e) {
                        var t = e.get("href");
                        if (!t) return;
                        Zendesk.Routes.goToHash(t)
                    }
                },
                safeIsMicMuted: function (e) {
                    try {
                        return window.Twilio && Twilio.MediaStream && Twilio.MediaStream.initialized && Twilio.MediaStream.isMicMuted()
                    } catch (t) {
                        return e && (i.error({
                            short_message: "error:ec7"
                        }), v.error(I18n.t("txt.voice.error.ec7"))), !0
                    }
                },
                catchFlash: function (e) {
                    try {
                        e.call(this)
                    } catch (t) {
                        throw t.message && t.message.match("Flash") && (this.set("flashBroken", !0), i.error({
                            short_message: "error:ec8"
                        }), v.error(I18n.t("txt.voice.error.ec8", {
                            error: t.message
                        }), {
                            sticky: !1,
                            life: 7e3
                        })), t
                    }
                },
                showSettings: function () {
                    this.showMicSettings({
                        hasVoiceWebRTC: h.hasFeature("voiceWebRTC")
                    })
                },
                showMicSettings: function (e) {
                    e = e || {}, e.hasVoiceWebRTC && l.isEnabled() ? l.showSettings() : this.triggerFlashPermissions(!0)
                },
                triggerFlashPermissions: function (e) {
                    var t = this;
                    t.catchFlash(function () {
                        if (t.safeIsMicMuted(!0) || e) {
                            var n = p.create({
                                delayList: [0, 1, 1.5],
                                check: function () {
                                    return window.Twilio && Twilio.MediaStream && Twilio.MediaStream.initialized
                                }
                            });
                            n.run().done(function () {
                                Twilio.MediaStream.__queue(function () {
                                    Twilio.Device.instance.showSettings(function () {
                                        t.safeIsMicMuted(!1) && t.get("onTwilioClient") && (i.error({
                                            short_message: "error:ec9"
                                        }), t.notAvailable("microphone"), v.error(I18n.t("txt.voice.error.ec9")))
                                    })
                                })
                            }).fail(function () {
                                t.get("flashBroken") ? (i.error({
                                    short_message: "error:ec11"
                                }), v.error(I18n.t("txt.voice.error.ec11"))) : (i.error({
                                    short_message: "error:ec12"
                                }), v.error(I18n.t("txt.voice.error.ec12")))
                            })
                        }
                    })
                },
                reinitializeTwilioDevice: function () {
                    this.initializeFlashSettings({
                        hasVoiceWebRTC: h.hasFeature("voiceWebRTC")
                    }), window.Twilio && Twilio.Device && Twilio.Device.instance && Twilio.Device.status() !== "ready" && this.initializeTwilioDevice()
                },
                initializeFlashSettings: function (e) {
                    e = e || {};
                    if (e.hasVoiceWebRTC) return;
                    var t = this,
                        n = p.create({
                            delayList: [1, 2, 4, 8],
                            check: function () {
                                return window.Twilio && Twilio.MediaStream && Twilio.MediaStream.initialized
                            }
                        });
                    n.run().done(function () {
                        Twilio.MediaStream.__queue(function () {
                            t.triggerFlashPermissions()
                        })
                    }).fail(function () {
                        i.error({
                            short_message: "error:ec6"
                        }), t.notAvailable("twilio-mediastream"), v.error(I18n.t("txt.voice.error.ec6"))
                    })
                },
                availableViaBrowser: function () {
                    var e = this;
                    a.via("client").sync().done(function (t) {
                        t.available === "client" && e.reinitializeTwilioDevice()
                    })
                },
                availableViaPhone: function () {
                    a.via("phone").sync()
                },
                notAvailable: function (e) {
                    a.off().sync()
                },
                hasPollerEnabled: function () {
                    return !h.hasFeature("voiceDisablePoller")
                },
                onTwilioClient: function () {
                    return a.getVia() === "client"
                }.property().volatile(),
                twilioConnection: o,
                canMute: function () {
                    return m.get("currentCall.outgoing_kind") === "client" && o.get("isConnected")
                }.property("voiceState.currentCall.outgoing_kind", "twilioConnection.connection").volatile(),
                cannotMute: Em.computed.not("canMute"),
                isMuted: Em.computed.oneWay("voiceState.callConsoleMuted")
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "VoiceController"
                }
            }),
            w = function () {
                var e = a.availability();
                m.set("availability", e), m.set("via", a.getVia()), e === "client" && b.instance().reinitializeTwilioDevice()
            };
        a.change(w), n.exports = b
    }
}), this.require.define({
    "lib/user_assume/voice_extension": function (e, t, n) {
        n.exports = Em.Object.extend({
            voiceService: null,
            voiceController: t("controllers/voice/voice_controller").instance(),
            hasVoiceEnabled: Em.computed.oneWay("voiceController.voiceState.hasVoiceEnabled"),
            previousAvailablity: !1,
            isActive: function () {
                return this.get("voiceController.voiceState.activeCall")
            },
            detach: function () {
                this.get("hasVoiceEnabled") && this._isVoiceAvailable() && (this.set("previousAvailablity", !0), this._toggleVoiceAvailability())
            },
            reattach: function () {
                this.get("previousAvailablity") && (this._toggleVoiceAvailability(), this.set("previousAvailablity", !1))
            },
            _isVoiceAvailable: function () {
                return this.get("voiceService.available")
            },
            _toggleVoiceAvailability: function () {
                this.get("voiceController").toggleAvailability()
            }
        })
    }
}), this.require.define({
    "lib/user_tech_metrics": function (e, t, n) {
        var r = {
            browser: function () {
                var e = this._searchString(this.dataBrowser);
                return e == "IE" && (e = "IE-%@".fmt(this.browserVersion())), e || "other"
            },
            browserVersion: function () {
                return this._searchVersion(navigator.userAgent) || this._searchVersion(navigator.appVersion) || "unknown"
            },
            operatingSystem: function () {
                return this._searchString(this.dataOS) || "other"
            },
            screenResolution: function () {
                return "%@x%@".fmt(window.screen.availWidth, window.screen.availHeight)
            },
            _searchString: function (e) {
                for (var t = 0; t < e.length; t++) {
                    var n = e[t].string,
                        r = e[t].prop;
                    this.versionSearchString = e[t].versionSearch || e[t].identity;
                    if (n && n.indexOf(e[t].subString) != -1) return e[t].identity;
                    if (r) return e[t].identity
                }
            },
            _searchVersion: function (e) {
                var t = e.indexOf(this.versionSearchString);
                if (t == -1) return;
                return parseFloat(e.substring(t + this.versionSearchString.length + 1))
            },
            dataBrowser: [{
                string: navigator.userAgent,
                subString: "Chrome",
                identity: "chrome"
            }, {
                string: navigator.vendor,
                subString: "Apple",
                identity: "safari",
                versionSearch: "Version"
            }, {
                prop: window.opera,
                identity: "opera",
                versionSearch: "Version"
            }, {
                string: navigator.userAgent,
                subString: "Firefox",
                identity: "firefox"
            }, {
                string: navigator.userAgent,
                subString: "MSIE",
                identity: "ie",
                versionSearch: "MSIE"
            }],
            dataOS: [{
                string: navigator.platform,
                subString: "Win",
                identity: "windows"
            }, {
                string: navigator.platform,
                subString: "Mac",
                identity: "mac"
            }, {
                string: navigator.platform,
                subString: "Linux",
                identity: "linux"
            }]
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "lib/views/textarea_view": function (e, t, n) {
        var r = Em.View.extend(Em.TextSupport, {
            classNames: ["ember-text-area", "autoresize"],
            attributeBindings: ["placeholder"],
            tagName: "textarea",
            paste: _.debounce(function () {
                this._updateEmberValue()
            }, 50),
            didInsertElement: function () {
                this.$().attr("id", this.get("id")), this._updateElementValue();
                var e = this;
                this.$().bind("input cut paste", function () {
                    e._elementValueDidChange()
                })
            },
            _updateEmberValue: function () {
                this.set("value", this.$().val())
            },
            _updateElementValue: Em.observer(function () {
                this.get("value") !== this.$().val() && this.$().val(this.get("value"))
            }, "value")
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/auto_resizable_text_area": function (e, t, n) {
        var r = t("lib/views/textarea_view").extend({
            didInsertElement: function () {
                this._super();
                var e = this.$();
                Em.run.next(e.autoResize.bind(e))
            },
            _updateElementValue: function () {
                this._super(), this.$().trigger("change")
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/tickets/ticket_field_views": function (e, t, n) {
        n.exports = Em.Mixin.create({
            init: function () {
                this._super(), this.set("ticketFieldViews", [])
            },
            registerTicketFieldView: function (e) {
                this.get("ticketFieldViews").pushObject(e)
            },
            unregisterTicketFieldView: function (e) {
                this.get("ticketFieldViews").removeObject(e)
            }
        })
    }
}), this.require.define({
    "views/tickets/ticket_fields/register_ticket_view": function (e, t, n) {
        var r = t("views/tickets/ticket_field_views"),
            i = Em.Mixin.create({
                didInsertElement: function () {
                    this._super();
                    var e = this.nearestWithBehavior(r);
                    e && e.registerTicketFieldView && e.registerTicketFieldView(this)
                },
                willDestroyElement: function () {
                    this._super();
                    var e = this.nearestWithBehavior(r);
                    e && e.unregisterTicketFieldView && e.unregisterTicketFieldView(this)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "views/tickets/ticket_fields/ticket_field_label_support": function (e, t, n) {
        var r = Em.Mixin.create({
            customLabelText: null,
            labelText: function () {
                return this.get("customLabelText") || this.get("content.humanizedName")
            }.property("customLabelText", "content.humanizedName").cacheable(),
            isRequired: function () {
                return this.get("content.required")
            }.property("content.required").cacheable(),
            hintedLabelText: function () {
                var e = this.get("labelText");
                return this.get("isRequired") && (e = "%@*".fmt(e)), e
            }.property("labelText", "isRequired").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "views/tickets/ticket_fields/ticket_property_wrapper": function (e, t, n) {
        var r = t("views/tickets/ticket_fields/register_ticket_view"),
            i = t("views/tickets/ticket_fields/ticket_field_label_support"),
            s = t("lib/views/focusable_view_mixin"),
            o = Em.Mixin.create(r, i, s, {
                ticket: Em.computed.oneWay("workspace.ticket"),
                focusManager: Em.computed.oneWay("workspace.ticketController"),
                classNames: "form_field",
                classNameBindings: ["content.attributeName", "Zendesk.ticketFields.hasTicketTypeField"]
            });
        n.exports = o
    }
}), this.require.define({
    "views/tickets/ticket_fields/ticket_property_macro_change": function (e, t, n) {
        n.exports = Em.Mixin.create({
            isHighlighted: !1,
            updateMacroChange: function () {
                this.get("ticket.applyingMacro") ? (this.set("isHighlighted", !0), this.highlightInputs(!0)) : this.isHighlighted && (this.highlightInputs(!1), this.set("isHighlighted", !1))
            }.observes("value"),
            highlightInputs: function (e) {
                var t = this.$().find("input, button, textarea"),
                    n = t.length ? t : this.$();
                n.length && n.toggleClass("highlighted", e)
            }
        })
    }
}), this.require.define({
    "views/tickets/ticket_fields/ticket_property_field": function (e, t, n) {
        var r = t("views/tickets/ticket_fields/ticket_property_macro_change"),
            i = Em.Mixin.create(r, {
                init: function () {
                    return this.set("_disabledManually", !1), this._super()
                },
                disabled: function (e, t) {
                    return arguments.length == 2 && this.set("_disabledManually", t), this.get("_disabledManually") || !this.get("ticket.userPermissions.updateTicket")
                }.property("ticket.userPermissions.updateTicket", "_disabledManually").volatile(),
                noChangeLabel: function () {
                    return I18n.t("control.dropdown.value.no_change")
                }.property().cacheable(),
                defaultTemplate: Em.TEMPLATES["templates/tickets/ticket_fields/ticket_property_field"]
            });
        n.exports = i
    }
}), this.require.define({
    "views/tickets/ticket_fields/ticket_property": function (e, t, n) {
        var r = t("views/tickets/ticket_fields/ticket_property_wrapper"),
            i = t("views/tickets/ticket_fields/ticket_property_field"),
            s = Em.Mixin.create(r, i);
        n.exports = s
    }
}), this.require.define({
    "lib/views/date_view": function (e, t, n) {
        var r = '<input type="text" value="%@" placeholder="%@" id="%@" />',
            i = Em.View.extend({
                formattedValue: function () {
                    var e = this.get("value");
                    if (e) return this.formatDate(e)
                }.property("value").cacheable(),
                formatDate: function (e) {
                    return $.datepicker.formatDate(I18n.translations["date.datepicker.date_format"], new Date(e))
                },
                render: function (e) {
                    this._super(e);
                    var t = this.get("formattedValue") || undefined;
                    e.push(r.fmt(t, I18n.t("txt.input.date.placeholder"), this.get("id")))
                },
                didInsertElement: function () {
                    this._super();
                    var e = this;
                    this.$("input").datepicker({
                        dateFormat: I18n.translations["date.datepicker.date_format"],
                        onSelect: this.selectDate.bind(this),
                        onClose: this.selectDate.bind(this)
                    }), this.onDisableChange()
                },
                processDate: function (e, t, n) {
                    return new Date(e, t, n)
                },
                selectDate: function (e, t) {
                    var n = this.get("formattedValue"),
                        r, i = this.get("clearable");
                    return e === "" && i ? (this.set("value", null), !0) : e === n ? !1 : (r = this.processDate(t.selectedYear, t.selectedMonth, +t.selectedDay), this.set("value", r), !0)
                },
                update: function () {
                    this.$("input").val(this.get("formattedValue"))
                }.observes("value"),
                onDisableChange: function (e) {
                    this.$("input").prop("disabled", this.get("disabled"))
                }.observes("disabled")
            });
        n.exports = i
    }
}), this.require.define({
    "lib/views/focus_container_view_mixin": function (e, t, n) {
        var r = t("lib/lotus/global_events");
        n.exports = Em.Mixin.create({
            click: function (e) {
                var t = e.originalEvent ? !! e.originalEvent.interceptedByFocusableView : !1;
                !t && document.activeElement === document.body && (this.get("focusManager").resetFocus(), r.set("firstResponder", this))
            }
        })
    }
}), this.require.define({
    "lib/views/focus_group": function (e, t, n) {
        var r = Em.Mixin.create({
            setupFocusGroup: function () {
                var e = this,
                    t = this.get("focusGroup");
                if (!t) return;
                this.$(t).onLoseFocusOnce(function () {
                    e.get("groupFocusOut") && (e.get("groupFocusOut").call(e), e.cancelFocusGroup())
                })
            },
            cancelFocusGroup: function () {
                $(document).unbind(".onLoseFocusOnce")
            },
            focusIn: function () {
                this.setupFocusGroup()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/label_view": function (e, t, n) {
        var r = Em.View.extend({
            render: function (e) {
                this._super(e);
                var t = e.prepend("label");
                t.attr("for", Em.guidFor(this.get("childViews.firstObject"))), t.push(this.get("labelText"))
            },
            labelText: function () {
                return this.get("i18nLabel") ? I18n.t(this.get("i18nLabel")) : this.get("label")
            }.property("label", "i18nLabel").volatile()
        });
        n.exports = r
    }
}), this.require.define({
    "lib/views/labeled_text_area": function (e, t, n) {
        var r = t("lib/lotus/labeled_field_view"),
            i = r.extend({
                classNames: ["labeled-text-area"],
                FieldView: t("lib/views/textarea_view").extend({
                    viewName: "fieldView",
                    attributeBindings: ["placeholder"],
                    placeholderBinding: "parentView.placeholder",
                    valueBinding: "parentView.value"
                })
            });
        n.exports = i
    }
}), this.require.define({
    "lib/views/menu_container": function (e, t, n) {
        var r = function (e, t) {
            var n = e.get(t);
            n && n.destroy && n.destroy(), e.set(t, null)
        }, i = Em.Mixin.create({
                didInsertElement: function () {
                    r(this, "menu");
                    var e = this.get("menuSelector"),
                        t = this.get("menuOptions") || {
                            slideDuration: 175,
                            slideEasing: "easeInOutCirc"
                        }, n = this.get("menuSelect");
                    if (!e) {
                        this._super();
                        return
                    }
                    var i = this.$(e).iosMenu(t).hide();
                    this.set("menu", i), this.set("uiMenu", i.data("menu")), n && i.bind("menuselect", n.bind(this)), this._super()
                }
            });
        n.exports = i
    }
}), this.require.define({
    "lib/views/new_date_view": function (e, t, n) {
        var r = Em.TextField.extend({
            attributeBindings: ["placeholder", "disabled"],
            dateFormat: function () {
                return I18n.t("date.datepicker.date_format")
            }.property().cacheable(),
            placeholder: function () {
                return I18n.t("txt.input.date.placeholder")
            }.property().cacheable(),
            format: function (e) {
                return $.datepicker.formatDate(this.get("dateFormat"), e)
            },
            select: function (e, t) {
                var n = this.get("value"),
                    r;
                return e === n ? !1 : (r = new Date(t.selectedYear, t.selectedMonth, +t.selectedDay), this.set("date", r), !0)
            },
            close: Em.K,
            valueDidChange: function () {
                this.$().val(this.get("value"))
            }.observes("value"),
            dateDidChange: function () {
                var e = this.get("date");
                if (!(!e || e instanceof Date)) {
                    this.set("date", new Date(e));
                    return
                }
                this.set("value", e ? this.format(e) : "")
            }.observes("date"),
            didInsertElement: function () {
                var e = this.$();
                this._super(), Em.run(this, function () {
                    this.dateDidChange()
                }), e.datepicker({
                    dateFormat: this.get("dateFormat"),
                    onSelect: this.select.bind(this),
                    onClose: this.close.bind(this)
                }), this.set("dp", $.data(e[0], "datepicker"))
            },
            willDestroyElement: function () {
                var e = this.$();
                e.datepicker("hide"), e.datepicker("destroy")
            }
        }).reopenClass({
            preservesContext: !0,
            toString: function () {
                return "NewDateView"
            }
        });
        n.exports = r
    }
}), this.require
    .define({
        "lib/views/organization_info_nav_item": function (e, t, n) {
            var r = Em.Object.extend({
                displayText: function () {
                    return I18n.t("txt.organization.section." + this.get("name"))
                }.property("name", "count").cacheable(),
                organizationBinding: Em.Binding.oneWay("delegate.organization"),
                activeSectionBinding: Em.Binding.oneWay("delegate.section"),
                href: function () {
                    var e = this.get("delegate.sectionURLPrefixForOrganization") || this.get("delegate.sectionURLPrefix");
                    return "%@/%@".fmt(e, this.get("name"))
                }.property("delegate.sectionURLPrefixForOrganization", "delegate.sectionURLPrefix", "name").volatile(),
                active: function () {
                    return this.get("name") === this.get("activeSection")
                }.property("name", "activeSection").cacheable()
            });
            r.reopenClass({
                navItemMap: {
                    tickets: "organization.related.tickets",
                    users: "organization.related.users"
                },
                navigationItems: function (e) {
                    return _(this.navItemMap).map(function (t, n) {
                        var i = t;
                        return r.createWithMixins({
                            name: n,
                            delegate: e,
                            count: function () {
                                var e;
                                return e = this.get(i), isNaN(e) ? "-" : e
                            }.property(i).cacheable()
                        })
                    })
                }
            }), n.exports = r
        }
    }), this.require.define({
        "lib/views/page_thumbs_collection": function (e, t, n) {
            var r = Em.View.extend(t("mixins/button_support"), {
                tagName: "a",
                classNames: "page-link",
                targetBinding: "parentView.parentView.controller",
                contentBinding: "parentView.content",
                actionBinding: "content.action",
                didInsertElement: function () {
                    this.$().html(this.get("content.label"))
                }
            }),
                i = Em.View.extend({
                    classNameBindings: ["active", "disabled"],
                    active: function () {
                        return this.get("parentView.controller.page") == this.get("content.label")
                    }.property("parentView.controller.page", "content").cacheable(),
                    disabled: function () {
                        var e = this.get("content.action");
                        return this.get("parentView.controller.isFirstPage") ? e === "goToFirstPage" || e === "previousPage" : this.get("parentView.controller.noMorePages") ? e === "goToLastPage" || e === "nextPage" : !1
                    }.property("parentView.controller.page", "content").cacheable(),
                    render: function (e) {
                        this._super(e);
                        var t = r.create({
                            parentView: this
                        });
                        this.appendChild(t)
                    }
                });
            n.exports = Em.CollectionView.extend({
                tagName: "ul",
                itemViewClass: i,
                content: function () {
                    return this.get("controller.collectionContent") || []
                }.property("controller.collectionContent").volatile()
            })
        }
    }), this.require.define({
        "lib/views/pagination": function (e, t, n) {
            n.exports = Em.View.extend({
                templateName: "templates/general/pagination_controls",
                classNames: "pagination pagination-centered".w(),
                isVisible: Em.computed.bool("controller.displayPaginationControls")
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "PaginationControlsView"
                }
            })
        }
    }), this.require.define({
        "lib/views/password_field": function (e, t, n) {
            n.exports = Em.TextField.extend({
                attributeBindings: ["autocomplete"],
                type: "password",
                autocomplete: "off"
            })
        }
    }), this.require.define({
        "lib/views/popover_view": function (e, t, n) {
            var r = Em.Mixin.create({
                didInsertElement: function () {
                    var e = this.$(),
                        t = this.get("content") || I18n.t(this.get("contentI18n")),
                        n = this.get("title") || I18n.t(this.get("titleI18n")),
                        r = this.get("placement") || "right";
                    e.popover({
                        offset: 7,
                        html: !0,
                        animate: !1,
                        title: n,
                        content: t,
                        placement: r
                    }), this._super.apply(this, arguments)
                },
                dismissPopover: function () {
                    this.$().popover("hide")
                }
            }),
                i = Em.View.extend(r);
            n.exports = i
        }
    }), this.require.define({
        "lib/views/registrable_view_mixin": function (e, t, n) {
            var r = {
                registerView: Em.K,
                unregisterView: Em.K,
                viewWasInserted: Em.K
            }, i = function (e) {
                    return e == null ? !1 : Object.keys(r).every(function (t) {
                        return t in e
                    })
                }, s = function (e) {
                    var t = e.get("name"),
                        n = e.get("registrar");
                    return t && i(n) ? n : r
                }, o = Em.Mixin.create({
                    registrar: Em.computed.oneWay("controller"),
                    init: function () {
                        this._super(), this.registerView()
                    },
                    registrarWillChange: function () {
                        this.unregisterView()
                    }.observesBefore("registrar"),
                    registrarDidChange: function () {
                        this.registerView(), this.get("state") === "inDOM" && s(this).viewWasInserted(this)
                    }.observes("registrar", "name"),
                    unregisterView: function () {
                        s(this).unregisterView(this)
                    },
                    registerView: function () {
                        s(this).registerView(this)
                    },
                    didInsertElement: function () {
                        this._super(), s(this).viewWasInserted(this)
                    },
                    destroy: function () {
                        this.unregisterView(), this.set("registrar", null), this._super()
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "lib/views/render_if_activated": function (e, t, n) {
            var r = Em.Mixin.create({
                _everActivated: !1,
                resetForRendering: function () {
                    this.set("_everActivated", !1)
                },
                render: function (e) {
                    if (!this.get("_everActivated") && this.get("everActivated")) return this.set("_everActivated", !0), this._super(e)
                },
                everActivatedChanged: function () {
                    this.get("_everActivated") || this.rerender()
                }.observes("everActivated")
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/views/sortable_collection_view_mixin": function (e, t, n) {
            n.exports = Em.Mixin.create({
                sortableItemSelector: Em.required(),
                sortableItemIdAttribute: Em.required(),
                update: function () {
                    Em.run.next(this, function () {
                        this.enableDragAndDrop()
                    })
                }.observes("content.@each"),
                _handleSortUpdate: function (e, t) {
                    var n = this.get("sortableItemIdAttribute"),
                        r = this.get("sortableItemSelector"),
                        i = this.$(r).map(function (e, t) {
                            return $(t).attr(n)
                        });
                    this.sortableDidChange($.makeArray(i))
                },
                enableDragAndDrop: function () {
                    var e = this.get("sortableItemSelector"),
                        t = {
                            items: e,
                            forcePlaceholderSize: !0
                        };
                    this.sortableConnectWith && (t.connectWith = this.sortableConnectWith), this.$().sortable(t), this.sortableDidChange && (this.$().unbind("sortupdate"), this.$().bind("sortupdate", this._handleSortUpdate.bind(this)))
                }
            })
        }
    }), this.require.define({
        "lib/views/table_header_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "tr",
                classNameBindings: ["isSortingEnabled:sorting"],
                filter: null,
                isSortingEnabled: Em.computed.oneWay("filter.isSortingEnabled"),
                sort: Em.computed.oneWay("filter.sort"),
                columns: Em.computed.oneWay("filter.columns"),
                renderColumn: function (e, t) {
                    if (t == null) return;
                    var n = this.get("sort") || {}, r = t.get("id"),
                        i = t.renderHeader();
                    t.get("sortable") === !1 ? e.push("<th>" + i + "</th>") : (e.push('<th data-column-id="' + r + '"'), r === n.column && e.push(' class="' + (n.desc ? "desc" : "asc") + '"'), e.push(">" + i + "</th>"))
                },
                render: function (e) {
                    (this.get("columns") || []).forEach(function (t) {
                        this.renderColumn(e, t)
                    }, this)
                },
                rerender: function () {
                    if (this.get("isDestroyed")) return;
                    this._super()
                }.observes("columns", "sort"),
                click: function (e) {
                    var t = $(e.target);
                    t.data("column-id") || (t = t.closest("[data-column-id]")), this.toggleColumnSort(t.data("column-id"))
                },
                toggleColumnSort: function (e) {
                    if (!this.get("isSortingEnabled")) return;
                    e && this.get("filter") && this.get("filter").toggleSort(e)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TableHeaderView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/views/table_header_with_selection_mixin": function (e, t, n) {
            var r = Em.Mixin.create({
                currentPageFullySelected: !1,
                render: function (e) {
                    var t = this.get("controller.noSelectableItems") ? 'disabled="disabled"' : "";
                    return e.push('<th class="selection"><input type="checkbox" %@ /></th>'.fmt(t)), this._super(e)
                },
                currentPageFullySelectedDidChange: function () {
                    this.$('input[type="checkbox"]').prop("checked", this.get("currentPageFullySelected"))
                }.observes("currentPageFullySelected"),
                click: function (e) {
                    if (e.target === this.$("th.selection input")[0] || $(e.target).hasClass("selection")) {
                        this.toggleAll();
                        return
                    }
                    this._super && this._super(e)
                },
                updateDisabled: function () {
                    this.$("th.selection input").prop("disabled", this.get("controller.fullSelectionDisabled"))
                }.observes("controller.fullSelectionDisabled"),
                deselectAll: Em.K,
                selectAll: Em.K,
                toggleAll: function () {
                    var e = this.get("currentPageFullySelected") ? "deselectAll" : "selectAll";
                    this[e]()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/views/text_area_editable_view": function (e, t, n) {
            function s(e) {
                var t = e.trim().replace(/<br/ig, "\n<br").replace(/<(p|div)/ig, "\n\n<$1"),
                    n = $("<div>").html(t).text().replace(/\s*\n(\s*\n)+/g, "\n\n").replace(/^[\r\n]*/, "");
                return r(n)
            }
            var r = t("lib/utils").htmlEscape,
                i = t("lib/auto_linker"),
                o = Em.View.extend({
                    classNames: ["editable", "textarea", "value"],
                    didInsertElement: function () {
                        this.$("a").live("click", function (e) {
                            $(e.target).is("a") && (window.open($(this).attr("href")), e.stopPropagation())
                        }), this.onDisableChange()
                    },
                    paste: _.debounce(function () {
                        var e = this.$() == null || this.$().html() == null;
                        if (e) return;
                        var t = s(this.$().html());
                        this.$().html(t)
                    }, 50),
                    onDisableChange: function (e) {
                        var t = this.get("disabled");
                        this.$().toggleClass("disabled", t), this.$().prop("contentEditable", !t)
                    }.observes("disabled"),
                    focusIn: function () {
                        var e = this.$().html();
                        e === "-" ? (this.$().html(""), this.set("originalValue", "")) : this.set("originalValue", this.get("value"))
                    },
                    focusOut: function () {
                        var e = this.$().getPreText();
                        e === "" && this.$().html("-"), e !== this.get("originalValue") && (this.get("model").set(this.get("property"), e), this.get("model").save({
                            update: !1
                        }))
                    },
                    _render: function () {
                        var e = r(this.get("value"));
                        e = i.link(e), e === "" && (e = "-"), Em.run.next(this, function () {
                            this.$().html(e)
                        })
                    }.observes("value")
                });
            n.exports = o
        }
    }), this.require.define({
        "lib/views/text_field_editable_view": function (e, t, n) {
            var r = Em.TextField.extend({
                classNames: ["textarea"],
                inlineUpdates: !0,
                didInsertElement: function () {
                    this._super(), this.onDisableChange()
                },
                focusIn: function () {
                    this.set("originalValue", this.get("value"))
                },
                focusOut: function () {
                    typeof this.get("value") == "string" && this.set("value", $.trim(this.get("value"))), this.get("inlineUpdates") && this.get("value") !== this.get("originalValue") && this.get("model").save({
                        update: !1
                    })
                },
                onDisableChange: function (e) {
                    var t = this.get("disabled");
                    this.$().toggleClass("ui-state-disabled", t)
                }.observes("disabled")
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/views/token_list_view": function (e, t, n) {
            var r = t("lib/utils").htmlEscape,
                i = Em.View.extend(t("lib/views/menu_container"), t("lib/views/focus_group"), {
                    name: "token",
                    compactModeLimit: 8,
                    lookup: Em.K,
                    focusGroup: "ul.token_list, ul.suggestions, ul.token_list input",
                    menuSelector: ".suggestions",
                    classNameBindings: ["disabled:ui-state-disabled"],
                    enableAutocompleteSeparators: !0,
                    autocompleteSeparators: /\s|,/,
                    isInitialized: !1,
                    menuSelect: function (e, t) {
                        this.selectSuggestion(t.item)
                    },
                    addToken: Em.K,
                    compactMode: function () {
                        return this.get("tokens.length") > this.get("compactModeLimit") + 1 ? "compact_mode" : ""
                    },
                    render: function (e) {
                        if (!this.get("isInitialized")) return !1;
                        this._super(e);
                        var t = this.get("tokens");
                        e.push('<ul class="%@s ui-state-default %@ token_list highlightable">'.fmt(this.get("name"), this.compactMode())), this._renderTokens(e, t), e.push('<li class="link more">%@</li>'.fmt(I18n.t("txt.tokens.more", {
                            remaining_count: this.get("tokens.length") - this.get("compactModeLimit")
                        }))), this._renderInput(e), e.push("</ul>"), e.push('<ul class="suggestions" style="display: none;"></ul>')
                    },
                    _update: function () {
                        !this.get("isInitialized") && (this.get("isReady") || this.get("source.isNew")) && (this.set("isInitialized", !0), this.rerender())
                    }.observes("isReady"),
                    _resetSearch: function () {
                        this.get("menu").hide(), this.get("searchField").val("").trigger("autocomplete.reset"), this.cancelFocusGroup()
                    },
                    focusIn: function () {
                        this._super(), this.$("ul.token_list").removeClass("ui-state-default").addClass("ui-state-focus"), this.set("isFocused", !0)
                    },
                    groupFocusOut: function () {
                        this.$("ul.token_list").addClass("ui-state-default").removeClass("ui-state-focus"), this.set("isFocused", !1), this._resetSearch()
                    },
                    _renderTokens: function (e, t) {
                        if (!t) return;
                        t.forEach(function (t) {
                            this.renderToken(e, t)
                        }, this)
                    },
                    onDisableChange: function () {
                        this.$("input").prop("disabled", this.get("disabled"))
                    }.observes("disabled"),
                    renderToken: function (e, t) {
                        var n = '<a class="delete" tabindex="-1">&times;</a>';
                        e.push('<li class="%@ token"><span>%@</span>%@</li>'.fmt(this.get("name"), r(t), n))
                    },
                    renderSuggestion: function (e) {
                        return "<li><a>" + e + "</a></li>"
                    },
                    highlightSearchResult: function (e, t) {
                        var n = new RegExp($.ui.autocomplete.escapeRegex(t), "i");
                        return e.replace(n, "<strong>$&</strong>")
                    },
                    _renderInput: function (e) {
                        e.push('<li class="%@Search"><input class="highlightable" type="text" id="%@" /></li>'.fmt(this.get("name"), this.get("id")))
                    },
                    didInsertElement: function () {
                        this._super(), this.set("searchField", this.$(".%@Search input".fmt(this.get("name"))));
                        var e = this.get("menu"),
                            n = this,
                            r;
                        this.get("enableAutocompleteSeparators") ? r = this.get("autocompleteSeparators") : r = undefined, this.get("menu").bind("menuwrap", function (e, t) {
                            t.direction == "prev" && ($(this).data("menu").blur(), n.get("searchField").focus())
                        }).bind("keydown", function (t) {
                            if (t.keyCode === $.ui.keyCode.TAB && e.is(":visible")) {
                                t.preventDefault();
                                var n = e.data("menu");
                                n.active && this.selectSuggestion(n.active), this._resetSearch(), this.get("searchField").focus()
                            }
                        }.bind(this)), this.get("searchField").fastAutocomplete({
                            lookup: this.get("lookup"),
                            add: this.addToken.bind(this),
                            noBlur: !0,
                            separators: r,
                            choices: t("lib/autocompleters/autocompleters").perPage,
                            render: function (t, r) {
                                e.empty(), _.each(t, function (t) {
                                    e.append(n.renderSuggestion(t, r))
                                }), e.data("menu").refresh(), _.any(t) && n.get("isFocused") ? e.show().position({
                                    my: "left top",
                                    at: "left bottom",
                                    of: n.$(".token_list")
                                }) : e.hide()
                            }
                        }).bind("keyup", function (e) {
                            var t = n.get("menu");
                            n.get("searchField").val().length === 0 ? Em.run.next(n, function () {
                                this.set("searchFieldIsEmpty", !0)
                            }) : n.set("searchFieldIsEmpty", !1);
                            if (!t.is(":visible")) return;
                            switch (e.keyCode) {
                            case $.ui.keyCode.DOWN:
                                t.data("menu").focusFirst(), t.focus();
                                break;
                            case $.ui.keyCode.ENTER:
                                n.selectSuggestion(t.find("li:first"))
                            }
                        }).bind("blur", function () {
                            n.get("menu").is(":visible") || n.groupFocusOut()
                        }), this.onDisableChange()
                    },
                    click: function () {
                        this.get("searchField").focus()
                    },
                    update: function () {
                        if (!this.get("isInitialized")) return !1;
                        this.$("ul.token_list").removeClass("compact_mode");
                        var e = this.get("searchField");
                        e && (e.val(""), this.set("searchFieldIsEmpty", !0));
                        var t = [],
                            n = "ul.%@s li.token".fmt(this.get("name"));
                        this.$(n).remove(), this._renderTokens(t, this.get("tokens")), this.$("ul.token_list").prepend(t.join("")), this.get("ticket.applyingMacro") ? this.highlight() : this.resetHighlight()
                    }.observes("tokens.@each"),
                    highlight: function () {
                        this.$(".highlightable").addClass("highlighted")
                    },
                    resetHighlight: function () {
                        this.$(".highlightable").removeClass("highlighted")
                    },
                    mouseUp: function (e) {
                        this.$("ul.token_list").removeClass("compact_mode");
                        var t = $(e.target);
                        if (t.is("a.delete")) {
                            var n = t.parent();
                            this.removeTokenByElement(n)
                        }
                    },
                    keyUp: function (e) {
                        switch (e.keyCode) {
                        case $.ui.keyCode.BACKSPACE:
                            if (!this.get("searchFieldIsEmpty")) return;
                            var t = this.$("ul.token_list li.token").filter(":last");
                            t.length && this.removeTokenByElement(t);
                            break;
                        case $.ui.keyCode.ESCAPE:
                            this._resetSearch(), this.get("searchField").focus();
                            break;
                        case $.ui.keyCode.ENTER:
                            $.trim(this.get("searchField").val()) !== "" && this.addToken(this.get("searchField").val()), this._resetSearch()
                        }
                    },
                    willDestroyElement: function () {
                        var e = this.get("menu").data("menu");
                        e && e.destroy && e.destroy(), this.get("menu").unbind(), this.set("menu", null), this.get("searchField").unbind(), this.set("searchField", null)
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/views/user_table_row_view": function (e, t, n) {
            var r = t("lib/views/table_row_view"),
                i = r.extend(t("lib/views/row_with_grouping_mixin"), {
                    activate: function (e) {
                        this.get("controller").openUser(this.get("content"), e)
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserTableRowView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/views/user_list_body_view": function (e, t, n) {
            var r = t("lib/views/table_body_view"),
                i = t("lib/views/user_list_item_view"),
                s = r.extend({
                    classNames: ["items"],
                    tagName: "ul",
                    itemViewClass: i
                }).reopenClass({
                    toString: function () {
                        return "UserListBodyView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/views/user_list_item_view": function (e, t, n) {
            var r = t("lib/lotus/collection_navigation_item"),
                i = Em.View.extend(r, {
                    tagName: "li",
                    templateName: "templates/items/org_user",
                    mouseDown: function (e) {
                        this.get("parentView").setChildViewInFocus(this), this._super && this._super(e)
                    },
                    activate: function (e) {
                        this.get("controller").openUser(this.get("content"), e)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "UserListItemView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/views/user_table_body_view": function (e, t, n) {
            var r = t("lib/views/table_body_view"),
                i = t("lib/views/user_table_row_view"),
                s = r.extend({
                    itemViewClass: i
                }).reopenClass({
                    toString: function () {
                        return "UserTableBodyView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tags_view": function (e, t, n) {
            var r = t("lib/views/token_list_view"),
                i = r.extend({
                    name: "tag",
                    lookup: t("lib/autocompleters/autocompleters").tagAutocompleterLookup,
                    isReady: function () {
                        return this.get("source.isFetched") || this.get("source.isNew")
                    }.property("source.isFetched", "source.isNew").cacheable(),
                    selectSuggestion: function (e) {
                        this.get("searchField").val(""), this.addToken(e.find("a").text()), this.get("menu").hide(), this.get("searchField").focus()
                    },
                    groupFocusOut: function () {
                        $.trim(this.get("searchField").val()) !== "" && this.addToken(this.get("searchField").val()), this._super()
                    },
                    addToken: function (e) {
                        this.get("tokens").addObject(e)
                    },
                    removeTokenByElement: function (e) {
                        this.removeToken(e.find("span").text())
                    },
                    removeToken: function (e) {
                        this.get("tokens").removeObject(e)
                    }
                });
            i.reopenClass({
                toString: function () {
                    return "TagsView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "lib/views/tags_view": function (e, t, n) {
            var r = t("views/tags_view"),
                i = t("lib/profile_tracker"),
                s = r.extend({
                    classNames: ["value"],
                    didInsertElement: function () {
                        this._super(), this.$().before('<span class="no_tags">-</span>')
                    },
                    groupFocusOut: function () {
                        this._super(), i.track("fields:tags")
                    },
                    removeTokenByElement: function (e) {
                        this._super(e), this.save()
                    },
                    addToken: function (e) {
                        this._super.apply(this, arguments), this.save()
                    },
                    save: function () {
                        this.get("source") && (this.get("source").set("tags", this.get("tokens")), this.get("source").save({
                            update: !1
                        }))
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/voice/capability_token": function (e, t, n) {
            function o() {
                this.fetch = function (e) {
                    return $.ajax({
                        url: "/api/v2/voice/client_capability_token",
                        type: "GET",
                        dataType: "json"
                    }).done(function (t) {
                        e(t.client_capability_token)
                    }).fail(function () {
                        i.error({
                            short_message: "error:ec14"
                        }), r.error(I18n.t("txt.voice.error.ec14"))
                    })
                }
            }
            var r = t("lib/growl"),
                i = Minilog("capability-token"),
                s;
            o.instance = function () {

                return s || (s = new o), s
            }, n.exports = o
        }
    }), this.require.define({
        "lib/voice/phone_call": function (e, t, n) {
            function o() {
                this.voiceState = s, this.activeInWindow = function () {
                    var e = this.voiceState.get("currentCall.outgoing_kind");
                    if (e === "phone") return !this.voiceState.get("currentCall.ended_at");
                    if (e === "client") return i.get("isConnected")
                }
            }
            var r, i = t("lib/voice/twilio_connection").instance(),
                s = t("lib/voice/state").instance();
            o.instance = function () {
                return r || (r = new o), r
            }, n.exports = o
        }
    }), this.require.define({
        "lib/voice/queue": function (e, t, n) {
            function i() {
                var e = [],
                    t;
                this.push = function (t) {
                    e.push(t), Em.run.next(this, this.run)
                };
                var n = function () {
                    var i = e.shift();
                    if (!i) {
                        t = !1;
                        return
                    }
                    r++, i(n)
                };
                this.run = function () {
                    if (t) return;
                    t = !0, n()
                }
            }
            var r = 0;
            i.count = function () {
                return r
            }, n.exports = i
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/node": function (e, t, n) {
            var r = Em.Object.extend({
                endpoint: Em.computed.oneWay("edges.endpoint"),
                init: function () {
                    this._super(), this.reset()
                },
                scan: function () {
                    var e = this,
                        t = null,
                        n;
                    while (e) {
                        n = e.get("endpoint");
                        if (n.type !== e.get("type") || !e.validate()) {
                            t = e;
                            break
                        }
                        e = e.get("next")
                    }
                    return t
                },
                select: Em.K,
                validate: Em.required(),
                reset: Em.required(),
                valueDidChange: function () {
                    this.reset()
                }.observes("value")
            }).reopenClass({
                toString: function () {
                    return "ZentenceNode"
                },
                classForType: function (e) {
                    return t("lib/zentence/lib/nodes/" + e)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/zentence/lib/vertices": function (e, t, n) {
            var r = t("lib/zentence/lib/nodes/node").classForType,
                i = Em.ArrayProxy.extend({
                    data: function () {
                        var e = this.get("content"),
                            t = this.get("lexicon"),
                            n;
                        return e.length > 0 ? (n = e.reduce(function (e, t) {
                            return e[t.get("value")]
                        }, t), n) : {
                            list: t,
                            type: "list"
                        }
                    }.property("content.@each.value", "lexicon").cacheable(),
                    endpoint: function () {
                        var e = this.get("data"),
                            t = {
                                values: []
                            }, n = t.values,
                            i, s;
                        if (!e) return t;
                        i = e.list, s = t.type = e.type;
                        for (var o in i) i.hasOwnProperty(o) && n.push(r(s).create({
                            value: i[o].value || o,
                            title: i[o].title
                        }));
                        return t
                    }.property("data").cacheable(),
                    findByValue: function (e) {
                        var t = this.get("data");
                        if (!t) return;
                        if (t.type === "list") {
                            if (!t.list) return;
                            t = $.extend({
                                type: t.type
                            }, t.list[e])
                        }
                        return t
                    },
                    endpointWillChange: function () {
                        this.get("endpoint.values").invoke("destroy")
                    }.observesBefore("endpoint")
                }).reopenClass({
                    toString: function () {
                        return "ZentenceVertices"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/controllers/item_controller": function (e, t, n) {
            var r = t("lib/zentence/lib/nodes/node").classForType,
                i = t("lib/zentence/lib/vertices"),
                s = Em.Object.extend({
                    activeNode: null,
                    init: function () {
                        this._super(), this.setProperties({
                            cache: {},
                            lexica: this.get("lexica") || {},
                            structure: this.get("structure") || [],
                            nodes: []
                        }), this.refresh()
                    },
                    add: function (e) {
                        var t = this.get("nodes"),
                            n = this.get("structure"),
                            s = t.length;
                        if (s >= n.length) return;
                        var o = this.get("lexica"),
                            u = this.get("cache"),
                            a = n[s],
                            f = a.id,
                            l = a.edges,
                            c = t.get("lastObject"),
                            h, p, d;
                        h = i.create({
                            lexicon: o[f],
                            content: l ? l.map(function (e) {
                                return u[e]
                            }) : []
                        }), d = h.findByValue(e);
                        if (!d) return;
                        return p = r(d.type).create({
                            id: f,
                            value: e,
                            title: d.title || this.get("content.label"),
                            prev: c,
                            edges: h
                        }), p.addObserver("endpoint", this, this.nodeEndpointDidChange), u[f] = p, c && c.set("next", p), t.pushObject(p), p
                    },
                    next: function () {
                        var e = this.get("activeNode.next") || this.add();
                        return this.set("activeNode", e || null), e
                    },
                    prev: function () {
                        var e = this.get("activeNode.prev");
                        return this.set("activeNode", e || null), e
                    },
                    confirm: function () {
                        return this.save(), this.set("activeNode", null), this
                    },
                    save: function () {
                        var e = this.get("structure"),
                            t = this.get("content"),
                            n = this.get("nodes");
                        return e.forEach(function (e, r) {
                            var i = n.objectAt(r),
                                s = {}, o;
                            i && (s = i.getProperties("value", "label"), o = s.value != null ? s.value : i.get("hint")), t.set(e.id, o), s.label && t.set("label", s.label)
                        }), t
                    },
                    refresh: function () {
                        this.get("structure").forEach(function (e) {
                            var t = this.get("content.%@".fmt(e.id));
                            t && this.add(t)
                        }, this), this.get("nodes.length") === 0 && this.add()
                    },
                    reset: function () {
                        var e = this.get("content"),
                            t = this.get("cache");
                        this.get("structure").forEach(function (n) {
                            var r = n.id,
                                i = e.get(r);
                            t[r] && t[r].set("value", i)
                        })
                    },
                    remove: function () {
                        var e = this.get("parentController");
                        e && e.removeObject(this), this.destroy()
                    },
                    removeNode: function (e) {
                        var t = this.get("nodes"),
                            n = e.get("prev");
                        while (e) n && n.set("next", null), t.removeObject(e), e.removeObserver("endpoint", this, this.nodeEndpointDidChange), e.destroy(), n = e, e = e.get("next")
                    },
                    didConfirm: Em.K,
                    activeNodeWillChange: function () {
                        var e = this.get("activeNode");
                        e && e.set("activating", !1)
                    }.observesBefore("activeNode"),
                    activeNodeDidChange: function () {
                        var e = this.get("activeNode");
                        e instanceof r("list") ? e.set("activating", !0) : e || (this.save(), this.didConfirm())
                    }.observes("activeNode"),
                    lexicaDidChange: function () {
                        this.get("nodes").invoke("destroy"), this.set("nodes", []), this.refresh()
                    }.observes("lexica"),
                    nodeEndpointDidChange: function (e) {
                        this.removeNode(e)
                    },
                    willDestroy: function () {
                        this.get("nodes").invoke("destroy")
                    }
                }).reopenClass({
                    toString: function () {
                        return "ZentenceItemController"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/zentence/controllers/group_controller": function (e, t, n) {
            var r = t("lib/zentence/controllers/item_controller"),
                i = Em.ArrayController.extend({
                    itemController: r.extend({
                        lexica: Em.computed.oneWay("parentController.lexica"),
                        structure: Em.computed.oneWay("parentController.structure")
                    }),
                    init: function () {
                        this.set("_subControllers", []), this._super()
                    },
                    save: function () {
                        var e = this.get("content"),
                            t;
                        return t = this.get("_subControllers").map(function (e) {
                            return e.save()
                        }), e
                    },
                    controllerAt: function (e, t, n) {
                        var r = this.get("_subControllers"),
                            i = r[e];
                        return !i && t && (i = n.create({
                            parentController: this,
                            content: t
                        }), r[e] = i), i
                    },
                    clear: function () {
                        return this.get("_subControllers").invoke("destroy"), this.setProperties({
                            content: [],
                            _subControllers: []
                        }), this._super()
                    },
                    objectAtContent: function (e) {
                        var t = this.get("content").objectAt(e),
                            n = this.get("itemController");
                        return this.controllerAt(e, t, n)
                    },
                    removeObject: function (e) {
                        return this.get("_subControllers").removeObject(e), this.get("content").removeObject(e.get("content")), this._super.apply(this, arguments)
                    },
                    willDestroy: function () {
                        this.get("_subControllers").invoke("destroy")
                    }
                }).reopenClass({
                    toString: function () {
                        return "ZentenceGroupController"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/date": function (e, t, n) {
            var r = t("./node"),
                i = r.extend({
                    type: "date",
                    init: function () {
                        this.set("hint", new Date), this._super()
                    },
                    validate: function () {
                        return this.get("value") instanceof Date
                    },
                    reset: function () {}
                }).reopenClass({
                    toString: function () {
                        return "ZentenceDateNode"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/list": function (e, t, n) {
            var r = t("./node"),
                i = I18n.t("txt.zentence.menu.no_results_found"),
                s = r.extend({
                    type: "list",
                    hasResults: !0,
                    activating: !1,
                    activatingText: i,
                    noResultsText: i,
                    members: Em.computed.oneWay("endpoint.values"),
                    select: function (e) {
                        var t = this.get("matches"),
                            n;
                        e = e || this.get("hint") || t.get("firstObject");
                        if (t.indexOf(e) === -1) return this.setProperty("query", this.get("title"));
                        n = this.get("edges").findByValue(e.get("value")), n.value = e.get("value"), n.query = n.title, n.hint = null, this.setProperties(n)
                    },
                    matches: function () {
                        var e = this.get("members"),
                            t = this.get("query"),
                            n = this.get("activating"),
                            r, i, s;
                        return !t || n ? (this.set("hint", null), e.forEach(function (e) {
                            e.setProperties({
                                start: null,
                                match: null,
                                rest: n ? "" : e.get("title")
                            })
                        }), e) : (r = t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"), i = new RegExp("(" + r + ")(.*)", "i"), s = e.filter(function (e) {
                            var t = e.get("title"),
                                n = t.match(i),
                                r, s, o;
                            return n ? (r = t.substr(0, n.index), s = n[1] || "", o = n[2] || "", e.setProperties({
                                start: r,
                                match: s,
                                rest: o
                            }), !0) : !1
                        }), this.set("hint", s[0]), s)
                    }.property("query", "members", "activating").cacheable(),
                    validate: function () {
                        var e = this.get("members");
                        return e.findProperty("value", this.get("value"))
                    },
                    reset: function () {
                        this.set("query", this.get("title") || ""), this.set("hint", null)
                    },
                    queryDidChange: function () {
                        this.get("activating") && this.set("activating", !1)
                    }.observes("query")
                }).reopenClass({
                    toString: function () {
                        return "ZentenceListNode"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/search": function (e, t, n) {
            var r = t("lib/core_widgets/menu_utils").RemoteSearchDataSource,
                i = t("lib/zentence/lib/nodes/list"),
                s = i.extend({
                    type: "search",
                    hasResults: !1,
                    searchable: !0,
                    init: function () {
                        var e = new r(8, this.get("src"), {
                            httpMethod: "POST",
                            dataFilter: function (e) {
                                return e
                            },
                            parse: this.parse.bind(this)
                        });
                        e.onDataReady = this.onDataReady.bind(this), this.set("searchDataSource", e), this._super()
                    },
                    parse: Em.required(),
                    select: function (e) {
                        var t = this.get("matches"),
                            n;
                        e = e || this.get("hint") || t.get("firstObject");
                        if (t.indexOf(e) === -1) return this.setProperties("query", this.get("title"));
                        n = e.getProperties("value", "title"), n.label = n.query = n.title, n.searchable = !0, this.setProperties(n)
                    },
                    onDataReady: function (e) {
                        if (!e || this.get("isDestroying")) return;
                        this.setProperties({
                            hasResults: this.get("query.length") > 1,
                            members: e
                        })
                    },
                    queryDidChange: function () {
                        if (!this.get("searchable")) return;
                        this.set("hasResults", !1), this.get("searchDataSource").filter(null, this.get("query"))
                    }.observes("query")
                }).reopenClass({
                    toString: function () {
                        return "ZentenceSearchNode"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/organization": function (e, t, n) {
            var r = t("lib/zentence/lib/nodes/search"),
                i = r.extend({
                    src: "/api/v2/organizations/autocomplete.json?name=%@",
                    activatingText: I18n.t("txt.zentence.organization.activating"),
                    parse: function (e) {
                        var t = e && e.organizations;
                        if (!t) return;
                        return t.map(function (e) {
                            return i.create({
                                value: e.id,
                                title: e.name,
                                searchable: !1
                            })
                        })
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/tags": function (e, t, n) {
            var r = t("./node"),
                i = r.extend({
                    type: "tags",
                    init: function () {
                        this._super(), !this.get("value") && this.set("value", [])
                    },
                    validate: function () {
                        return !0
                    },
                    reset: function () {}
                }).reopenClass({
                    toString: function () {
                        return "ZentenceTagsNode"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/lib/nodes/text": function (e, t, n) {
            var r = t("./node"),
                i = r.extend({
                    type: "text",
                    validate: function () {
                        return this.get("value") !== ""
                    },
                    reset: function () {}
                }).reopenClass({
                    toString: function () {
                        return "ZentenceTextNode"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/views/action": function (e, t, n) {
            Ember.View.reopen({
                attributeBindings: ["tabindex"]
            });
            var r = Ember.View.extend({
                tagName: "span",
                classNames: ["zentence-action"],
                ariaRole: "button",
                tabindex: "0",
                confirmText: "Done",
                removeText: "&times;",
                content: Em.computed.alias("controller.nodes"),
                template: Em.Handlebars.compile('<span tabindex="0" class="link zentence-action-link zentence-confirm-action">{{unbound view.confirmText}}</span><span tabindex="0" class="zentence-action-link zentence-remove-action">{{unbound view.removeText}}</span>'),
                click: function (e) {
                    var t = $(e.target),
                        n;
                    if (!t.hasClass("zentence-action-link")) return;
                    n = this.get("controller"), n[t.hasClass("zentence-remove-action") ? "remove" : "confirm"]()
                },
                focusIn: function (e) {
                    if ($(e.target).hasClass("zentence-action-link")) return;
                    this.set("controller.activeNode", this.get("content.firstObject"))
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ZentenceAction"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/zentence/views/menu": function (e, t, n) {
            var r = t("lib/nested_hash"),
                i = t("lib/views/select_view"),
                s;
            s = Handlebars.compile("{{#if match}}<strong>{{start}}</strong>{{match}}<strong>{{rest}}</strong>{{else}}{{title}}{{/if}}");
            var o = i.extend({
                delegateType: "Menu",
                controller: Em.computed.oneWay("input.controller"),
                isVisible: Em.computed.or("controller.activeNode.hasResults", "controller.activeNode.activating"),
                configOptions: {
                    clsRoot: "zd-menu-root zentence-menu",
                    goToStartAfterReachingEnd: !0,
                    goToEndAfterReachingStart: !0,
                    renderItemContent: function (e, t, n) {
                        return s(e.data && e.data.type || {
                            title: e.label
                        })
                    },
                    roleToClassMap: {
                        uiLabel: "zentence-menuitem-empty"
                    }
                },
                options: function () {
                    var e = this.get("controller.activeNode");
                    if (!e) return [];
                    var t = e.get("matches") || [],
                        n = new r;
                    return t.length === 0 ? [this.get("emptyOption")] : (t.forEach(function (e) {
                        n.add(e.get("title"), e.get("value"), e)
                    }), n.toList())
                }.property("controller.activeNode.matches").cacheable(),
                emptyOption: function () {
                    var e = this.get("controller.activeNode"),
                        t = {
                            role: "uiLabel"
                        };
                    return t.label = e.get("activating") ? e.get("activatingText") : e.get("noResultsText"), t
                }.property().volatile(),
                buildDelegate: function () {
                    this._super(), this.delegate.addObserver("itemFocused", this.didFocus.bind(this)), this.delegate.addObserver("change", this.didChange.bind(this))
                },
                position: function () {
                    if (!this.delegate || !this.input || this.input.get("state") !== "inDOM") return;
                    var e = this.delegate.dom,
                        t = this.input.$(),
                        n = t.offset(),
                        r;
                    e.css({
                        height: 29 * this.get("options.length"),
                        left: n.left,
                        top: n.top + t.height(),
                        width: t.width()
                    })
                },
                visibilityDidChange: function () {
                    this.get("state") !== "inDOM" && Em.run(this, function () {
                        this.append()
                    }), this.get("isVisible") ? (this.delegate.show(), this.delegate.focus(), this.position()) : (this.delegate.blur(), this.delegate.hide(), this.set("value", null))
                }.observes("isVisible"),
                selectedDidChange: function () {
                    var e = this.get("selected"),
                        t = this.get("controller.activeNode"),
                        n = null;
                    e && this.get("isVisible") && (e.set("selected", !0), n = e), t && t.set("hint", n)
                }.observes("selected"),
                selectedWillChange: function () {
                    var e = this.get("selected"),
                        t = this.get("controller.activeNode");
                    e && e.set("selected", !1), t && t.set("hint", null)
                }.observesBefore("selected"),
                optionsDidChange: function () {
                    if (!this.delegate || !this.get("controller.activeNode")) return;
                    this.delegate.loadData(this.get("options")), this.position()
                },
                didChange: function (e, t) {
                    if (!t.userInitiated) return;
                    this.get("controller.activeNode").select(t.record.data.type), this.get("controller").next()
                },
                didFocus: function (e, t) {
                    t.data && this.set("selected", t.data.type)
                },
                didInsertElement: function () {
                    this._super(), this.position()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ZentenceMenu"
                }
            });
            n.exports = o
        }
    }), this.require.define({
        "lib/zentence/views/leaves/wrapper": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "span",
                classNames: ["zentence-leaf-wrapper"],
                template: Em.Handlebars.compile('{{view view.LeafView viewName="wrapperView"}}'),
                controller: Em.computed.oneWay("parentView.controller"),
                activeView: Em.computed.alias("parentView.activeView"),
                LeafView: Em.required()
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ZentenceLeafWrapperView"
                },
                classForType: function (e) {
                    var n;
                    try {
                        n = t("lib/zentence/views/leaves/" + e)
                    } catch (r) {
                        n = t("lib/zentence/views/leaves/list")
                    }
                    return this.extend({
                        LeafView: n
                    })
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "mixins/caret_navigable": function (e, t, n) {
            var r = Ember.Mixin.create({
                caretNavSelector: null,
                atStart: function () {
                    var e = this.getCaretPosition();
                    return typeof e == "undefined" || e === 0
                },
                atEnd: function () {
                    var e = this.$().text().length,
                        t = this.getCaretPosition();
                    return typeof t == "undefined" || t >= e
                },
                getCaretPosition: function () {
                    var e = this.get("caretNavSelector"),
                        t = e ? this.$(e)[0] : this.$()[0],
                        n = 0,
                        r, i, s;
                    if (!t) return;
                    return typeof window.getSelection != "undefined" ? (r = window.getSelection().getRangeAt(0), s = r.cloneRange(), s.selectNodeContents(t), s.setEnd(r.endContainer, r.endOffset), n = s.toString().length) : typeof document.selection != "undefined" && (i = document.selection, r = i.createRange(), s = document.body.createTextRange(), s.moveToElementText(t), s.setEndPoint("EndToEnd", r), n = s.text.length), n
                },
                moveCaretToEnd: function () {
                    var e =
                        this.get("caretNavSelector"),
                        t = e ? this.$(e)[0] : this.$()[0],
                        n, r;
                    t.focus(), typeof window.getSelection != "undefined" && typeof document.createRange != "undefined" ? (n = document.createRange(), n.selectNodeContents(t), n.collapse(!1), r = window.getSelection(), r.removeAllRanges(), r.addRange(n)) : typeof document.body.createTextRange != "undefined" && (n = document.body.createTextRange(), n.moveToElementText(t), n.collapse(!1), n.select())
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "mixins/content_editable": function (e, t, n) {
            var r = Em.Mixin.create({
                attributeBindings: ["editable:contenteditable"],
                spellcheck: "false",
                editable: function () {
                    return this.get("active") + ""
                }.property("active").cacheable(),
                didEditContent: function () {
                    var e = this.$();
                    e.text() === "" && e.text(" ")
                },
                willEditContent: function () {
                    var e = this.$();
                    e.text() === " " && e.text("")
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "lib/zentence/views/leaves/leaf_mixin": function (e, t, n) {
            var r = $(document),
                i = Ember.Mixin.create({
                    tagName: "span",
                    classNames: ["zentence-leaf"],
                    classNameBindings: ["active:zentence-leaf-active", "type"],
                    activeView: Em.computed.alias("parentView.activeView"),
                    controller: Em.computed.oneWay("parentView.controller"),
                    content: Em.computed.oneWay("parentView.content"),
                    menu: Em.computed.oneWay("parentView.menu"),
                    type: function () {
                        var e = this.get("content.id");
                        return e && "zentence-leaft-%@".fmt(e)
                    }.property("content.id"),
                    _clickId: function () {
                        return "click.%@".fmt(Ember.guidFor(this))
                    }.property().cacheable(),
                    active: function () {
                        var e = this.get("content");
                        return this.get("controller.activeNode") === e && !e.get("isDestroyed")
                    }.property("controller.activeNode", "content.isDestroyed").cacheable(),
                    click: function (e) {
                        this.set("controller.activeNode", this.get("content"))
                    },
                    didActivate: function () {
                        var e = this.get("_clickId");
                        r.off(e), this.get("active") ? (r.on(e, this.didClickOut.bind(this)), this.set("activeView", this)) : this.set("activeView", null)
                    }.observes("active"),
                    didClickOut: function (e) {
                        var t = this.$()[0];
                        if (t && t.contains(e.target)) return;
                        this.set("controller.activeNode", null)
                    },
                    willDestroyElement: function () {
                        r.off(this.get("_clickId")), this._super && this._super()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "lib/zentence/views/leaves/list": function (e, t, n) {
            var r = t("mixins/caret_navigable"),
                i = t("mixins/content_editable"),
                s = t("lib/zentence/views/leaves/leaf_mixin");
            Ember.View.reopen({
                attributeBindings: ["contenteditable", "spellcheck"]
            });
            var o = Ember.View.extend({
                tagName: "i",
                content: Em.computed.oneWay("parentView.content"),
                controller: Em.computed.oneWay("parentView.controller"),
                active: Em.computed.oneWay("parentView.active"),
                ghost: Em.computed.oneWay("parentView.shadow"),
                template: Ember.Handlebars.compile("{{#if view.active}}{{{view.ghost}}}{{else}}{{view.defaultValue}}{{/if}}")
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ZentenceListGhostView"
                }
            }),
                u = Ember.View.extend(r, i, {
                    tagName: "span",
                    classNames: ["zentence-value"],
                    template: Ember.Handlebars.compile("{{unbound view.content.title}}"),
                    controller: Em.computed.oneWay("parentView.controller"),
                    content: Em.computed.oneWay("parentView.content"),
                    active: Em.computed.oneWay("parentView.active"),
                    keyUp: function (e) {
                        var t = this.$().text(),
                            n = this.get("content");
                        t === " " ? t = "" : this.didEditContent(), t !== n.get("query") && n.setProperties({
                            activating: !t,
                            query: t
                        })
                    },
                    keyDown: function (e) {
                        var t = this.get("controller"),
                            n = this.get("content"),
                            r = e.keyCode;
                        this.willEditContent();
                        switch (r) {
                        case 9:
                            e.shiftKey ? t.prev() : (n.get("hint") && n.select(), this.rerender(), t.next()), e.preventDefault();
                            break;
                        case 13:
                            n.get("hint") ? n.select() : n.reset(), this.rerender(), t.set("activeNode", t.next()), e.preventDefault();
                            break;
                        case 27:
                            n.reset(), this.rerender(), this.$().blur(), t.set("activeNode", null);
                            break;
                        case 37:
                            this.atStart() && (!n.get("activating") && n.select(), this.rerender(), t.prev(), e.preventDefault()), e.stopPropagation();
                            break;
                        case 38:
                            this.atEnd() && e.preventDefault();
                            break;
                        case 39:
                            this.atEnd() && (!n.get("activating") && n.select(), this.rerender(), t.next(), e.preventDefault()), e.stopPropagation();
                            break;
                        case 40:
                            this.atEnd() && e.preventDefault();
                            break;
                        default:
                        }
                    },
                    didInsertElement: function () {
                        this._super(), this.didEditContent(), this.get("active") && this.$().get(0).focus()
                    },
                    didEditableChange: function () {
                        if (this.get("state") !== "inDOM") return;
                        this.get("active") ? this.moveCaretToEnd() : (this.get("content").reset(), this.rerender())
                    }.observes("editable")
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceListValueView"
                    }
                }),
                a = Em.View.extend(s, {
                    classNames: ["zentence-list"],
                    template: Em.Handlebars.compile("{{view view.PlaceholderView}}{{view view.GhostView}}{{view view.ValueView}}"),
                    shadow: function () {
                        var e = this.get("content"),
                            t = e.get("query"),
                            n = e.get("hint");
                        return n && !n.get("start") && (t += n.get("rest") || ""), t
                    }.property("content.query", "content.hint").cacheable(),
                    PlaceholderView: o.extend({
                        tagName: "span",
                        classNames: ["zentence-leafholder"],
                        defaultValue: Em.computed.oneWay("parentView.content.query")
                    }),
                    ValueView: u,
                    GhostView: o.extend({
                        classNames: ["zentence-ghost"],
                        defaultValue: ""
                    }),
                    didClickOut: function (e) {
                        if (this.get("menu").$()[0].contains(e.target)) return;
                        this._super.apply(this, arguments)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceListView"
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "lib/zentence/views/tree": function (e, t, n) {
            var r = t("lib/zentence/views/leaves/wrapper"),
                i = t("lib/zentence/views/leaves/list"),
                s = Ember.CollectionView.extend({
                    classNames: ["zentence-tree"],
                    content: Em.computed.oneWay("controller.nodes"),
                    createChildView: function (e, t) {
                        var n = r.classForType(t.content.type);
                        return t.menu = this.get("menu"), this._super(n, t)
                    },
                    activeViewDidChange: function () {
                        var e = this.get("activeView");
                        e instanceof i && this.set("menu.input", this.get("parentView"))
                    }.observes("activeView")
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceTreeView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/zentence/views/item": function (e, t, n) {
            var r = t("lib/zentence/views/action"),
                i = t("lib/zentence/views/menu"),
                s = t("lib/zentence/views/tree"),
                o = Ember.ContainerView.extend({
                    classNames: ["zentence"],
                    classNameBindings: ["active:zentence-active"],
                    active: Em.computed.bool("controller.activeNode"),
                    init: function () {
                        var e = this.get("controller"),
                            t = this.get("childViews"),
                            n = this.get("menu"),
                            o, u;
                        n || (n = i.create(), this.set("menu", n)), o = r.create({
                            controller: e
                        }), this.set("actionView", o), u = s.create({
                            controller: e,
                            menu: n
                        }), this.set("treeView", u), t.pushObject(o), t.pushObject(u), this._super.apply(this, arguments)
                    },
                    click: function (e) {
                        var t = this.get("controller");
                        !t.get("activeNode") && !$(e.target).hasClass("zentence-action-link") && t.set("activeNode", t.get("nodes.firstObject")), e.stopPropagation()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceItemView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "lib/zentence/views/group": function (e, t, n) {
            var r = t("lib/zentence/views/item"),
                i = t("lib/zentence/views/menu"),
                s = Em.CollectionView.extend({
                    classNames: ["zentence-group"],
                    content: Em.computed.oneWay("controller.content"),
                    itemViewClass: r.extend({
                        focusIn: function (e) {
                            this.get("parentView.activeView") !== this && this.set("parentView.activeView", this)
                        },
                        focusOut: function (e) {
                            this.get("controller.activeNode") || (this.set("parentView.activeView", null), this.set("menu.input", null))
                        }
                    }),
                    createChildView: function (e, t) {
                        var n = this.get("controller"),
                            r = n.objectAt(t.contentIndex);
                        return t.controller = r, t.menu = this.get("menu") || i.create(), this._super.apply(this, arguments)
                    },
                    activeViewWillChange: function () {
                        if (!this.get("activeView.controller")) return;
                        this.set("activeView.controller.activeNode", null)
                    }.observesBefore("activeView")
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceGroupView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "lib/zentence/views/leaves/date": function (e, t, n) {
            var r = $(document),
                i = t("lib/views/new_date_view"),
                s = t("lib/zentence/views/leaves/leaf_mixin"),
                o = i.extend(s, {
                    tagName: "input",
                    classNames: ["zentence-date"],
                    dateFormat: "mm/dd/yy",
                    date: Em.computed.oneWay("content.value"),
                    hint: Em.computed.alias("content.hint"),
                    placeholder: function () {
                        return this.get("active") ? this.format(this.get("hint")) : ""
                    }.property("active", "hint").cacheable(),
                    select: function (e, t) {
                        var n = this._super.apply(this, arguments);
                        return n && this.set("content.value", this.get("date")), this.get("controller").next(), n
                    },
                    close: function () {
                        var e = this.get("controller");
                        if (!e) return;
                        e.set("activeNode", null)
                    },
                    _dpMouseEnter: function (e) {
                        var t = this.get("dp");
                        this.set("hint", new Date(t.drawYear, +t.drawMonth, e.target.innerText))
                    },
                    _dpMouseOut: function (e) {
                        this.set("hint", new Date)
                    },
                    didActivate: function () {
                        var e = this.get("_clickId");
                        this._super(), this.get("active") ? (r.on(this.get("_clickId"), function (e) {
                            var t = e.target;
                            if ($.contains(this.$(), t) || t.hasClass("ui-corner-all")) return;
                            this.set("controller.activeNode", null)
                        }.bind(this)), Em.run.later(this, function () {
                            this.$().focus()
                        }, 100)) : this.$().blur()
                    },
                    didInsertElement: function () {
                        var e;
                        this._super(), e = this.get("dp").dpDiv, $(".ui-corner-all").on("click", function (e) {
                            e.stopPropagation()
                        }), e.on("mouseenter", ".ui-datepicker-calendar td a", this._dpMouseEnter.bind(this)), e.on("mouseout", ".ui-datepicker-calendar td a", this._dpMouseOut.bind(this)), this.didActivate()
                    },
                    willDestroyElement: function () {
                        var e = this.get("dp");
                        e && e.dpDiv.off(), $(".ui-corner-all").off("click"), this._super()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceDateView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "lib/zentence/views/leaves/tags": function (e, t, n) {
            var r = t("views/tags_view"),
                i = t("lib/zentence/views/leaves/leaf_mixin"),
                s = $(document),
                o = r.extend(i, {
                    tagName: "div",
                    classNames: ["zentence-tags"],
                    user: Zd.currentUser,
                    tokens: Em.computed.oneWay("content.value"),
                    source: Em.computed.alias("user.tokens"),
                    init: function () {
                        this.setProperties({
                            disabled: !1,
                            isInitialized: !0,
                            menu: null
                        }), this._super()
                    },
                    focusIn: function (e) {
                        if (this.get("state") !== "inDOM" || e && e.target === this.get("searchField")[0]) return;
                        this._super.apply(this, arguments)
                    },
                    groupKeyDown: function (e) {
                        e.keyCode === 9 && (this.get("controller")[e.shiftKey ? "prev" : "next"](), this.get("searchField").blur())
                    },
                    groupFocusOut: function () {
                        if (this.get("isDestroyed")) return;
                        this._super(), this.get("controller.activeNode") === this.get("content") && this.set("controller.activeNode", null)
                    },
                    didActivate: function () {
                        this._super(), this.get("active") && this.focusIn()
                    }.observes("active"),
                    didFocus: function () {
                        this.get("isFocused") && this.get("searchField").focus()
                    }.observes("isFocused"),
                    didInsertElement: function () {
                        var e = this.groupKeyDown.bind(this);
                        this._super(), this.get("controller.activeNode") === this.get("content") && this.focusIn(), this.set("_keyDownHandler", e), this.get("searchField").on("keydown", e)
                    },
                    willDestroyElement: function () {
                        this.get("searchField").off("keydown", this.get("_keyDownHandler"))
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceTagsView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "lib/zentence/views/leaves/text": function (e, t, n) {
            var r = t("mixins/caret_navigable"),
                i = t("mixins/content_editable"),
                s = t("lib/zentence/views/leaves/leaf_mixin"),
                o = Em.View.extend(Em.TextSupport, s, r, i, {
                    classNames: ["zentence-text"],
                    spellcheck: "false",
                    template: Em.Handlebars.compile("{{unbound view.value}}"),
                    value: Em.computed.alias("content.value"),
                    focusOut: function () {
                        if (!this.get("active")) return;
                        this._super()
                    },
                    keyUp: function (e) {
                        this.didEditContent(), this._super.apply(this, arguments)
                    },
                    keyDown: function (e) {
                        var t = this.get("controller"),
                            n = e.keyCode;
                        this.willEditContent();
                        switch (n) {
                        case 9:
                            t[e.shiftKey ? "prev" : "next"](), e.stopPropagation(), e.preventDefault();
                            break;
                        case 13:
                            t.set("activeNode", t.next()), e.stopPropagation(), e.preventDefault();
                            break;
                        case 27:
                            t.set("activeNode", null);
                            break;
                        case 37:
                            this.atStart() && (t.prev(), e.stopPropagation(), e.preventDefault());
                            break;
                        case 39:
                            this.atEnd() && (t.next(), e.stopPropagation(), e.preventDefault());
                            break;
                        default:
                        }
                    },
                    didInsertElement: function () {
                        this._super(), this.didActivate(), this.didEditContent(), this.get("active") && this.$()[0].focus()
                    },
                    editableDidChange: function () {
                        if (this.get("state") !== "inDOM") return;
                        this.get("active") ? this.moveCaretToEnd() : (this.get("content").reset(), this.rerender())
                    }.observes("editable"),
                    _elementValueDidChange: function () {
                        this.set("value", this.$().text())
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ZentenceTextView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "components/launchpad_action": function (e, t, n) {
            var r = {
                started: Object.freeze({
                    textKey: "date.datepicker.close_text",
                    action: "goToNextIncompleteTask"
                }),
                complete: Object.freeze({
                    textKey: "txt.admin.views.settings.tickets.show.Settings",
                    action: "goToSettings",
                    extraClass: "btn-info"
                }),
                "new": Object.freeze({
                    textKey: "txt.admin.views.settings.tickets.show.Settings",
                    action: "showSettings",
                    extraClass: "btn-info"
                })
            };
            n.exports = t("lib/component").extend(t("mixins/button_support"), {
                tagName: "button",
                classNames: ["btn"],
                classNameBindings: ["controller.extraClass"],
                action: Em.computed.oneWay("controller.action"),
                target: Em.computed.oneWay("parentView"),
                task: null,
                text: function () {
                    return I18n.t(this.get("controller.textKey"))
                }.property("controller.textKey"),
                controller: function () {
                    var e = r[this.get("task.status")];
                    return $.extend({}, e)
                }.property("task.status")
            })
        }
    }), this.require.define({
        "models/activities": function (e, t, n) {
            var r = Em.Resource.define({
                schema: {
                    id: Number,
                    url: String,
                    verb: String,
                    title: String,
                    actor: {
                        type: Zd.User,
                        nested: !0
                    },
                    user: {
                        type: Zd.User,
                        nested: !0
                    },
                    object: Object,
                    target: Object,
                    created_at: Date,
                    updated_at: Date
                }
            }),
                i = Em.ResourceCollection.extend({
                    type: r,
                    expireIn: 300,
                    url: "/api/v2/activities",
                    parse: function (e) {
                        return this._super((e || {}).activities)
                    }
                }),
                s;
            i.instance = function () {
                return s || (s = i.create()), s
            }, n.exports = i
        }
    }), this.require.define({
        "models/alert": function (e, t, n) {
            var r = Em.Resource.define({
                url: "/api/v2/alerts",
                schema: {
                    id: Number,
                    value: String,
                    linkUrl: {
                        type: String,
                        path: "link_url"
                    },
                    createdAt: {
                        type: Date,
                        path: "created_at"
                    },
                    updatedAt: {
                        type: Date,
                        path: "updated_at"
                    }
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/alerts": function (e, t, n) {
            var r = t("models/alert"),
                i = Em.ResourceCollection.extend({
                    type: r,
                    url: "/api/v2/alerts.json?interface=lotus",
                    expireIn: 86400,
                    autoFetch: !0,
                    parse: function (e) {
                        return e.alerts || e
                    }
                });
            i.reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "All Alerts"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "models/audits/facebook_comment_parser": function (e, t, n) {
            var r = {
                parse: function (e, t) {
                    var n = t;
                    return n.attachment = this._parseAttachment(t.data), n.shares = this._parsePrivateMessageShares(t.data), n.attachments = this._parsePrivateMessageAttachments(t), typeof t.html_body == "string" && (n.value = t.html_body.replace(/a target="_blank" href="\/tickets/g, 'a href="#/tickets')), n
                },
                _parseAttachment: function (e) {
                    if (!e) return;
                    switch (e.type) {
                    case "link":
                        return "<a href='%@' target='_blank' title='%@'>%@</a>".fmt(e.link, e.caption, e.name);
                    case "photo":
                        return "<a href='%@' target='_blank'>%@</a>".fmt(e.link, I18n.t("txt.facebook_integration.views.comment.see_picture"));
                    case "video":
                        var t = e.name || I18n.t("txt.facebook_integration.views.comment.see_video");
                        return "<a href='%@' target='_blank'>%@</a>".fmt(e.link, t);
                    case "question":
                        return "<a href='%@' target='_blank'>%@</a>".fmt(e.link, e.question);
                    default:
                        return null
                    }
                },
                _parsePrivateMessageAttachments: function (e) {
                    var t = e.data;
                    if (!t || !t.attachments) return;
                    var n = t.attachments.map(function (t) {
                        return "<a href='/facebook/communications/%@'>%@ (%@)</a>".fmt(e.via.source.communication, t.name, t.mime_type)
                    });
                    return n
                },
                _parsePrivateMessageShares: function (e) {
                    if (!e || !e.shares) return;
                    var t = e.shares.map(function (e) {
                        return {
                            link: "<a href='%@'>%@ (%@)</a>".fmt(e.link, e.name || e.link, e.mime_type),
                            description: e.description,
                            picture: e.picture
                        }
                    });
                    return t
                }
            };
            n.exports = Object.seal(r)
        }
    }), this.require.define({
        "models/subscription": function (e, t, n) {
            var r = t("lib/subscription/subscription_plan_type"),
                i = Em.Resource.define({
                    url: function () {},
                    schema: {
                        id: Number,
                        plan_type: Number,
                        plan_name: String,
                        file_upload_cap: Number,
                        billing_cycle_type: Number,
                        billing_cycle_name: String,
                        max_agents: Number,
                        voice_optin: Boolean,
                        voice_transcription_optin: Boolean,
                        trial: Boolean,
                        days_left_in_trial: Number,
                        promo_code: String,
                        promo_code_status: String,
                        pricing: Object,
                        credit_card: Object,
                        configuration: Object,
                        sales_model: String,
                        agent_cost_summary: Object,
                        pending_changes: Object,
                        is_elite: Boolean
                    },
                    parse: function (e) {
                        var t = Em.Object.create(e.subscription),
                            n = Em.Object.create(e.pricing.plan),
                            r = e.pricing.available_plans.map(function (e) {
                                return Em.Object.create(e)
                            }),
                            i = Em.Object.create(e.pricing.billing_cycle),
                            s = Em.Object.create(e.pricing.voice),
                            o = Em.Object.create(e.pricing.promo),
                            u = Em.Object.create(e.pricing.charge),
                            a = e.pricing.version,
                            f = Em.Object.create(e.pricing.agent_cost_summary),
                            l = Em.Object.create(e.pricing.pending_changes || {}),
                            c = Em.Object.create({
                                billing_cycle: i,
                                plan: n,
                                voice: s,
                                promo: o,
                                charge: u,
                                agent_cost_summary: f,
                                pending_changes: l,
                                version: a,
                                available_plans: r
                            });
                        return {
                            id: t.id,
                            plan_type: n.id,
                            plan_name: n.name,
                            file_upload_cap: n.file_upload_cap,
                            billing_cycle_type: i.id,
                            billing_cycle_name: i.name,
                            max_agents: t.max_agents,
                            trial: t.trial,
                            days_left_in_trial: t.days_left_in_trial,
                            promo_code: o.code,
                            promo_code_status: o.status,
                            pricing: c,
                            credit_card: e.credit_card,
                            configuration: e.configuration,
                            agent_cost_summary: f,
                            pending_changes: l,
                            voice_optin: s.active,
                            voice_transcription_optin: s.transcription,
                            sales_model: t.sales_model,
                            is_elite: t.is_elite
                        }
                    }
                }).extend({
                    hasFailedFetch: !1,
                    willFetch: function () {
                        this.set("hasFailedFetch", !1)
                    },
                    didFetch: function () {
                        this.set("hasFailedFetch", !1)
                    },
                    didFail: function () {
                        this.set("hasFailedFetch", !0)
                    },
                    expireIn: 31536e3,
                    isNew: !1,
                    modifiableAttributes: ["max_agents", "billing_cycle_type", "promo_code", "plan_type", "voice_optin", "voice_transcription_optin"],
                    toJSON: function () {
                        var e = {}, t = this.get("modifiableAttributes");
                        return t.forEach(function (t) {
                            var n = this.get(t);
                            n !== null && n !== undefined && (e[t] = n)
                        }.bind(this)), {
                            subscription: e
                        }
                    },
                    planName: function () {
                        return r.lookupPlanName(this.get("plan_type"))
                    }.property("plan_type").cacheable(),
                    displayPlanName: function () {
                        if (this.get("planName")) return I18n.t("txt.model.subscription.plan_type.name." + this.get("planName").toLowerCase())
                    }.property("planName").cacheable(),
                    hasPromo: function () {
                        return !!this.get("promo_code")
                    }.property("promo_code").cacheable(),
                    hasPendingChanges: function () {
                        return !!this.get("pending_changes.plan_type")
                    }.property("pending_changes.@each").cacheable(),
                    isStarterPlan: function () {
                        return this.get("plan_type") === 1
                    }.property("plan_type").cacheable(),
                    isRegularPlan: function () {
                        return this.get("plan_type") === 2
                    }.property("plan_type").cacheable(),
                    isPlusPlan: function () {
                        return this.get("plan_type") === 3
                    }.property("plan_type").cacheable(),
                    isEnterprisePlan: function () {
                        return this.get("plan_type") === 4
                    }.property("plan_type").cacheable(),
                    isAssisted: function () {
                        return this.get("sales_model") === "Assisted"
                    }.property("sales_model").cacheable(),
                    isUcsfPricingModel: function () {
                        return this.get("pricing.version") === 4
                    }.property("pricing").cacheable(),
                    billingCycleTypeName: function () {
                        var e = this.get("billing_cycle_name").toLowerCase();
                        return e === "annually" && (e = "annual"), e
                    }.property("pricing.billing_cycle.name").cacheable(),
                    localizedBillingCycleString: function (e, t) {
                        var n;
                        return t ? n = "txt.plan_selection.subscription.%@_billing_cycle".fmt(e) : n = "txt.plan_selection.subscription.%@_billing_cycle_lowercase".fmt(e), I18n.t(n)
                    },
                    localizedBillingCycleName: function () {
                        return this.localizedBillingCycleString(this.get("billingCycleTypeName"), !0)
                    }.property("billing_cycle_name").cacheable(),
                    localizedPendingBillingCycleName: function () {
                        if (!this.get("pending_changes.billing_cycle_type")) return "";
                        var e = this.get("pending_changes.billing_cycle_type"),
                            t = ["", "monthly", "quarterly", "biannually", "annually"][e];
                        return this.localizedBillingCycleString(t, !1)
                    }.property("pending_changes.billing_cycle_type").cacheable(),
                    localizedPendingChangeStartDate: function () {
                        var e = this.get("pending_changes.term_start_date");
                        return e ? $.datepicker.formatDate(I18n.t("txt.plan_selection.subscription.date_format"), new Date(e)) : ""
                    }.property("pending_changes.term_start_date").cacheable(),
                    costForCycle: function () {
                        var e = this.get("plan_type"),
                            t = this.get("is_elite"),
                            n, r;
                        return e === 4 && t ? n = 195 : (r = this.get("billingCycleTypeName"), n = this.priceForBillingCycle(r, e)), n
                    }.property("pricing.billing_cycle").cacheable(),
                    priceForBillingCycle: function (e, t) {
                        var n, r, i = 0;
                        return t === undefined && (t = this.get("pricing.plan.id")), n = this.planByType(t), n && (r = "per_agent_cost_with_%@_billing".fmt(e), i = this._priceFormatter(n.get(r))), i
                    },
                    planByType: function (e) {
                        var t = this.get("pricing.available_plans"),
                            n = _.find(t, function (t) {
                                return t.plan_type == e
                            });
                        return n
                    },
                    formattedNetCharge: function () {
                        var e = this.get("pricing.charge.net");
                        return this._priceFormatter(e)
                    }.property("pricing.charge.net").cacheable(),
                    _priceFormatter: function (e) {
                        return e.toFixed(2).replace(".00", "")
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/current_subscription": function (e, t, n) {
            var r = t("models/subscription"),
                i = r.extend({
                    hasCreditCard: function () {
                        return !!this.get("credit_card.shadowed_number")
                    }.property("credit_card").cacheable(),
                    isUcsfPricing: function () {
                        var e = this.get("pricing.version");
                        return e === 4
                    }.property("pricing.version").cacheable()
                });
            i.reopenClass({
                url: function () {
                    return "/api/v2/account/subscription.json?include=pricing,credit_card"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "models/custom_fields/custom_field": function (e, t, n) {
            var r = Em.Resource.define({
                schema: {
                    id: {
                        type: Number
                    },
                    key: {
                        type: String
                    },
                    type: {
                        type: String
                    },
                    title: {
                        type: String
                    },
                    description: {
                        type: String
                    },
                    position: {
                        type: Number
                    },
                    active: {
                        type: Boolean
                    },
                    required: {
                        type: Boolean
                    },
                    tag: {
                        type: String
                    },
                    customFieldOptions: {
                        type: Object,
                        path: "custom_field_options"
                    },
                    regexpForValidation: {
                        type: String,
                        path: "regexp_for_validation"
                    },
                    createdAt: {
                        type: Date,
                        path: "created_at"
                    },
                    updatedAt: {
                        type: Date,
                        path: "updated_at"
                    },
                    collapsedForAgents: {
                        type: Boolean,
                        path: "collapsed_for_agents"
                    }
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/custom_fields/custom_fields": function (e, t, n) {
            var r = t("models/custom_fields/custom_field"),
                i = Em.ResourceCollection.extend({
                    kind: null,
                    type: r,
                    autoFetch: !1,
                    expireIn: 6e5,
                    remoteExpiryAutoFetch: !0,
                    remoteExpiryKey: function () {
                        return this.get("kind") + "_fields"
                    }.property().cacheable(),
                    url: function () {
                        return "/api/v2/" + this.get("kind") + "_fields.json"
                    }.property().cacheable(),
                    parse: function (e) {
                        var t = e || {};
                        return t = t[this.get("kind") + "_fields"] || [], this._super(t)
                    }
                }),
                s = {};
            i.reopenClass({
                instance: function (e) {
                    return s[e] || (s[e] = i.create({
                        kind: e
                    })), s[e]
                }
            }), n.exports = i
        }
    }), this.require.define({
        "models/dashboard_indicators": function (e, t, n) {
            n.exports = Ember.Resource.define({
                url: "/api/v2/dashboard/agent",
                schema: {
                    account_sat_score_last_60_days: Number,
                    new_and_open_tickets_groups: Number,
                    open_tickets: Number,
                    sat_score_last_60_days: Number,
                    tickets_rated_bad_this_week: Number,
                    tickets_rated_good_this_week: Number,
                    tickets_solved_this_week: Number
                },
                parse: function (e) {
                    return (e || {}).dashboard
                }
            }).reopen({
                openTickets: Em.computed.ifNull("open_tickets", "-"),
                groupOpenTickets: Em.computed.ifNull("new_and_open_tickets_groups", "-"),
                accountSatScoreLast60Days: Em.computed.ifNull("account_sat_score_last_60_days", 0),
                satScoreLast60Days: Em.computed.ifNull("sat_score_last_60_days", 0),
                ticketsRatedBadThisWeek: Em.computed.ifNull("tickets_rated_bad_this_week", 0),
                ticketsRatedGoodThisWeek: Em.computed.ifNull("tickets_rated_good_this_week", 0),
                ticketsSolvedThisWeek: Em.computed.ifNull("tickets_solved_this_week", 0)
            }).reopenClass({
                toString: function () {
                    return "DashboardIndicators"
                }
            })
        }
    }), this.require.define({
        "models/feature": function (e, t, n) {
            var r = Ember.Object.extend(t("lib/account_consumer"), t("lib/settings_consumer"), {
                name: null,
                settingUrl: null,
                category: null,
                plan: null,
                humanName: function () {
                    return I18n.t("txt.admin.feature_labels." + this.get("name"))
                }.property("name").cacheable(),
                description: function () {
                    return I18n.t("txt.admin.feature_descriptions." + this.get("name"))
                }.property("name").cacheable(),
                isAvailable: function () {
                    var e = this.get("currentAccount.planName");
                    switch (this.get("plan")) {
                    case "starter":
                        return !0;
                    case "regular":
                        if (e == "Regular" || e == "Plus" || e == "Enterprise") return !0;
                        break;
                    case "plus":
                        if (e == "Plus" || e == "Enterprise") return !0;
                        break;
                    case "enterprise":
                        if (e == "Enterprise") return !0
                    }
                    return !1
                }.property("plan", "currentAccount.planName").cacheable(),
                isNewlyOfferedInUpgrade: function () {
                    var e = this.get("currentAccount.planName");
                    switch (this.get("plan")) {
                    case "regular":
                        return e == "Starter";
                    case "plus":
                        return e == "Regular";
                    case "enterprise":
                        return e == "Plus"
                    }
                    return !1
                }.property("plan", "currentAccount.planName").cacheable(),
                isActive: function () {
                    return this.get("settings.active_features")[this.get("name")]
                }.property("settings.active_features").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "models/feature_category": function (e, t, n) {
            var r = Ember.Object.extend(t("lib/feature_collection_consumer"), {
                name: null,
                features: function () {
                    var e = this.get("name");
                    return this.get("featureCollection").filter(function (t) {
                        return e == t.get("category")
                    })
                }.property("name", "featureCollection.@each.category").cacheable(),
                humanName: function () {
                    return I18n.t("txt.admin.feature_category_labels." + this.get("name"))
                }.property("name").cacheable(),
                activeFeatures: function () {
                    return this.get("features").filter(function (e) {
                        return e.get("isActive")
                    })
                }.property("features.@each.isActive").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "models/feature_usage_metrics": function (e, t, n) {
            var r = Ember.Resource.define({
                schema: {
                    id: Number,
                    title: String,
                    updated_at: Date
                }
            }),
                i = Ember.Resource.define({
                    schema: {
                        id: Number,
                        title: String,
                        execution_count_past_week: Number,
                        updated_at: Date
                    }
                }),
                s = Ember.Resource.define({
                    schema: {
                        count: Number,
                        updated_past_day_count: Number,
                        used_past_day_count: Number,
                        most_used_past_week: {
                            type: Array,
                            itemType: i,
                            nested: !0
                        },
                        updated_recently: {
                            type: Array,
                            itemType: i,
                            nested: !0
                        }
                    }
                }),
                o = Ember.Resource.define({
                    schema: {
                        count: Number,
                        updated_past_day_count: Number,
                        updated_recently: {
                            type: Array,
                            itemType: r,
                            nested: !0
                        }
                    }
                }),
                u = Ember.Resource.define({
                    autoFetch: !1,
                    url: "/api/v2/feature_usage_metrics.json",
                    schema: {
                        macros: {
                            type: s,
                            nested: !0
                        },
                        automations: {
                            type: s,
                            nested: !0
                        },
                        triggers: {
                            type: s,
                            nested: !0
                        },
                        views: {
                            type: o,
                            nested: !0
                        }
                    },
                    parse: function (e) {
                        return e.feature_usage_metrics
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "models/filter/dashboard_filters": function (e, t, n) {
            var r = t("lib/date_helper").hoursSinceMonday,
                i = t("models/filter"),
                s = Em.Object.extend({
                    currentUser: null,
                    myTicketsFilter: function () {
                        return this.get("currentUser.id") ? i.createDynamic({
                            id: "my_tickets",
                            title: I18n.t("txt.dashboard.filter.my_tickets.title"),
                            groupBy: "status",
                            groupOrder: "asc",
                            sortBy: "updated",
                            sortOrder: "desc",
                            output: ["status", "id", "subject", "requester", "created", "updated", "group"],
                            conditions: {
                                all: [{
                                    field: "assignee",
                                    operator: "is",
                                    value: this.get("currentUser.id")
                                }, {
                                    field: "status",
                                    operator: "is",
                                    value: "open"
                                }],
                                any: []
                            }
                        }) : null
                    }.property("currentUser.id").cacheable(),
                    groupTicketsFilter: function () {
                        if (!this.get("currentUser.group_memberships.length")) return null;
                        var e = this.get("currentUser.group_memberships").mapProperty("group_id"),
                            t = e.map(function (e) {
                                return {
                                    field: "group",
                                    operator: "is",
                                    value: e
                                }
                            });
                        return i.createDynamic({
                            id: "group_tickets",
                            title: I18n.t("txt.dashboard.filter.group_tickets.title"),
                            groupBy: "status",
                            groupOrder: "asc",
                            sortBy: "updated",
                            sortOrder: "desc",
                            output: ["id", "status", "subject", "requester", "created", "updated", "group", "assignee"],
                            conditions: {
                                all: [{
                                    field: "status",
                                    operator: "less_than",
                                    value: "pending"
                                }],
                                any: t
                            }
                        })
                    }.property("currentUser.group_memberships.length").cacheable(),
                    goodTicketsFilter: function () {
                        return this.get("currentUser.id") ? i.createDynamic({
                            id: "good_tickets",
                            title: I18n.t("txt.dashboard.filter.good_tickets.title"),
                            groupBy: "status",
                            groupOrder: "asc",
                            sortBy: "updated",
                            sortOrder: "desc",
                            output: ["status", "id", "subject", "requester", "created", "updated", "group"],
                            conditions: {
                                all: [{
                                    field: "assignee",
                                    operator: "is",
                                    value: this.get("currentUser.id")
                                }, {
                                    field: "SOLVED",
                                    operator: "less_than",
                                    value: r()
                                }],
                                any: [{
                                    field: "satisfaction_score",
                                    operator: "is",
                                    value: 16
                                }, {
                                    field: "satisfaction_score",
                                    operator: "is",
                                    value: 17
                                }]
                            }
                        }) : null
                    }.property("currentUser.id").cacheable(),
                    badTicketsFilter: function () {
                        return this.get("currentUser.id") ? i.createDynamic({
                            id: "bad_tickets",
                            title: I18n.t("txt.dashboard.filter.bad_tickets.title"),
                            groupBy: "status",
                            groupOrder: "asc",
                            sortBy: "updated",
                            sortOrder: "desc",
                            output: ["id", "status", "subject", "requester", "created", "updated", "group"],
                            conditions: {
                                all: [{
                                    field: "assignee",
                                    operator: "is",
                                    value: this.get("currentUser.id")
                                }, {
                                    field: "SOLVED",
                                    operator: "less_than",
                                    value: r()
                                }],
                                any: [{
                                    field: "satisfaction_score",
                                    operator: "is",
                                    value: 4
                                }, {
                                    field: "satisfaction_score",
                                    operator: "is",
                                    value: 5
                                }]
                            }
                        }) : null
                    }.property("currentUser.id").cacheable(),
                    solvedTicketsFilter: function () {
                        return this.get("currentUser.id") ? i.createDynamic({
                            id: "solved_tickets",
                            title: I18n.t("txt.dashboard.filter.solved_tickets.title"),
                            groupBy: "status",
                            groupOrder: "asc",
                            sortBy: "updated",
                            sortOrder: "desc",
                            output: ["id", "status", "subject", "requester", "created", "updated", "group"],
                            conditions: {
                                all: [{
                                    field: "assignee",
                                    operator: "is",
                                    value: this.get("currentUser.id")
                                }, {
                                    field: "status",
                                    operator: "is",
                                    value: "solved"
                                }, {
                                    field: "SOLVED",
                                    operator: "less_than",
                                    value: r()
                                }],
                                any: []
                            }
                        }) : null
                    }.property("currentUser.id").cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "models/filter/filter_definitions": function (e, t, n) {
            var r = t("lib/lotus/singleton"),
                i = Em.Object.extend({}).reopenClass({
                    toString: function () {
                        return "FilterDefinition"
                    }
                }),
                s = Em.ResourceCollection.extend({
                    isSavable: !1,
                    type: i,
                    url: "/api/v2/views/definitions",
                    parse: function (e) {
                        return e ? e.definitions : []
                    },
                    canSort: function (e) {
                        var t = this.get("content").find(function (t) {
                            return t.key == e
                        });
                        return t ? t.sortable : !0
                    }
                }).reopenClass(t("lib/lotus/singleton"), {
                    toString: function () {
                        return "FilterDefinitions"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "models/locale": function (e, t, n) {
            var r = Em.Resource.define({
                schema: {
                    id: Number,
                    locale: String,
                    name: String
                }
            }).reopenClass({
                toString: function () {
                    return "Locale"
                }
            }),
                i = {
                    expireIn: 31536e3,
                    type: r,
                    parse: function (e) {
                        return (e || {}).locales
                    }
                };
            r.all = Em.ResourceCollection.create(_.extend({}, i, {
                url: "/api/v2/locales"
            })), r.agent = Em.ResourceCollection.create(_.extend({}, i, {
                url: "/api/v2/locales/agent"
            })), r.byId = function (e) {
                return this.all.findProperty("id", e) || this.agent.findProperty("id", e) || null
            }, n.exports = r
        }
    }), this.require.define({
        "models/filter/filter_definitions_adapter": function (e, t, n) {
            function s(e) {
                e.type = "list", e.list = {
                    "true": {
                        title: "true",
                        value: !0
                    }
                }
            }

            function o(e, t) {
                e.list = t.reduce(function (e, t) {
                    var n = t.value;
                    return e[n] = {
                        title: t.name,
                        value: n,
                        option_id: t.id
                    }, e
                }, {}) || {}
            }

            function u(e) {
                e.list = r.reduce(function (e, t) {
                    var n = t.get("id");
                    return e[n] = {
                        title: t.get("name"),
                        value: n,
                        code: t.get("locale")
                    }, e
                }, {})
            }

            function a(e) {
                e.type = "organization"
            }

            function f(e, t) {
                var n = e.get("key");
                if (n === "organization_id") return a(t);
                t.type = "list";
                if (n === "locale_id") return u(t);
                var r = e.dropdown_options || e.custom_field_options;
                o(t, r)
            }

            function l(e, t, n) {
                var r = t.get("key"),
                    o = n.key,
                    u = n.type.toLowerCase(),
                    a;
                e.operator[r].list[o] = {
                    title: n.title,
                    value: o
                };
                if (i.indexOf(o) !== -1) return;
                e.value[r] = e.value[r] || {}, a = e.value[r][o] = {};
                switch (u) {
                case "dropdown":
                    f(t, a);
                    break;
                case "checkbox":
                    s(a);
                    break;
                case "integer":
                case "decimal":
                case "regexp":
                case "textarea":
                    a.type = "text";
                    break;
                default:
                    a.type = u
                }
            }
            var r = t("models/locale").all,
                i = Object.freeze(["is_present", "is_not_present"]),
                c = Object.freeze({
                    transform: function (e) {
                        var t = {
                            field: {},
                            operator: {},
                            value: {}
                        };
                        return e.forEach(function (e) {
                            var n = e.get("key"),
                                r = e.get("operators");
                            if (r.get("length") === 0) return;
                            t.field[n] = {
                                title: e.get("title")
                            }, t.operator[n] = {
                                type: "list",
                                list: {}
                            }, r.forEach(l.bind(this, t, e))
                        }, this), t
                    }
                });
            n.exports = c
        }
    }), this.require.define({
        "models/filter/filter_updates_mixin": function (e, t, n) {
            var r = Em.Mixin.create({
                filterTicketsPoller: t("lib/filter_tickets_poller"),
                hasUpdates: function () {
                    return this.get("updatesCount") ? this.get("updatesCount") > 0 : !1
                }.property("updatesCount").cacheable(),
                resetUpdates: function () {
                    this.set("updatesCount", 0), this.set("ownUpdateDates", [])
                },
                addOwnUpdateDate: function (e) {
                    this.get("ownUpdateDates").push(e)
                },
                setUpdatesCount: function () {
                    var e, t, n;
                    this.get("feedMode") ? this.filterTicketsPoller.startPolling(function (r) {
                        e = r.map(function (e) {
                            return (new Date(e.updated)).getTime()
                        }), t = this.get("ownUpdateDates").map(function (e) {
                            return e.getTime()
                        }), e = _.difference(e, t), n = e.length, this.get("lastUpdatedAt") && (n -= _.sortedIndex(e.reverse(), this.get("lastUpdatedAt").getTime() + 1)), n > 29 && (n = "30+"), this.set("updatesCount", n)
                    }.bind(this)) : this.filterTicketsPoller.stopPolling()
                }.observes("feedMode")
            });
            n.exports = r
        }
    }), this.require.define({
        "models/filter/incoming_filter": function (e, t, n) {
            var r = t("models/filter/filter_resource"),
                i = t("models/filter/filter_preset_executor"),
                s = t("models/filter/filter_ticket_parser"),
                o = {
                    id: "incoming",
                    active: !0,
                    title: I18n.t("txt.dashboard.tickets.title"),
                    execution: {
                        columns: [{
                            id: "status"
                        }, {
                            id: "id"
                        }, {
                            id: "subject"
                        }, {
                            id: "requester"
                        }, {
                            id: "updated_requester"
                        }, {
                            id: "group"
                        }, {
                            id: "assignee"
                        }],
                        group: {
                            id: "priority",
                            title: I18n.t("ticket_fields.priority.label")
                        },
                        group_by: "priority",
                        group_order: "desc",
                        sort_by: null,
                        sort_order: "asc"
                    }
                }, u = i.extend({
                    executeURL: function (e, t) {
                        var n = this.urlParams(e, t);
                        return "/api/v2/views/incoming/execute.json?%@".fmt($.param(n))
                    }
                }),
                a = s.extend({
                    parseRow: function (
                        e, t) {
                        return e.updated_requester = e.requester_updated_at, this._super.call(this, e, t)
                    }
                });
            n.exports = t("models/filter").create({
                id: "incoming",
                resource: r.createFromDefinition(null, Em.copy(o, !0)),
                ticketParser: a.create(),
                executor: u.create()
            })
        }
    }), this.require.define({
        "models/filter/view_filter": function (e, t, n) {
            var r = t("models/filter"),
                i = t("models/filter/filter_updates_mixin"),
                s = r.extend(i, {
                    init: function () {
                        this._super(), this.get("countUpdater") == null && this.set("countUpdater", t("lib/rule_count_updater"))
                    },
                    slaId: Em.computed.oneWay("resource.slaId"),
                    shouldShow: !0,
                    ticketCountChangedFromTicketAPI: function () {
                        if (!this.get("tickets.isFetched")) return;
                        var e = this.get("tickets.total");
                        this.setCounts({
                            count: e,
                            countApproximation: e,
                            freshCount: !0
                        })
                    }.observes("tickets.isFetched", "tickets.total"),
                    ticketCount: function () {
                        this.get("freshCount") || this.get("countUpdater").add(this);
                        var e = this.get("count");
                        return _.isNumber(e) ? e < 1e3 ? this.get("countApproximation") : e < 1e6 ? Math.round(e / 100) / 10 + I18n.t("txt.filters.ticket_count_units.thousands") : Math.round(e / 1e5) / 10 + I18n.t("txt.filters.ticket_count_units.millions") : "&mdash;"
                    }.property("count", "freshCount", "countApproximation").cacheable(),
                    setCounts: function (e) {
                        this.setProperties(e)
                    },
                    viewType: function () {
                        var e = "shared";
                        return this.get("slaId") ? e = "sla" : this.get("restriction.type") === "User" && (e = "personal"), e
                    }.property("restriction", "slaId").cacheable(),
                    hasZeroTicketCount: Em.computed.equal("count", 0),
                    selected: !1,
                    expireContent: function () {
                        return this.set("freshCount", !1), this.get("countUpdater").add(this), this._super()
                    }
                }).reopenClass({
                    toString: function () {
                        return "TicketViewFilter"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "models/filter/suspended_filter": function (e, t, n) {
            var r = t("models/filter/filter_resource"),
                i = t("models/filter/filter_preset_executor"),
                s = t("lib/lotus/singleton"),
                o = {
                    id: "suspended",
                    active: !0,
                    title: I18n.t("txt.header.suspended_tickets"),
                    execution: {
                        columns: [{
                            id: "status",
                            title: ""
                        }, {
                            id: "id",
                            title: I18n.t("ticket_fields.id.label")
                        }, {
                            id: "subject",
                            title: I18n.t("txt.admin.views.suspended_tickets.index.subject_label")
                        }, {
                            id: "created_at",
                            title: I18n.t("txt.admin.views.suspended_tickets.index.received_label")
                        }, {
                            id: "cause",
                            title: I18n.t("txt.admin.views.suspended_tickets.index.cause_of_suspension_label")
                        }],
                        group_by: null,
                        group_order: null,
                        sort_by: "created",
                        sort_order: "desc"
                    }
                }, u = Em.Object.extend({
                    parse: function (e) {
                        return e.suspended_tickets.map(function (e) {
                            return e.status = "suspended", e.isSuspended = !0, e.created_at && (e.created_at = new Date(e.created_at)), e.updated_at && (e.updated_at = new Date(e.updated_at)), e.created = e.created_at, e.updated = e.updated_at, e
                        }, this)
                    }
                }),
                a = i.extend({
                    executeURL: function (e, t) {
                        var n = this.get("filter"),
                            r = {
                                per_page: t,
                                page: e,
                                sort_by: n.get("sortBy"),
                                sort_order: n.get("sortOrder")
                            };
                        return "/api/v2/suspended_tickets.json?" + $.param(r)
                    }
                }),
                f = t("models/filter/view_filter").extend({
                    id: "suspended",
                    isSortingEnabled: !0,
                    isSuspendedFilter: !0,
                    resource: r.createFromDefinition(null, o),
                    ticketParser: u.create(),
                    executor: a.create(),
                    currentUser: Zd.currentUser,
                    shouldShow: Em.computed.not("currentUser.restrictedAgent")
                });
            f.reopenClass(s), n.exports = f
        }
    }), this.require.define({
        "models/filter/user_filter/filter_user": function (e, t, n) {
            var r = t("lib/views/timestamp_view"),
                i = t("models/filter/filter_record"),
                s = function (e) {
                    return e ? new Date(e) : null
                }, o = i.extend({
                    init: function () {
                        return Em.setProperties(this, {
                            created_at: s(this.get("created_at")),
                            created: s(this.get("created")),
                            isSelectable: !0
                        }), this._super.apply(this, arguments)
                    },
                    roleDisplayName: function () {
                        var e = this.get("role") || "end-user";
                        return I18n.t("type.updated_by.%@".fmt(e).underscore())
                    }.property("role").volatile(),
                    href: function () {
                        var e = this.get("id");
                        return e ? "#/users/%@".fmt(e) : null
                    }.property("id").cacheable(),
                    isAgent: function () {
                        var e = this.get("role");
                        return e === "agent" || e === "admin"
                    }.property("role").cacheable(),
                    profileImageUrl: function () {
                        var e = new Zendesk.Photo(this.get("photo.content_url"), this.get("email"));
                        return e.url()
                    }.property("photo", "email").cacheable(),
                    createdTimestamp: function () {
                        return r.renderDateTime(this.get("created_at"))
                    }.property("created_at").cacheable()
                });
            n.exports = o
        }
    }), this.require.define({
        "models/user_column": function (e, t, n) {
            var r = t("models/column"),
                i = r.extend({
                    columnRenderers: t("views/filters/renderers/column_renderers").userColumnRenderers
                }).reopenClass({
                    toString: function () {
                        return "UserColumn"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_resource": function (e, t, n) {
            function s(e) {
                if (!e) return;
                var t = e.id;
                return t && {
                    id: e.id.replace(/^custom_fields:/, "custom_fields."),
                    order: e.order || "desc"
                }
            }
            var r = t("models/filter/filter_resource"),
                i = t("models/filter/user_filter/user_filter_resource_parser").create(),
                o = r.extend({
                    resourceName: "UserFilterResource",
                    previewing: !1,
                    isFetchable: function () {
                        if (this.get("previewing")) return !1;
                        var e = Ember.get(this, "resourceState");
                        return e == Ember.Resource.Lifecycle.UNFETCHED || this.get("isExpired")
                    }.property("resourceState", "isExpired").volatile(),
                    columnClass: t("models/user_column"),
                    resourceURL: function () {
                        var e = this.get("id") || this.get("filter.id");
                        return this.get("url") || "/api/v2/user_views/" + e
                    },
                    serializeExecution: function () {
                        var e = this.get("execution"),
                            t = {
                                execution: {}
                            }, n = t.execution.columns = [];
                        this.get("output").toJSON().columns.forEach(function (e) {
                            if (e === "photo") return;
                            n.push(e.replace(/^custom_fields:/, "custom_fields."))
                        });
                        if (!e) return t;
                        var r = s(e.group),
                            i = s(e.sort);
                        return r && (t.execution.group = r), i && (t.execution.sort = i), t
                    },
                    toJSON: function () {
                        var e = this.get("conditions") ? this.get("conditions").toJSON() : {}, t = this.serializeExecution(),
                            n = _.extend({
                                title: this.get("title"),
                                active: this.get("active"),
                                restriction: this.get("restriction") || null
                            }, e, t);
                        return {
                            user_view: n
                        }
                    }
                }).reopenClass({
                    resourceURL: function () {
                        return "/api/v2/user_views.json"
                    },
                    parse: function (e) {
                        return i.parse(e)
                    },
                    toString: function () {
                        return "UserFilterResource"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_content_parser": function (e, t, n) {
            var r = t("models/filter/user_filter/filter_user"),
                i = function (e, t) {
                    return function (n, r) {
                        var i = n[e],
                            s = r[t],
                            o = s.find(function (e) {
                                return e.id == i
                            });
                        return o
                    }
                }, s = {
                    organization: i("organization_id", "organizations")
                }, o = function (e, t) {
                    return e.organization_ids.map(function (e) {
                        var n = t.organizations.find(function (t) {
                            return t.id == e
                        });
                        return n && n.name
                    })
                }, u = Em.Object.extend({
                    filter: null,
                    getRows: function (e) {
                        return e.rows || []
                    },
                    parse: function (e) {
                        return this.getRows(e).map(function (t) {
                            return r.create(this.parseRow(t, e))
                        }, this)
                    },
                    parseRow: function (e, t) {
                        var n, r, i;
                        return e.organization_id && (e.organization_ids ? e.organization_id = o(e, t) : (i = s.organization(e, t), e.organization_id = i && i.name)), e.photo = e.user.photo && e.user.photo.public_filename, Em.keys(e).forEach(function (t) {
                            n = t.indexOf("custom_fields.") === 0;
                            if (!n) return;
                            r = t.replace(/^custom_fields\./, "custom_fields:"), e[r] = e[t], delete e[t]
                        }), e
                    }
                });

            n.exports = u
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_preset_executor": function (e, t, n) {
            var r = t("models/filter/filter_preset_executor"),
                i = r.extend({
                    executeURL: function (e, t) {
                        var n = this.urlParams(e, t);
                        return "/api/v2/user_views/" + this.get("filter.id") + "/execute.json?" + $.param(n)
                    },
                    urlParams: function (e, t) {
                        var n = this.get("filter"),
                            r = n.get("sortBy"),
                            i = n.get("sortOrder"),
                            s = n.get("groupBy"),
                            o = {
                                per_page: t,
                                page: e
                            };
                        return !s && r && i && (o.sort_by = r.replace(/^custom_fields:/, "custom_fields."), o.sort_order = i), o
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_preview_executor": function (e, t, n) {
            var r = t("models/filter/filter_executor"),
                i = r.extend({
                    url: "/api/v2/user_views/preview.json",
                    executeParams: function () {
                        var e = this.get("filter.resource"),
                            t = e.get("conditions").toJSON(),
                            n = e.serializeExecution(),
                            r = {
                                user_view: $.extend({}, t, n)
                            };
                        return JSON.stringify(r)
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_resource_parser": function (e, t, n) {
            var r = t("models/filter/filter_resource_parser"),
                i = r.extend({
                    payloadKey: "user_view",
                    normalizeFields: Em.K,
                    parseConditions: function (e) {
                        if (!e.conditions) return;
                        var t;
                        ["all", "any"].forEach(function (n) {
                            t = e.conditions[n];
                            if (!Ember.isArray(t)) return;
                            t = t.map(function (e) {
                                return e.field = e.field.replace(/^custom_fields\./, "custom_fields:"), e
                            })
                        }), this._super(e)
                    },
                    parseColumns: function (e) {
                        if (!e) return;
                        e.forEach(function (e) {
                            e.id = e.id.replace(/^custom_fields\./, "custom_fields:")
                        }), e.unshift({
                            title: "User photo",
                            id: "photo"
                        })
                    },
                    parseGroup: function (e) {
                        if (!e || !e.id) return;
                        e.id = e.id.replace(/^custom_fields\./, "custom_fields:")
                    },
                    parseSort: function (e) {
                        if (!e || !e.id) return;
                        e.id = e.id.replace(/^custom_fields\./, "custom_fields:")
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserFilterResourceParser"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter": function (e, t, n) {
            var r = t("models/generic_filter"),
                i = t("mixins/factory_with_identity_map"),
                s = t("models/filter/user_filter/user_filter_preset_executor"),
                o = t("models/filter/user_filter/user_filter_preview_executor"),
                u = t("models/filter/user_filter/user_filter_resource"),
                a = t("models/filter/user_filter/user_filter_resource_parser").create(),
                f = t("models/filter/user_filter/filter_user"),
                l = t("models/filter/user_filter/user_filter_content_parser"),
                c = t("models/user_column"),
                h = t("lib/lotus/global_events"),
                p = t("lib/features"),
                d = t("models/filter/user_filter/user_filter_definitions"),
                v = r.extend(t("lib/clean_up_on_destroy"), {
                    resource: null,
                    contentParser: null,
                    executor: null,
                    previewer: null,
                    previewing: Em.computed.alias("resource.previewing"),
                    active: Em.computed.oneWay("resource.active"),
                    output: Em.computed.oneWay("resource.output"),
                    conditions: Em.computed.oneWay("resource.conditions"),
                    columns: Em.computed.oneWay("output.columns"),
                    title: Em.computed.alias("resource.title"),
                    columnClass: c,
                    _sortBy: Em.computed.oneWay("resource.execution.sort.id"),
                    _sortOrder: Em.computed.oneWay("resource.execution.sort.order"),
                    groupBy: Em.computed.oneWay("resource.execution.group.id"),
                    groupOrder: Em.computed.oneWay("resource.execution.group.order"),
                    restriction: Em.computed.alias("resource.restriction"),
                    cleanUpOnDestroy: ["resource", "executor", "previewer"],
                    init: function () {
                        return h.on("@user:expire", this, "expirationHandler"), h.on("@user:merge", this, "expirationHandler"), p.hasFeature("userViews") && d.instance().fetch(), this.get("contentParser") ? this.set("contentParser.filter", this) : this.set("contentParser", l.create({
                            filter: this
                        })), this.get("executor") ? this.set("executor.filter", this) : this.set("executor", s.create({
                            filter: this
                        })), this.get("previewer") ? this.set("previewer.filter", this) : this.set("previewer", o.create({
                            filter: this
                        })), this._super()
                    },
                    totalCount: Em.computed.oneWay("content.total"),
                    content: function () {
                        return t("models/paginated_collection_for_filter").extend({
                            remoteExpiryKey: function () {
                                return "views/" + this.get("source.id") + "/users"
                            }.property("source.id").cacheable(),
                            type: f
                        }).create({
                            source: this
                        })
                    }.property().cacheable(),
                    expireContent: function () {
                        return this.get("content").expireNow && this.get("content").expireNow(), this._super()
                    },
                    parseContent: function (e) {
                        return this.get("contentParser").parse(e)
                    },
                    fetchContent: function (e) {
                        var t = this.get("previewing"),
                            n = this.get(t ? "previewer" : "executor");
                        return n.execute(this.get("content")).done(e).fail(function (e) {
                            this.get("page") > 1 ? this.goToFirstPage() : h.trigger("@user_filter:load_failed", {
                                filter: this,
                                xhr: e
                            })
                        }.bind(this))
                    },
                    fetch: function () {
                        return this.get("resource").fetch()
                    },
                    expire: function () {
                        return this.get("resource").expire()
                    },
                    expirationHandler: function () {
                        this.expireContent()
                    },
                    href: function () {
                        return this.get("id") ? "#/user_filters/" + this.get("id") : !1
                    }.property("id").cacheable(),
                    isOwnedBy: function (e) {
                        var t = this.get("restriction");
                        return t ? t.type === "User" && t.id === e.get("id") : !1
                    },
                    reset: function () {
                        this.expireContent(), this.set("content.content", [])
                    },
                    selected: !1,
                    _viewType: null,
                    viewType: function (e, t) {
                        var n = this.get("restriction.type") === "User" ? "personal" : "shared";
                        return arguments.length === 2 ? (this.set("_viewType", t), t == null ? n : t) : this.get("_viewType") ? this.get("_viewType") : n
                    }.property("restriction.type").cacheable(),
                    destroy: function () {
                        h.off("@user:expire", this, "expirationHandler"), h.off("@user:merge", this, "expirationHandler"), this.constructor.removeFromMap(this), this._super()
                    }
                }).reopenClass(i("create")).reopenClass({
                    toString: function () {
                        return "UserFilter"
                    },
                    create: function (e, t) {
                        e = e || {}, e.id == null && t && t.id && (e.id = t.id), e.id && (e.id = String(e.id));
                        var n = this._super(e);
                        return t && (t = a.parse(t)), n.get("resource") ? (n.set("resource.filter", n), t && n.set("resource.data", t)) : n.set("resource", u.create({
                            filter: n
                        }, t)), n
                    },
                    createWithDefaults: function () {
                        var e = {
                            active: !0,
                            execution: {
                                columns: [{
                                    id: "id",
                                    title: "Id"
                                }, {
                                    id: "name",
                                    title: "Name"
                                }, {
                                    id: "created_at",
                                    title: "Created"
                                }]
                            },
                            conditions: {
                                all: []
                            }
                        };
                        return this.create(null, e)
                    }
                });
            n.exports = v
        }
    }), this.require.define({
        "models/filter/user_filter/org_user_filter_factory": function (e, t, n) {
            var r = t("models/filter/user_filter/user_filter"),
                i = t("models/filter/user_filter/filter_user"),
                s = t("models/filter/user_filter/user_filter_resource"),
                o = t("models/filter/filter_preset_executor"),
                u = t("models/filter/user_filter/user_filter_content_parser"),
                a = {
                    id: null,
                    active: !0,
                    title: "Organization Users",
                    execution: {
                        columns: [{
                            id: "id"
                        }],
                        group: {
                            id: null,
                            order: null
                        },
                        sort: {
                            id: null,
                            order: null
                        }
                    }
                }, f = o.extend({
                    executeURL: function (e, t) {
                        var n = this.urlParams(e, t),
                            r = this.get("filter.relatedOrgId");
                        return "/api/v2/organizations/%@/users?%@".fmt(r, $.param(n))
                    }
                }),
                l = Em.Object.create({
                    parse: function (e) {
                        return (e.users || []).map(function (e) {
                            return i.create(e)
                        }, this)
                    }
                }),
                c = function (e) {
                    return e = e || {}, e.executor = e.executor || f.create(), e.contentParser = e.contentParser || l, e.resource = e.resource || s.createFromDefinition(null, Em.copy(a, !0)), e.isSortingEnabled = !1, r.create(e)
                };
            n.exports = c
        }
    }), this.require.define({
        "models/filter/user_filter/user_filter_definitions": function (e, t, n) {
            var r = t("models/filter/filter_definitions"),
                i = r.extend({
                    url: "/api/v2/user_views/definitions",
                    parse: function (e) {
                        return e = this._super(e), e.forEach(function (e) {
                            e.key = e.key.replace(/^custom_fields./, "custom_fields:")
                        }), e
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserFilterDefinitions"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/filter/user_filter/user_filters": function (e, t, n) {
            var r = Em.ResourceCollection.extend({
                type: t("models/filter/user_filter/user_filter"),
                url: "/api/v2/user_views",
                remoteExpiryKey: "user_views",
                expireContent: function () {
                    this.invoke("expireContent")
                },
                refreshContent: function () {
                    this.invoke("refreshContent")
                },
                parse: function (e) {
                    return e ? this._super(e.user_views || []) : []
                },
                didFetch: function () {
                    if (!this.get("isFetched")) return;
                    this.invoke("set", "resource.resourceState", Em.Resource.Lifecycle.FETCHED)
                }.observes("isFetched")
            });
            n.exports = r
        }
    }), this.require.define({
        "models/filter/view_filters": function (e, t, n) {
            var r = Em.ResourceCollection.extend({
                type: t("models/filter/view_filter"),
                url: "/api/v2/views/compact",
                remoteExpiryKey: "views",
                parse: function (e) {
                    return e ? this._super(e.views || []) : []
                },
                didFetch: function () {
                    if (!this.get("isFetched")) return;
                    this.invoke("set", "resource.resourceState", Em.Resource.Lifecycle.FETCHED)
                }.observes("isFetched")
            });
            n.exports = r
        }
    }), this.require.define({
        "models/forums/entry_flag": function (e, t, n) {
            var r = t("lib/lotus/enum"),
                i = Em.Object.extend(r, {
                    toString: function () {
                        return this.get("_toString")
                    },
                    _toString: function () {
                        return I18n.t("txt.entries.show.label." + this.get("label"))
                    }.property("label").cacheable()
                });
            i.create({
                id: 100,
                label: "answered"
            }), i.create({
                id: 200,
                label: "planned"
            }), i.create({
                id: 201,
                label: "done"
            }), i.create({
                id: 300,
                label: "not_planned"
            }), n.exports = i
        }
    }), this.require.define({
        "models/forums/forum_v2": function (e, t, n) {
            var r = Em.Resource.define({
                url: "/api/v2/forums",
                schema: {
                    id: Number,
                    url: String,
                    name: String,
                    description: String,
                    categoryId: {
                        type: Number,
                        path: "category_id"
                    },
                    localeId: {
                        type: Number,
                        path: "locale_id"
                    },
                    locked: Boolean,
                    position: Number,
                    createdAt: {
                        type: Date,
                        path: "created_at"
                    },
                    updatedAt: {
                        type: Date,
                        path: "updated_at"
                    }
                },
                parse: function (e) {
                    return e.forum || e
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/forums/topic": function (e, t, n) {
            var r = 100,
                i = t("models/forums/forum"),
                s = t("models/forums/entry_flag"),
                o = Em.Resource.define({
                    url: "/api/v1/entries",
                    schema: {
                        id: Number,
                        position: Number,
                        is_locked: Boolean,
                        hits: Number,
                        title: String,
                        is_pinned: Boolean,
                        current_tags: Object,
                        body: String,
                        votes_count: Number,
                        posts_count: Number,
                        is_public: Boolean,
                        is_highlighted: Boolean,
                        flag_type_id: Number,
                        created_at: Date,
                        updated_at: Date,
                        forum: {
                            type: i,
                            nested: !0
                        },
                        submitter: {
                            type: "Zendesk.User"
                        },
                        organization: {
                            type: "models/organization"
                        }
                    }
                }).extend({
                    parse: function (e) {
                        return e && e.hasOwnProperty("forum_id") && (e.forum_id ? (e.forum = e.forum || {}, e.forum.id = e.forum_id) : e.forum = e.forum || null, delete e.forum_id), e
                    },
                    summary: function () {
                        var e = $("<div />");
                        return e.html(this.get("body")), e = e.text(), e.length > r && (e = e.substring(0, r) + "&hellip;"), e
                    }.property("body").cacheable(),
                    flag: function (e, t) {
                        return arguments.length < 2 ? t = this.get("flag_type_id") : (t.get && (t = t.get("id")), this.set("flag_type_id", t)), s[t]
                    }.property("data.flag_type_id").cacheable(),
                    url: function () {
                        return "/entries/" + this.get("id")
                    }.property("id").cacheable()
                }).reopenClass({
                    toString: function () {
                        return "Topic"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "mixins/resettable_resource_collection_mixin": function (e, t, n) {
            var r = Em.Mixin.create({
                reset: function () {
                    this.expireNow(), this.set("content", [])
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/forums/subscriptions": function (e, t, n) {
            function i(e) {
                var n = e.subscriptions || [];
                this._super.call(this, e.subscriptions, {
                    nextPage: e.next_page
                }), n.forEach(function (e) {
                    e.source_type === "Forum" ? e.forum_id = e.source_id : e.source_type === "Entry" && (e.topic_id = e.source_id)
                });
                var r = t("lib/sideload_parser");
                return r.extractSideloads(e.topics, e, {
                    forum_id: "forums"
                }), r.extractSideloads(n, e, {
                    forum_id: "forums",
                    topic_id: "topics"
                }), n
            }
            var r = Ember.Resource.define({
                url: "/api/v2/subscriptions",
                schema: {
                    id: Number,
                    sourceId: {
                        type: Number,
                        path: "source_id"
                    },
                    sourceType: {
                        type: String,
                        path: "source_type"
                    },
                    createdAt: {
                        type: Date,
                        path: "created_at"
                    },
                    subscriber: {
                        type: "Zendesk.User",
                        path: "user_id"
                    },
                    forum: {
                        type: "models/forums/forum_v2",
                        nested: !0
                    },
                    topic: {
                        type: "models/forums/topic_v2",
                        nested: !0
                    }
                }
            }).reopen({
                isForum: Em.computed.equal("sourceType", "Forum"),
                isTopic: Em.computed.equal("sourceType", "Entry"),
                toString: function () {
                    return "Subscription to %@ %@".fmt(this.get("sourceType"), this.get("sourceId"))
                }
            }).reopenClass({
                toString: function () {
                    return "Forum/Topic Subscription"
                }
            });
            n.exports = Ember.ResourceCollection.extend(t("mixins/fetch_all_next_pages"), t("mixins/resettable_resource_collection_mixin"), {
                type: r,
                userId: Ember.required(),
                url: Em.computed.fmt("userId", "/api/v2/users/%@/subscriptions?include=forums,topics"),
                parse: i
            }).reopenClass({
                useIdentityMap: !1,
                toString: function () {
                    return "Forum/Topic Subscriptions"
                }
            })
        }
    }), this.require.define({
        "models/forums/topic_v2": function (e, t, n) {
            var r = t("models/forums/forum_v2"),
                i = Em.Resource.define({
                    url: "/api/v2/topics",
                    schema: {
                        id: Number,
                        url: String,
                        title: String,
                        body: String,
                        submitterId: {
                            type: Number,
                            path: "submitter_id"
                        },
                        updaterId: {
                            type: Number,
                            path: "updater_id"
                        },
                        forumId: {
                            type: Number,
                            path: "forum_id"
                        },
                        locked: Boolean,
                        pinned: Boolean,
                        highlighted: Boolean,
                        forum: {
                            type: r,
                            nested: !0
                        },
                        submitter: {
                            type: Zendesk.User,
                            nested: !0
                        },
                        createdAt: {
                            type: Date,
                            path: "created_at"
                        },
                        updatedAt: {
                            type: Date,
                            path: "updated_at"
                        }
                    },
                    sideloads: ["forums"],
                    parse: function (e) {
                        return e.topic || e
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/forums/topic_collection": function (e, t, n) {
            var r = Em.ResourceCollection.extend(t("mixins/resettable_resource_collection_mixin"), {
                userId: Em.required(),
                url: Em.computed.fmt("userId", "/api/v2/users/%@/topics?include=forums,users"),
                type: t("models/forums/topic_v2"),
                parse: function (e) {
                    var n = e.topics,
                        r = {
                            forum_id: "forums",
                            submitter_id: "users"
                        };
                    return t("lib/sideload_parser").extractSideloads(n, e, r), n
                }
            }).reopenClass({
                useIdentityMap: !1,
                toString: function () {
                    return "V2 Topics Collection"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/forums/topic_comment": function (e, t, n) {
            var r = 100,
                i = Em.Resource.define({
                    schema: {
                        id: Number,
                        body: String,
                        created_at: Date,
                        updated_at: Date,
                        author: {
                            type: "Zendesk.User",
                            path: "user_id"
                        }
                    }
                }).extend({
                    isFetchable: !1,
                    summary: function () {
                        var e = $("<div />");
                        return e.html(this.get("body")), e = e.text(), e.length > r && (e = e.substring(0, r) + "&hellip;"), e
                    }.property("body").cacheable()
                });
            n.exports = i
        }
    }), this.require.define({
        "models/forums/topic_comment_v2": function (e, t, n) {
            var r = t("models/forums/forum_v2"),
                i = t("models/forums/topic_v2"),
                s = Em.Resource.define({
                    url: "/api/v2/topic_comments",
                    schema: {
                        id: Number,
                        url: String,
                        authorId: {
                            type: Number,
                            path: "user_id"
                        },
                        topicId: {
                            type: Number,
                            path: "topic_id"
                        },
                        body: String,
                        informative: Boolean,
                        createdAt: {
                            type: Date,
                            path: "created_at"
                        },
                        updatedAt: {
                            type: Date,
                            path: "updated_at"
                        },
                        topic: {
                            type: i,
                            nested: !0
                        }
                    },
                    sideloads: ["forums", "topics"]
                });
            n.exports = s
        }
    }), this.require.define({
        "models/forums/topic_comment_collection": function (e, t, n) {
            var r = t("models/url"),
                i = Em.ResourceCollection.extend(t("mixins/resettable_resource_collection_mixin"), t("mixins/paginated_collection"), {
                    userId: Em.required(),
                    type: t("models/forums/topic_comment_v2"),
                    perPage: 100,
                    url: function () {
                        var e = "/api/v2/users/%@/topic_comments".fmt(this.get("userId")),
                            t = {
                                per_page: this.get("perPage"),
                                include: "forums,topics"
                            };
                        return this.get("page") > 1 && (t.page = this.get("page")), e + "?" + $.param(t)
                    }.property("userId", "page").cacheable(),
                    parse: function (e) {
                        var n = e.topic_comments,
                            r = {
                                forum_id: "forums",
                                topic_id: "topics"
                            };
                        return t("lib/sideload_parser").extractSideloads(n, e, r), this.set("total", e.count), n
                    }
                }).reopenClass({
                    useIdentityMap: !1,
                    toString: function () {
                        return "V2 Topics Collection"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/forums/topic_vote_v2": function (e, t, n) {
            var r = t("models/forums/forum_v2"),
                i = t("models/forums/topic_v2"),
                s = Em.Resource.define({
                    url: "/api/v2/topic_votes",
                    schema: {
                        id: Number,
                        userId: {
                            type: Number,
                            path: "user_id"
                        },
                        topicId: {
                            type: Number,
                            path: "topic_id"
                        },
                        createdAt: {
                            type: Date,
                            path: "created_at"
                        },
                        topic: {
                            type: i,
                            nested: !0
                        },
                        forum: {
                            type: r,
                            nested: !0
                        }
                    },
                    sideloads: ["forums", "topics"],
                    parse: function (e) {
                        return e.topic || e
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "models/forums/topic_vote_collection": function (e, t, n) {
            var r = Em.ResourceCollection.extend(t("mixins/resettable_resource_collection_mixin"), {
                userId: Em.required(),
                url: Em.computed.fmt("userId", "/api/v2/users/%@/topic_votes?include=forums,topics"),
                type: t("models/forums/topic_vote_v2"),
                parse: function (e) {
                    var n = e.topic_votes,
                        r = {
                            forum_id: "forums",
                            topic_id: "topics"
                        };
                    return t("lib/sideload_parser").extractSideloads(n, e, r), n
                }
            }).reopenClass({
                useIdentityMap: !1,
                toString: function () {
                    return "TopicVoteCollection"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/forums/vote": function (e, t, n) {
            var r = t("models/forums/topic"),
                i = Em.Resource.define({
                    url: function (e) {
                        var t = "/forums/%@/entries/%@/votes";
                        return e.get("isNew") && (t += "/%@"), t.fmt(e.get("topic.forum_id"), e.get("topic_id"), e.get("id"))
                    },
                    schema: {
                        id: Number,
                        created_at: Date,
                        updated_at: Date,
                        deleted_at: Date,
                        topic: {
                            type: r,
                            path: "entry_id"
                        },
                        voter: {
                            type: "Zendesk.User",
                            path: "user_id"
                        }
                    }
                }).extend({
                    forum: function () {
                        return this.get("topic.forum")
                    }.property("topic.forum_id").cacheable()
                });
            n.exports = i
        }
    }), this.require.define({
        "models/ipm/feature_notification": function (e, t, n) {
            var r = Em.Resource.define({
                url: "/api/v2/ipm/feature_notifications",
                schema: {
                    id: Number,
                    title: String,
                    body: String,
                    imageName: {
                        type: String,
                        path: "image_name"
                    },
                    callToActionText: {
                        type: String,
                        path: "call_to_action_text"
                    },
                    callToActionUrl: {
                        type: String,
                        path: "call_to_action_url"
                    },
                    learnMoreUrl: {
                        type: String,
                        path: "learn_more_url"
                    },
                    createdAt: {
                        type: Date,
                        path: "created_at"
                    },
                    updatedAt: {
                        type: Date,
                        path: "updated_at"
                    }
                }
            }).extend({
                dismissed: !1,
                imageUrl: function () {
                    return "//assets.zendesk.com/agent/assets/ipm/feature_notifications/" + this.get("imageName")
                }.property("imageName").cacheable(),
                dismiss: function () {
                    this.set("dismissed", !0);
                    var e = this;
                    return Ember.Resource.ajax({
                        type: "DELETE",
                        operation: "destroy",
                        url: this.resourceURL(),
                        resource: this
                    }).fail(function () {
                        e.set("dismissed", !1)
                    })
                },
                hasCallToAction: Em.computed.and("callToActionUrl", "callToActionText")
            });
            n.exports = r
        }
    }), this.require.define({
        "models/ipm/feature_notifications": function (e, t, n) {
            var r = Em.ResourceCollection.extend({
                type: "models/ipm/feature_notification",
                url: "/api/v2/ipm/feature_notifications.json",
                parse: function (e) {
                    return e.feature_notifications || e
                }
            }).reopen({
                unread: function () {
                    return this.filterProperty("dismissed", !1)
                }.property("content.@each.dismissed"),
                sorted: function () {
                    var e = this.get("content").toArray();
                    return e.sort(function (e, t) {
                        return e = e.get("createdAt"), t = t.get("createdAt"), e < t ? 1 : e > t ? -1 : 0
                    }), e
                }.property("content.@each").cacheable()
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "All Feature Notifications"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "models/job_status": function (e, t, n) {
            var r = Em.Object.extend({
                init: function () {
                    this.set("response", Em.Object.create()), Em.run.next(this, this.update)
                },
                response: Em.Object.create(),
                complete: Em.K,
                url: function () {
                    return "/api/v2/job_statuses/" + this.get("id")
                }.property("id").cacheable(),
                isComplete: Em.computed.equal("response.status", "completed"),
                isWorking: function () {
                    var e = this.get("response.status");
                    return !e || e === "working" || e === "queued"
                }.property("response.status").volatile(),
                fireCallback: function () {
                    this.get("isWorking") || (this.complete(), this.complete = Em.K)
                }.observes("isComplete", "isWorking"),
                update: function () {
                    if (!this.get("id") || !this.get("isWorking")) return;
                    Em.Resource.ajax({
                        url: this.get("url"),
                        context: this
                    }).done(function (e) {
                        e && this.response.setProperties(e.job_status)
                    }.bind(this)).always(function (e) {
                        e && this.response.setProperties(e.job_status), setTimeout(this.update.bind(this), 1e3)
                    }.bind(this))
                },
                errors: function () {
                    var e = this.get("response.results");
                    if (e) return e.filterProperty("success", !1)
                }.property("response.results.@each.success").cacheable(),
                successes: function () {
                    var e = this.get("response.results");
                    if (e) return e.filterProperty("success", !0)
                }.property("response.results.@each.success").cacheable(),
                progress: function () {
                    var e = this.get("response"),
                        t = 0,
                        n;
                    return e && (n = e.get("total"), n && (t = (e.get("progress") || 0) * 100 / n)), t
                }.property("response.total", "response.progress").cacheable(),
                description: function () {
                    var e = this.get("response"),
                        t = I18n.t("txt.ticket.bulk_modal.wait"),
                        n, r;
                    return e && (n = e.get("total"), n && (r = e.get("progress") || 0, t = I18n.t("txt.ticket.bulk_modal.progress_indicator", {
                        progress: r,
                        total: n
                    }))), t
                }.property("response.total", "response.progress").volatile()
            });
            n.exports = r
        }
    }), this.require.define({
        "models/macro": function (e, t, n) {
            var r = t("lib/ticket_parser"),
                i = Em.Resource.define({
                    schema: {
                        id: Number,
                        title: String,
                        availability_type: String
                    }
                }).extend({
                    evaluateOnTicket: function (e, n) {
                        var r = this,
                            i = t("lib/macro_ticket_serializer"),
                            s = _.extend({
                                ticket_id: e.get("id") || 0
                            }, i.serialize(e));
                        return $.ajax({
                            type: "POST",
                            url: "/api/v1/macros/" + this.get("id") + "/apply.json",
                            data: s
                        }).success(function (t) {
                            n(r._convertMacroResult(t), r, e)
                        })
                    },
                    _convertMacroResult: function (e) {
                        e = r.parseTags(e), e = r.parseTags(e, "remove_tags");
                        var t = e.comment;
                        t && t.is_public && (t.is_public = t.is_public === "true"), e.ticket_form_id && (e.ticketFormId = e.ticket_form_id, delete e.ticket_form_id);
                        var n = {}, i = /ticket_fields_(\d+)/,
                            s;
                        for (s in e) {
                            if (!e.hasOwnProperty(s) || !i.test(s)) continue;
                            n["custom_field_" + i.exec(s)[1]] = e[s], delete e[s]
                        }
                        return _.extend(e, n), e
                    }
                });
            i.all = Em.ResourceCollection.create({
                expireIn: 31536e3,
                type: i,
                url: "/api/v1/macros.json",
                remoteExpiryKey: "macros"
            }), n.exports = i
        }
    }), this.require.define({
        "models/organizations": function (e, t, n) {
            var r = t("lib/lotus/global_events"),
                i = Em.ResourceCollection.extend({
                    url: "/api/v2/organizations?per_page=30",
                    type: "models/organization",
                    expireIn: 3600,
                    total: 0,
                    next_page: null,
                    previous_page: null,
                    remoteExpiryKey: "organizations",
                    remoteExpiryAutoFetch: !0,
                    init: function () {
                        r.on("@organization:was_updated", this, this.onOrganizationChange), r.on("@organization:was_deleted", this, this.onOrganizationChange), this._super()
                    },
                    destroy: function () {
                        r.off("@organization:was_updated", this, this.onOrganizationChange), r.off("@organization:was_deleted", this, this.onOrganizationChange), this._super()
                    },
                    isPaginated: function () {
                        return this.get("next_page") != null || this.get("previous_page") != null
                    }.property("next_page", "previous_page").cacheable(),
                    onOrganizationChange: function () {
                        this.expireNow()
                    },
                    parse: function (e) {
                        return e.count && this.set("total", e.count), this.set("next_page", e.next_page), this.set("previous_page", e.previous_page), e.organizations || e
                    }
                }).reopenClass(t("lib/lotus/singleton"), {
                    toString: function () {
                        return "Organizations"
                    },
                    suggestNameFromDomain: function (e) {
                        if (!e) return !1;
                        var t = ["gmail.com", "googlemail", "yahoo.com", "hotmail.com", "aol.com", "msn.com", "comcast.net", "sbcglobal.net", "yahoo.co.uk", "bellsouth.net", "verizon.net", "earthlink.net", "cox.net", "rediffmail.com", "yahoo.ca", "btinternet.com", "charter.net", "shaw.ca", "ntlworld.com", "me.com", "excite.com", "mail.com", "facebook.com", "mac.com", "live.com", "aim.com", "mail.ru", "optonline.net", "zendesk.com"];
                        this._instance && (t = t.concat(_.flatten(this._instance.mapProperty("domain_names"))));
                        if (t.contains(e)) return !1;
                        var n = e.replace(/\..*/, "");
                        return n === "" ? !1 : n.capitalize()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "models/preview_subscription": function (e, t, n) {
            var r = t("lib/subscription/advertised_features"),
                i = t("models/subscription"),
                s = 4,
                o = 3,
                u = i.extend(t("lib/fetch_filter"), {
                    toJSON: function () {
                        return this.get("isStarterPlan") && this.get("isUcsfPricingModel") && (this.set("billing_cycle_type", s), this.set("max_agents", o)), this._super.apply(this, arguments)
                    },
                    advertisedFeatures: function () {
                        return r.lookupByPlanType(this.get("plan_type")).features
                    }.property("plan_type").cacheable(),
                    fetchResponseFilter: function (e) {
                        return this.get("max_agents") === e.subscription.max_agents && this.get("plan_type") === e.pricing.plan.id && this.get("billing_cycle_type") === e.pricing.billing_cycle.id && (this.get("promo_code") || "") === (e.pricing.promo.code || "")
                    },
                    differsFrom: function (e) {
                        var t = function (t) {
                            var n = this.get(t) || "",
                                r = e.get(t) || "";
                            return r !== n
                        }.bind(this);
                        return this.get("modifiableAttributes").some(t)
                    },
                    ensurePromoCodePermission: function (e) {
                        var t = this.get("trial"),
                            n = this.get("billing_cycle_type") !== e.get("billing_cycle_type"),
                            r = this.get("max_agents") !== e.get("max_agents"),
                            i = this.get("plan_type") !== e.get("plan_type"),
                            s = this.get("max_agents") < e.get("max_agents"),
                            o = this.get("plan_type") < e.get("plan_type");
                        if (t) {
                            this.set("isPromoCodeAllowed", !0);
                            return
                        }
                        if (n || s || o) {
                            this.set("isPromoCodeAllowed", !1), this.set("promo_code", "");
                            return
                        }
                        var u = (this.get("promo_code") || "") === "";
                        if (u && !s && !o) {
                            this.set("isPromoCodeAllowed", r || i), this.set("promo_code", e.get("promo_code"));
                            return
                        }
                        this.set("isPromoCodeAllowed", (r || i) && (!s || !o))
                    }
                });
            u.reopenClass({
                url: function (e) {
                    return "/api/v2/account/subscription/preview.json?include=pricing,configuration&%@".fmt($.param(e.toJSON()))
                },
                parse: function (e) {
                    var t = this._super.apply(this, arguments);
                    return delete t.voice_optin, delete t.voice_transcription_optin, t
                },
                sideloads: null,
                isPromoCodeAllowed: !1
            }), n.exports = u
        }
    }), this.require.define({
        "models/role_change": function (e, t, n) {
            var r = function (e, t) {
                this.oldRole = e, this.newRole = t
            }, i = {
                    "end-user": 10,
                    agent: 20,
                    admin: 30
                };
            r.prototype.isUpgrading = function () {
                return this._getWeight(this.oldRole) < this._getWeight(this.newRole)
            }, r.prototype.isDowngrading = function () {
                return this._getWeight(this.oldRole) > this._getWeight(this.newRole)
            }, r.prototype.isChanging = function () {
                return this._getWeight(this.oldRole) !== this._getWeight(this.newRole)
            }, r.prototype._getWeight = function (e) {
                return typeof e == "number" && (e = "agent"), i[e]
            }, n.exports = Object.freeze({
                instance: function (e, t) {
                    return new r(e, t)
                }
            })
        }
    }), this.require.define({
        "models/screencast": function (e, t, n) {
            n.exports = Em.Resource.define({
                schema: {
                    id: String,
                    url: String,
                    thumbnail: String,
                    comment: {
                        type: t("models/events/comment")
                    }
                }
            }).reopenClass({
                toString: function () {
                    return "Screencast"
                }
            })
        }
    }), this.require.define({
        "models/search/search_article": function (e, t, n) {
            var r = function (e) {
                return e.url = e.html_url, e.created_at = new Date(e.created_at), {
                    model: e,
                    url: e.url,
                    name: e.name,
                    resultType: "article",
                    target: "_blank"
                }
            };
            r.create = r, n.exports = r
        }
    }), this.require.define({
        "models/search/search_default": function (e, t, n) {
            var r = function (e) {
                return e.url = e.href, {
                    model: e,
                    url: e.url
                }
            };
            r.create = r, n.exports = r
        }
    }), this.require.define({
        "models/search/search_group": function (e, t, n) {
            var r = function (e) {
                return e.href = "#/admin/people/groups/" + e.id, e.url = e.href, e.created_at = new Date(e.created_at), {
                    model: e,
                    url: e.url,
                    resultType: "group"
                }
            };
            r.create = r, n.exports = r
        }
    }), this.require.define({
        "models/search/search_organization": function (e, t, n) {
            var r = t("models/group"),
                i = function (e) {
                    e.href = "#/organizations/" + e.id, e.url = e.href, e.created_at = new Date(e.created_at);
                    var t = e.group_id != null && r.create({
                        id: e.group_id
                    }).get("name");
                    return t && (e.group = {
                        name: t
                    }), e.domain_names && (e["default"] = e.domain_names.join(" ")), {
                        model: e,
                        url: e.url,
                        resultType: "organization"
                    }
                };
            i.create = i, n.exports = i
        }
    }), this.require.define({
        "models/search/search_ticket": function (e, t, n) {
            var r = t("lib/ticket_parser").parseSubject,
                i = t("models/ticket/types"),
                s = function (e) {
                    return e.typeName = e.type || i.Types[i.Types.TICKET], e.statusName = e.status, e.statusMnemonic = I18n.t("txt.ticket.status.mnemonic_" +
                        e.statusName), e.id = e.id || e.nice_id, e.href = "#/tickets/" + e.id, e.url = e.href, e.created_at = new Date(e.created_at), e = r(e), {
                        model: e,
                        url: e.url,
                        resultType: "ticket"
                    }
                };
            s.create = s, n.exports = s
        }
    }), this.require.define({
        "models/search/search_user": function (e, t, n) {
            var r = function (e) {
                e.href = "#/users/" + e.id, e.url = e.href, e.created_at = new Date(e.created_at);
                var t = Em.get(e, "photo.thumbnails.0.content_url");
                return e.profileImageUrl = (new Zd.Photo(t, e.email)).url(), e.organization && (e.organization.href = "#/organizations/" + e.organization.id), {
                    model: e,
                    url: e.url,
                    resultType: "user"
                }
            };
            r.create = r, n.exports = r
        }
    }), this.require.define({
        "models/search/search_topic": function (e, t, n) {
            var r = function (e) {
                return e.url = "/entries/" + e.id, e.created_at = new Date(e.created_at), e.forum && (e.forum.url = "/forums/" + e.forum.id, e.forum.title = e.forum.name), {
                    model: e,
                    url: e.url,
                    resultType: "topic",
                    target: "_blank"
                }
            };
            r.create = r, n.exports = r
        }
    }), this.require.define({
        "models/search/search_result_collection": function (e, t, n) {
            var r = t("models/search/search_ticket"),
                i = t("models/search/search_user"),
                s = t("models/search/search_organization"),
                o = t("models/search/search_topic"),
                u = t("models/search/search_article"),
                a = t("models/search/search_group"),
                f = t("models/search/search_default"),
                l = function () {};
            l.create = function (e, t) {
                switch (t.result_type) {
                case "ticket":
                    return r.create(t);
                case "user":
                    return i.create(t);
                case "organization":
                    return s.create(t);
                case "topic":
                    return o.create(t);
                case "group":
                    return a.create(t);
                case "article":
                    return u.create(t);
                default:
                    return f.create(t)
                }
            }, n.exports = Em.ResourceCollection.extend(t("lib/pagination"), {
                type: l,
                parse: function (e) {
                    this.set("resultCount", e.count);
                    var n = t("lib/sideload_parser");
                    return n.extractSideloads(e.results, e, {
                        requester_id: "users",
                        organization_id: "organizations",
                        group_id: "groups",
                        forum_id: "forums"
                    }), this._super.call(this, e.results)
                }
            })
        }
    }), this.require.define({
        "models/status": function (e, t, n) {
            var r = Em.Object.extend(t("lib/account_consumer"), {
                id: null,
                context: null,
                assignable: !0,
                enabled: !0,
                useHold: Em.computed.bool("currentAccount.settings.useStatusHold"),
                isNew: Em.computed.bool("ticket.serverCopy.hasNewStatus"),
                isDisabled: Em.computed.not("enabled"),
                isSelected: function () {
                    return this.get("ticket.status_id") === this.get("id")
                }.property("ticket.status_id", "id").cacheable(),
                value: Em.computed.alias("id"),
                ticket: function () {
                    return this.get("context.ticket")
                }.property("context.ticket").cacheable(),
                name: function () {
                    return Zd.Ticket.Statuses[this.get("id")]
                }.property("id").cacheable(),
                labelDefault: function () {
                    return Em.I18n.t("txt.ticket.actions.save_as_%@".fmt(this.get("name")))
                }.property("name").cacheable(),
                label: function (e, t) {
                    return Em.typeOf(t) === "string" ? (this.get("isSelected") && this.set("context.statusDisplayLabel", t), t) : this.get("labelDefault")
                }.property("labelDefault").cacheable(),
                title: function () {
                    return this.get("isDisabled") ? null : Em.I18n.t("txt.ticket.status.%@.tip".fmt(this.get("name")))
                }.property("isDisabled", "name").cacheable(),
                visible: function (e, t) {
                    arguments.length === 1 && (t = !0);
                    var n = this.get("id"),
                        r = !! t;
                    return n === Zd.Ticket.Statuses.NEW ? this.get("isNew") && r : n === Zd.Ticket.Statuses.HOLD ? this.get("useHold") && r : r
                }.property("useHold", "isNew", "id").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "models/support_topic": function (e, t, n) {
            var r = 100,
                i = Em.Resource.define({
                    sideloads: "users",
                    schema: {
                        id: Number,
                        title: String,
                        body: String,
                        isPinned: {
                            type: Boolean,
                            path: "is_pinned"
                        },
                        currentTags: {
                            type: Object,
                            path: "current_tags"
                        },
                        votesCount: {
                            type: Number,
                            path: "votes_count"
                        },
                        postsCount: {
                            type: Number,
                            path: "posts_count"
                        },
                        isPublic: {
                            type: Boolean,
                            path: "is_public"
                        },
                        isHighlighted: {
                            type: Boolean,
                            path: "is_highlighted"
                        },
                        flagTypeId: {
                            type: Number,
                            path: "flag_type_id"
                        },
                        createdAt: {
                            type: Date,
                            path: "created_at"
                        },
                        updatedAt: {
                            type: Date,
                            path: "updated_at"
                        },
                        submitter: {
                            type: Zendesk.User,
                            nested: !0
                        }
                    }
                }).extend({
                    url: function () {
                        return "https://support.zendesk.com/entries/" + this.get("id")
                    }.property("id").cacheable()
                });
            n.exports = i
        }
    }), this.require.define({
        "models/survey_response": function (e, t, n) {
            n.exports = Em.Resource.define({
                url: function () {
                    return "/api/v2/account/survey_response.json"
                },
                schema: {
                    id: Number,
                    industry: String,
                    employee_count: String,
                    target_audience: String,
                    support_structure: String,
                    customer_count: String,
                    team_count: Number,
                    agent_count: Number
                },
                parse: function (e) {
                    return e && (e = e.survey_response || e), e
                }
            }).extend({
                autoFetch: !1,
                toJSON: function () {
                    var e = {
                        industry: this.get("industry"),
                        employee_count: this.get("employee_count"),
                        target_audience: this.get("target_audience"),
                        support_structure: this.get("support_structure"),
                        customer_count: this.get("customer_count"),
                        team_count: this.get("team_count"),
                        agent_count: this.get("agent_count")
                    };
                    return {
                        survey_response: e
                    }
                }
            })
        }
    }), this.require.define({
        "models/ticket_field": function (e, t, n) {
            function a(e) {
                var t = {
                    createdAt: new Date,
                    updatedAt: new Date,
                    active: !0,
                    required: !1,
                    removable: !1,
                    visibleInPortal: !0,
                    editableInPortal: !0,
                    requiredInPortal: !1,
                    collapsedForAgents: !1,
                    tag: null,
                    id: null,
                    regexpForValidation: null
                };
                Em.keys(t).forEach(function (n) {
                    e.get(n) == null && e.set(n, t[n])
                })
            }
            var r = t("lib/utils").htmlEscape,
                i = {
                    subject: "subject",
                    description: "description",
                    status: "status_id",
                    tickettype: "ticket_type_id",
                    priority: "priority_id",
                    group: "group_id",
                    assignee: "assignee_id"
                }, s = {
                    subject: "subject",
                    description: "description",
                    status: "status",
                    tickettype: "type",
                    priority: "priority",
                    group: "group_id",
                    assignee: "assignee_id"
                }, o = {
                    subject: "subject",
                    status_id: "status",
                    ticket_type_id: "tickettype",
                    priority_id: "priority",
                    group_id: "group",
                    assignee_id: "assignee"
                }, u = _.extend({}, i, {
                    description: "subject",
                    status: "status",
                    tickettype: "type",
                    priority: "priority",
                    group: "group",
                    assignee: "assignee"
                }),
                f = Em.Resource.define({
                    schema: {
                        id: Number,
                        type: String,
                        title: String,
                        description: String,
                        position: Number,
                        active: Boolean,
                        required: Boolean,
                        removable: Boolean,
                        collapsedForAgents: Boolean,
                        regexpForValidation: String,
                        titleInPortal: String,
                        visibleInPortal: Boolean,
                        editableInPortal: Boolean,
                        requiredInPortal: Boolean,
                        createdAt: Date,
                        updatedAt: Date,
                        tag: String,
                        customFieldOptions: Object,
                        sub_type_id: Number
                    },
                    parse: function (e) {
                        return ["collapsed_for_agents", "regexp_for_validation", "title_in_portal", "visible_in_portal", "editable_in_portal", "required_in_portal", "custom_field_options", "created_at", "updated_at"].forEach(function (t) {
                            e[t.camelize()] = e[t], delete e[t]
                        }), e.type === "basic_priority" && (e.type = "priority", e.sub_type_id = Zendesk.Ticket.PrioritySets.BASIC), e
                    }
                }).reopenClass({
                    isCustomFieldByAttributeName: function (e) {
                        return o[e] == null
                    }
                }).extend({
                    init: function () {
                        a(this)
                    },
                    titleTranslationKey: function () {
                        var e = u[this.get("type")];
                        return e == null ? null : "ticket_fields.%@.label".fmt(e)
                    }.property("type").cacheable(),
                    humanizedName: function () {
                        var e = this.get("titleTranslationKey"),
                            t = e ? I18n.t(e) : this.get("title");
                        return t
                    }.property("titleTranslationKey", "title").cacheable(),
                    toString: function () {
                        return this.get("humanizedName")
                    },
                    possibleValues: function (e) {
                        switch (this.get("type")) {
                        case "status":
                            return [Zendesk.Ticket.Statuses.OPEN, Zendesk.Ticket.Statuses.PENDING, Zendesk.Ticket.Statuses.SOLVED];
                        case "tickettype":
                            var t = [Zendesk.Ticket.Types.TICKET, Zendesk.Ticket.Types.QUESTION, Zendesk.Ticket.Types.INCIDENT, Zendesk.Ticket.Types.PROBLEM, Zendesk.Ticket.Types.TASK];
                            return e && e.get("ticket_type_id") && e.get("ticket_type_id") !== Zendesk.Ticket.Types.TICKET && t.shift(), t;
                        case "priority":
                            var n;
                            return this.get("sub_type_id") === Zendesk.Ticket.PrioritySets.BASIC ? t = [Zendesk.Ticket.Priorities.NONE, Zendesk.Ticket.Priorities.NORMAL, Zendesk.Ticket.Priorities.HIGH] : t = [Zendesk.Ticket.Priorities.NONE, Zendesk.Ticket.Priorities.LOW, Zendesk.Ticket.Priorities.NORMAL, Zendesk.Ticket.Priorities.HIGH, Zendesk.Ticket.Priorities.URGENT], e && e.get("priority_id") && e.get("priority_id") !== Zendesk.Ticket.Priorities.NONE && t.shift(), t;
                        case "checkbox":
                            return [!0, !1];
                        default:
                            return undefined
                        }
                    },
                    deserializeValue: function (e) {
                        return this.get("isCustomField") && this.get("type") === "checkbox" ? e == "1" : e
                    },
                    serializeValue: function (e) {
                        if (this.get("isCustomField")) {
                            this.get("type") === "checkbox" && (e = e && e !== "0" ? "1" : "0");
                            if (this.get("type") === "date" && e) {
                                var t = new Date(e);
                                t && (e = t.to_s())
                            }
                            e = e === "__NO_VALUE__" ? "" : e
                        }
                        return e = e == null ? "" : e, e
                    },
                    humanizeValue: function (e) {
                        var t;
                        e !== null && e !== undefined && (t = parseInt(e.toString(), 10));
                        switch (this.get("type")) {
                        case "status":
                            return I18n.t("type.status." + Zendesk.Ticket.Statuses[t]);
                        case "tickettype":
                            return t ? I18n.t("type.ticket." + Zendesk.Ticket.Types[t]) : "-";
                        case "priority":
                            return t ? I18n.t("type.priority." + Zendesk.Ticket.Priorities[t]) : "-";
                        case "FieldSatisfactionScore":
                            return Zendesk.Ticket.SatisfactionTypes[t];
                        case "checkbox":
                            return e === "1" || e === !0 ? I18n.t("ticket_fields.field_checkbox.checked_label") : I18n.t("ticket_fields.field_checkbox.unchecked_label");
                        case "tagger":
                            return this._customFieldOptionLabel(e);
                        default:
                            return e === undefined || e === null ? "-" : r(e)
                        }
                    },
                    mapStringToValue: function (e) {
                        var t = function (e, t) {
                            var n;
                            _.each(e, function (e, r) {
                                e == t && (n = r)
                            });
                            if (n !== null && n !== undefined) return parseInt(n.toString(), 10)
                        };
                        switch (this.get("type")) {
                        case "status":
                            return t(Zendesk.Ticket.Statuses, e);
                        case "tickettype":
                            return t(Zendesk.Ticket.Types, e);
                        case "priority":
                            return t(Zendesk.Ticket.Priorities, e);
                        case "FieldSatisfactionScore":
                            return t(Zendesk.Ticket.SatisfactionTypes, e);
                        case "checkbox":
                            return e == "yes";
                        default:
                            return e
                        }
                    },
                    mapValueToString: function (e) {
                        var t;
                        e !== null && e !== undefined && (t = parseInt(e.toString(), 10));
                        switch (this.get("type")) {
                        case "status":
                            return Zendesk.Ticket.Statuses[t];
                        case "tickettype":
                            return Zendesk.Ticket.Types[t];
                        case "priority":
                            return Zendesk.Ticket.Priorities[t];
                        case "FieldSatisfactionScore":
                            return Zendesk.Ticket.SatisfactionTypes[t];
                        case "checkbox":
                            return e ? "yes" : "no";
                        default:
                            return e
                        }
                    },
                    isBlank: function (e) {
                        if (!this.get("data.id")) return !1;
                        var t = this.get("v2AttributeName"),
                            n = e.get(t);
                        return t === "priority" && (n = e.get("priority_id")), t === "type" || t === "priority" ? !n || n === "-" : !n
                    },
                    _customFieldOptionLabel: function (e) {
                        var t = this.get("customFieldOptions").findProperty("value", e);
                        return t && t.name
                    },
                    attributeName: function () {
                        return this.get("isCustomField") ? "custom_field_%@".fmt(this.get("id")) : i[this.get("type")]
                    }.property("type", "id").cacheable(),
                    v2AttributeName: function () {
                        return this.get("isCustomField") ? "custom_field_%@".fmt(this.get("id")) : s[this.get("type")]
                    }.property("type", "id").cacheable(),
                    isCustomField: function () {
                        return i[this.get("type")] == null
                    }.property("type", "id").cacheable()
                });
            n.exports = f
        }
    }),
function () {
    var e = require("models/ticket_field"),
        t = [e.create({
            titleTranslationKey: "ticket_fields.id.label",
            attributeName: "id"
        }), e.create({
            titleTranslationKey: "ticket_fields.created.label",
            attributeName: "created_at",
            regexpForValidation: /\d{4}-d{2}-d{2}/
        }), e.create({
            titleTranslationKey: "ticket_fields.due_date.label",
            attributeName: "due_date",
            regexpForValidation: /\d{4}-d{2}-d{2}/,
            removable: !0
        }), e.create({
            titleTranslationKey: "ticket.properties.incident.link",
            attributeName: "problem_id",
            removable: !0
        }), e.create({
            titleTranslationKey: "ticket_fields.current_tags.label",
            attributeName: "tags"
        }), e.create({
            titleTranslationKey: "ticket_fields.requester.label",
            attributeName: "requester_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.agent_satisfaction_score.label_short",
            attributeName: "satisfaction_score"
        }), e.create({
            titleTranslationKey: "ticket_fields.satisfaction_comment.label",
            attributeName: "satisfaction_comment"
        }), e.create({
            titleTranslationKey: "txt.user.section.ccs",
            attributeName: "current_collaborators"
        }), e.create({
            titleTranslationKey: "ticket_fields.requester.label",
            attributeName: "requester_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.updated_requester.label",
            attributeName: "requester_updated_at"
        }), e.create({
            titleTranslationKey: "ticket_fields.updated_assignee.label",
            attributeName: "assignee_updated_at"
        }), e.create({
            titleTranslationKey: "ticket_fields.updated_by_type.label",
            attributeName: "updated_by_type_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.locale.label",
            attributeName: "locale_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.organization.label",
            attributeName: "organization_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.submitter.label",
            attributeName: "submitter_id"
        }), e.create({
            titleTranslationKey: "ticket_fields.updated.label",
            attributeName: "updated_at"
        }), e.create({
            titleTranslationKey: "ticket_fields.solved.label",
            attributeName: "solved_at"
        }), e.create({
            titleTranslationKey: "ticket_fields.assigned.label",
            attributeName: "assigned_at"
        }), e.create({
            titleTranslationKey: "ticket_fields.cause.label",
            attributeName: "cause"
        }), e.create({
            titleTranslationKey: "ticket_fields.remove_tags",
            attributeName: "remove_tags"
        }), e.create({
            titleTranslationKey: "txt.views.ticket.ticketforms.ticket_form",
            attributeName: "ticket_form_id"
        })],
        n = [e.create({
            titleTranslationKey: "ticket_fields.status.label",
            attributeName: "status"
        }), e.create({
            titleTranslationKey: "ticket_fields.type.label",
            attributeName: "type"
        }), e.create({
            titleTranslationKey: "ticket_fields.priority.label",
            attributeName: "priority"
        }), e.create({
            titleTranslationKey: "ticket_fields.requester.label",
            attributeName: "requester"
        }), e.create({
            titleTranslationKey: "ticket_fields.assignee.label",
            attributeName: "assignee"
        }), e.create({
            titleTranslationKey: "ticket_fields.group.label",
            attributeName: "group"
        }), e.create({
            titleTranslationKey: "txt.views.tickets.share_and_unshare_tickets.sharing",
            attributeName: "ticket_sharing"
        })];
    Zendesk.TicketFieldCollection = Em.ResourceCollection.extend({
        url: "/api/v2/ticket_fields",
        type: e,
        expireIn: 31536e3,
        parse: function (e) {
            return this._super(e.ticket_fields)
        }
    }), Zendesk.TicketFields = Em.Object.extend(require("lib/settings_consumer"), {
        fetch: function () {
            return this.get("fromAPI").fetch()
        },
        fromAPI: Zendesk.TicketFieldCollection.create(),
        all: function () {
            var e = [];
            return e.push.apply(e, t), e.push.apply(e, this.get("fromAPI.content")), e.push.apply(e, n), e
        }.property("fromAPI.content").cacheable(),
        custom: function () {
            return _.filter(this.get("fromAPI.content"), function (e) {
                return e.get("isCustomField")
            })
        }.property().cacheable(),
        ticketProperties: function (e) {
            var t = [],
                n = this.get("fromAPI.content"),
                r = this.byAttributeName("assignee_id"),
                i = this.byAttributeName("ticket_type_id"),
                s = this.byAttributeName("priority_id"),
                o = this.byAttributeName("problem_id"),
                u = this.byAttributeName("due_date"),
                a = this.byAttributeName("tags"),
                f = this.byAttributeName("remove_tags");
            return t.push(r, i, s, o, u), this.get("settings.ticket_tagging") && (t.push(a), t.push(f)), t.push.apply(t, _(n).chain().difference(t).sortBy(function (e) {
                return e.get("position")
            }).value()), e && (t = _.reject(t, function (e) {
                return e != null && e.get("removable")
            })), _(t).chain().filter(function (e) {
                return e != null && e.get("active")
            }).reject(function (e) {
                return ["description", "status", "subject", "group"].contains(e.get("type"))
            }).value()
        },
        forProperties: function () {
            return this.ticketProperties()
        }.property().cacheable(),
        forPropertiesWithoutAssignee: function () {
            return this.get("forProperties").filter(function (e) {
                return e.get("type") !== "assignee"
            })
        }.property().cacheable(),
        hasTicketTypeField: function () {
            return !!this.byAttributeName("ticket_type_id")
        }.property().cacheable(),
        byAttributeName: function (e, t) {
            return _.find(this.get("all"), function (n) {
                return n.get("attributeName") === e && (t || n.get("active"))
            })
        },
        byType: function (e) {
            return this.get("all").findProperty("type", e)
        },
        allTicketFields: function () {
            return this.get("fromAPI.content")
        }
    }), Zendesk.TicketFields.reopenClass({
        instance: function () {
            return Zendesk.ticketFields
        },
        byAttributeName: function (e, t) {
            return Zendesk.TicketFields.instance().byAttributeName(e, t)
        },
        byType: function (e) {
            return Zendesk.TicketFields.instance().byType(e)
        },
        removable: function () {
            return Zendesk.TicketFields.instance().get("all").filterProperty("removable")
        }
    }), Zendesk.set("ticketFields", Zendesk.TicketFields.create())
}(), this.require.define({
    "controllers/ticket_merge_modal_controller": function (e, t, n) {
        function r() {
            t("views/modals/dynamic_modal").centerModalDom($("#ticket-merge"))
        }

        function i(e) {
            var t = $("#ticket-merge .modal-body"),
                n = $("#ticket-merge");
            n.css("visibility", "hidden"), t.html(e), r(n), n.css("visibility", "")
        }
        var s = function (e) {
            return e.replace(/\$j(\.|\()/g, "jQuery$1").replace(/\shref(='|="|=)/g, " href$1#").replace("#http", "http")
        }, o = function (e) {
                $("input[type=submit]", e).addClass("btn btn-inverse"), $("h2", e).hide()
            }, u = function (e) {
                this.initialize(e)
            };
        u.resetModal = function () {
            if (!this.$modal) return;
            this.$modal.find(".modal-body").html(""), $("#btn-ticket-confirm-and-merge").off(), $(document).off("click.ticket_merge")
        }, u.hideModal = function () {
            this.$modal.modal("hide")
        }, u.getModal = function () {
            return this.$modal ? this.$modal.modal() : (this.$modal = $("#ticket-merge").modal(), this.$modal.on("hidden", u.resetModal.bind(u))), this.$modal
        }, u.normalizeHtml = s, u.toString = function () {
            return "TicketMergeModalController"
        }, u.prototype = {
            initialize: function (e) {
                this.rootSelector = e.rootSelector || "#ticket-merge .modal-body", this.onTargetResolved = e.onTargetResolved || Em.K, this.onMergeJobCreated = e.onMergeJobCreated || Em.K, this.onMergeJobCreationFail = e.onMergeJobCreationFail || Em.K, this.url = "/merge/new?source_ids=%@&background=true".fmt(e.sources.join(",")), this.registerEvents(), this.show()
            },
            resolveTarget: function (e) {
                this.onTargetResolved(e)
            },
            registerEvents: function () {
                var e = this;
                $(document.body).off("click.ticket_merge"), $(document.body).on("click.ticket_merge", ".winner_selector", function (t) {
                    return $("#target_id").val($(this).data("target-id")), e.introForm().submit(), !1
                })
            },
            show: function () {
                this.confirmButton().hide(), i('<div class="wait-note">' + I18n.t("txt.ticket.merge.loading_form") + "</div>"), u.getModal(), this.getIntro()
            },
            getIntro: function () {
                var e = this;
                $.ajax({
                    url: this.url,
                    success: function (t) {
                        i(s(t)), o(e.rootSelector), e.setupIntroStep()
                    },
                    error: function (t) {
                        e.confirmButton().hide(), i(s(t.responseText || "")), o(e.rootSelector)
                    }
                })
            },
            setupIntroStep: function () {
                var e = this;
                this.introForm().on("submit", function () {
                    var t = $.trim($("#target_id").val());
                    return t === "" ? alert(I18n.t("txt.ticket.notice.merge.invalid_id")) : (e.resolveTarget(t), $.ajax({
                        type: $(this).attr("method"),
                        data: $(this).serialize(),
                        url: $(this).attr("action"),
                        success: function (t) {
                            i(s(t)), o(e.rootSelector), e.setupConfirmStep()
                        },
                        error: function (t) {
                            e.confirmButton().hide(), i(s(t.responseText || "")), o(e.rootSelector)
                        }
                    })), !1
                })
            },
            setupConfirmStep: function () {
                var e = this;
                $("input[type=submit].button", this.rootSelector).hide();
                var t = this.confirmButton();
                if (this.ticketWinner().length === 0) {
                    t.hide();
                    return
                }
                t.show(), t.on("click", function () {
                    var t = e.confirmForm();
                    return $(this).hide(), $.ajax({
                        type: t.attr("method"),
                        data: t.serialize(),
                        url: t.attr("action"),
                        success: function (t) {
                            e.onMergeJobCreated(t.id)
                        },
                        error: function (t) {
                            this.confirmButton().hide(), e.onMergeJobCreationFail(t.responseText)
                        }
                    }), !1
                })
            },
            confirmForm: function () {
                return $("form", this.rootSelector)
            },
            introForm: function () {
                return $("#merge_form", this.rootSelector)
            },
            confirmButton: function () {
                return $("#btn-ticket-confirm-and-merge")
            },
            ticketWinner: function () {
                return $("#ticket_winner")
            }
        }, n.exports = u
    }
}), this.require.define({
    "controllers/active_tickets_controller": function (e, t, n) {
        var r = function (e) {
            return e = Array.isArray(e) ? e : [e], e.map(Number)
        }, i = Em.Object.extend(Em.Evented, {
                init: function () {
                    var e = this._super.apply(this, arguments);
                    return this.set("saving", []), e
                },
                saving: null,
                markAsSaving: function (e) {
                    if (!e) return;
                    this.get("saving").addObjects(r(e)), this.trigger("activeTicketsDidChange")
                },
                markAsNotSaving: function (e) {
                    if (!e) return;
                    this.get("saving").removeObjects(r(e)), this.trigger("activeTicketsDidChange")
                },
                isSaving: function (e) {
                    return this.get("saving").contains(Number(e))
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "ActiveTicketsController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/ticket_merge_controller": function (e, t, n) {
        var r = t("controllers/ticket_merge_modal_controller"),
            i = t("lib/growl"),
            s = t("lib/lotus/global_events"),
            o = t("controllers/active_tickets_controller").instance(),
            u = Em.Object.extend({
                targetTicketId: null,
                sourceTicketIds: null,
                init: function () {
                    this.set("workspaceManager", Zd.workspaces), this._super()
                },
                participatingTicketIds: function () {
                    var e = (this.get("sourceTicketIds") || []).concat();
                    return this.get("targetTicketId") && e.push(this.get("targetTicketId")), e
                }.property().volatile(),
                mergeTickets: function (e) {
                    this.set("sourceTicketIds", (e.sourceTickets || []).concat()), this.set("onSuccess", e.onSuccess);
                    if (this.get("sourceTicketIds").length === 0) return;
                    this.createModalController()
                },
                createModalController: function () {
                    return new r({
                        sources: this.get("sourceTicketIds").concat(),
                        onTargetResolved: this.onTargetResolved.bind(this),
                        onMergeJobCreated: this.onMergeJobCreated.bind(this),
                        onMergeJobCreationFail: this.onMergeJobCreationFail.bind(this)
                    })
                },
                onTargetResolved: function (e) {
                    this.set("targetTicketId", Number(e))
                },
                onMergeJobCreated: function (e) {
                    this.hideModal();
                    if (!e) {
                        this.onMergeJobCreationFail();
                        return
                    }
                    var n = t("models/job_status").create({
                        id: e,
                        complete: function () {
                            this.onMergeComplete(n.response.results)
                        }.bind(this)
                    });
                    this.showInProgressMessage(), this.lockParticipatingTickets()
                },
                onMergeJobCreationFail: function (e) {
                    this.showErrorMessage(e)
                },
                onMergeComplete: function (e) {
                    this.hideInProgressGrowl(), this.unlockParticipatingTickets(), e ? e.success ? (this.showSuccessMessage(r.normalizeHtml(e.message)), this.expireParticipatingTickets(), this.refreshParticipatingOpenTickets(), s.trigger("@ticket:merge"), this.get("onSuccess") && this.get("onSuccess")()) : this.showErrorMessage(r.normalizeHtml(e.message)) : this.showErrorMessage()
                },
                refreshParticipatingOpenTickets: function () {
                    var e = this.get("workspaceManager");
                    this.get("participatingTicketIds").forEach(function (t) {
                        var n = e.findByContextProperty("id", t);
                        n && n.refreshTicket()
                    })
                },
                expireParticipatingTickets: function () {
                    this.get("participatingTicketIds").forEach(function (e) {
                        Zd.Ticket.create({
                            id: e
                        }).expire()
                    })
                },
                lockParticipatingTickets: function () {
                    o.markAsSaving(this.get("participatingTicketIds"))
                },
                unlockParticipatingTickets: function () {
                    o.markAsNotSaving(this.get("participatingTicketIds"))
                },
                showInProgressMessage: function () {
                    i.alert(I18n.t("txt.ticket.merge.in_progress")), setTimeout(function () {
                        var e = document.querySelectorAll(".jGrowl-notification.alert");
                        this.set("domGrowlInProgress", e[e.length - 1])
                    }.bind(this), 1e3)
                },
                hideInProgressGrowl: function () {
                    var e = this.get("domGrowlInProgress");
                    e && e.parentNode && (e.parentNode.removeChild(e), this.set("domGrowlInProgress", null))
                },
                showSuccessMessage: function (e) {
                    i.notice(e, {
                        sticky: !0
                    })
                },
                showErrorMessage: function (e) {
                    i.error(e || I18n.t("txt.ticket.merge.unexpected_problem"))
                },
                hideModal: function () {
                    r.hideModal()
                }
            }).reopenClass({
                toString: function () {
                    return "TicketMergeController"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "controllers/ticket_controller/macro_applier": function (e, t, n) {
        var r = function (e) {
            this.controller = e
        };
        r.toString = function () {
            return "MacroApplier"
        }, r.prototype.applyMacro = function (e, t) {
            this.controller.willApplyMacro(e), e.evaluateOnTicket(t, function (n) {
                this.beginApplyingMacro(e, t), this.applyMacroResult(n, t), this.endApplyingMacro(e, t), t.set("macro_applied", e.get("id")), this.controller.didApplyMacro(e)
            }.bind(this))
        }, r.prototype.beginApplyingMacro = function (e, t) {
            t.set("applyingMacro", !0), Em.run.begin()
        }, r.prototype.endApplyingMacro = function (e, t) {
            Em.run.end(), t.set("applyingMacro", !1)
        }, r.prototype.applyMacroResult = function (e, t) {
            var n = e.comment;
            delete e.comment;
            if (e.group_id || e.assignee_id) t.setAssignee(e.group_id, e.assignee_id), delete e.group_id, delete e.assignee_id;
            t.setProperties(e);
            if (n) {
                var r, i = [t.get("comment.body"), n.value].join("");
                t.get("comment").set("body", i), this.controller.macroChangedComment(n.is_public)
            }
        }, n.exports = r
    }
}), this.require.define({
    "controllers/ticket_controller/bulk_macro_applier": function (e, t, n) {
        function o(e, t, n) {
            var r = t[e];
            if (r) {
                var i = n.get(e) || [],
                    s = i.length,
                    o = r.without(""),
                    u = i.concat(o).uniq();
                s !== u.length && n.set(e, u), delete t[e]
            }
        }
        var r = t("controllers/ticket_controller/macro_applier"),
            i = r.prototype.applyMacroResult,
            s = function (e) {
                r.call(this, e)
            };
        s.toString = function () {
            return "BulkMacroApplier"
        }, s.prototype = new r, s.prototype.constructor = s, s.prototype.applyMacroResult = function (e, t) {
            var n = e.tags,
                r = e.remove_tags;
            o("tags", e, t), o("remove_tags", e, t), i.call(this, e, t)
        }, n.exports = s
    }
}), this.require.define({
    "controllers/ticket_controller/macro_application_behavior": function (e, t, n) {
        var r = Em.Mixin.create(Em.Evented, {
            willApplyMacro: Em.K,
            didApplyMacro: Em.K,
            macroChangedComment: function (e) {
                var t;
                e !== undefined && (t = e ? "publicComment" : "privateComment", this.toggleCommentMode(t)), this.focusComment()
            },
            focusComment: function () {
                this.trigger("@focus:comment")
            },
            toggleCommentMode: function (e) {
                this._super && this._super.call(this, e)
            },
            applyMacro: function (e) {
                this.get("macroApplier").applyMacro(e, this.get("ticket"))
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/ticket_controller/ticket_permissions_proxy": function (e, t, n) {
        n.exports = Em.Mixin.create(t("lib/settings_consumer"), {
            canMakeAnyComments: Em.computed.bool("ticket.userPermissions.makeAnyComments"),
            publicCommentOptionsVisible: Em.computed.bool("ticket.userPermissions.makePublicComments"),
            mergeButtonVisible: Em.computed.bool("ticket.userPermissions.mergeTicket"),
            deleteButtonVisible: Em.computed.bool("ticket.userPermissions.deleteTicket"),
            markSpamButtonVisible: Em.computed.bool("ticket.userPermissions.markTicketAsSpam"),
            hasHoldStatus: Em.computed.bool("settings.useStatusHold"),
            twitterChannelsVisible: Em.computed.equal("ticket.viaClass", "twitter"),
            facebookChannelVisible: Em.computed.equal("ticket.viaClass", "facebook"),
            facebookPrivateMessageVisible: Em.computed.equal("ticket.viaClass", "fb_private_message"),
            submitDropdownDisabled: Em.computed.not("ticket.userPermissions.updateTicket"),
            commentOptionsVisible: function () {
                var e = this.get("settings.shortenUrlOptional"),
                    t = (this.get("commentMode") || "").match(/twitter/i);
                return !!t && !! e
            }.property("commentMode", "settings.shortenUrlOptional").cacheable(),
            willApplyMacro: function (e) {
                this.set("_saveDisabledManually", !0)
            },
            didApplyMacro: function (e) {
                this.set("_saveDisabledManually", !1)
            },
            isTicketSavable: function (e, t) {
                return arguments.length === 2 ? t : this.get("ticket.userPermissions.makeAnyComments") && this.get("ticket.isSavable") && !this.get("isWorking")
            }.property("ticket.userPermissions.makeAnyComments", "ticket.isSavable", "isWorking").cacheable(),
            submitButtonDisabled: function (e, t) {
                return arguments.length === 2 && this.set("_saveDisabledManually", t), this.get("_saveDisabledManually") || !this.get("isTicketSavable")
            }.property("isTicketSavable", "_saveDisabledManually").volatile(),
            init: function () {
                return this.set("_saveDisabledManually", !1), this._super()
            }
        })
    }
}), this.require.define({
    "controllers/ticket_controller/base_ticket_controller": function (e, t, n) {
        var r = t("controllers/ticket_controller/macro_application_behavior"),
            i = t("controllers/ticket_controller/ticket_permissions_proxy");
        n.exports = Em.Object.extend(r, i, {
            ticketFields: Zd.get("ticketFields"),
            shouldShowLinkedProblem: function () {
                return !!this.get("ticket.isIncident") && !! this.get("ticketFields.hasTicketTypeField")
            }.property("ticket.isIncident", "ticketFields.hasTicketTypeField").cacheable()
        })
    }
}), this.require.define({
    "controllers/bulk_job_status_controller": function (e, t, n) {
        var r = t("lib/lotus/singleton"),
            i = Em.Object.extend({
                job: null,
                show: function (e) {
                    this.set("isCompleteDelayed", !1), this.set("job", e)
                },
                errors: Em.computed.oneWay("job.errors"),
                successes: Em.computed.oneWay("job.successes"),
                hasSuccesses: function () {
                    return !!this.get("successes.length")
                }.property("successes").cacheable(),
                hasErrors: function () {
                    return !!this.get("errors.length")
                }.property("errors").cacheable(),
                isCompleteDelayed: !1,
                isNotCompleteDelayed: Em.computed.not("isCompleteDelayed"),
                isComplete: function () {
                    return !!this.get("job.isComplete")
                }.property("job.isComplete").cacheable(),
                jobDidComplete: function () {
                    this.get("job.isComplete") && setTimeout(_(function () {
                        this.set("isCompleteDelayed", !0)
                    }).bind(this), 1e3)
                }.observes("job.isComplete"),
                progress: Em.computed.oneWay("job.progress"),
                progressStyle: function () {
                    return "width: " + this.get("progress") + "%;"
                }.property("progress").cacheable(),
                description: Em.computed.oneWay("job.description")
            }).reopenClass(r, {
                toString: function () {
                    return "BulkJobStatusController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "views/modals/bulk_edit_modal": function (e, t, n) {
        var r = t("mixins/ticket_keyboard_shortcuts"),
            i = t("views/modals/modal").extend(r, {
                classNames: ["bulk_edit_modal", "modal"],
                templateName: "templates/modals/bulk_edit",
                controller: null,
                workspace: null,
                destroyOnHide: !1
            }).reopenClass({
                toString: function () {
                    return "BulkEditModal"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/bulk_edit_controller": function (e, t, n) {
        var r = t("lib/lotus/global_events"),
            i = t("controllers/ticket_controller/base_ticket_controller"),
            s = t("controllers/ticket_controller/bulk_macro_applier"),
            o = t("models/job_status"),
            u = t("controllers/bulk_job_status_controller").instance(),
            a = t("lib/growl"),
            f = t("views/modals/bulk_edit_modal"),
            l = t("controllers/ticket_merge_controller"),
            c = -1,
            h = I18n.t("control.dropdown.value.no_change"),
            p = i.extend(t("lib/settings_consumer"), t("lib/ticket_forms_consumer"), {
                init: function () {
                    this.set("macroApplier", new s(this)), this.set("jobStatusController", u), this._super()
                },
                isBulkEditing: !1,
                shouldShowProgressPane: !1,
                isBulkEditingInProgress: !1,
                ticket: null,
                tickets: Em.computed.emptyArray(),
                ticketFields: Zd.get("ticketFields"),
                isModalSetup: !1,
                NO_CHANGE_STRING: h,
                NO_CHANGE_NUM_VALUE: c,
                NO_CHANGE_OPTION: {
                    value: h,
                    label: h
                },
                NO_CHANGE_NUM_OPTION: {
                    value: c,
                    label: h
                },
                initForm: function () {
                    this.set("ticket", Zd.BulkTicket.create({
                        permissionsProxyTicketId: this.get("tickets")[0],
                        hasTicketForms: this.get("hasTicketForms")
                    })), this.get("ticket").setupTicketPermissions(), this.set("isBulkEditingInProgress", !1), this.hideProgressForm()
                },
                showBulkEditForm: function (e, t, n) {
                    if (e.length === 0) return;
                    this.onSuccess = t, this.onMergeComplete = n, this.set("tickets", e), this.initForm(), this.openModal()
                },
                openModal: function () {
                    this.buildModal(), this.get("bulkEditModal").showModal()
                },
                hideBulkEditForm: function () {
                    this.get("bulkEditModal").hideModal()
                },
                buildModal: function () {
                    if (this.get("bulkEditModal")) return;
                    var e = Em.Object.create({
                        ticketController: this,
                        controller: this,
                        ticketBinding: "controller.ticket"
                    }),
                        t = f.createWithMixins({
                            controller: this,
                            workspace: e,
                            onHidden: function () {
                                this._super();
                                var e = this.get("controller.ticket");
                                e && e.destroy()
                            }
                        });
                    this.set("bulkEditModal", t), t.append()
                },
                buttonVisibilityObserver: function () {
                    if (!this.get("ticket")) return;
                    this.set("ticket.comment.is_public", this.get("commentButtonVisible"))
                }.observes("commentButtonVisible"),
                modalTitle: function () {
                    return I18n.t("txt.ticket.bulk_modal.dynamic_heading_label", {
                        count: this.get("tickets.length")
                    })
                }.property("tickets.length").cacheable(),
                areFooterControlsVisible: Em.computed.not("isBulkEditingInProgress"),
                footerControlsVisibilityDidChange: function () {
                    $("#bulk_footer_controls").toggle(this.get("areFooterControlsVisible"))
                }.observes("areFooterControlsVisible"),
                toggleCommentMode: function (e) {
                    e === "publicComment" ? this.toggleReply() : e === "privateComment" && this.toggleNote()
                },
                toggleReply: function () {
                    this.get("ticket").toggleReply()
                },
                toggleNote: function () {
                    this.get("ticket").toggleNote()
                },
                isSubjectActive: function () {
                    return !!this.get("ticketFields").byAttributeName("subject")
                }.property("ticketFields").volatile(),
                isSubjectDisabled: Em.computed.not("isSubjectActive"),
                saveAsNew: function () {
                    this.set("ticket.status_id", Zendesk.Ticket.Statuses.NEW), this.save()
                },
                saveAsOpen: function () {
                    this.set("ticket.status_id", Zendesk.Ticket.Statuses.OPEN), this.save()
                },
                saveAsPending: function () {
                    this.set("ticket.status_id", Zendesk.Ticket.Statuses.PENDING), this.save()
                },
                saveAsHold: function () {
                    this.set("ticket.status_id", Zendesk.Ticket.Statuses.HOLD), this.save()
                },
                saveAsSolved: function () {
                    this.set("ticket.status_id", Zendesk.Ticket.Statuses.SOLVED), this.save()
                },
                toggleMacro: function () {
                    return this.set("showMacroList", !this.get("showMacroList")), !1
                },
                save: function () {
                    this.set("isBulkEditingInProgress", !0);
                    var e = this.get("ticket").toJSON();
                    return e.tickets_to_bulk_update = this.get("tickets").join(), e.background = !0, Em.Resource.ajax({
                        url: "/tickets/bulk",
                        type: "PUT",
                        context: this,
                        data: e
                    }).done(_(function (e) {
                        var t = o.create({
                            id: e.id,
                            complete: _(this.onSave).bind(this)
                        });
                        this.get("jobStatusController").show(t), this.showBulkEditProgressPane()
                    }).bind(this))
                },
                showBulkEditProgressPane: function () {
                    this.set("shouldShowProgressPane", !0)
                },
                progressPaneVisibilityChanged: function () {
                    this.get("bulkEditModal").$(".modal-header .close").toggle(!this.get("isBulkEditingInProgress")).focus()
                }.observes("isBulkEditingInProgress"),
                onSave: function () {
                    _.isFunction(this.onSuccess) && this.onSuccess();
                    if (this.get("jobStatusController.hasErrors")) return;
                    setTimeout(_(function () {
                        this.set("isBulkEditingInProgress", !1), this.hideBulkEditForm()
                    }).bind(this), 1e3)
                },
                hideProgressForm: function () {
                    this.set("shouldShowProgressPane", !1), this.set("isBulkEditingInProgress", !1), this.get("bulkEditModal") && this.get("bulkEditModal").hideModal()
                },
                bulkTicketMerge: function () {
                    this.hideBulkEditForm(), l.create().mergeTickets({
                        sourceTickets: this.get("tickets"),
                        onSuccess: this.onMergeComplete
                    })
                },
                bulkTicketDelete: function () {
                    if (!confirm(I18n.t("txt.tickets.delete.confirm"))) return;
                    var e = this,
                        t = _(this.get("tickets")).map(function (e) {
                            return Zd.Ticket.create({
                                id: e
                            }).destroyResource()
                        });
                    $.when.apply($, t).done(function () {
                        e.hideBulkEditForm(), _.isFunction(e.onSuccess) && e.onSuccess(), a.notice(I18n.t("txt.tickets.delete.success", {
                            tickets: "#" + e.get("tickets").join(", #")
                        }))
                    })
                },
                bulkTicketOptionsVisible: function () {
                    return this.get("mergeButtonVisible") || this.get("deleteButtonVisible")
                }.property("mergeButtonVisible", "deleteButtonVisible").cacheable(),
                hasHoldStatus: function () {
                    return !!this.get("settings.useStatusHold")
                }.property("settings.useStatusHold").cacheable()
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "BulkEditController"
                }
            });
        n.exports = p
    }
}),
function (e) {
    Zd.setupBulkTicketSchema = function () {
        var e = {};
        Zd.ticketFields.get("custom").forEach(function (t) {
            e["custom_field_" + t.get("id")] = String
        }), Zd.BulkTicket = Zd.BulkTicket.define({
            schema: e
        })
    }, Zd.BulkTicket = Zd.Ticket.extend({
        hasTicketForms: null,
        remove_tags: null,
        init: function () {
            this.set("bulkEditController", require("controllers/bulk_edit_controller").instance()), this.set("remove_tags", []), this.set("isBulk", !0), this._super.apply(this, arguments), this.prepareDefaultBulkValues(), this.setDefaultBulkValues()
        },
        setupTicketPermissions: function () {
            var e = Zd.Ticket.create({
                id: this.get("permissionsProxyTicketId")
            });
            this.set("permissionsProxyTicket", e), e.fetch().done(this.setPermissions.bind(this))
        },
        setPermissions: function () {
            this.get("userPermissions.makePublicComments") === !1 && this.set("comment.is_public", !1)
        },
        setDefaultBulkValues: function () {
            _(this.defaultBulkValues).each(function (e, t) {
                this.set(t, e.value)
            }, this);
            var e = require("lib/settings"),
                t = e.get("comments_public_by_default");
            this.set("comment.is_public", t || !1)
        },
        permissionsProxyTicket: null,
        permissionsProxyTicketId: null,
        userPermissions: Em.computed.oneWay("permissionsProxyTicket.userPermissions"),
        macro_applied: null,
        prepareDefaultBulkValues: function () {
            var e;
            this.defaultBulkValues = {}, Zd.ticketFields.get("custom").forEach(function (e) {
                var t = Em.get(e, "attributeName");
                t !== "tags" && (this.defaultBulkValues[t] = {
                    value: this.get("bulkEditController").NO_CHANGE_STRING,
                    fieldType: "custom",
                    fieldId: e.get("id")
                })
            }, this);
            for (var t in Zd.BulkTicket.schema) Zd.BulkTicket.schema.hasOwnProperty(t) && !this.defaultBulkValues.hasOwnProperty(t) && (e = Zd.BulkTicket.schema[t].get("type"), e.isEmberResourceCollection || (e === Number ? this.defaultBulkValues[t] = {
                value: this.get("bulkEditController").NO_CHANGE_NUM_VALUE,
                fieldType: "regular"
            } : e === String && (this.defaultBulkValues[t] = {
                value: this.get("bulkEditController").NO_CHANGE_STRING,
                fieldType: "regular"
            })))
        },
        toJSON: function () {
            var e = {
                ticket: {
                    fields: {}
                }
            };
            return _(this.defaultBulkValues).each(function (t, n) {
                if (n === "assignee_id" || n === "group_id" || this.get(n) !== t.value) t.fieldType === "custom" ? e.ticket.fields[t.fieldId] = this.get(n) == null ? "" : this.get(n) : e.ticket[n] = this.get(n)
            }, this), this.get("comment.hasBody") && (e.comment = {
                value: this.get("comment.body"),
                is_public: this.get("comment.is_public")
            }), this.get("macro_applied") && (e.macro_applied = this.get("macro_applied")), this.get("tags").length > 0 && (e.ticket.additional_tags = this.get("tags")), this.get("remove_tags").length > 0 && (e.ticket.remove_tags = this.get("remove_tags").join(" ")), this.get("isTask") && this.get("due_date") && (e.ticket.due_date = this.get("due_date").toString()), this.get("hasTicketForms") && (e.ticket.ticket_form_id = this.get("ticketFormId"), delete e.ticket.ticketFormId), e
        }
    })
}(this), this.require.define({
    "models/ticket/satisfaction": function (e, t, n) {
        var r = t("models/ticket/types").SatisfactionTypes;
        n.exports = Em.Resource.define({
            schema: {
                score: Number,
                comment: String
            }
        }).extend({
            offered: Em.computed.gt("score", 1),
            rating: function () {
                var e = this.get("score"),
                    t = [r.BAD, r.BADWITHCOMMENT].some(function (t) {
                        return t == e
                    });
                return t ? "poor" : "good"
            }.property("score").cacheable()
        }).reopenClass({
            toString: function () {
                return "TicketSatisfaction"
            }
        })
    }
}), this.require.define({
    "models/ticket/related": function (e, t, n) {
        n.exports = Em.Resource.define({
            url: function (e) {
                return "/api/v2beta/tickets/" + e.get("ticketId") + "/related"
            },
            schema: {
                fromArchive: Boolean,
                topic: {
                    type: "models/forums/topic",
                    nested: !1,
                    path: "topic"
                },
                followupSources: Object,
                followupIds: Object,
                jiraIssues: Object,
                satisfaction: {
                    type: "models/ticket/satisfaction",
                    nested: !0
                },
                shared: Object,
                twitter: Object
            }
        }).extend({
            ticket: null,
            ticketId: null,
            destroy: function () {
                this.get("satisfaction") && this.get("satisfaction").destroy(), this._super()
            },
            isReady: Em.computed.and("isFetched", "topic.isFetched"),
            topicNotice: function () {
                var e = this.get("topic");
                if (e) {
                    var t = "/entries/" + e.get("id"),
                        n = e.get("title");
                    return I18n.t("txt.ticket.show.associated_topic.notice", {
                        associated_link: new Handlebars.SafeString('<a href="%@" target="_blank" tabindex="-1">%@</a>'.fmt(t, n))
                    })
                }
                return null
            }.property("topic.title").cacheable(),
            followupSourceTicket: function () {
                var e = this.get("followupSources");
                if ($.isArray(e) && e.length > 0) return Zendesk.Ticket.create({
                    id: e[0]
                })
            }.property("followupSources.@each").cacheable(),
            followupSourceNotice: function () {
                var e = this.get("followupSourceTicket");
                if (e) {
                    var t = Zendesk.Helpers.linkTo.urlFor(e),
                        n = "#" + e.get("id");
                    return I18n.t("txt.ticket.show.followup_source.notice", {
                        associated_link: new Handlebars.SafeString('<a href="%@" tabindex="-1">%@</a>'.fmt(t, n))
                    })
                }
                return null
            }.property("followupSourceTicket.id").cacheable(),
            followupTicketNotice: function () {
                var e = this.get("followupIds");
                if (!($.isArray(e) && e.length > 0)) return null;
                var t = [];
                return e.forEach(function (e) {
                    var n = "#/tickets/" + e,
                        r = "#" + e;
                    t.push('<a href="%@" tabindex="-1">%@</a>'.fmt(n, r))
                }), I18n.t("txt.ticket.show.followups.notice", {
                    associated_link: new Handlebars.SafeString(t.join(", "))
                })
            }.property("followupIds.@each").cacheable(),
            viaSubmitter: function () {
                return I18n.t("txt.admin.views.tickets._requester_header.via_v2", {
                    user_name: this.get("ticket.submitter.name")
                })
            }.property("ticket.submitter.name").cacheable(),
            sharedNotice: function () {
                var e = this.get("shared");
                if ($.isArray(e) && e.length > 0) {
                    var t = e.map(function (e) {
                        var t = e.inbound ? "txt.ticket.show.sharing.agreement.inbound" : "txt.ticket.show.sharing.agreement.outbound";
                        return I18n.t(t, {
                            agreement_name: e.name
                        })
                    }).join(I18n.t("txt.ticket.show.sharing.agreement.separator"));
                    return I18n.t("txt.ticket.show.sharing.notice", {
                        list_of_agreements: new Handlebars.SafeString(t)
                    })
                }
                return null
            }.property("shared").cacheable(),
            twitterNotice: function () {
                var e = this.get("twitter");
                if (e) {
                    var t = ' <a href="http://twitter.com/' + e.profile.screen_name + '" target="_blank" tabindex="-1">@' + e.profile.screen_name + "</a>";
                    e.profile.name !== e.profile.screen_name && (t += " (" + e.profile.name + ")");
                    var n = e.direct ? "txt.ticket.show.twitter_dm.notice_full" : "txt.ticket.show.twitter.notice_full";
                    return I18n.t(n, {
                        account: t
                    })
                }
            }.property("twitter").cacheable()
        }).reopenClass({
            toString: function () {
                return "Ticket-Related"
            }
        })
    }
}), this.require.define({
    "models/ticket_permissions": function (e, t, n) {
        var r = Em.Object.extend({
            ticket: null,
            permissions: Em.computed.oneWay("ticket.permissions"),
            makeAnyComments: Em.computed.bool("permissions.can_make_comments"),
            makePublicComments: Em.computed.bool("permissions.can_make_public_comments"),
            markTicketAsSpam: Em.computed.bool("permissions.can_mark_as_spam"),
            mergeTicket: Em.computed.bool("permissions.can_merge_ticket"),
            editTicketTags: Em.computed.bool("permissions.can_edit_ticket_tags"),
            deleteTicket: Em.computed.bool("permissions.can_delete_ticket"),
            updateTicket: Em.computed.bool("permissions.can_update_ticket")
        });
        n.exports = r
    }
}), this.require.define({
    "models/user/device": function (e, t, n) {
        var r = Em.Resource.define({
            url: function (e) {
                return "/api/v2/users/%@/devices/%@".fmt(e.get("userId"), e.get("id"))
            },
            schema: {
                id: {
                    type: Number
                },
                name: {
                    type: String
                },
                ip: {
                    type: String
                },
                location: {
                    type: String
                },
                userAgent: {
                    type: String,
                    path: "user_agent"
                },
                updatedAt: {
                    type: Date,
                    path: "updated_at"
                },
                current: {
                    type: Boolean
                },
                _lastActiveAt: {
                    type: Date,
                    path: "last_active_at"
                }
            },
            parse: function (e) {
                return e.device || e
            }
        });
        r = r.extend({
            userId: "me",
            toJSON: function () {
                var e = this._super.apply(this, arguments);
                return {
                    device: e
                }
            },
            removeTooltip: function () {
                var e = "txt.user.section.device_remove_tooltip." + (this.get("current") ? "cannot_remove" : "can_remove");
                if (I18n.translations[e] != null) return I18n.t(e)
            }.property("current").cacheable(),
            lastActiveAt: function () {
                return this.get("_lastActiveAt") || this.get("updatedAt")
            }.property("_lastActiveAt", "updatedAt").cacheable()
        }), r.reopenClass({
            toString: function () {
                return "Device"
            }
        }), n.exports = r
    }
}), this.require.define({
    "models/user/devices": function (e, t, n) {
        var r = t("models/user/device"),
            i = Em.ResourceCollection.extend({
                userId: null,
                type: r,
                url: function () {
                    return "/api/v2/users/%@/devices".fmt(this.get("userId"))
                }.property("userId").cacheable(),
                parse: function (e) {
                    return this._super.call(this, e.devices)
                }
            });
        i.reopenClass({
            toString: function () {
                return "Devices"
            }
        }), n.exports = i
    }
}), this.require.define({
    "models/user/token": function (e, t, n) {
        var r = Em.Resource.define({
            url: function (e) {
                return "/api/v2/oauth/tokens/%@".fmt(e.get("id"))
            },
            schema: {
                id: {
                    type: Number
                },
                clientId: {
                    type: Number,
                    path: "client_id"
                },
                token: {
                    type: String
                },
                createdAt: {
                    type: Date,
                    path: "created_at"
                },
                usedAt: {
                    type: Date,
                    path: "used_at"
                },
                expiresAt: {
                    type: Date,
                    path: "expires_at"
                },
                clientName: {
                    type: String,
                    path: "client.name"
                }
            },
            parse: function (e) {
                return e.id ? e : e.token
            }
        });
        r = r.extend({
            toJSON: function () {
                var e = this._super.apply(this, arguments);
                return {
                    token: e
                }
            }
        }), r.reopenClass({
            toString: function () {
                return "Token"
            }
        }), n.exports = r
    }
}), this.require.define({
    "models/user/tokens": function (e, t, n) {
        var r = t("models/user/token"),
            i = t("lib/sideload_parser"),
            s = Object.freeze(["zendesk_mobile_ios", "zendesk_mobile_android"]),
            o = Em.ResourceCollection.extend({
                type: r,
                url: "/api/v2/oauth/tokens?include=clients",
                parse: function (e) {
                    var t = e.tokens;
                    return i.extractSideloads(t, e, {
                        client_id: "clients"
                    }), t = t.filter(function (e) {
                        return !s.contains(e.client.identifier)
                    }), this._super.call(this, t)
                }
            });
        o.reopenClass({
            toString: function () {
                return "Tokens"
            }
        }), n.exports = o
    }
}), this.require.define({
    "models/voice/caller": function (e, t, n) {
        var r = Em.Resource.define({
            schema: {
                name: String,
                id: Number,
                phone: String,
                direct_number: String,
                unsolved_ticket_count: Number,
                large_photo_url: String,
                organization_id: Number,
                organization: {
                    type: "models/organization",
                    nested: !0
                }
            }
        }).extend({
            href: function () {
                return "#/users/" + this.get("id")
            }.property("id").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "models/voice/call_reasons": function (e, t, n) {
        var r = Em.Resource.define().extend({
            latestReason: function () {
                var e = this.get("data"),
                    t = e[Zd.get("currentUser.id")],
                    n = e.all;
                if (t) {
                    var r = _.last(t);
                    return r.title === "call_returned_to_queue" && n && n.length > 0 && (n = n.reverse(), _.each(n, function (e) {
                        new Date(e.at) >= new Date(r.at) && (r = e)
                    })), this._toI18n(r)
                }
            }.property("data").cacheable(),
            _toI18n: function (e) {
                return e && e.title !== "" && (e.title !== "call_routed_to_agent" ? (e.title = I18n.t("txt.views.voice.call_console.reason.title." + e.title), e.details && (e.details = I18n.t("txt.views.voice.call_console.reason.detail." + e.details))) : (e.title = I18n.t("txt.views.voice.call_console.reason.title." + e.title, {
                    name: e.details
                }), e.details = null)), e
            }
        });
        n.exports = r
    }
}), this.require.define({
    "models/voice/call": function (e, t, n) {
        var r = Minilog("voice-call"),
            i = t("models/voice/caller"),
            s = t("models/voice/call_reasons"),
            o = t("lib/features"),
            u = t("lib/voice/state").instance(),
            a = function (e) {
                e.fire("force_agent_hang_up")
            }, f = _.throttle(a, 1e3),
            l = Em.Resource.define({
                schema: {
                    id: Number,
                    agent_id: Number,
                    recording_url: String,
                    connected_at: Date,
                    ended_at: Date,
                    sid: String,
                    is_recording_url_ready: Boolean,
                    calling_number: String,
                    human_calling_number: String,
                    human_answering_number: String,
                    caller_id: Number,
                    transaction_uuid: String,
                    status: String,
                    outgoing_sid: String,
                    outgoing_kind: String,
                    current_agent_id: Number,
                    caller_location: String,
                    outbound: Boolean,
                    caller: {
                        type: i,
                        nested: !0
                    },
                    ticket: {
                        type: "Zendesk.Ticket",
                        nested: !0
                    },
                    reasons: {
                        type: s,
                        nested: !0
                    }
                }
            }).extend(t("lib/account_consumer"), {
                voiceUIController: Em.computed.singleton("controllers/voice/voice_ui_controller"),
                voiceIcon: Em.computed.oneWay("voiceUIController.views.voiceIcon"),
                currentUser: Zendesk.currentUser,
                callTimerView: Em.computed.oneWay("voiceUIController.views.callTimer"),
                voiceCallStateManager: Em.computed.singleton("states/voice_call"),
                updateStatus: function () {
                    var e = this.get("status");
                    r.info({
                        short_message: "updateStatus",
                        _status: e
                    }), this.get("voiceCallStateManager").goToState(e), this.get("voiceIcon").status.goToState(e)
                },
                isCallingOutbound: function () {
                    return this.get("status") == "outbound_initial" || this.get("status") == "agent_leg"
                }.property("status").cacheable(),
                onStatusChanged: function () {
                    if (!this.get("voiceIcon")) return;
                    Em.run.next(this, this.updateStatus)
                }.observes("status"),
                isRouting: Em.computed.equal("status", "routing"),
                isInConference: Em.computed.equal("status", "in_conference"),
                isCompleted: Em.computed.equal("status", "completed"),
                isNotCompleted: Em.computed.not("isCompleted"),
                isEnded: Em.computed.equal("status", "ended"),
                isCancelled: Em.computed.equal("status", "cancelled"),
                callerLocation: function () {
                    if (this.get("caller_location")) return this.get("caller_location")
                }.property("caller_location").cacheable(),
                callerPhotoUrl: function () {
                    return this.get("caller.large_photo_url") || "/agent/assets/icons/objects/icon_user_large.png"
                }.property("caller.large_photo_url").cacheable(),
                limitTrialCall: function () {
                    this._isUntrustedOutboundCall() && this.get("callTimerView.timerSeconds") >= 120 && f(this)
                }.observes("callTimerView.timerSeconds"),
                _hasVoiceTrustOnOutboundCalls: function () {
                    return o.hasFeature("voiceTrustOnOutboundCalls")
                },
                _isUntrustedOutboundCall: function () {
                    return this.get("outbound") && !this._hasVoiceTrustOnOutboundCalls() && this.get("currentAccount.inTrial") && this.get("status") === "in_conference"
                },
                fire: function (e) {
                    r.info({
                        short_message: "fire",
                        _name: e
                    }), $.ajax({
                        url: "/voice/calls/update_status?call_id=" + this.get("id") + "&outgoing_sid=" + this.get("outgoing_sid"),
                        type: "POST",
                        data: {
                            event: e
                        },
                        success: function (t) {
                            r.info({
                                short_message: "fire:ok:response_ignored",
                                _name: e,
                                _data: t
                            })
                        },
                        error: function () {
                            r.error({
                                short_message: "fire:ec4"
                            }), alert(I18n.t("txt.voice.error.ec4"))
                        }
                    })
                },
                hasTicket: Em.computed.bool("ticket.id")
            });
        n.exports = l
    }
}), this.require.define({
    "models/voice": function (e, t, n) {
        var r = Minilog("voice"),
            i = t("models/voice/poller").instance(),
            s = t("lib/features"),
            o, u, a = function (e, t) {
                return !u || u < e ? !0 : u === e && new Date(o) < new Date(t) ? !0 : !1
            }, f = function (e, t) {
                r.info({
                    short_message: "updateCall",
                    _status: t.status,
                    _updated_at: t.updated_at,
                    _last_updated_at: o,
                    _lock_version: t.lock_version,
                    _last_lock_version: u
                }), a(t.lock_version, t.updated_at) ? (e.set("currentCall", t), o = t.updated_at, u = t.lock_version) : r.info({
                    short_message: "updateCall:ignore",
                    _status: t.status,
                    _updated_at: t.updated_at,
                    _last_updated_at: o,
                    _lock_version: t.lock_version,
                    _last_lock_version: u
                })
            }, l = _.debounce(f, 1e3),
            c = Em.Resource.define({
                schema: {
                    id: Number,
                    number: String,
                    created_at: String,
                    country_id: Number,
                    display_number: String,
                    nickname: String
                }
            }),
            h = Em.Resource.define({
                schema: {
                    client_capability_token: String,
                    availability: String,
                    is_available: Boolean,
                    via: String,
                    voice_number: String,
                    logging: Boolean,
                    in_maintenance: Boolean,
                    phone_numbers: {
                        type: Em.ResourceCollection,
                        itemType: c,
                        nested: !0
                    }
                },
                parse: function (e) {
                    return Ember.get(e, "user.voice") || {}
                }
            }).extend({
                voiceState: Em.computed.singleton("lib/voice/state"),
                resourceURL: function () {
                    return "/api/v2/users/me.json?include=voice,ticket"
                },
                available: function () {
                    return ["client", "phone"].contains(this.get("availability"))
                }.property("availability").volatile(),
                dialerAvailability: function () {
                    var e = this.get("availability");
                    switch (e) {
                    case "client":
                    case "phone":
                        return I18n.t("txt.voice.dialer.online");
                    case "off":
                        return I18n.t("txt.voice.dialer.offline");
                    default:
                        return I18n.t("txt.voice.dialer.offline")
                    }
                }.property("availability").volatile(),
                currentCall: function (e, n) {
                    if (arguments.length === 1) return this.get("_currentCall");
                    if (n || n === null) {
                        var r = n ? t("models/voice/call").create(n) : null;
                        this.set("_currentCall", r), s.hasFeature("voiceDisablePoller") || i.poll()
                    }
                }.property().volatile(),
                updateCall: function (e) {
                    l(this, e)
                },
                resetLastCall: function () {
                    o = null, u = null
                },
                expire: function () {
                    this.set("currentCall", null), this._super()
                },
                browserCloseWarning: function () {
                    var e = this.get("voiceState.availability"),
                        t = this.get("voiceState.activeCall");
                    return e === "client" && t ? I18n.t("txt.voice.warning.on_browser_exit") : null
                }.property("availability", "voiceState.activeCall").cacheable(),
                currentUser: Zendesk.currentUser,
                voiceNumber: Em.computed.oneWay("currentUser.agentForwardingIdentities.firstObject.value"),
                hasVoiceNumber: Em.computed.notEqual("currentUser.agentForwardingIdentities.length", 0)
            });
        h.reopen({
            updateWithApiData: function (e) {
                this._super(e);
                var t = Ember.get(e, "user.voice.current_call");
                t && this.set("currentCall", t)
            }
        }), n.exports = h
    }
}), this.require.define({
    "mixins/admin_menu_contextual_help": function (e, t, n) {
        var r = Em.Mixin.create({
            enter: function (e) {
                this._super.apply(this, arguments);
                var t = this.get("path").split(".")[0];
                e.get("contextualHelpController").enterSubject(t)
            },
            exit: function (e) {
                e.get("contextualHelpController").exitSubject(), this._super.apply(this, arguments)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "mixins/controller_pagination": function (e, t, n) {
        var r = Em.Mixin.create({
            isFirstPage: Em.computed.not("notFirstPage"),
            morePages: Em.computed.oneWay("paginationController.morePages"),
            noMorePages: Em.computed.not("morePages"),
            displayPaginationControls: Em.computed.oneWay("paginationController.hasMultiplePages"),
            pageOptions: Em.computed.oneWay("paginationController.pageOptions"),
            page: Em.computed.oneWay("paginationController.page"),
            perPage: Em.computed.oneWay("paginationController.perPage"),
            nextPage: function () {
                this.get("paginationController").nextPage()
            },
            previousPage: function () {
                this.get("paginationController").previousPage()
            },
            goToFirstPage: function () {
                this.get("paginationController").goToFirstPage()
            },
            goToLastPage: function () {
                this.get("paginationController").goToLastPage()
            },
            goToPage: function (e) {
                var t = +e.get("content.label");
                this.get("paginationController").goToPage(t)
            },
            notFirstPage: function () {
                return this.get("paginationController.notFirstPage")
            }.property("paginationController.notFirstPage").cacheable(),
            prevNavigation: [{
                label: "«",
                action: "goToFirstPage"
            }, {
                label: "‹",
                action: "previousPage"
            }],
            nextNavigation: [{
                label: "›",
                action: "nextPage"
            }, {
                label: "»",
                action: "goToLastPage"
            }],
            collectionContent: function () {
                var e = (this.get("pageOptions") || []).map(function (e) {
                    return {
                        label: e,
                        action: "goToPage"
                    }
                });
                return e.length ? [].concat(this.prevNavigation, e, this.nextNavigation) : []
            }.property("pageOptions").volatile()
        });
        n.exports = r
    }
}), this.require.define({
    "mixins/dirty_attribute_tracking": function (e, t, n) {
        var r = Ember.Mixin.create({
            beginDirtyTracking: function (e) {
                var t = this;
                this._trackingAttributes = e, this._cleanAttributes = {}, this._trackingAttributes.forEach(function (e) {
                    t._cleanAttributes[e] = o(t, e)
                })
            },
            changes: function () {
                if (_.isEmpty(this._cleanAttributes)) return {};
                var e = {}, t = this;
                return this._trackingAttributes.forEach(function (n) {
                    var r = o(t, n),
                        i = t._cleanAttributes[n];
                    _.isEqual(r, i) || (e[n] = r)
                }), e
            },
            isDirty: function () {
                return !!Object.keys(this.changes()).length
            }
        }),
            i = function (e, t) {
                return typeof e.get(t) != "object" ? !1 : e.get(t + ".constructor.isEmberResource")
            }, s = function (e, t) {
                return typeof e.get(t) != "object" ? !1 : e.get(t + ".constructor.isEmberResourceCollection")
            }, o = function (e, t) {
                return i(e, t) ? e.get(t + ".id") : s(e, t) ? e.get(t + ".content").mapProperty("id") : e.get(t)
            };
        n.exports = r
    }
}), this.require.define({
    "mixins/item_selection_from_list": function (e, t, n) {
        var r = Em.Mixin.create({
            addToSelection: Em.required(),
            removeFromSelection: Em.required(),
            lastSelectedItemIndex: null,
            resetLastSelectedItem: function () {
                this.set("lastSelectedItemIndex", null)
            },
            setItemSelectionFromList: function (e, t, n, r) {
                var i = this.get("lastSelectedItemIndex"),
                    s = n.indexOf(t);
                if (r && i != null) {
                    var o = Math.min(s, i),
                        u = Math.max(s, i),
                        a = n.slice(o, u + 1).filterProperty("isSelectable", !0).mapProperty("id");
                    this[e](a)
                } else this[e]([Em.get(t, "id")]);
                this.set("lastSelectedItemIndex", s)
            },
            selectItemFromList: function (e, t, n) {
                this.setItemSelectionFromList("addToSelection", e, t, n)
            },
            deselectItemFromList: function (e, t, n) {
                this.setItemSelectionFromList("removeFromSelection", e, t, n)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/modals/mark_ticket_as_spam": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            requesterEmail: null,
            templateName: "templates/modals/mark_ticket_as_spam",
            title: I18n.t("txt.modal.mark_as_spam_notice.title"),
            cancelLabel: I18n.t("txt.modal.problem_solve_notice.cancel"),
            onConfirm: Em.required(),
            confirmLabel: I18n.t("txt.modal.mark_as_spam_notice.confirm"),
            detailsLabel: function () {
                var e = I18n.t("txt.modal.mark_as_spam_notice.list", {
                    requesterEmail: this.get("requesterEmail")
                });
                return new Handlebars.SafeString(e)
            }.property("requesterEmail").cacheable(),
            userDidConfirm: function () {
                this.get("onConfirm")(), this.hideModal()
            },
            userDidCancel: function () {
                this.hideModal()
            }
        }).reopenClass({
            toString: function () {
                return "MarkTicketAsSpamModal"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "mixins/mark_ticket_as_spam": function (e, t, n) {
        var r = Em.Mixin.create({
            MarkTicketAsSpamModal: t("views/modals/mark_ticket_as_spam"),
            growl: t("lib/growl"),
            onMarkTicketAsSpamConfirm: function () {
                var e = this.get("ticket.id"),
                    t = this.get("workspace"),
                    n = this;
                this.get("ticket").globalExpire(), Em.Resource.ajax({
                    type: "PUT",
                    url: "/api/v2/tickets/%@/mark_as_spam.json".fmt(e),
                    dataType: "json"
                }).done(function () {
                    n.growl.notice(I18n.t("txt.ticket.actions.mark_as_spam.notice", {
                        ticketNumber: e
                    })), Zd.workspaces.navigateAfterTicketUpdate(t)
                })
            },
            markTicketAsSpam: function () {
                this.MarkTicketAsSpamModal.create({
                    onConfirm: this.onMarkTicketAsSpamConfirm.bind(this),
                    requesterEmail: this.get("ticket.requester.email")
                }).append()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "mixins/markdown_preview": function (e, t, n) {
        var r = {
            previewing: "previewing",
            writing: "writing",
            generating: "generating"
        }, i = Em.Mixin.create({
                state: r.writing,
                unformattedMarkdown: null,
                formattedMarkdown: null,
                markdownPreviewIsEnabled: function () {
                    var e = t("lib/settings");
                    return e.get("markdown_ticket_comments")
                }.property().cacheable(),
                canPreviewMarkdown: function () {
                    return this.get("markdownPreviewIsEnabled")
                }.property("markdownPreviewIsEnabled").cacheable(),
                isPreviewing: function () {
                    return this.get("state") === r.previewing
                }.property("state").cacheable(),
                isWriting: function () {
                    return this.get("state") === r.writing
                }.property("state").cacheable(),
                isGenerating: function () {
                    return this.get("state") === r.generating
                }.property("state").cacheable(),
                resetMarkdownPreview: function () {
                    this.set("formattedMarkdown", null), this.set("state", r.writing)
                },
                toggleMode: function () {
                    this.get("state") === r.writing ? this.switchToPreviewMode() : this.switchToWriteMode()
                },
                switchToWriteMode: function () {
                    this.set("state", r.writing), Em.run.next(this, function () {
                        this.focusComment()
                    })
                },
                switchToPreviewMode: function () {
                    var e = this;
                    this.set("state", r.generating), this.set("formattedMarkdown", null);
                    var t = $.ajax({
                        url: "/api/v2/format/markdown.json",
                        type: "POST",
                        data: {
                            text: e.get("unformattedMarkdown")
                        }
                    });
                    t.done(function (t) {
                        e.set("formattedMarkdown", t.html), e.set("state", r.previewing)
                    }), t.fail(function () {
                        var t = I18n.t("txt.admin.helpers.tickets_helper.preview_mode_error");
                        e.set("formattedMarkdown", t), e.set("state", r.previewing)
                    })
                }
            });
        n.exports = i
    }
}), this.require.define({
    "mixins/post_message": function (e, t, n) {
        var r = Em.Mixin.create({
            location: window.location,
            hostName: function () {
                return this.get("location").host
            }.property().volatile(),
            postMessageDomain: function () {
                var e = this.get("hostName"),
                    t = e.indexOf(".") + 1,
                    n = e.substr(t),
                    r = this.get("protocol");
                return r + "//" + "support." + n
            }
        });
        n.exports = r
    }
}), this.require.define({
    "mixins/ticket_keyboard_shortcuts": function (e, t, n) {
        var r = {
            saveAsNew: function () {
                this.get("controller").saveAsNew()
            },
            saveAsOpen: function () {
                this.get("controller").saveAsOpen()
            },
            saveAsPending: function () {
                this.get("controller").saveAsPending()
            },
            saveAsHold: function () {
                this.get("controller").saveAsHold()
            },
            saveAsSolved: function (e) {
                this.get("controller").saveAsSolved()
            },
            toggleApps: function () {
                Zendesk.get("appsController").toggleApps()
            },
            toggleReply: function () {
                this.get("controller").toggleCommentMode("publicComment")
            },
            toggleNote: function () {
                this.get("controller").toggleCommentMode("privateComment")
            },
            toggleMacro: function () {
                return this.get("controller").toggleMacro()
            },
            closeWorkspace: function () {
                var e = this.get("controller.workspace");
                Zd.workspaces.closeWorkspace(e)
            },
            nextTicket: function () {
                this.get("controller").nextTicket()
            },
            goToTicket: function () {
                this.get("controller").goToTicket()
            },
            goToRequester: function () {
                this.get("controller").goToRequester()
            }
        };
        n.exports = r
    }
}), this.require.define({
    "controllers/admin/contextual_help/admin_menu_help_controller": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Em.Object.extend({
                contextualHelpView: null,
                resourceModule: null,
                currentSubjectName: null,
                currentTabNameBinding: "contextualHelpView.currentTabName",
                initialized: !1,
                initialize: function () {
                    var e = this;
                    this.set("contextualHelpView", t("views/contextual_help/contextual_help_view").instance), this.get("contextualHelpView").set("controller", this), I18n.loader.load("lotus_contextual_help").done(function () {
                        e.set("resourceModule", t("controllers/admin/contextual_help/admin_menu_help_data")), e.set("initialized", !0), e.enterSubject(e.get("currentSubjectName"))
                    })
                },
                enterSubject: function (e) {
                    this.set("currentSubjectName", e);
                    if (!this.get("initialized")) {
                        this.initialize();
                        return
                    }
                    var t = this.get("resourceModule." + e);
                    t && (this.set("contextualHelpView.currentSubject", t), this.get("contextualHelpView").$().show())
                },
                exitSubject: function () {
                    this.get("contextualHelpView").$().hide()
                },
                showTab: function (e) {
                    this.get("contextualHelpView").showTab(e)
                },
                showVideo: function (e) {
                    this.get("contextualHelpView").showVideo(e);
                    var t = /\/iframe\/(\w+)/.exec(e)[1];
                    this.recordEvent("Video opened: " + t)
                },
                recordEvent: function (e) {
                    r(e, "Contextual-Help", !1)
                }
            }).reopenClass({
                toString: function () {
                    return "AdminMenuHelpController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/admin/contextual_help/admin_menu_help_data": function (e, t, n) {
        var r = {
            people: {
                title: I18n.t("txt.admin.menu.item.people"),
                descriptions: [I18n.t("txt.contextual.descriptions.people.zendesk_defines"), I18n.t("txt.contextual.descriptions.people.use_this_page"), I18n.t("txt.contextual.descriptions.people.each_user")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/5cf1b35146ba70347bcb2b0c2bb5192ced9701af.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/3eb7y06aa8?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.user_roles.title"),
                        link: I18n.t("txt.contextual.references.user_roles.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.user_roles.topic_hlt_cbp_cc"),
                            id: "#topic_hlt_cbp_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.user_roles.topic_nqx_cbp_cc"),
                            id: "#topic_nqx_cbp_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.user_roles.topic_cwu_hbp_cc"),
                            id: "#topic_cwu_hbp_cc"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.managing_users.title"),
                        link: I18n.t("txt.contextual.references.managing_users.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.managing_users.topic_kjp_mze_dc"),
                            id: "#topic_kjp_mze_dc"
                        }, {
                            topic: I18n.t("txt.contextual.references.managing_users.topic_h43_2k2_yg"),
                            id: "#topic_h43_2k2_yg"
                        }, {
                            topic: I18n.t("txt.contextual.references.managing_users.topic_sqm_tjm_dc"),
                            id: "#topic_sqm_tjm_dc"
                        }, {
                            topic: I18n.t("txt.contextual.references.managing_users.topic_kai_rze_dc"),
                            id: "#topic_kai_rze_dc"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.organizations.title"),
                        link: I18n.t("txt.contextual.references.organizations.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.organizations.topic_nxl_vdt_bc"),
                            id: "#topic_nxl_vdt_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_cfj_gfn_bc"),
                            id: "#topic_cfj_gfn_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_nat_vgn_bc"),
                            id: "#topic_nat_vgn_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_cab_ihe_bc"),
                            id: "#topic_cab_ihe_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_wyj_dse_bc"),
                            id: "#topic_wyj_dse_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_ebz_dtn_bc"),
                            id: "#topic_ebz_dtn_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.organizations.topic_kwp_zcf_bc"),
                            id: "#topic_kwp_zcf_bc"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.groups.title"),
                        link: I18n.t("txt.contextual.references.groups.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.groups.topic_cab_ihe_bc"),
                            id: "#topic_cab_ihe_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.groups.topic_wyj_dse_bc"),
                            id: "#topic_wyj_dse_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.groups.topic_nxy_jhe_bc"),
                            id: "#topic_nxy_jhe_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.groups.topic_uxo_gag_bc"),
                            id: "#topic_uxo_gag_bc"
                        }, {
                            topic: I18n.t("txt.contextual.references.groups.topic_kwp_zcf_bc"),
                            id: "#topic_kwp_zcf_bc"
                        }]
                    }]
                }]
            },
            user_fields: {
                title: I18n.t("txt.admin.menu.item.user_fields"),
                descriptions: [I18n.t("txt.contextual.descriptions.user_fields.description"), I18n.t("txt.contextual.descriptions.user_fields.description_2"), I18n.t("txt.contextual.descriptions.user_fields.description_3")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.user_fields.title"),
                        link: "https://support.zendesk.com/entries/24740352-Creating-custom-user-fields"
                    }]
                }]
            },
            organization_fields: {
                title: I18n.t("txt.admin.menu.item.org_fields"),
                descriptions: [I18n.t("txt.contextual.descriptions.org_fields.description"), I18n.t("txt.contextual.descriptions.org_fields.description_2"), I18n.t("txt.contextual.descriptions.org_fields.description_3")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.org_fields.title"),
                        link: "https://support.zendesk.com/entries/24742666-Creating-custom-organization-fields"
                    }]
                }]
            },
            views: {
                title: I18n.t("txt.admin.menu.item.views"),
                descriptions: [I18n.t("txt.contextual.descriptions.views.views_help_you"), I18n.t("txt.contextual.descriptions.views.zendesk_provides")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.views.title"),
                        link: I18n.t("txt.contextual.references.views.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.views.topic_xlz_zsm_pf"),
                            id: "#topic_xlz_zsm_pf"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_ond_dnv_uf"),
                            id: "#topic_ond_dnv_uf"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_hyp_2bn_pf"),
                            id: "#topic_hyp_2bn_pf"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_vzt_3kg_kh"),
                            id: "#topic_vzt_3kg_kh"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_vcr_xfp_ec"),
                            id: "#topic_vcr_xfp_ec"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_fjf_vev_ec"),
                            id: "#topic_fjf_vev_ec"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_n1y_3s4_sf"),
                            id: "#topic_n1y_3s4_sf"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_vnx_wev_ec"),
                            id: "#topic_vnx_wev_ec"
                        }, {
                            topic: I18n.t("txt.contextual.references.views.topic_5zk_ddp_p3"),
                            id: "#topic_5zk_ddp_p3"
                        }]
                    }]
                }]
            },
            macros: {
                title: I18n.t("txt.admin.menu.item.macros"),
                descriptions: [I18n.t("txt.contextual.descriptions.macros.macors_contain"), I18n.t("txt.contextual.descriptions.macros.zendesk_provides")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/7c46e6e3b92fbe68efdf760e1cc3e391bf5c9c74.jpg?image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/tig51y5p27?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.macros.title"),
                        link: I18n.t("txt.contextual.references.macros.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.macros.topic_lty_vgx_tb"),
                            id: "#topic_lty_vgx_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.macros.topic_kda_eew_uf"),
                            id: "#topic_kda_eew_uf"
                        }, {
                            topic: I18n.t("txt.contextual.references.macros.topic_bla_eew_uf"),
                            id: "#topic_bla_eew_uf"
                        }, {
                            topic: I18n.t("txt.contextual.references.macros.topic_vwc_cix_tb"),
                            id: "#topic_vwc_cix_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.macros.topic_mtv_gmx_tb"),
                            id: "#topic_mtv_gmx_tb"
                        }]
                    }]
                }]
            },
            reports: {
                title: I18n.t("txt.admin.menu.item.reporting"),
                descriptions: [I18n.t("txt.contextual.descriptions.reports.reports_give_you"), I18n.t("txt.contextual.descriptions.reports.the_reports_tab"), I18n.t("txt.contextual.descriptions.reports.the_voide_tab")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/3770eef0447c0171b61f787836c6d071bcc07128.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/u3vy81wzfv?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }, {
                        thumbnail: "http://embed.wistia.com/deliveries/1e3c43874ea50f244463bfd92732ee10082fe7e7.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/tmej23xxsw?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.reports.monitoring.title"),
                        link: I18n
                            .t("txt.contextual.references.reports.monitoring.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.reports.exporting.title"),
                        link: I18n.t("txt.contextual.references.reports.exporting.url")
                    }]
                }]
            },
            tags: {
                title: I18n.t("txt.admin.menu.item.tags"),
                descriptions: [I18n.t("txt.contextual.descriptions.tags.the_tag_could"), I18n.t("txt.contextual.descriptions.tags.tags_can")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.using_tags.title"),
                        link: I18n.t("txt.contextual.references.using_tags.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.using_tags.topic_dfv_chv_xb"),
                            id: "#topic_dfv_chv_xb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_hzh_zka_vb"),
                            id: "#topic_hzh_zka_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_vwg_ola_vb"),
                            id: "#topic_vwg_ola_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_twq_xla_vb"),
                            id: "#topic_twq_xla_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_utx_jma_vb"),
                            id: "#topic_utx_jma_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_cvw_rma_vb"),
                            id: "#topic_cvw_rma_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_ntk_ina_vb"),
                            id: "#topic_ntk_ina_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.using_tags.topic_umd_ona_vb"),
                            id: "#topic_umd_ona_vb"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.add_tags.title"),
                        link: I18n.t("txt.contextual.references.add_tags.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.add_tags.topic_czm_tew_qc"),
                            id: "#topic_czm_tew_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_hjy_afw_qc"),
                            id: "#topic_hjy_afw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_bdp_thw_qc"),
                            id: "#topic_bdp_thw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_lry_ifw_qc"),
                            id: "#topic_lry_ifw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_tkd_ehd_rc"),
                            id: "#topic_tkd_ehd_rc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_jzi_bax_qc"),
                            id: "#topic_jzi_bax_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_alr_gfw_qc"),
                            id: "#topic_alr_gfw_qc"
                        }]
                    }]
                }]
            },
            ticket_fields: {
                title: I18n.t("txt.admin.menu.item.ticketfields"),
                descriptions: [I18n.t("txt.contextual.descriptions.ticket_fields.ticket_fields_contain"), I18n.t("txt.contextual.descriptions.ticket_fields.this_page_lists"), I18n.t("txt.contextual.descriptions.ticket_fields.you_can_edit")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.ticket_fields.about.title"),
                        link: I18n.t("txt.contextual.references.ticket_fields.about.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.ticket_fields.custom.title"),
                        link: I18n.t("txt.contextual.references.ticket_fields.custom.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.ticket_fields.custom.topic_dwt_est_kc"),
                            id: "#topic_dwt_est_kc"
                        }, {
                            topic: I18n.t("txt.contextual.references.ticket_fields.custom.topic_ext_est_kc"),
                            id: "#topic_ext_est_kc"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.on_hold_status.title"),
                        link: I18n.t("txt.contextual.references.on_hold_status.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_kdz_5qn_b3"),
                            id: "#topic_kdz_5qn_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_k1x_pb4_b3"),
                            id: "#topic_k1x_pb4_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_xbh_gxn_b3"),
                            id: "#topic_xbh_gxn_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_3d3_yzn_b3"),
                            id: "#topic_3d3_yzn_b3"
                        }]
                    }]
                }]
            },
            ticket_forms: {
                title: I18n.t("txt.ticket_forms.admin.ticket_forms"),
                descriptions: [I18n.t("txt.contextual.descriptions.ticket_forms.what_is"), I18n.t("txt.contextual.descriptions.ticket_forms.you_can"), I18n.t("txt.contextual.descriptions.ticket_forms.in_this_page")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.create_ticket_forms.title"),
                        link: I18n.t("txt.contextual.references.create_ticket_forms.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.manage_ticket_forms.title"),
                        link: I18n.t("txt.contextual.references.manage_ticket_forms.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.web_portal_text.title"),
                        link: I18n.t("txt.contextual.references.web_portal_text.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.designing_forms.title"),
                        link: I18n.t("txt.contextual.references.designing_forms.url")
                    }]
                }]
            },
            dynamic_content: {
                title: I18n.t("txt.admin.menu.item.dynamiccontent"),
                descriptions: [I18n.t("txt.contextual.descriptions.dynamic_contents.dynamic_content_is"), I18n.t("txt.contextual.descriptions.dynamic_contents.this_page_enables")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.dynamic_contents.title"),
                        link: I18n.t("txt.contextual.references.dynamic_contents.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.dynamic_contents.topic_qcy_eci_je"),
                            id: "#topic_qcy_eci_je"
                        }, {
                            topic: I18n.t("txt.contextual.references.dynamic_contents.topic_hdn_hdi_je"),
                            id: "#topic_hdn_hdi_je"
                        }, {
                            topic: I18n.t("txt.contextual.references.dynamic_contents.topic_enk_bdi_je"),
                            id: "#topic_enk_bdi_je"
                        }]
                    }]
                }]
            },
            triggers: {
                title: I18n.t("txt.admin.menu.item.triggers"),
                descriptions: [I18n.t("txt.contextual.descriptions.triggers.triggers_are"), I18n.t("txt.contextual.descriptions.triggers.this_page_shows")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/69622ee62d69ed04fb16026a993d0ff89b210be5.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/4mk0lj2dgj?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.triggers.title"),
                        link: I18n.t("txt.contextual.references.triggers.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.triggers.topic_usx_vxx_tb"),
                            id: "#topic_usx_vxx_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.triggers.topic_tpw_gay_tb"),
                            id: "#topic_tpw_gay_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.triggers.topic_vnl_zpy_tb"),
                            id: "#topic_vnl_zpy_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.triggers.topic_dwq_zoy_tb"),
                            id: "#topic_dwq_zoy_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.triggers.topic_jvv_kqy_tb"),
                            id: "#topic_jvv_kqy_tb"
                        }]
                    }]
                }]
            },
            automations: {
                title: I18n.t("txt.admin.menu.item.automations"),
                descriptions: [I18n.t("txt.contextual.descriptions.automations.automations_are"), I18n.t("txt.contextual.descriptions.automations.this_page_shows")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.automations.title"),
                        link: I18n.t("txt.contextual.references.automations.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.automations.topic_adj_pzy_tb"),
                            id: "#topic_adj_pzy_tb"
                        }, {
                            topic: I18n.t("txt.contextual.references.automations.topic_rsh_miv_ub"),
                            id: "#topic_rsh_miv_ub"
                        }, {
                            topic: I18n.t("txt.contextual.references.automations.topic_agt_ojv_ub"),
                            id: "#topic_agt_ojv_ub"
                        }, {
                            topic: I18n.t("txt.contextual.references.automations.topic_wsq_xjv_ub"),
                            id: "#topic_wsq_xjv_ub"
                        }]
                    }]
                }]
            },
            slas: {
                title: I18n.t("txt.admin.menu.item.slas"),
                descriptions: [I18n.t("txt.contextual.descriptions.sla.sla_service"), I18n.t("txt.contextual.descriptions.sla.zendesk_provides")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.sla.title"),
                        link: I18n.t("txt.contextual.references.sla.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.sla.topic_m2j_5mw_bj"),
                            id: "#topic_m2j_5mw_bj"
                        }, {
                            topic: I18n.t("txt.contextual.references.sla.topic_o55_qzq_cj"),
                            id: "#topic_o55_qzq_cj"
                        }, {
                            topic: I18n.t("txt.contextual.references.sla.topic_l1b_1nw_bj"),
                            id: "#topic_l1b_1nw_bj"
                        }, {
                            topic: I18n.t("txt.contextual.references.sla.topic_z15_hxw_bj"),
                            id: "#topic_z15_hxw_bj"
                        }, {
                            topic: I18n.t("txt.contextual.references.sla.topic_z4z_nxw_bj"),
                            id: "#topic_z4z_nxw_bj"
                        }]
                    }]
                }]
            },
            twitter: {
                title: I18n.t("txt.identities.label.new_twitter"),
                descriptions: [I18n.t("txt.contextual.descriptions.twitter.monitor_one"), I18n.t("txt.contextual.descriptions.twitter.in_general")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.twitter_setup.title"),
                        link: I18n.t("txt.contextual.references.twitter_setup.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_pcz_y3p_2g"),
                            id: "#topic_pcz_y3p_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_n23_wcp_2g"),
                            id: "#topic_n23_wcp_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_jfn_ycp_2g"),
                            id: "#topic_jfn_ycp_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_wph_t2x_2g"),
                            id: "#topic_wph_t2x_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_dwj_zcp_2g"),
                            id: "#topic_dwj_zcp_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.twitter_setup.topic_kyz_pkp_2g"),
                            id: "#topic_kyz_pkp_2g"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.twitter_saved_searches.title"),
                        link: I18n.t("txt.contextual.references.twitter_saved_searches.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.twitter_advanced_search.title"),
                        link: I18n.t("txt.contextual.references.twitter_advanced_search.url")
                    }]
                }]
            },
            chat: {
                title: I18n.t("txt.views.channels.dialer_view.chat_header"),
                descriptions: [I18n.t("txt.contextual.descriptions.chat.the_chat_channel"), I18n.t("txt.contextual.descriptions.chat.in_this_page")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.chat_set_up.title"),
                        link: I18n.t("txt.contextual.references.chat_set_up.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.chat_set_up.topic_1kj_sbj_2g"),
                            id: "#topic_1kj_sbj_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.chat_set_up.topic_l4q_lgj_2g"),
                            id: "#topic_l4q_lgj_2g"
                        }, {
                            topic: I18n.t("txt.contextual.references.chat_set_up.topic_ygn_brj_2g"),
                            id: "#topic_ygn_brj_2g"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.zendesk_chat.title"),
                        link: I18n.t("txt.contextual.references.zendesk_chat.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_2xn_prb_vf"),
                            id: "#topic_2xn_prb_vf"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_jyf_yrb_vf"),
                            id: "#topic_jyf_yrb_vf"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_3wq_wmj_vf"),
                            id: "#topic_3wq_wmj_vf"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_nmk_xbc_vf"),
                            id: "#topic_fgw_hmw_5f"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_zd4_ybc_vf"),
                            id: "#topic_nmk_xbc_vf"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_fgw_hmw_5f"),
                            id: "#topic_zd4_ybc_vf"
                        }, {
                            topic: I18n.t("txt.contextual.references.zendesk_chat.topic_j1l_gcc_vf"),
                            id: "#topic_j1l_gcc_vf"
                        }]
                    }]
                }]
            },
            facebook: {
                title: I18n.t("txt.identities.action.new_facebook"),
                descriptions: [I18n.t("txt.contextual.descriptions.facebook.the_facebook_channel"), I18n.t("txt.contextual.descriptions.facebook.this_page_lists")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.facebook_set_up.title"),
                        link: I18n.t("txt.contextual.references.facebook_set_up.url")
                    }]
                }]
            },
            voice: {
                title: I18n.t("txt.header.channels.voice"),
                descriptions: [I18n.t("txt.contextual.descriptions.voice.the_voice_channel"), I18n.t("txt.contextual.descriptions.voice.to_set_up"), I18n.t("txt.contextual.descriptions.voice.zendesk_voice")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.voice_set_up.title"),
                        link: I18n.t("txt.contextual.references.voice_set_up.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_awn_pfy_md"),
                            id: "#topic_awn_pfy_md"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_qou_rcv_ld"),
                            id: "#topic_qou_rcv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_jnu_ucv_ld"),
                            id: "#topic_jnu_ucv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_aqm_zcv_ld"),
                            id: "#topic_aqm_zcv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_lug_ddv_ld"),
                            id: "#topic_lug_ddv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_xsa_idv_ld"),
                            id: "#topic_xsa_idv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_nto_ndv_ld"),
                            id: "#topic_nto_ndv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_tst_gfv_ld"),
                            id: "#topic_tst_gfv_ld"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_vny_ckz_md"),
                            id: "#topic_vny_ckz_md"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_ld2_msk_1h"),
                            id: "#topic_ld2_msk_1h"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_xmr_agd_tf"),
                            id: "#topic_xmr_agd_tf"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_set_up.topic_hy3_2hz_43"),
                            id: "#topic_hy3_2hz_43"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.voice_inbound.title"),
                        link: I18n.t("txt.contextual.references.voice_inbound.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.voice_inbound.topic_y5b_ffz_4f"),
                            id: "#topic_y5b_ffz_4f"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_inbound.topic_nxb_ffz_4f"),
                            id: "#topic_nxb_ffz_4f"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_inbound.topic_shc_2gw_p3"),
                            id: "#topic_shc_2gw_p3"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_inbound.topic_vxb_ffz_4f"),
                            id: "#topic_vxb_ffz_4f"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.voice_outbound.title"),
                        link: I18n.t("txt.contextual.references.voice_outbound.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.voice_outbound.topic_qx2_fm4_p3"),
                            id: "#topic_qx2_fm4_p3"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_outbound.topic_cn4_tsy_43"),
                            id: "#topic_cn4_tsy_43"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_outbound.topic_1ln_2qy_43"),
                            id: "#topic_1ln_2qy_43"
                        }, {
                            topic: I18n.t("txt.contextual.references.voice_outbound.topic_ppm_4ry_43"),
                            id: "#topic_ppm_4ry_43"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.voice_pricing.title"),
                        link: I18n.t("txt.contextual.references.voice_pricing.url")
                    }]
                }]
            },
            dropboxes: {
                title: I18n.t("txt.ticket.show.receiver.via.feedback_tab"),
                descriptions: [I18n.t("txt.contextual.descriptions.dropboxes.a_feedback_tab"), I18n.t("txt.contextual.descriptions.dropboxes.in_this_page"), I18n.t("txt.contextual.descriptions.dropboxes.each_feedback_tab")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.feedback_tab.title"),
                        link: I18n.t("txt.contextual.references.feedback_tab.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.feedback_tab.topic_igb_pxd_ff"),
                            id: "#topic_igb_pxd_ff"
                        }, {
                            topic: I18n.t("txt.contextual.references.feedback_tab.topic_rwj_adf_ff"),
                            id: "#topic_rwj_adf_ff"
                        }, {
                            topic: I18n.t("txt.contextual.references.feedback_tab.topic_mpw_tkf_ff"),
                            id: "#topic_mpw_tkf_ff"
                        }, {
                            topic: I18n.t("txt.contextual.references.feedback_tab.topic_zdl_ehs_ff"),
                            id: "#topic_zdl_ehs_ff"
                        }, {
                            topic: I18n.t("txt.contextual.references.feedback_tab.topic_sly_egf_ff"),
                            id: "#topic_sly_egf_ff"
                        }]
                    }]
                }]
            },
            api: {
                title: I18n.t("type.via.api"),
                descriptions: [I18n.t("txt.contextual.descriptions.api.if_you"), I18n.t("txt.contextual.descriptions.api.in_this_page")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.api.title"),
                        link: I18n.t("txt.contextual.references.api.url")
                    }]
                }]
            },
            portal: {
                title: I18n.t("txt.admin.views.settings.channels.show.Web_Portal"),
                descriptions: [I18n.t("txt.contextual.descriptions.portal.web_portal"), I18n.t("txt.contextual.descriptions.portal.in_this_page")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.customize_portal.title"),
                        link: I18n.t("txt.contextual.references.customize_portal.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_bph_2hm_rf"),
                            id: "#topic_bph_2hm_rf"
                        }, {
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_bgc_yvd_rf"),
                            id: "#topic_bgc_yvd_rf"
                        }, {
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_mbd_b3l_tf"),
                            id: "#topic_mbd_b3l_tf"
                        }, {
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_vxq_jfx_ve"),
                            id: "#topic_vxq_jfx_ve"
                        }, {
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_b4b_zxf_rf"),
                            id: "#topic_b4b_zxf_rf"
                        }, {
                            topic: I18n.t("txt.contextual.references.customize_portal.topic_ylj_zjx_ve"),
                            id: "#topic_ylj_zjx_ve"
                        }]
                    }]
                }]
            },
            email: {
                title: I18n.t("txt.email.label"),
                descriptions: [I18n.t("txt.contextual.descriptions.email.your_zendesk_has"), I18n.t("txt.contextual.descriptions.email.you_can"), I18n.t("txt.contextual.descriptions.email.also")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/cf8845853fa162f9522300e3bc2cfa52e5bbb851.jpg?image_crop_resized=250x135",
                        link: "//fast.wistia.com/embed/iframe/wbx72xdqz0?autoPlay=trueplayerColor=030303&version=v1&videoHeight=540&videoWidth=960&volumeControl=true&plugin%5BpostRoll%5D%5Blink%5D=https%3A%2F%2Fsupport.zendesk.com%2Fentries%2F20519926-getting-started-with-email-in-zendesk&plugin%5BpostRoll%5D%5Bstyle%5D%5BbackgroundColor%5D=%23616161&plugin%5BpostRoll%5D%5Bstyle%5D%5Bcolor%5D=%23ffffff&plugin%5BpostRoll%5D%5Bstyle%5D%5BfontFamily%5D=Gill%20Sans%2C%20Helvetica%2C%20Arial%2C%20sans-serif&plugin%5BpostRoll%5D%5Bstyle%5D%5BfontSize%5D=48px&plugin%5BpostRoll%5D%5Btext%5D=Click%20to%20learn%20more%20about%20email%20in%20Zendesk&plugin%5BpostRoll%5D%5Bversion%5D=v1"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.email_in_zendesk.title"),
                        link: I18n.t("txt.contextual.references.email_in_zendesk.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_ofx_ncs_rd"),
                            id: "#topic_ofx_ncs_rd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_krs_cat_rd"),
                            id: "#topic_krs_cat_rd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_iue_ubp_xd"),
                            id: "#topic_iue_ubp_xd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_oin_luw_vd"),
                            id: "#topic_oin_luw_vd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_zjr_tws_wd"),
                            id: "#topic_zjr_tws_wd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_twz_wjk_yd"),
                            id: "#topic_twz_wjk_yd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_mtp_xsr_yd"),
                            id: "#topic_mtp_xsr_yd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_zda_lvw_vd"),
                            id: "#topic_zda_lvw_vd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_hta_uos_wd"),
                            id: "#topic_hta_uos_wd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_zvp_pkr_yd"),
                            id: "#topic_zvp_pkr_yd"
                        }, {
                            topic: I18n.t("txt.contextual.references.email_in_zendesk.topic_ayx_los_wd"),
                            id: "#topic_ayx_los_wd"
                        }]
                    }]
                }]
            },
            account: {
                title: I18n.t("txt.admin.menu.item.account"),
                descriptions: [I18n.t("txt.contextual.descriptions.account.account_settings"), I18n.t("txt.contextual.descriptions.account.you_can_view"), I18n.t("txt.contextual.descriptions.account.the_audit_log")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.branding.title"),
                        link: I18n.t("txt.contextual.references.branding.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.branding.topic_jzf_msr_ve"),
                            id: "#topic_jzf_msr_ve"
                        }, {
                            topic: I18n.t("txt.contextual.references.branding.topic_jju_phx_ve"),
                            id: "#topic_jju_phx_ve"
                        }, {
                            topic: I18n.t("txt.contextual.references.branding.topic_zjr_m1x_qf"),
                            id: "#topic_zjr_m1x_qf"
                        }, {
                            topic: I18n.t("txt.contextual.references.branding.topic_xdw_mvr_ve"),
                            id: "#topic_xdw_mvr_ve"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.configure_locale.title"),
                        link: I18n.t("txt.contextual.references.configure_locale.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_dil_hnc_xe"),
                            id: "#topic_dil_hnc_xe"
                        }, {
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_ijx_svh_xe"),
                            id: "#topic_ijx_svh_xe"
                        }, {
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_mck_unc_xe"),
                            id: "#topic_mck_unc_xe"
                        }, {
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_ukk_syh_xe"),
                            id: "#topic_ukk_syh_xe"
                        }, {
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_qsb_boc_xe"),
                            id: "#topic_qsb_boc_xe"
                        }, {
                            topic: I18n.t("txt.contextual.references.configure_locale.topic_wia_jvj_xe"),
                            id: "#topic_wia_jvj_xe"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.audit_log.title"),
                        link: I18n.t("txt.contextual.references.audit_log.url")
                    }]
                }]
            },
            security: {
                title: I18n.t("txt.admin.menu.item.security"),
                descriptions: [I18n.t("txt.contextual.descriptions.security.you_can"), I18n.t("txt.contextual.descriptions.security.your_agents"), I18n.t("txt.contextual.descriptions.security.ssl"), I18n.t("txt.contextual.descriptions.security.you_can_also")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.end_user_access.title"),
                        link: I18n.t("txt.contextual.references.end_user_access.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.password_security.title"),
                        link: I18n.t("txt.contextual.references.password_security.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.restricting_access.title"),
                        link: I18n.t("txt.contextual.references.restricting_access.url")
                    }]
                }]
            },
            tickets: {
                title: I18n.t("txt.admin.menu.item.tickets"),
                descriptions: [I18n.t("txt.contextual.descriptions.tickets.tickets_are"), I18n.t("txt.contextual.descriptions.tickets.you_can"), I18n.t("txt.contextual.descriptions.tickets.in_the_settings")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/af0219343bdc6f4107678f579f89540527e057d8.jpg?image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/n4a3fsvgq2?autoPlay=trueplayerColor=030303&plugin%5BpostRoll-v1%5D=%7B%22text%22%3A%22Click%20to%20learn%20more%20about%20managing%20tickets%22%2C%22link%22%3A%22https%3A%2F%2Fsupport.zendesk.com%2Fentries%2F21222511-managing-your-tickets%22%2C%22style%22%3A%7B%22backgroundColor%22%3A%22%23616161%22%2C%22color%22%3A%22%23ffffff%22%2C%22fontSize%22%3A%2248px%22%2C%22fontFamily%22%3A%22Gill%20Sans%2C%20Helvetica%2C%20Arial%2C%20sans-serif%22%7D%7D&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.ticket_fields.about.title"),
                        link: I18n.t("txt.contextual.references.ticket_fields.about.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.sharing_tickets.title"),
                        link: I18n.t("txt.contextual.references.sharing_tickets.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.sharing_tickets.topic_kjg_hhz_kc"),
                            id: "#topic_kjg_hhz_kc"
                        }, {
                            topic: I18n.t("txt.contextual.references.sharing_tickets.topic_cvt_atz_kc"),
                            id: "#topic_cvt_atz_kc"
                        }, {
                            topic: I18n.t("txt.contextual.references.sharing_tickets.topic_vam_qtz_kc"),
                            id: "#topic_vam_qtz_kc"
                        }, {
                            topic: I18n.t("txt.contextual.references.sharing_tickets.topic_ktu_ttz_kc"),
                            id: "#topic_ktu_ttz_kc"
                        }, {
                            topic: I18n.t("txt.contextual.references.sharing_tickets.topic_uxg_hfr_hf"),
                            id: "#topic_uxg_hfr_hf"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.on_hold_status.title"),
                        link: I18n.t("txt.contextual.references.on_hold_status.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_kdz_5qn_b3"),
                            id: "#topic_kdz_5qn_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_k1x_pb4_b3"),
                            id: "#topic_k1x_pb4_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_xbh_gxn_b3"),
                            id: "#topic_xbh_gxn_b3"
                        }, {
                            topic: I18n.t("txt.contextual.references.on_hold_status.topic_3d3_yzn_b3"),
                            id: "#topic_3d3_yzn_b3"
                        }]
                    }]
                }]
            },
            agents: {
                title: I18n.t("txt.admin.menu.item.agents"),
                descriptions: [I18n.t("txt.contextual.descriptions.agents.agents_are"), I18n.t("txt.contextual.descriptions.agents.in_this_page")],
                tabContents: [{
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.user_roles.title"),
                        link: I18n.t("txt.contextual.references.user_roles.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.user_roles.topic_hlt_cbp_cc"),
                            id: "#topic_hlt_cbp_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.user_roles.topic_nqx_cbp_cc"),
                            id: "#topic_nqx_cbp_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.user_roles.topic_cwu_hbp_cc"),
                            id: "#topic_cwu_hbp_cc"
                        }]
                    }]
                }]
            },
            customers: {
                title: I18n.t("txt.admin.menu.item.customers"),
                descriptions: [I18n.t("txt.contextual.descriptions.customers.customers"), I18n.t("txt.contextual.descriptions.customers.in_this_page")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "//wistia.sslcs.cdngc.net/deliveries/fbdbae6f3bbe975b6a35d4435683519d17f6d276.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/403glef5wj?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.add_tags.title"),
                        link: I18n.t("txt.contextual.references.add_tags.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.add_tags.topic_czm_tew_qc"),
                            id: "#topic_czm_tew_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_hjy_afw_qc"),
                            id: "#topic_hjy_afw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_bdp_thw_qc"),
                            id: "#topic_bdp_thw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_lry_ifw_qc"),
                            id: "#topic_lry_ifw_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_tkd_ehd_rc"),
                            id: "#topic_tkd_ehd_rc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_jzi_bax_qc"),
                            id: "#topic_jzi_bax_qc"
                        }, {
                            topic: I18n.t("txt.contextual.references.add_tags.topic_alr_gfw_qc"),
                            id: "#topic_alr_gfw_qc"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.satisfaction_rating.title"),
                        link: I18n.t("txt.contextual.references.satisfaction_rating.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_xxm_imn_gc"),
                            id: "#topic_xxm_imn_gc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_lnh_xyu_id"),
                            id: "#topic_lnh_xyu_id"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_zcl_lsd_fc"),
                            id: "#topic_zcl_lsd_fc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_qfu_kvd_fc"),
                            id: "#topic_qfu_kvd_fc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_twa_svd_fc"),
                            id: "#topic_twa_svd_fc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_dwy_gyv_cc"),
                            id: "#topic_dwy_gyv_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_dze_ubw_cc"),
                            id: "#topic_dze_ubw_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_hlb_fjw_cc"),
                            id: "#topic_hlb_fjw_cc"
                        }, {
                            topic: I18n.t("txt.contextual.references.satisfaction_rating.topic_qlt_oqw_ec"),
                            id: "#topic_qlt_oqw_ec"
                        }]
                    }]
                }]
            },
            extensions: {
                title: I18n.t("txt.admin.menu.item.extensions"),
                descriptions: [I18n.t("txt.contextual.descriptions.extensions.extensions_are"), I18n.t("txt.contextual.descriptions.extensions.in_the_widgets_tab"), I18n.t("txt.contextual.descriptions.extensions.in_the_crm_tab")],
                tabContents: [{
                    key: "Videos",
                    data: [{
                        thumbnail: "http://embed.wistia.com/deliveries/6c4bb71e8c692719a50c0699745a7c57e06b0c7f.jpg?image_play_button=true&image_play_button_color=030303e0&image_crop_resized=250x135",
                        link: "//fast.wistia.net/embed/iframe/lemslxwpkc?autoPlay=true&playerColor=030303&popover=true&version=v1&videoHeight=540&videoWidth=960&volumeControl=true"
                    }]
                }, {
                    key: "References",
                    data: [{
                        topic: I18n.t("txt.contextual.references.external_targets.title"),
                        link: I18n.t("txt.contextual.references.external_targets.url"),
                        subTopics: [{
                            topic: I18n.t("txt.contextual.references.external_targets.topic_hvf_eoa_vb"),
                            id: "#topic_hvf_eoa_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.external_targets.topic_ezx_fpa_vb"),
                            id: "#topic_ezx_fpa_vb"
                        }, {
                            topic: I18n.t("txt.contextual.references.external_targets.topic_cjz_eqa_vb"),
                            id: "#topic_cjz_eqa_vb"
                        }]
                    }, {
                        topic: I18n.t("txt.contextual.references.ticket_yammer_activity.title"),
                        link: I18n.t("txt.contextual.references.ticket_yammer_activity.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.salesforce.title"),
                        link: I18n.t("txt.contextual.references.salesforce.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.sugar_crm.title"),
                        link: I18n.t("txt.contextual.references.sugar_crm.url")
                    }, {
                        topic: I18n.t("txt.contextual.references.ms_dynamics.title"),
                        link: I18n.t("txt.contextual.references.ms_dynamics.url")
                    }]
                }]
            }
        };
        n.exports = Object.seal(r)
    }
}), this.require.define({
    "controllers/admin/subscription/subscription_confirmation_controller": function (e, t, n) {
        var r = t("controllers/admin/subscription_controller"),
            i = t("controllers/admin/subscription/subscription_plan_change_helpers"),
            s = Em.Object.extend(i, {
                subscriptionController: r,
                currentSubscriptionBinding: "subscriptionController.currentSubscription",
                previewSubscriptionBinding: "subscriptionController.previewSubscription",
                show: function () {
                    this.get("previewSubscription.plan_type") == null && Zd.Routes.goToHash("/admin/subscription")
                }
            }).reopenClass({
                toString: function () {
                    return "SubscriptionConfirmationController"
                }
            });
        n.exports = s.create()
    }
}), this.require.define({
    "controllers/admin/subscription/subscription_payment_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = t("controllers/admin/subscription_controller"),
            s = t("lib/account_consumer"),
            o = t("mixins/post_message"),
            u = t("lib/logging/console_logger"),
            a = new u,
            f = {
                fields: {
                    errorField_creditCardType: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_type"),
                    errorField_creditCardNumber: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_number"),
                    errorField_creditCardExpirationMonth: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_expiration_date"),
                    errorField_cardSecurityCode: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_security_code"),
                    errorField_creditCardHolderName: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_holder_name"),
                    errorField_creditCardCountry: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_country"),
                    errorField_creditCardAddress1: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_address1"),
                    errorField_creditCardAddress2: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_address2"),
                    errorField_creditCardCity: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_city"),
                    errorField_creditCardState: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_state"),
                    errorField_creditCardPostalCode: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_postal_code"),
                    errorField_email: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.credit_card_email_address")
                },
                types: {
                    NullValue: I18n.t("txt.views.subscription_payment_view.credit_card.error_field.cannot_be_blank")
                }
            }, l = ["001", "002", "004", "005", "007", "012", "013", "014", "019", "041", "043", "051", "054", "057", "058", "059", "061", "062", "065", "070", "115", "117"],
            c = Em.Object.extend(o, s, {
                init: function () {
                    var e = this._super.apply(this, arguments);
                    return this.bindPostMessageListener(), this.set("creditCardRegistrationErrorTitle", I18n.t("txt.views.subscription_payment_view.credit_card.error_title")), this.set("creditCardRegistrationErrorMessages", []), e
                },
                subscriptionController: i,
                previewSubscription: Em.computed.oneWay("subscriptionController.previewSubscription"),
                currentSubscription: function (e, t) {
                    return arguments.length === 2 ? t : this.get("subscriptionController.currentSubscription")
                }.property("subscriptionController.currentSubscription").cacheable(),
                accountUrl: function () {
                    var e = this.get("location"),
                        t = e.protocol + "//" + e.host;
                    return t
                }.property().volatile(),
                protocol: function () {
                    return this.get("location").protocol
                }.property().volatile(),
                maxAgentCount: Em.computed.oneWay("previewSubscription.max_agents"),
                planType: Em.computed.oneWay("previewSubscription.plan_type"),
                billingCycleType: Em.computed.oneWay("previewSubscription.billing_cycle_type"),
                promoCode: Em.computed.oneWay("previewSubscription.promo_code"),
                voiceOptin: Em.computed.oneWay("previewSubscription.voice_optin"),
                voiceTranscriptionOptin: Em.computed.oneWay("previewSubscription.voice_transcription_optin"),
                iframeUrl: function () {
                    var e = Zd.currentUser.get("locale_id") || I18n.locale_id,
                        n = {
                            "subscription[account_url]": this.get("accountUrl"),
                            "subscription[subdomain]": this.get("currentAccount.subdomain"),
                            "subscription[max_agents]": this.get("maxAgentCount"),
                            "subscription[plan_type]": this.get("planType"),
                            "subscription[billing_cycle_type]": this.get("billingCycleType"),
                            locale: e
                        };
                    (this.get("promoCode") || "") !== "" && $.extend(n, {
                            "subscription[promo_code]": this.get("promoCode")
                        }), this.get("voiceOptin") && ($.extend(n, {
                            "subscription[voice_optin]": this.get("voiceOptin")
                        }), this.get("voiceTranscriptionOptin") && $.extend(n, {
                            "subscription[voice_transcription_optin]": this.get("voiceTranscriptionOptin")
                        })), this.get("currentAccount.isInternallyBilled") ? n.method = "upgrade_from_trial" : n.method = "new";
                    var r = this.postMessageDomain() + "/zuora/credit_card/zendesk_iframe",
                        i = t("models/url"),
                        s = new i(r, n);
                    return s.toString()
                }.property("currentAccount.isInternallyBilled").volatile(),
                callback: function (e) {
                    var t = e.originalEvent;
                    t.data !== "showZuoraOverlay" && this.registrationCallback(t)
                },
                registrationCallback: function (e) {
                    var t = null;
                    if (typeof e.data == "string") try {
                        t = JSON.parse(e.data)
                    } catch (n) {
                        t = e.data
                    } else t = e.data;
                    var r = t.status;
                    r === "true" ? this.onCreditCardRegistrationSuccess(t) : r === "false" ? this.onCreditCardRegistrationFailure(t) : this.reloadIframe()
                },
                onCreditCardRegistrationFailure: function (e) {
                    var t = e.errors.errorCode,
                        n = "parse" + t,
                        r = this[n].call(null, e.errors);
                    t.match(/^(Business|HostedPageField)/) === null && this.set("creditCardRegistrationErrorTitle", ""), this.set("creditCardRegistrationErrorMessages", r), this.reloadIframe()
                },
                onCreditCardRegistrationSuccess: function (e) {
                    this.set("creditCardRegistrationErrorMessages", []), this.ajax({
                        type: "POST",
                        url: this.get("accountUrl") + this.get("subscriptionUpdatePath"),
                        data: {
                            subscription: e.subscription
                        }
                    }).done(this.onSubscriptionUpdateSuccess.bind(this)).fail(this.onSubscriptionUpdateFailure.bind(this))
                },
                parseGeneralSystemError: function (e) {
                    return [{
                        message: I18n.t("txt.views.subscription_payment_view.credit_card.errors.general_system_error.message")
                    }]
                },
                parseSubscriptionProcessingError: function (e) {
                    return [{
                        message: I18n.t("txt.views.subscription_payment_view.credit_card.errors.subscription_processing_error.message")
                    }]
                },
                parseGatewayTransactionError: function (e) {
                    a.debug("Gateway error message: " + e.errorMessage);
                    var t = e.errorMessage.replace(/.*<br>/, ""),
                        n = t.split(/-/)[0].trim();
                    return l.indexOf(n) >= 0 ? t = I18n.t("txt.views.subscription_payment_view.credit_card.errors.gateway_transaction_error.message", {
                        message: t
                    }) : n.match(/(CVV Note\:|CVV)/) ? t = I18n.t("txt.views.subscription_payment_view.credit_card.errors.gateway_transaction_error.cvv_issue") : n.match(/AVS Note\:/) ? t = I18n.t("txt.views.subscription_payment_view.credit_card.errors.gateway_transaction_error.avs_issue") : t = I18n.t("txt.views.subscription_payment_view.credit_card.errors.gateway_transaction_error.generic_message"), [{
                        message: t
                    }]
                },
                parseBusinessValidationError: function (e) {
                    var t = e.errorMessage;
                    return t.match(/Expiration date .* future/i) ? (t = I18n.t("txt.views.subscription_payment_view.credit_card.errors.business_validation_error.expiration_date"), [{
                        message: t
                    }]) : [{
                        name: I18n.t("txt.modal.error.header"),
                        message: t
                    }]
                },
                parseHostedPageFieldValidationError: function (e) {
                    return delete e.errorCode, delete e.errorMessage, _.map(e, function (e, t) {
                        return {
                            name: f.fields[t] || t.replace(/errorField_/, ""),
                            message: f.types[e] || e
                        }
                    })
                },
                ajax: function (e) {
                    return $.ajax(e)
                },
                subscriptionUpdatePath: function () {
                    return this.get("currentAccount.isInternallyBilled") ? "/api/v2/account/subscription.json" : "/api/v2/account/subscription/update_payment_method.json"
                }.property("currentAccount.isInternallyBilled").cacheable(),
                onSubscriptionUpdateSuccess: function () {
                    var e = this;
                    this.get("currentSubscription").refresh().done(function () {
                        e.afterSubscriptionUpdateSuccess(), e.get("currentAccount").refresh()
                    })
                },
                afterSubscriptionUpdateSuccess: function () {
                    Zendesk.Routes.goToHash("#/admin/subscription"), r.notice(I18n.t("txt.admin.subscription.successfully_updated"))
                },
                onSubscriptionUpdateFailure: function (e, t, n) {
                    this.set("creditCardRegistrationErrorMessages", [{
                        name: "Error",
                        message: JSON.parse(e.responseText).description
                    }]), this.reloadIframe()
                },
                show: function () {
                    this.set("creditCardRegistrationErrorMessages", []), this.get("previewSubscription.max_agents") === undefined && this.get("currentAccount.isInternallyBilled") && Zendesk.Routes.goToHash("#/admin/subscription")
                },
                reloadIframe: function () {
                    var e = $("#zuora_credit_card_iframe");
                    e.attr("src", function (e, t) {
                        return t + "&reload=true"
                    })
                },
                bindPostMessageListener: function () {
                    PostMessage.receiveMessage(this.callback.bind(this), this.postMessageDomain())
                }
            }).reopenClass({
                toString: function () {
                    return "SubscriptionPaymentController"
                }
            });
        n.exports = {
            instance: c.create(),
            klass: c
        }
    }
}), this.require.define({
    "controllers/admin/subscription/subscription_plan_change_helpers": function (e, t, n) {
        var r = Em.Mixin.create({
            downgrade: Em.computed.or("planTypeDowngraded", "maxAgentsDowngraded"),
            upgrade: Em.computed.not("downgrade"),
            planTypeDowngraded: function () {
                return this.get("previewSubscription.plan_type") < this.get("currentSubscription.plan_type")
            }.property("previewSubscription.plan_type", "currentSubscription.plan_type").cacheable(),
            planDowngradedFrom: function () {
                return this.get("currentSubscription.plan_name")
            }.property("currentSubscription.plan_type").cacheable(),
            planDowngradedTo: function () {
                return this.get("previewSubscription.plan_name")
            }.property("previewSubscription.plan_type").cacheable(),
            billingCycleTypeChanged: function () {
                return this.get("previewSubscription.billing_cycle_type") !== this.get("currentSubscription.billing_cycle_type")
            }.property("previewSubscription.billing_cycle_type", "currentSubscription.billing_cycle_type").cacheable(),
            maxAgentsDowngraded: function () {
                return this.get("previewSubscription.max_agents") < this.get("currentSubscription.max_agents")
            }.property("previewSubscription.max_agents", "currentSubscription.max_agents").cacheable(),
            maxAgentsReducedBy: function () {
                return this.get("currentSubscription.max_agents") - this.get("previewSubscription.max_agents")
            }.property("previewSubscription.max_agents").cacheable(),
            promoLost: function () {
                return !!this.get("currentSubscription.promo_code") && (this.get("downgrade") || this.get("billingCycleTypeChanged"))
            }.property("downgrade", "billingCycleTypeChanged").cacheable()
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/admin/subscription_controller": function (e, t, n) {
        var r = t("models/current_subscription"),
            i = t("models/preview_subscription"),
            s = t("lib/account_consumer"),
            o = t("lib/growl"),
            u = [{
                identity: 1,
                value: 0,
                label: I18n.t("txt.helpers.billing_helpers.billing_cycle_label_monthly")
            }, {
                identity: 2,
                value: 1,
                label: I18n.t("txt.helpers.billing_helpers.billing_cycle_label_quarterly")
            }, {
                identity: 4,
                value: 2,
                label: I18n.t("txt.admin.views.settings.account._subscription_options_form.annual_discount", {
                    total: 17
                })
            }],
            a = [{
                identity: 6,
                value: 0,
                label: "Triennially - 17% discount"
            }],
            f = Em.Object.extend(s, {
                init: function () {
                    var e = this._super.apply(this, arguments);
                    return this.set("globalPermissions", Zd.get("globalPermissions")), e
                },
                isBackedByZuora: Em.computed.equal("currentAccount.settings.billing_backend", "zuora"),
                currentUser: function () {
                    return Zd.get("currentUser")
                }.property().cacheable(),
                isAccountOwner: Em.computed.oneWay("currentUser.isAccountOwner"),
                isAdmin: Em.computed.oneWay("currentUser.isAdmin"),
                isAdminAndInZuoraBeta: Em.computed.and("isBackedByZuora", "isAdmin"),
                canManageSubscription: Em.computed.oneWay("globalPermissions.manageSubscription"),
                currentSubscription: r.create(),
                previewSubscription: i.create(),
                inTriennialBillingCycle: Em.computed.equal("currentSubscription.billing_cycle_type", 6),
                billingCycleOptions: function () {
                    return this.get("inTriennialBillingCycle") ? a : u
                }.property("inTriennialBillingCycle").cacheable(),
                selectedBillingCycle: function (e, t) {
                    arguments.length === 2 && t != null && this.set("previewSubscription.billing_cycle_type", t.identity);
                    var n = this.get("billingCycleOptions").findProperty("identity", this.get("previewSubscription.billing_cycle_type"));
                    return n
                }.property("previewSubscription.billing_cycle_type").cacheable(),
                cloneSubscription: function (e, t) {
                    return Em.Resource.deepMerge(t, e.get("data")), Ember.sendEvent(t, "didFetch"), t
                },
                show: function () {
                    this.fetchCurrentSubscription()
                },
                fetchCurrentSubscription: function () {
                    var e = this.get("currentSubscription");
                    e.get("isFetched") || e.fetch().done(function () {
                        this.cloneSubscription(e, this.get("previewSubscription"))
                    }.bind(this))
                },
                cancel: function (e) {
                    Em.Resource.ajax({
                        type: "DELETE",
                        url: "/api/v2/account/subscription.json",
                        dataType: "json",
                        data: {
                            confirm: e.subdomain
                        }
                    }).done(e.done).fail(e.fail).always(e.always)
                },
                navigateToNextPage: function () {
                    this.get("currentAccount.isInternallyBilled") ? Zd.Routes.goToHash("/admin/subscription/payment") : Zd.Routes.goToHash("/admin/subscription/confirm")
                },
                update: function () {
                    var e = this.get("previewSubscription"),
                        t = r.create(e.get("data"));
                    return t.save().done(function () {
                        this.cloneSubscription(t, this.get("currentSubscription")), o.notice(I18n.t("txt.admin.subscription.successfully_updated"))
                    }.bind(this))
                }
            }).reopenClass({
                toString: function () {
                    return "SubscriptionController"
                }
            });
        n.exports = f.create()
    }
}), this.require.define({
    "controllers/admin/ticket_forms_instructions_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = Em.Object.extend(t("lib/settings_consumer"), {
                ticketFormsInstructions: function () {
                    return this.get("settings.ticketFormsInstructions") || I18n.t("txt.admin.views.ticket_forms.instructions")
                }.property("settings.ticketFormsInstructions").cacheable(),
                onSave: function (e) {
                    var t = e.view.endUserInstructions(),
                        n = this.get("settings");
                    return n.set("id", "random_id").set("ticketFormsInstructions", t).save().done(function () {
                        r.notice(I18n.t("txt.admin.views.ticket_forms.messages.instructions_updated"))
                    }), !1
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/admin_menu_controller": function (e, t, n) {
        var r = [{
            name: "section_home",
            title: I18n.t("txt.admin.menu.title.home_upper"),
            icon: "icon-home",
            links: [{
                title: I18n.t("txt.admin.menu.item.overview"),
                name: "overview",
                agentVisible: !0
            }]
        }, {
            name: "section_apps",
            title: I18n.t("txt.admin.menu.title.apps_upper"),
            icon: "icon-adjust",
            requires: "settings.apps_use",
            links: [{
                title: I18n.t("txt.admin.menu.item.app_listing"),
                name: "apps",
                agentVisible: !0,
                requires: "settings.apps_use"
            }, {
                title: I18n.t("txt.admin.menu.item.app_manage"),
                name: "installed_apps",
                requires: "settings.apps_use"
            }, {
                title: I18n.t("txt.admin.menu.item.devcenter"),
                name: "dev_center",
                requires: "settings.apps_use"
            }]
        }, {
            name: "section_manage",
            title: I18n.t("txt.admin.menu.title.manage_upper"),
            icon: "icon-edit",
            links: [{
                title: I18n.t("txt.admin.menu.item.people"),
                name: "people",
                agentVisible: !0,
                requires: "globalPermissions.userListing"
            }, {
                title: I18n.t("txt.admin.menu.item.user_fields"),
                name: "user_fields",
                requires: "currentAccount.deployments.userModel"
            }, {
                title: I18n.t("txt.admin.menu.item.org_fields"),
                name: "organization_fields",
                requires: "currentAccount.deployments.userModel"
            }, {
                title: I18n.t("txt.admin.menu.item.views"),
                name: "views",
                agentVisible: !0
            }, {
                title: I18n.t("txt.admin.menu.item.macros"),
                name: "macros",
                agentVisible: !0,
                requires: "globalPermissions.manageMacros"
            }, {
                title: I18n.t("txt.admin.menu.item.content"),
                name: "forum_moderation",
                agentVisible: !0,
                requires: "globalPermissions.moderateForums"
            }, {
                title: I18n.t("txt.admin.menu.item.reporting"),
                name: "reports",
                agentVisible: !0
            }, {
                title: I18n.t("txt.admin.menu.item.tags"),
                name: "tags"
            }, {
                title: I18n.t("txt.admin.menu.item.ticketfields"),
                name: "ticket_fields"
            }, {
                title: I18n.t("txt.admin.menu.item.ticketforms"),
                name: "ticket_forms",
                agentVisible: !1,
                requires: "currentAccount.deployments.ticketForms"
            }, {
                title: I18n.t("txt.admin.menu.item.dynamiccontent"),
                name: "dynamic_content",
                agentVisible: !0,
                requires: "globalPermissions.manageDynamicContent"
            }, {
                title: I18n.t("txt.admin.views.account.sandbox.index.sandbox_label"),
                name: "sandbox",
                requires: "currentAccount.isNotSandbox"
            }]
        }, {
            name: "section_channels",
            title: I18n.t("txt.admin.menu.title.channels_upper"),
            icon: "icon-share",
            requires: "globalPermissions.manageExtensionsAndChannels",
            links: [{
                title: I18n.t("txt.email.label"),
                name: "email",
                agentVisible: !0
            }, {
                title: I18n.t("txt.admin.views.settings.channels.show.Web_Portal"),
                name: "portal",
                agentVisible: !0,
                requires: "globalPermissions.manageWebPortal"
            }, {
                title: I18n.t("txt.identities.label.new_twitter"),
                name: "twitter",
                agentVisible: !0
            }, {
                title: I18n.t("txt.views.channels.dialer_view.chat_header"),
                name: "chat",
                agentVisible: !0,
                requires: "settings.isChatAvailable"
            }, {
                title: I18n.t("txt.identities.action.new_facebook"),
                name: "facebook",
                agentVisible: !0
            }, {
                title: I18n.t("txt.header.channels.voice"),
                name: "voice",
                agentVisible: !0
            }, {
                title: I18n.t("txt.ticket.show.receiver.via.feedback_tab"),
                name: "dropboxes",
                agentVisible: !0
            }, {
                title: I18n.t("type.via.api"),
                name: "api",
                agentVisible: !0
            }]
        }, {
            name: "section_business_rules",
            title: I18n.t("txt.admin.menu.title.businessrules_upper"),
            icon: "icon-check",
            requires: "globalPermissions.manageBusinessRules",
            links: [{
                title: I18n.t("txt.admin.menu.item.triggers"),
                name: "triggers",
                agentVisible: !0
            }, {
                title: I18n.t("txt.admin.menu.item.automations"),
                name: "automations",
                agentVisible: !0
            }, {
                title: I18n.t("txt.admin.menu.item.slas"),
                name: "slas",
                agentVisible: !0
            }]
        }, {
            name: "section_settings",
            title: I18n.t("txt.admin.menu.title.settings_upper"),
            icon: "icon-cog",
            requires: "Zd.AdminMenu.showSettingsSection",
            agentVisible: !0,
            links: [{
                title: I18n.t("txt.admin.menu.item.account"),
                name: "account"
            }, {
                title: I18n.t("txt.admin.menu.item.subscription"),
                name: "subscription",
                requires: "subscriptionController.isAdminAndInZuoraBeta"
            }, {
                title: I18n.t("txt.admin.menu.item.security"),
                name: "security"
            }, {
                title: I18n.t("txt.admin.menu.item.tickets"),
                name: "tickets"
            }, {
                title: I18n.t("txt.admin.menu.item.agents"),
                name: "agents"
            }, {
                title: I18n.t("txt.admin.menu.item.customers"),
                name: "customers"
            }, {
                title: I18n.t("txt.launchpad.benchmark_survey.title"),
                name: "benchmark_survey"
            }, {
                title: I18n.t("txt.admin.menu.item.extensions"),
                name: "extensions",
                agentVisible: !0,
                requires: "globalPermissions.manageExtensionsAndChannels"
            }]
        }],
            i = Em.Mixin.create(t("lib/settings_consumer"), t("lib/account_consumer"), {
                globalPermissions: Zd.get("globalPermissions"),
                subscriptionController: t("controllers/admin/subscription_controller"),
                isVisible: function () {
                    var e = this.get("requires");
                    return e === !1 ? !1 : this.get("agentVisible") || Zendesk.get("currentUser.isAdmin")
                }.property("requires", "Zendesk.currentUser.isAdmin", "agentVisible").cacheable()
            }),
            s = Em.Object.extend(i, {
                agentVisible: function () {
                    return _.any(this.get("links"), function (e) {
                        return e && e.get("agentVisible")
                    })
                }.property("links.@each.agentVisible").cacheable(),
                isVisible: function () {
                    var e, t;
                    return e = this.get("requires"), e === !1 ? !1 : (t = this.get("links"), t && t.get("length") < 1 ? !1 : this.get("agentVisible") || Zendesk.get("currentUser.isAdmin"))
                }.property("requires", "Zendesk.currentUser.isAdmin", "agentVisible", "links.@each.isVisible").cacheable()
            }),
            o = Em.Object.extend(i, {
                viewClass: Em.required(),
                href: Em.computed.fmt("name", "#/admin/%@")
            }),
            u = Em.View.extend(i, {
                templateName: "templates/admin/menu_link",
                tagName: "li",
                classNameBindings: ["active"],
                href: Em.computed.fmt("name", "#/admin/%@"),
                controller: Em.computed.oneWay("parentView.controller"),
                active: function () {
                    return this.get("name") === this.get("activeName")
                }.property("activeName").cacheable(),
                activeNameBinding: "parentView.controller.activeName",
                click: function () {
                    return this.get("controller").goToAdminPage(this.get("href")), !1
                }
            }),
            a = Em.ArrayProxy.extend({
                content: function () {
                    return this.get("data").filterProperty("isVisible", !0)
                }.property("data.@each.isVisible").cacheable()
            }),
            f = function () {};
        f.prototype = {
            addRequireBinding: function (e) {
                e.requires != null && (e.requiresBinding = Em.Binding.oneWay(e.requires), delete e.requires)
            },
            buildMenuLinks: function (e) {
                var t = this;
                return a.create({
                    data: e.links.map(function (e) {
                        return t.addRequireBinding(e), o.create(e, {
                            viewClass: u.extend(e)
                        })
                    })
                })
            },
            build: function (e) {
                var t = this;
                return a.create({
                    data: e.map(function (e) {
                        return e.links = t.buildMenuLinks(e), t.addRequireBinding(e), s.create(e)
                    })
                })
            }
        };
        var l = new f,
            c = Em.Object.createWithMixins({
                subscriptionController: t("controllers/admin/subscription_controller"),
                defaultLocation: "#/admin/overview",
                currentLocation: null,
                sections: l.build(r),
                show: function () {
                    var e = this.get("currentLocation") || this.get("firstAvailableLocation");
                    this.get("subscriptionController").fetchCurrentSubscription(), Zd.Routes.goToHash(e)
                },
                pathToFirstLocation: "sections.firstObject.links.firstObject.href",
                firstAvailableLocation: function () {
                    return this.get(this.pathToFirstLocation) || this.get("defaultLocation")
                }.property("pathToFirstLocation", "defaultLocation").cacheable(),
                goToAdminPage: function (e) {
                    this.get("currentLocation") === e ? (Zd.router.suspend(), Em.run.next(function () {
                        Zd.Routes.runRoute("get", e)
                    })) : Zd.Routes.goToHash(e)
                }
            });
        c.menuBuilder = l, n.exports = c
    }
}), this.require.define({
    "controllers/alerts_controller": function (e, t, n) {
        var r = Em.Object.extend({
            alerts: Em.computed.singleton("models/alerts"),
            sortedAlerts: function () {
                var e = this.get("alerts").toArray();
                return e.sort(function (e, t) {
                    return e = e.get("createdAt"), t = t.get("createdAt"), e < t ? 1 : e > t ? -1 : 0
                }), e
            }.property("alerts.@each").cacheable(),
            dismissAll: function () {
                var e = this.get("alerts");
                $.ajax({
                    type: "DELETE",
                    url: "/api/v2/alerts/destroy_many.json?ids=%@".fmt(e.mapProperty("id").join())
                }), e.set("content", [])
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "Alerts Controller"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/twitter_comments_controller": function (e, t, n) {
        var r = t("lib/views/timestamp_view"),
            i = t("lib/growl"),
            s = function (e, t) {
                this.id = e, this.controller = t, this.setup()
            };
        s.toString = function () {
            return "ActionButton"
        }, s.ACTIVE = "active", s.DISABLED = "disabled", s.INPROGRESS = "inprogress", s.prototype = {
            getCommentId: function () {
                var e = this.getDom();
                return e && e.data("comment-id")
            },
            getAuthor: function () {
                var e = this.getDom();
                return e && e.data("author")
            },
            getReceiver: function () {
                var e = this.getDom();
                return e && e.data("receiver")
            },
            getDom: function () {
                return $("#" + this.id)
            },
            setup: function () {
                this.state && this.updateUIforState(), this.type && this.updateUIforType()
            },
            setState: function (e) {
                if (this.isDestroyed || e === this.state) return;
                this.oldState = this.state, this.state = e, this.updateUIforState()
            },
            setType: function (e) {
                if (this.isDestroyed || this.type === e) return;
                this.oldType = this.type, this.type = e, this.updateUIforType()
            },
            setInProgress: function () {
                if (this.state !== s.ACTIVE) return;
                this.setState(s.INPROGRESS)
            },
            setToDefaultState: function () {
                this.enable()
            },
            enable: function () {
                this.setState(s.ACTIVE)
            },
            disable: function () {
                this.setState(s.DISABLED)
            },
            updateUIforType: function () {
                var e = this.getDom();
                this.oldType && e && e.removeClass(this.oldType), this.type && e && !e.hasClass(this.type) && e.addClass(this.type)
            },
            updateUIforState: function () {
                var e = this.getDom();
                this.oldState && e && e.removeClass(this.oldState), this.state && e && !e.hasClass(this.state) && e.addClass(this.state)
            },
            destroy: function () {
                this.isDestroyed = !0
            },
            canExecAction: function () {
                return this.type && this.state === s.ACTIVE
            },
            execAction: function () {
                this.canExecAction() && this.controller[this.type](this)
            }
        };
        var o = function (e, t) {
            this.baseType = "follow", this.type = "follow", this.state = s.DISABLED, s.apply(this, arguments)
        };
        _(o.prototype).extend(s.prototype, {
            constructor: o,
            toggleType: function () {
                this.setType(this.type === "follow" ? "unfollow" : "follow")
            }
        });
        var u = function (e, t) {
            this.baseType = "reply", this.type = "reply", this.state = s.DISABLED, s.apply(this, arguments)
        };
        _(u.prototype).extend(s.prototype, {
            constructor: u
        });
        var a = function (e, t) {
            this.baseType = "retweet", this.type = "retweet", this.state = s.DISABLED, s.apply(this, arguments)
        };
        _(a.prototype).extend(s.prototype, {
            constructor: a,
            toggleType: function () {
                this.setType(this.type === "retweet" ? "unretweet" : "retweet")
            }
        });
        var f = function (e, t) {
            this.baseType = "favorite", this.type = "favorite", this.state = s.DISABLED, s.apply(this, arguments)
        };
        _(f.prototype).extend(s.prototype, {
            constructor: f,
            toggleType: function () {
                this.setType(this.type === "favorite" ? "unfavorite" : "favorite")
            }
        });
        var l = function (e) {
            this.manager = e
        };
        l.prototype = {
            execAction: function (e, t) {
                this.beforeAction(t);
                var n = this.urls[e].fmt(t.getCommentId());
                return Em.Resource.ajax({
                    url: n,
                    type: "POST"
                }).done(this.afterAction.bind(this, t)).fail(this.showGenericErrorNotification.bind(this)).always(this.setViewToDefaultState.bind(this, t))
            },
            beforeAction: function (e) {
                this.setViewInProgress(e)
            },
            afterAction: function (e, t) {
                if (!t) return this.showGenericErrorNotification(), !1;
                this.isActionSuccess(t) ? this.toggleViewType(e) : this.showErrorNotification(t.message)
            },
            isActionSuccess: function (e) {
                return e && e.status && e.status.toLowerCase() === "ok"
            },
            showGenericErrorNotification: function () {
                i.error(I18n.t("txt.ticket.twitter_comments.generic_error"))
            },
            showErrorNotification: function (e) {
                e && i.error(e)
            },
            setViewInProgress: function (e) {
                e && e.setInProgress()
            },
            setViewToDefaultState: function (e) {
                e && e.setToDefaultState()
            },
            toggleViewType: function (e) {
                e && e.toggleType && e.toggleType()
            },
            buildModalController: function (e) {
                var t = this;
                return {
                    modal: null,
                    modalConfirm: function () {
                        this.modal.close(), t.execAction(e.confirmAction, e.view)
                    },
                    modalCancel: function () {
                        this.modal.close()
                    }
                }
            },
            openModal: function (e) {
                var n = this.buildModalController(e);
                n.modal = t("views/modals/dynamic_modal").create({
                    controller: n,
                    classNames: ["modal"],
                    title: e.title,
                    body: e.body,
                    confirmLabel: e.confirmLabel,
                    cancelLabel: e.cancelLabel,
                    footerView: Em.View.extend({
                        templateName: "templates/modals/modal_footer_2btns"
                    })
                })
            },
            destroy: function () {
                this.manager = null
            }
        };
        var c = function () {
            l.apply(this, arguments)
        };
        _(c.prototype).extend(l.prototype, {
            urls: {
                follow: "/api/v2/channels/twitter/comments/%@/follow.json",
                unfollow: "/api/v2/channels/twitter/comments/%@/unfollow.json"
            },
            follow: function (e) {
                var t = "@" + (e.getAuthor() || "unknown"),
                    n = "@" + (e.getReceiver() || "unknown");
                this.openModal({
                    view: e,
                    confirmAction: "follow",
                    title: I18n.t("txt.ticket.twitter_comments.follow.title", {
                        requester: t
                    }),
                    body: I18n.t("txt.ticket.twitter_comments.follow.body", {
                        requester: t,
                        monitored_handle: n
                    }),
                    confirmLabel: I18n.t("txt.ticket.twitter_comments.follow_label"),
                    cancelLabel: I18n.t("txt.ticket.twitter_comments.cancel_label")
                })
            },
            unfollow: function (e) {
                this.execAction("unfollow", e)
            },
            afterAction: function (e, t) {
                l.prototype.afterAction.call(this, e, t);
                var n = e.getAuthor(),
                    r = e.type;
                this.isActionSuccess(t) && _(this.manager.constructor.views).forEach(function (t) {
                    n === t.getAuthor() && t !== e && t.setType(r)
                })
            }
        });
        var h = function () {
            l.apply(this, arguments)
        };
        _(h.prototype).extend(l.prototype, {
            reply: function (e) {
                this.manager.prepareForTwitterReply()
            }
        });
        var p = function () {
            l.apply(this, arguments)
        };
        _(p.prototype).extend(l.prototype, {
            urls: {
                retweet: "/api/v2/channels/twitter/comments/%@/retweet.json",
                unretweet: "/api/v2/channels/twitter/comments/%@/unretweet.json"
            },
            retweet: function (e) {
                this.openModal({
                    view: e,
                    confirmAction: "retweet",
                    title: I18n.t("txt.ticket.twitter_comments.retweet.title"),
                    body: I18n.t("txt.ticket.twitter_comments.retweet.body"),
                    confirmLabel: I18n.t("txt.ticket.twitter_comments.retweet_label"),
                    cancelLabel: I18n.t("txt.ticket.twitter_comments.cancel_label")
                })
            },
            unretweet: function (e) {
                this.execAction("unretweet", e)
            }
        });
        var d = function () {
            l.apply(this, arguments)
        };
        _(d.prototype).extend(l.prototype, {
            urls: {
                favorite: "/api/v2/channels/twitter/comments/%@/favorite.json",
                unfavorite: "/api/v2/channels/twitter/comments/%@/unfavorite.json"
            },
            favorite: function (e) {
                this.openModal({
                    view: e,
                    confirmAction: "favorite",
                    title: I18n.t("txt.ticket.twitter_comments.favorite.title"),
                    body: I18n.t("txt.ticket.twitter_comments.favorite.body"),
                    confirmLabel: I18n.t("txt.ticket.twitter_comments.favorite_label"),
                    cancelLabel: I18n.t("txt.ticket.twitter_comments.cancel_label")
                })
            },
            unfavorite: function (e) {
                this.execAction("unfavorite", e)
            }
        });
        var v = function (e) {
            this.manager = e
        };
        v.prototype = {
            getTicketId: function () {
                return this.manager.get("ticket.id")
            },
            getPermissionMap: function () {
                var e = this.manager.get("canReplyToTwitterComment");
                return {
                    favorite: e,
                    follow: e,
                    retweet: e,
                    reply: e
                }
            },
            setLinks: function (e) {
                var t = r.renderDateTime(new Date(e.get("timestamp")), {
                    live: "true",
                    full: "true",
                    relative: "true"
                }),
                    n = $("[data-action=timestamp][data-comment-id=" + e.get("id") + "]"),
                    i = $("[data-action=tweet-link][data-comment-id=" + e.get("id") + "]"),
                    s = "http://www.twitter.com/statuses/" + e.get("tweet_id"),
                    o = $(".content[data-comment-id=" + e.get("id") + "]").find("img.profile");
                n.attr("href", s), n.html(t), i.attr("href", s), o.attr("src", e.get("user_image_url"))
            },
            updateActionViews: function (e) {
                var t = this.getPermissionMap();
                e.forEach(function (e) {
                    this.setLinks(e);
                    var n = this.manager.actionViews[e.get("id")],
                        r = $(".content[data-comment-id=" + e.get("id") + "]").find(".system-user").length === 0;
                    if (!n) return;
                    n.favorite && r && (n.favorite.setType(e.get("favorited") ? "unfavorite" : "favorite"), t.favorite && n.favorite.enable()), n.retweet && r && (n.retweet.setType(e.get("retweeted") ? "unretweet" : "retweet"), t.retweet && n.retweet.enable()), n.follow && r && (n.follow.setType(e.get("following_user") ? "unfollow" : "follow"), t.follow && n.follow.enable()), n.reply && t.reply && n.reply.enable()
                }, this)
            }
        };
        var m = Em.Object.extend({
            auditsController: null,
            actionViews: null,
            ticketController: function () {
                return this.get("auditsController.workspace.ticketController")
            }.property("auditsController.workspace.ticketController").cacheable(),
            ticket: function () {
                return this.get("ticketController.ticket")
            }.property("ticketController.ticket").cacheable(),
            canReplyToTwitterComment: function () {
                return this.get("ticketController.canMakeAnyComments")
            }.property("ticketController.canMakeAnyComments").cacheable(),
            updateStatuses: function () {
                if (!this.get("ticket.twitterStatuses")) return;
                this.get("statusController").updateActionViews(this.get("ticket.twitterStatuses"))
            }.observes("ticket.twitterStatuses.@each"),
            init: function () {
                this.setProperties({
                    statusController: new v(this),
                    followController: new c(this),
                    replyController: new h(this),
                    retweetController: new p(this),
                    favoriteController: new d(this)
                }), this.set("actionViews", Object.create(null)), this._super()
            },
            setupActionViewsFromDom: function (e) {
                var t = this;
                this.teardownActionViews(), e.each(function () {
                    t.setupActionView(this)
                }), this.updateStatuses()
            },
            teardownActionViews: function () {
                var e, t = this.get("actionViews");
                for (var n in t) {
                    e = t[n];
                    for (var r in e) e[r].destroy()
                }
                this.set("actionViews", Object.create(null))
            },
            actionViewSetupMap: {
                follow: function (e, t) {
                    e.setupAction(t, o, "followController")
                },
                reply: function (e, t) {
                    e.setupAction(t, u, "replyController")
                },
                retweet: function (e, t) {
                    e.setupAction(t, a, "retweetController")
                },
                favorite: function (e, t) {
                    e.setupAction(t, f, "favoriteController")
                }
            },
            setupActionView: function (e) {
                var t = e.getAttribute("data-action");
                t && this.actionViewSetupMap[t] && this.actionViewSetupMap[t](this, e)
            },
            setupAction: function (e, t, n) {
                var r = this.get(n),
                    i = m.createView(t, e, r);
                this.addActionView(i)
            },
            addActionView: function (e) {
                var t = e.getCommentId();
                if (t == null) return;
                var n = this.actionViews[t] = this.actionViews[t] || Object.create(null);
                n[e.baseType] = e
            },
            prepareForTwitterReply: function () {
                var e = this.get("ticketController");
                e && e.focusForTwitterReply()
            },
            refreshStatuses: function () {
                var e = this.get("ticket.twitterStatuses");
                e && e.refresh()
            },
            willDestroy: function () {
                ["statusController", "followController", "replyController", "retweetController", "favoriteController"].forEach(function (e) {
                    var t = this.get(e);
                    t.destroy && t.destroy(), this.set(e, null)
                }, this), this.set("actionViews", null), this.set("auditsController", null), this._super && this._super()
            }
        }).reopenClass({
            counter: 0,
            views: Object.create(null),
            createView: function (e, t, n) {
                var r = t.getAttribute("id"),
                    i = this.getViewById(r);
                if (i) return i;
                var s = "twitter-action-" + this.counter++;
                t.setAttribute("id", s);
                var o = new e(s, n);
                return this.addView(o), o
            },
            hookToViewDestroy: function (e) {
                var t = e.destroy,
                    n = this;
                e.destroy = function () {
                    n.removeView(this), t.call(this)
                }
            },
            removeView: function (e) {
                e.id && delete this.views[e.id]
            },
            addView: function (e) {
                if (this.views[e.id]) return;
                this.views[e.id] = e, this.hookToViewDestroy(e)
            },
            getViewById: function (e) {
                return this.views[e]
            },
            clickEventHandler: function (e) {
                e.preventDefault();
                var t = e.currentTarget.getAttribute("id"),
                    n = m.getViewById(t);
                n && n.execAction()
            }
        });
        $(document).on("click", ".twitter-action", m.clickEventHandler), n.exports = m
    }
}), this.require.define({
    "controllers/audits_controller": function (e, t, n) {
        var r = Em.get,
            i = Em.set,
            r = Em.get,
            s = t("lib/account_consumer"),
            o = t("controllers/twitter_comments_controller"),
            u = Em.Object.extend(s, {
                workspace: null,
                audits: null,
                showAllEvents: !1,
                twitterCommentsController: null,
                ticket: Em.computed.oneWay("workspace.ticket"),
                viaSubmitter: Em.computed.oneWay("workspace.ticket.related.viaSubmitter"),
                isContentFetched: Em.computed.oneWay("audits.isFetched"),
                init: function () {
                    var e = o.create({
                        auditsController: this
                    });
                    this.set("twitterCommentsController", e), this._super()
                },
                willDestroy: function () {
                    var e = this.get("twitterCommentsController");
                    e && e.destroy(), this._super && this._super()
                },
                deployments: function () {
                    return this.get("currentAccount.deployments")
                }.property("currentAccount.deployments").cacheable(),
                hasRealtimeComments: function (e, t) {
                    return arguments.length === 2 ? t : this.get("deployments.realtimeComments")
                }.property("deployments.realtimeComments").cacheable(),
                setComments: function () {
                    this.set("showAllEvents", !1), this.setAudits(), this.get("ticket.comments").fetch(), this.get("ticket.audits").expire()
                },
                setAllEvents: function () {
                    this.set("showAllEvents", !0), this.setAudits(), this.get("ticket.audits").fetch(), this.get("ticket.comments").expire()
                },
                setAudits: function () {
                    this.get("showAllEvents") ? this.set("audits", this.get("ticket.audits")) : this.set("audits", this.get("ticket.comments"))
                },
                makePublicCommentPrivate: function (e) {
                    var n = this;
                    Em.Resource.ajax({
                        type: "PUT",
                        url: "/api/v2/tickets/%@/audits/%@/make_private.json".fmt(this.get("ticket.id"), e),
                        dataType: "json"
                    }).done(function () {
                        var e = n.get("audits");
                        e.expireNow(), n.get("workspace.ticket.comments").expireNow(), e.fetch().done(function () {
                            t("lib/growl").notice(I18n.t("txt.modal.make_public_comment_private_notice.success"))
                        })
                    })
                },
                _ticketWasReplaced: function () {
                    this.get("ticket.id") && this.setComments()
                }.observes("ticket.id"),
                _ticketWasUpdatedByOther: function () {
                    this.get("ticket.wasUpdatedByOthers") && this.get("hasRealtimeComments") && this.get("audits").refresh()
                }.observes("ticket.wasUpdatedByOthers"),
                _updateAuditIsNewStates: function () {
                    var e = this.get("workspace.ticket.updated_at");
                    if (!e) return;
                    (this.get("audits") || []).forEach(function (t) {
                        i(t, "isNew", this.get("hasRealtimeComments") && t.createdAt.getTime() > e.getTime() + 1e3)
                    }, this)
                }.observes("audits.isFetched")
            }).reopenClass({
                toString: function () {
                    return "AuditsController"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "controllers/benchmark_survey_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = t("models/survey_response");
        n.exports = Em.Object.extend({
            industryBenchmarkData: null,
            globalBenchmarkData: null,
            survey: null,
            surveyFields: ["industry", "employeeCount", "targetAudience", "customerCount", "supportStructure", "agentCount", "teamCount"],
            industryResult: null,
            employeeCountResult: null,
            targetAudienceResult: null,
            customerCountResult: null,
            supportStructureResult: null,
            agentCountResult: null,
            teamCountResult: null,
            launchpadTasks: Em.computed.singleton("models/launchpad/launchpad_tasks"),
            industryPrompt: I18n.t("txt.launchpad.benchmark_survey.industry_prompt"),
            employeeCountPrompt: I18n.t("txt.launchpad.benchmark_survey.comployee_count_prompt"),
            targetAudiencePrompt: I18n.t("txt.launchpad.benchmark_survey.service_target_prompt"),
            customerCountPrompt: I18n.t("txt.launchpad.benchmark_survey.customer_count_prompt"),
            supportStructurePrompt: I18n.t("txt.launchpad.benchmark_survey.who_support_prompt"),
            init: function () {
                this.set("survey", i.create())
            },
            initialize: function () {
                var e = this.get("survey");
                e.fetch().done(this.preselectSurveyResponse.bind(this)).fail(function () {
                    this.get("surveyFields").forEach(function (e) {
                        this.set("survey." + e.decamelize(), null)
                    }, this)
                }.bind(this)), this.getBenchmarkDataByIndustry("overall")
            },
            getBenchmarkDataByIndustry: function (e) {
                var t = "/api/v1/stats/benchmarking/industry/" + e;
                $.ajax({
                    type: "GET",
                    url: t
                }).done(function (e) {
                    var t = {
                        satisfaction: Math.round(e.data.csr * 100) + "%",
                        responseTime: Math.round(e.data.first_response_time / 3600 * 10) / 10 + "",
                        ticketPerMonth: e.data.created_count,
                        key: this.get("industryResult.value") === "other" ? "other" : e.object_name
                    };
                    t.key != "overall" ? this.set("industryBenchmarkData", t) : this.set("globalBenchmarkData", t)
                }.bind(this))
            },
            preselectSurveyResponse: function () {
                this.get("surveyFields").forEach(function (e) {
                    var t, n, r = this.get("survey." + e.decamelize()),
                        i = this.get(e + "Options");
                    r != null && (i != null ? (t = this.get(e + "Options").findProperty("value", r), n = t) : n = r, this.set(e + "Result", n))
                }, this)
            },
            industryResultChanged: function () {
                var e = this.get("industryResult.value");
                if (e) e === "other" && (e = "overall"), this.getBenchmarkDataByIndustry(e);
                else {
                    var t = {
                        satisfaction: "0%",
                        responseTime: "0",
                        ticketPerMonth: "0"
                    };
                    this.set("industryBenchmarkData", t)
                }
            }.observes("industryResult"),
            getIndustryBenchmarkDataByField: function (e) {
                var t = this.get("industryResult.value");
                return this.get("industryBenchmarkData") && t ? this.get("industryBenchmarkData." + e) || "0" : "0"
            },
            industryName: function () {
                var e = this.get("industryResult");
                return e ? e.label : "--"
            }.property("industryResult").volatile(),
            industrySatisfaction: function () {
                var e = this.getIndustryBenchmarkDataByField("satisfaction");
                return e.match(/%$/) || (e += "%"), e
            }.property("industryBenchmarkData").volatile(),
            industryResponseTime: function () {
                return this.getIndustryBenchmarkDataByField("responseTime")
            }.property("industryBenchmarkData").volatile(),
            industryResponseTimeUnit: function () {
                return I18n.t("txt.launchpad.benchmark_survey.hours")
            }.property().volatile(),
            industryTickestPerMonth: function () {
                return this.getIndustryBenchmarkDataByField("ticketPerMonth")
            }.property("industryBenchmarkData").volatile(),
            globalSatisfaction: Em.computed.oneWay("globalBenchmarkData.satisfaction"),
            globalResponseTime: Em.computed.oneWay("globalBenchmarkData.responseTime"),
            globalTickestPerMonth: Em.computed.oneWay("globalBenchmarkData.ticketPerMonth"),
            industryOptions: [{
                label: I18n.t("txt.admin.models.account.survey_response.industry_education"),
                value: "education"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_entertainment"),
                value: "entertainment"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_financial"),
                value: "financial"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_nonprofit"),
                value: "nonprofit"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_healthcare"),
                value: "healthcare"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_consultancy"),
                value: "consultancy"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_manufacturing"),
                value: "manufacturing"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_media"),
                value: "media"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_marketing"),
                value: "marketing"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_support"),
                value: "support"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_real_estate"),
                value: "real_estate"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_retail"),
                value: "retail"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_social_media"),
                value: "social_media"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_software"),
                value: "software"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_travel"),
                value: "travel"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_web_apps"),
                value: "web_apps"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_hosting"),
                value: "hosting"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.industry_other"),
                value: "other"
            }],
            employeeCountOptions: [{
                label: I18n.t("txt.launchpad.benchmark_survey.employees_1"),
                value: "1-9"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.employees_10"),
                value: "10-99"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.employees_100"),
                value: "100-499"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.employees_500"),
                value: "500-4999"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.employees_5000"),
                value: "5000+"
            }],
            targetAudienceOptions: [{
                label: I18n.t("txt.admin.models.account.survey_response.target_audience_internal"),
                value: "internal"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.target_audience_businesses"),
                value: "businesses"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.target_audience_customers"),
                value: "customers"
            }],
            customerCountOptions: [{
                label: I18n.t("txt.launchpad.benchmark_survey.customers_hundreds"),
                value: "hundreds"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.customers_thousands"),
                value: "thousands"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.customers_ten_thousands"),
                value: "tens_of_thousands"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.customers_hundred_thousands"),
                value: "hundreds_of_thousands"
            }, {
                label: I18n.t("txt.launchpad.benchmark_survey.customers_millions"),
                value: "millions"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.customer_count_rather_not_say"),
                value: "rather_not_say"
            }],
            supportStructureOptions: [{
                label: I18n.t("txt.admin.models.account.survey_response.support_structure_part_time"),
                value: "part_time"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.support_structure_employees"),
                value: "employees"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.support_structure_dedicated_team"),
                value: "dedicated_team"
            }, {
                label: I18n.t("txt.admin.models.account.survey_response.support_structure_support_organization"),
                value: "support_organization"
            }],
            shouldShowTeamCount: function () {
                return this.get("supportStructureResult.value") === "support_organization"
            }.property("supportStructureResult").volatile(),
            shouldShowAgentCount: function () {
                return this.get("supportStructureResult.value") === "dedicated_team" || this.get("supportStructureResult.value") === "support_organization"
            }.property("supportStructureResult").volatile(),
            surveyCompleted: function () {
                var e = this.get("launchpadTasks").findProperty("key", "benchmark");
                return e ? e.get("status") === "complete" : !1
            }.property("launchpadTasks.@each.status").volatile(),
            submitSurvey: function () {
                var e = this.get("shouldShowAgentCount") ? parseInt($(".survey #agent-count").val(), 10) : null,
                    t = this.get("shouldShowTeamCount") ? parseInt($(".survey #team-count").val(), 10) : null,
                    n = this.get("survey");
                n.set("agent_count", e), n.set("team_count", t), this.get("surveyFields").forEach(function (e) {
                    var t = this.get(e + "Result.value");
                    t != null && n.set(e.decamelize(), t)
                }, this), n.save().done(this.surveySaveSuccess).fail(this.surveySaveFail)
            },
            surveySaveSuccess: function () {
                r.notice(I18n.t("txt.launchpad.benchmark_survey.survey_updated"))
            },
            surveySaveFail: function () {
                r.error(I18n.t("txt.launchpad.benchmark_survey.survey_update_failed"))
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "BenchmarkSurveyController"
            }
        })
    }
}), this.require.define({
    "controllers/buy_now_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/account_consumer"), t("lib/settings_consumer"), {
            currentUserBinding: "Zd.currentUser",
            planSelectionController: Em.computed.singleton("controllers/plan_selection_controller"),
            buyNow: function () {
                if (!this.get("currentUser.isAccountOwner")) return;
                this._goToSubscriptionView()
            },
            _goToSubscriptionView: function () {
                this.get("planSelectionController.hasPermission") ? this.get("planSelectionController").show() : Zd.Routes.goToHash("/admin/subscription")
            }
        }).reopenClass({
            toString: function () {
                return "BuyNowController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/collision_controller": function (e, t, n) {
        function i(e, t) {
            var n = this.get("activeTicket");
            if (this.get("_ignoreUpdates")) return;
            n && e == n.get("id") && n.set("otherViewers", t)
        }

        function s(e, t) {
            var n = this.get("openTickets").findProperty("id", e),
                r;
            if (!n) return;
            r = n.get("otherUpdaters"), r.contains(t) || r.pushObject(t)
        }
        var r, o = Em.Object.extend(Em.Evented, {
                activeTicket: null,
                watchedTicketIds: null,
                agentCollisionClient: AgentCollisionClient,
                init: function () {
                    this._super(), this.set("watchedTicketIds", []), this.set("openTickets", []), this.on("ticketViewers", i.bind(this)), this.on("ticketChanged", s.bind(this)), this.set("currentUserId", Zd.get("currentUser.id")), this.get("agentCollisionClient").onNotification(function (e) {
                        switch (e.action) {
                        case "ticketViewers":
                            this._handleTicketViewersNotification(e.id, e.viewers);
                            break;
                        case "ticketChanged":
                            this._handleTicketChangedNotification(e.id, e.updatedBy, e.updatedAt)
                        }
                    }.bind(this))
                },
                _handleTicketViewersNotification: function (e, t) {
                    var n = this.get("currentUserId"),
                        r = Em.keys(t).filter(function (e) {
                            return e != n
                        }).map(function (e) {
                            return t[e].name
                        });
                    this.trigger("ticketViewers", e, r)
                },
                _handleTicketChangedNotification: function (e, t, n) {
                    if (!this.get("openTickets").findProperty("id", e) || this.get("_ignoreUpdates")) return;
                    var r = Zd.User.create({
                        id: t
                    });
                    r.fetch().then(function () {
                        this.trigger("ticketChanged", e, r.get("name"))
                    }.bind(this))
                },
                markAsViewing: function (e) {
                    this.unsilenceUpdates(), this.set("activeTicket", e), this.get("agentCollisionClient").ticketOpened(e.get("id")), this.startWatching()
                },
                markAsNotViewing: function (e) {
                    var t = this.get("activeTicket.id");
                    t === e.get("id") && (this.get("agentCollisionClient").ticketClosed(e.get("id")), this.set("activeTicket", null), this.startWatching())
                },
                openedTicket: function (e) {
                    this.get("openTickets").pushObject(e)
                },
                closedTicket: function (e) {
                    this.get("openTickets").removeObject(e)
                },
                silenceUpdates: function () {
                    this.set("_ignoreUpdates", !0)
                },
                unsilenceUpdates: function () {
                    this.set("_ignoreUpdates", !1)
                },
                startWatching: function (e, t) {
                    t && (r && this.off("ticketViewers", r), r = t, this.on("ticketViewers", t)), e ? this.set("watchedTicketIds", e) : e = this.get("watchedTicketIds"), this.get("openTickets").forEach(function (t) {
                        e.push(t.get("id"))
                    }), this.get("agentCollisionClient").setSubscriptions(_.uniq(e))
                }
            }).reopenClass(t("lib/lotus/singleton"));
        n.exports = o
    }
}), this.require.define({
    "controllers/conditions_controller": function (e, t, n) {
        var r = t("lib/lotus/singleton"),
            i = t("models/filter/filter_definitions_adapter"),
            s = t("models/filter/user_filter/user_filter_definitions"),
            o = t("lib/zentence/controllers/group_controller"),
            u = Object.freeze([{
                id: "field"
            }, {
                id: "operator",
                edges: ["field"]
            }, {
                id: "value",
                edges: ["field", "operator"]
            }]),
            a = o.proto().itemController.extend({
                didConfirm: function () {
                    this.get("nodes.firstObject").validate() ? (this.set("content.isNew", !1), this.get("parentController").previewConditions()) : this.remove()
                }
            }).reopenClass({
                toString: function () {
                    return "ConditionController"
                }
            }),
            f = o.extend({
                lexica: Em.computed.emptyObject(),
                structure: u,
                itemController: a,
                parentController: Em.required(),
                content: null,
                init: function () {
                    var e = s.instance();
                    e.fetch().done(function () {
                        this.set("lexica", i.transform(e))
                    }.bind(this)), this._super()
                },
                addCondition: function () {
                    var e;
                    return this.get("content").pushObject({
                        isNew: !0
                    }), e = this.get("lastObject"), Em.run.later(this, function () {
                        if (e.get("isDestroyed")) return;
                        e.set("activeNode", e.get("nodes.firstObject"))
                    }, 100), e
                },
                previewConditions: function () {
                    this.get("parentController").syncFilter()
                },
                removeObject: function (e) {
                    var t = e.get("content");
                    t.destroy(), this._super.apply(this, arguments), this.get("parentController").didRemoveCondition(t)
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "ConditionsController"
                }
            });
        n.exports = f
    }
}), this.require.define({
    "controllers/item_selection": function (e, t, n) {
        var r = 100,
            i = Em.Object.extend(t("mixins/item_selection_from_list"), {
                itemIds: null,
                MAX_ALLOWED_SELECTION_SIZE: r,
                init: function () {
                    this._super(), this.set("itemIds", [])
                },
                hasSelection: function () {
                    return this.get("numSelected") > 0
                }.property("numSelected").cacheable(),
                numSelected: function () {
                    return this.get("itemIds.length") || 0
                }.property("itemIds.length").cacheable(),
                setSelection: function (e) {
                    this.set("itemIds", e), Em.sendEvent(this, "selectionChanged")
                },
                addToSelection: function (e) {
                    e = this.limitSelection(e);
                    if (e.length === 0) return;
                    this.get("itemIds").addObjects(e), Em.sendEvent(this, "selectionChanged")
                },
                isAtMaxSelection: Em.computed.equal("numSelected", r),
                limitSelection: function (e) {
                    e = e.filter(function (e) {
                        return !this.isSelected(e)
                    }, this);
                    var t = e.length + this.get("numSelected"),
                        n = t - this.get("MAX_ALLOWED_SELECTION_SIZE");
                    return n > 0 ? e.slice(0, -n) : e
                },
                removeFromSelection: function (e) {
                    this.get("itemIds").removeObjects(e), Em.sendEvent(this, "selectionChanged")
                },
                clearSelection: function () {
                    this.setSelection([])
                },
                isSelected: function (e) {
                    return this.get("itemIds").contains(e)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/ticket_selection": function (e, t, n) {
        var r = t("controllers/item_selection"),
            i = t("models/filter"),
            s = r.extend({
                filterMembershipConditions: function () {
                    var e = this.get("controller.filter"),
                        t = [],
                        n = [];
                    this.get("itemIds").forEach(function (e) {
                        t.push({
                            field: "nice_id",
                            operator: "is",
                            value: e
                        })
                    });
                    if (e.get("isDynamic")) {
                        var r = e.get("conditions"),
                            i = r.get("all"),
                            s = r.get("any");
                        n.pushObjects(i), t.pushObjects(s)
                    }
                    return n.findProperty("field", "status") || n.push({
                        field: "status",
                        operator: "less_than",
                        value: "closed"
                    }), {
                        anyConditions: t,
                        allConditions: n
                    }
                },
                refreshSelectedTickets: function () {
                    if (this.get("itemIds").length === 0) return;
                    var e = this.get("controller.filter");
                    if (e.get("isSuspendedFilter")) return;
                    var t;
                    e.get("isDynamic") || (t = e.get("id"));
                    var n = this.filterMembershipConditions(),
                        r = i.createDynamic({
                            filterId: t,
                            output: ["id"],
                            conditions: {
                                any: n.anyConditions,
                                all: n.allConditions
                            }
                        });
                    r.set("content.perPage", this.get("MAX_ALLOWED_SELECTION_SIZE")), r.get("content").fetch().done(_(this.selectionRefreshed).bind(this))
                },
                selectionRefreshed: function (e) {
                    var t = e.rows.mapProperty("ticket"),
                        n = t.mapProperty("id"),
                        r = this.get("itemIds"),
                        i = this,
                        s;
                    r.forEach(function (e) {
                        var t = n.contains(e);
                        t || (s = s || [], s.push(e))
                    }), s && i.removeFromSelection(s)
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/list_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/clean_up_on_destroy"), t("mixins/controller_pagination"), {
            paginationController: null,
            selectionController: null,
            filter: null,
            shouldShowEmptyMessage: Em.computed.equal("filter", null),
            init: function () {
                this.get("selectionController") && this.watchForSelectionChanges()
            },
            cleanUpOnDestroy: ["selectionController"],
            content: function (e, t) {
                return arguments.length > 1 ? t : this.get("filter.content") || []
            }.property("filter.content"),
            isAtMaxSelection: Em.computed.oneWay("selectionController.isAtMaxSelection"),
            refreshContent: function () {
                this.get("filter") && this.get("filter").refreshContent()
            },
            watchForContentChanges: function () {
                this.updateSelection(this.get("content")), this.updateEnabledStatus()
            }.observes("content.@each"),
            fullSelectionDisabled: function () {
                return this.get("isAtMaxSelection") && this.get("selectedItems") === 0
            }.property("isAtMaxSelection", "selectedItems").volatile(),
            selectedItems: function () {
                var e = this.get("selectionController"),
                    t = 0;
                return this.get("content").forEach(function (n) {
                    t += Number(e.isSelected(n.get("id")))
                }), t
            }.property("content.@each").cacheable(),
            updateEnabledStatus: function () {
                var e = this.get("isAtMaxSelection"),
                    t = this.get("selectionController");
                (this.get("content") || []).forEach(function (n) {
                        e ? t.isSelected(Em.get(n, "id")) ? Em.set(n, "enabled", !0) : Em.set(n, "enabled", !1) : Em.set(n, "enabled", !0)
                    })
            }.observes("isAtMaxSelection"),
            currentPageFullySelected: function () {
                var e = this.get("selectionController"),
                    t = this.get("content.length") || 0,
                    n = 0,
                    r = 0,
                    i = this.get("content");
                return i.forEach(function (t) {
                    n += Number(e.isSelected(t.get("id"))), r += Number(!t.get("isSelectable"))
                }), this.get("isAtMaxSelection") && n > 0 ? !0 : t && n && n + r === t
            }.property("content.@each", "selectionController.itemIds.@each").cacheable(),
            watchForSelectionChanges: function () {
                var e = this.get("selectionController");
                if (!e) return;
                Em.addListener(e, "selectionChanged", this, "selectionChanged")
            }.observes("selectionController"),
            addToSelection: function (e) {
                this.get("selectionController").addToSelection(e)
            },
            removeFromSelection: function (e) {
                this.get("selectionController").removeFromSelection(e)
            },
            selectAll: function () {
                this.addToSelection(this.currentItemIds())
            },
            deselectCurrentPage: function () {
                this.removeFromSelection(this.currentItemIds())
            },
            currentItemIds: function () {
                return this.get("content").getEach("id")
            },
            hasSelection: Em.computed.oneWay("selectionController.hasSelection"),
            selectionChanged: function () {
                this.updateSelection(this.get("content"))
            },
            numSelected: function () {
                return this.get("selectionController.numSelected")
            }.property("selectionController.numSelected").volatile(),
            updateSelection: function (e) {
                if (!e) return;
                var t = this.get("selectionController");
                if (!t) return;
                return e.forEach(function (e) {
                    e.set("selected", t.isSelected(e.get("id")))
                }), e
            },
            clearSelection: function () {
                this.get("selectionController").clearSelection()
            },
            showEmptyListRow: function () {
                return this.get("content.length") === 0 && !! this.get("content.isFetched")
            }.property("content.length", "content.isFetched").cacheable(),
            showFooter: function () {
                return this.get("selectionController.hasSelection")
            }.property("selectionController.hasSelection").volatile(),
            showBulkEditForm: Em.K,
            contentDidFetch: function () {
                var e = this.get("selectionController");
                this.get("content.isFetched") && e && e.resetLastSelectedItem()
            }.observes("content.isFetched"),
            selectItem: function (e, t) {
                this.get("selectionController").selectItemFromList(e, this.get("content"), t)
            },
            deselectItem: function (e, t) {
                this.get("selectionController").deselectItemFromList(e, this.get("content"), t)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/ticket_list_controller": function (e, t, n) {
        var r = t("controllers/list_controller"),
            i = t("lib/lotus/global_events"),
            s = r.extend(t("lib/features").consumer, Em.Evented, {
                collisionController: Em.computed.singleton("controllers/collision_controller"),
                activeTicketsController: Em.computed.singleton("controllers/active_tickets_controller"),
                init: function () {
                    this.get("activeTicketsController").on("activeTicketsDidChange", this, this.activeTicketsUpdate), this._super()
                },
                watchForTicketsChanges: function () {
                    var e = this.get("selectionController");
                    e && e.refreshSelectedTickets(), this.updateViewingStatus(this.get("content")), this.activeTicketsUpdate()
                }.observes("content.@each"),
                watchForSelectionChanges: function () {
                    var e = this.get("selectionController");
                    if (!e) return;
                    Em.addListener(e, "selectionChanged", this, "selectionChanged")
                }.observes("selectionController"),
                updateViewingStatus: function (e) {
                    if (e.get("length") === 0) return;
                    this.get("collisionController").startWatching(e.mapProperty("id"), function (t, n) {
                        var r = e.findProperty("id", t);
                        r && r.set("otherViewers", n)
                    })
                },
                showBulkEditForm: function () {
                    t("controllers/bulk_edit_controller").instance().showBulkEditForm(this.get("selectionController.itemIds"), this.onBulkEditComplete.bind(this), this.onMergeComplete.bind(this))
                },
                onMergeComplete: function () {
                    this.clearSelection(), this.refreshContent()
                },
                onBulkEditComplete: function () {
                    var e = this.get("selectionController.itemIds"),
                        t = this.get("content");
                    if (e.length === 0) return;
                    t.get("length") > 0 && e.forEach(function (e) {
                        Zd.Ticket.create({
                            id: e
                        }).expire()
                    }), this.clearSelection(), i.trigger("@ticket:bulk_expire", e), this.refreshContent()
                },
                openTicket: function (e, n) {
                    var r;
                    n ? (r = Zendesk.Ticket.create({
                        id: e.get("id"),
                        subject: e.get("subject")
                    }), t("states/ticket").goToTicket(r, !1, !0)) : Zd.Routes.goToHash("#/tickets/" + e.get("id"))
                },
                activeTicketsUpdate: function () {
                    var e = this.get("activeTicketsController"),
                        t = this.get("content"),
                        n = this.get("selectionController");
                    t && t.forEach(function (t) {
                        var n = e.isSaving(t.get("id"));
                        t.set("isSaving", n)
                    }), n && n.removeFromSelection && n.removeFromSelection(e.saving)
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/dashboard/dashboard_filter_switching_mixin": function (e, t, n) {
        var r = Em.Mixin.create({
            groupMemberships: Em.computed.oneWay("currentUser.group_memberships"),
            showMyTickets: function () {
                this._showDashboardFilter("myTicketsFilter")
            },
            showGroupTickets: function () {
                this.get("groupMemberships").fetch().done(function () {
                    this._showDashboardFilter("groupTicketsFilter")
                }.bind(this))
            },
            showGoodTickets: function () {
                this._showDashboardFilter("goodTicketsFilter")
            },
            showBadTickets: function () {
                this._showDashboardFilter("badTicketsFilter")
            },
            showSolvedTickets: function () {
                this._showDashboardFilter("solvedTicketsFilter")
            },
            _showDashboardFilter: function (e) {
                var t = this.get("dashboardFilters." + e);
                if (!t) return;
                this.set("filter", t)
            },
            isMyTicketsActive: Em.computed.equal("filter.id", "my_tickets"),
            isGroupTicketsActive: Em.computed.equal("filter.id", "group_tickets"),
            isGoodTicketsActive: Em.computed.equal("filter.id", "good_tickets"),
            isBadTicketsActive: Em.computed.equal("filter.id", "bad_tickets"),
            isSolvedTicketsActive: Em.computed.equal("filter.id", "solved_tickets"),
            isIncomingTicketsActive: Em.computed.equal("filter.id", "incoming"),
            activeFilterTitle: Em.computed.oneWay("filter.title"),
            activeFilterTicketCount: Em.computed.oneWay("filter.ticketCount")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/dashboard/dashboard_controller": function (e, t, n) {
        var r = t("controllers/ticket_list_controller"),
            i = t("controllers/ticket_selection"),
            s = t("models/filter/incoming_filter"),
            o = t("models/filter/dashboard_filters"),
            u = t("lib/lotus/global_events"),
            a = o.create({
                currentUser: Zd.get("currentUser")
            }),
            f = r.extend(t("lib/fetch_control"), t("lib/controllers/activity_watching"), t("controllers/dashboard/dashboard_filter_switching_mixin"), t("controllers/dashboard/dashboard_filter_syncing_mixin"), {
                expirableObjects: {
                    all: ["currentUser", "activities", "filter.resource", "filter.tickets", "indicators"]
                },
                currentUser: Zd.get("currentUser"),
                dashboardFilters: null,
                indicators: null,
                filter: null,
                defaultFilter: null,
                paginationController: Em.computed.oneWay("filter"),
                activities: Em.computed.singleton("models/activities"),
                mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
                working: function () {
                    return this.get("filter.tickets.isFetching") == null ? !0 : this.get("filter.tickets.isFetching")
                }.property("filter.tickets.isFetching").cacheable(),
                init: function () {
                    this._super();
                    var e = i.create({
                        controller: this
                    });
                    return this.set("selectionController", e), u.on("@ticket:expire", this, this.onTicketExpired), this._super()
                },
                onTicketExpired: function () {
                    this.get("active") && (this.refreshActivitiesAndIndicators(), this.refreshFilterTickets())
                },
                destroy: function () {
                    u.off("@ticket:expire", this, this.onTicketExpired), this._super()
                },
                refreshActivitiesAndIndicators: function () {
                    var e = this.get("mainPanesController");
                    e && e.paneIsPresent("dashboard") && (this.get("activities").refresh(), this.get("indicators").refresh())
                },
                activate: function () {
                    this.refreshActivitiesAndIndicators(), this.set("active", !0), this.watchForActivity()
                },
                deactivate: function () {
                    this.set("active", !1)
                },
                onBrowserActivity: function () {
                    if (!this.get("active")) return;
                    this.refreshActivitiesAndIndicators(), this.refreshFilterTickets()
                },
                setDefaultFilter: function () {
                    this.set("filter", this.get("defaultFilter"))
                },
                toggleSort: function (e) {
                    this.get("filter").toggleSort(e), this.goToFirstPage()
                },
                photoUrl: function () {
                    var e = this.get("currentUser.email"),
                        t = new Zendesk.Photo(null, e);
                    return t.url()
                }.property().cacheable(),
                photoHREF: function () {
                    return "#/users/" + this.get("currentUser.id") + "/tickets"
                }.property().cacheable(),
                isStatsOn: function () {
                    return this.get("isAccountStatsOn") || this.get("isUserStatsOn")
                }.property("isUserStatsOn", "isAccountStatsOn").volatile(),
                isUserStatsOn: Em.computed.bool("indicators.sat_score_last_60_days"),
                isAccountStatsOn: Em.computed.bool("indicators.account_sat_score_last_60_days"),
                isUserStatsOff: Em.computed.not("isUserStatsOn"),
                isAccountStatsOff: Em.computed.not("isAccountStatsOn"),
                refreshFilterTickets: function () {
                    var e = this.get("filter");
                    if (!e) return;
                    e.refreshContent()
                },
                expireFilterTickets: function () {
                    var e = this.get("filter");
                    if (!e) return;
                    e.expireContent()
                },
                filterDidChange: function () {
                    this.refreshFilterTickets(), this.clearSelection()
                }.observes("filter")
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "DashboardController"
                },
                create: function () {
                    return this._super({
                        indicators: t("models/dashboard_indicators").create(),
                        filter: s,
                        defaultFilter: s,
                        dashboardFilters: a
                    })
                }
            });
        n.exports = f
    }
}), this.require.define({
    "controllers/dashboard/dashboard_filter_syncing_mixin": function (e, t, n) {
        var r = _.extend(Object.create(null), {
            my_tickets: "openTickets",
            group_tickets: "groupOpenTickets",
            good_tickets: "ticketsRatedGoodThisWeek",
            bad_tickets: "ticketsRatedBadThisWeek",
            solved_tickets: "ticketsSolvedThisWeek"
        }),
            i = Em.Mixin.create({
                indicators: null,
                ticketCountChanged: function () {
                    var e = this.get("filter"),
                        t = this.get("filter.id");
                    if (t == null || t === "incoming") return;
                    var n = this.get("indicators"),
                        i = e.get("ticketCount"),
                        s = r[t],
                        o = s ? n.get(s) : NaN;
                    if (!n.get("isFetched") || !e.get("tickets.isFetched")) return;
                    if (isNaN(i) || isNaN(o)) return;
                    Number(i) !== Number(o) && (n.expire(), Em.run.next(n.fetch.bind(n)))
                }.observes("filter.ticketCount")
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/devices_controller": function (e, t, n) {
        var r = t("models/user/devices"),
            i = t("lib/growl"),
            s = t("lib/user_settings_consumer"),
            o = null,
            u = Em.Object.extend(s, {
                userId: "me",
                deviceNotification: Em.computed.oneWay("userSettings.deviceNotification"),
                working: function (e, t) {
                    return arguments.length > 1 ? t : this.get("content.isFetching") || this.get("savingDeviceNotification")
                }.property("content.isFetching", "savingDeviceNotification").cacheable(),
                init: function () {
                    return this.set("content", r.create({
                        userId: this.get("userId")
                    })), this._super.apply(this, arguments)
                },
                removeDevice: function (e) {
                    var t = this,
                        n = e.get("name");
                    this.set("working", !0), e.destroyResource().done(function () {
                        t.set("working", !0), t.get("content").refresh(), i.notice("Removed device: '%@'".fmt(n))
                    })
                },
                turnOnDeviceNotification: function () {
                    this.saveDeviceNotification(!0)
                },
                turnOffDeviceNotification: function () {
                    this.saveDeviceNotification(!1)
                },
                saveDeviceNotification: function (e) {
                    var t = this.get("userSettings");
                    t.set("deviceNotification", e), this.set("savingDeviceNotification", !0), $.when(t.save()).then(this.set.bind(this, "savingDeviceNotification", !1))
                }
            });
        u.reopenClass({
            toString: function () {
                return "DevicesController"
            }
        }), n.exports = u
    }
}), this.require.define({
    "controllers/ticket_controller/status_controller": function (e, t, n) {
        var r = t("models/status"),
            i = {
                name: "next",
                visible: !0
            }, s = {
                name: "divider"
            }, o = Em.ArrayController.extend({
                content: [],
                ticketController: null,
                ticketBinding: "ticketController.ticket",
                statusDisplayLabel: null,
                statusIsDisabled: function (e) {
                    var t = this.findProperty("id", e);
                    return t && !t.get("enabled")
                },
                assignable: function () {
                    return this.filterProperty("assignable")
                }.property("@each.assignable").cacheable(),
                visible: function () {
                    return this.get("assignable").filterProperty("visible")
                }.property("assignable", "@each.visible").cacheable(),
                optionIsVisible: function (e) {
                    var t = this.get("visible").findProperty("value", e);
                    return !!t && !! t.get("visible")
                },
                buildContent: function () {
                    var e = _.map([Zd.Ticket.Statuses.NEW, Zd.Ticket.Statuses.OPEN, Zd.Ticket.Statuses.PENDING, Zd.Ticket.Statuses.HOLD, Zd.Ticket.Statuses.SOLVED], function (e) {
                        return r.create({
                            id: e,
                            context: this
                        })
                    }, this);
                    return e.unshiftObjects([i, s])
                },
                init: function () {
                    this._super(), this.reset()
                },
                reset: function () {
                    this.set("statusDisplayLabel", null), this.set("content", this.buildContent())
                }
            }).reopenClass({
                toString: function () {
                    return "StatusController"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "controllers/ticket_controller/ticket_comment_states_mixin": function (e, t, n) {
        n.exports = Em.Mixin.create({
            currentAccount: t("lib/current_account"),
            shouldShowEmailOnlyOption: Em.computed.bool("isSocialMediaChannel"),
            shouldShowPublicReplyOption: Em.computed.not("isSocialMediaChannel"),
            shouldShowAttachment: Em.computed.bool("ticketCommentStateManager.currentState.attachmentsAllowed"),
            shouldShowCharCounter: Em.computed.bool("ticketCommentStateManager.currentState.twitterChannelBack"),
            commentHint: Em.computed.oneWay("ticketCommentStateManager.currentState.hint"),
            commentIsPublic: Em.computed.or("ticket.isNew", "ticketCommentStateManager.commentIsPublic"),
            isSocialMediaChannel: Em.computed.or("twitterChannelsVisible", "facebookChannelVisible", "facebookPrivateMessageVisible"),
            attachmentTooltipClass: function () {
                return this.get("browserSupportsDragAndDrop") ? "fileinput-button _tooltip" : "fileinput-button"
            }.property().cacheable(),
            attachmentTooltipTitle: function () {
                return this.get("browserSupportsDragAndDrop") ? I18n.t("txt.ticket.comment_upload_tip") : null
            }.property().cacheable(),
            browserSupportsDragAndDrop: function () {
                return !($.browser.msie && parseInt($.browser.version, 10) < 10)
            }.property().cacheable(),
            updateComment: function () {
                if (!this.get("ticket.comment")) return;
                var e = this.get("ticketCommentStateManager.currentState.isPublic");
                this.set("ticket.comment.is_public", e);
                var t = this.get("ticketCommentStateManager.currentState.twitterChannelBack");
                this.set("ticket.comment.twitter_channel_back", t);
                var n = this.get("ticketCommentStateManager.currentState.fbChannelBack");
                this.set("ticket.comment.channel_back", n)
            }.observes("ticketCommentStateManager.currentState", "ticket"),
            commentMode: function (e, t) {
                return arguments.length === 2 ? t : this.get("ticketCommentStateManager.currentState.name")
            }.property("ticketCommentStateManager.currentState.name").cacheable(),
            userSetCommentState: null,
            toggleCommentMode: function (e) {
                this.set("userSetCommentState", !0), this.get("ticketCommentStateManager").goToState(e)
            },
            focusForTwitterReply: function () {
                this.toggleCommentMode("twitterMention"), this.trigger("@focus:comment")
            },
            reset: function () {
                this.set("userSetCommentState", !1), this.resetMarkdownPreview(), this.set("commentDraftLoaded", !1), this.setDefaultCommentMode(), this.set("takeFocus", !1), this.set("showRequester", !1), this.set("viewNameInFocus", null)
            },
            setDefaultCommentMode: function () {
                if (!this.get("ticketCommentStateManager")) return;
                if (this.get("userSetCommentState")) return;
                var e;
                this.get("ticket.isDefaultPublicComment") ? this.get("twitterChannelsVisible") ? this.get("ticket.via_id") === Zendesk.Ticket.Vias.TWITTER ? e = "twitterMention" : this.get("ticket.via_id") === Zendesk.Ticket.Vias.TWITTER_DM && (e = "twitterDm") : this.get("facebookChannelVisible") ? e = "fbWallReply" : this.get("facebookPrivateMessageVisible") ? e = "fbPrivateMessage" : e = "publicComment" : e = "privateComment", this.get("ticketCommentStateManager").goToState(e)
            }.observes("ticket.isFetched")
        })
    }
}), this.require.define({
    "controllers/ticket_controller": function (e, t, n) {
        function m(e) {
            return /^\d+$/.test(e)
        }

        function g(e) {
            return /.+@.+\..+/.test(e)
        }
        var r = t("lib/growl"),
            i = t("lib/lotus/global_events"),
            s = t("controllers/ticket_controller/macro_applier"),
            o = t("controllers/ticket_controller/status_controller"),
            u = t("lib/controllers/ticket_footer_controller_mixin"),
            a = t("controllers/ticket_controller/ticket_permissions_proxy"),
            f = t("controllers/ticket_controller/ticket_comment_states_mixin"),
            l = t("controllers/ticket_controller/base_ticket_controller"),
            c = t("lib/features"),
            h = t("controllers/ticket_merge_controller"),
            p = t("lib/comment_drafts"),
            d = 3e4,
            v = l.extend(f, u, t("lib/recent_tickets_consumer"), t("mixins/markdown_preview"), t("mixins/mark_ticket_as_spam"), t("lib/account_consumer"), Em.Evented, {
                init: function () {
                    this._super(), this.set("statusController", o.create({
                        ticketController: this
                    })), this.set("macroApplier", new s(this))
                },
                appsController: null,
                statusController: null,
                collisionController: null,
                ticketCommentStateManager: null,
                activeTicketsController: Em.computed.singleton("controllers/active_tickets_controller"),
                unformattedMarkdown: Em.computed.oneWay("ticket.comment.body"),
                onCommentChange: function () {
                    if (!this.get("commentDraftLoaded")) return;
                    this.saveCommentDraft()
                }.observes("ticket.comment.body", "commentMode"),
                didActivate: function () {
                    this.loadCommentDraft(), this.set("takeFocus", !0)
                },
                didDeactivate: function () {
                    this.set("takeFocus", !1)
                },
                loadCommentDraft: function () {
                    var e = this.get("ticket");
                    if (e.get("isNew") || this.get("commentDraftLoaded")) return;
                    var t = p.fetchDraft(e.get("id"), Zd.currentUser.get("id"));
                    t && (e.set("comment.body", t.draft), this.toggleCommentMode(t.state)), this.set("commentDraftLoaded", !0)
                },
                saveCommentDraft: function () {
                    var e = this.get("ticket"),
                        t = {
                            comment: e.get("comment.body"),
                            state: this.get("commentMode")
                        };
                    p.saveDraft(e.get("id"), Zd.currentUser.get("id"), t)
                },
                viewLoaded: function (e) {
                    this.set("ticketView", e), i.set("firstResponder", e)
                },
                addCollaborator: function (e, t) {
                    var n = this.get("ticket"),
                        r = n.get("collaborators").filterProperty("id", e).length > 0,
                        i = n.get("collaborators").filterProperty("email", e).length > 0;
                    if (r || i) return;
                    m(e.toString()) ? t ? n.get("collaborators").addObject(Zendesk.User.create({
                        name: t,
                        id: e
                    })) : n.get("collaborators").addObject(Zendesk.User.create({
                        id: e
                    })) : g(e.toString()) && n.get("collaborators").addObject(Zendesk.User.create({
                        name: t || e,
                        email: e
                    }))
                },
                removeCollaborator: function (e) {
                    var t = this.get("ticket");
                    if (m(e.toString())) t.get("collaborators").removeObject(Zendesk.User.create({
                        id: e
                    }));
                    else if (g(e.toString())) {
                        var n = t.get("collaborators").findProperty("email", e);
                        t.get("collaborators").removeObject(n)
                    }
                },
                openNewTicket: function (e) {
                    return this.constructor.openNewTicket(e)
                },
                createFollowupTicket: function () {
                    var e = Zendesk.Ticket.newFollowUpTicket(this.get("ticket"));
                    Zendesk.Routes.goToHash("#/tickets/new/" + e.get("newTicketId"))
                },
                _afterSave: function (e) {
                    p.removeDraft(e.get("id"), Zd.currentUser.get("id")), e.get("comment") && e.set("comment.body", null), this._notifyTicketSave(e), e.get("wasNew") && this.get("recentTickets").push(e), this.get("workspace").ticketDidSave()
                },
                isWorking: function (e, t) {
                    return arguments.length === 2 && this.set("_isWorking", t), this.get("activeTicketsController").isSaving(this.get("ticket.id")) || this.get("_isWorking")
                }.property("_isWorking", "activeTicketsController.saving.@each").cacheable(),
                deleteAttachment: function (e) {
                    var t = e.view.get("content"),
                        n = t.get("uploadSet");
                    n.remove(t)
                },
                _isValidating: !1,
                _validationDelayId: -1,
                _validationDone: function () {
                    this._notifyApps("submit.done"), this.save()
                },
                _validationFail: function (e) {
                    this.set("isWorking", !1);
                    var t = e && typeof e.message == "string" && e.message || I18n.t("txt.apps.hook.ticket_save_fail");
                    r.error(t, {
                        header: e.title
                    }), this._notifyApps("submit.fail")
                },
                _validationAlways: function () {
                    clearTimeout(this._validationDelayId), this._validationDelayId = -1, this.set("_isValidating", !1), this._notifyApps("submit.always")
                },
                _notifyApps: function (e) {
                    this.get("appsController").notifyAppsForView(this.get("workspace.view"), "ticket.%@".fmt(e))
                },
                validateTicket: function (e) {
                    var n = t("lib/ticket_validator").instance(),
                        r = t("models/assignable_groups").instance(),
                        i = this.get("ticketFormsFieldsWithoutAssignee") || Zendesk.get("ticketFields.forPropertiesWithoutAssignee"),
                        s = n.validate(e, i, r);
                    return e.set("errors", s), !s
                },
                save: function () {
                    var e = this.get("ticket"),
                        t = this.get("_isValidating"),
                        n = this.get("appsController"),
                        i = this.get("collisionController");
                    if (!t && this.get("submitButtonDisabled")) return;
                    if (!this.validateTicket(e)) return;
                    clearTimeout(this._validationDelayId);
                    if (!t && this.get("appsController")) {
                        this.set("_isValidating", !0), this._notifyApps("submit.start");
                        var s = $.Deferred(),
                            o = n.runHooksFor(this.get("workspace.view"), "ticket.save"),
                            u = o.state();
                        this.set("isWorking", !0);
                        if (u === "pending") {
                            var a = s.reject.bind(s, {
                                message: I18n.t("txt.apps.hook.ticket_save_timeout")
                            });
                            this._validationDelayId = setTimeout(a, d)
                        }
                        o.then(s.resolve.bind(s), function (e) {
                            s.reject(e)
                        }), s.then(this._validationDone.bind(this), this._validationFail.bind(this)).always(this._validationAlways.bind(this));
                        return
                    }
                    if (!this.get("shouldShowAttachment")) {
                        var f = this.get("ticket.comment.uploadSet");
                        f && f.removeAll()
                    }
                    if (e.get("viaClass") === "twitter" && this.get("ticketCommentStateManager.currentState.name") === "twitterDm" && !e.get("twitterStatuses.followedByRequester")) {
                        r.error(I18n.t("txt.ticket.twitter_comments.direct_message_not_allowed"));
                        return
                    }
                    i && i.silenceUpdates(), this.get("activeTicketsController").markAsSaving(e.get("id")), e.save({
                        update: !1
                    }).then(this._afterSave.bind(this, e), function () {
                        this.set("isWorking", !1), this.set("_isValidating", !1)
                    }.bind(this)).always(function () {
                        this.get("activeTicketsController").markAsNotSaving(e.get("id"))
                    }.bind(this)), Zd.workspaces.navigateAfterTicketUpdate(this.get("workspace"))
                },
                _notifyTicketSave: function (e) {
                    var t = e.get("id") || "",
                        n = this._ticketSaveMessageKey(e),
                        i = new Handlebars.SafeString('<a href="#/tickets/%@" tabindex="-1">%@</a>'.fmt(t, I18n.t("txt.ticket.id_label", {
                            id: t
                        }))),
                        s = I18n.t(n, {
                            ticket_link: i
                        });
                    if (Zendesk.globalPermissions.get("manageMacros")) {
                        var o = new Handlebars.SafeString('<a href="#/admin/macros/from_ticket?id=%@" tabindex="-1">%@</a>'.fmt(t, I18n.t("txt.ticket.create_as_macro")));
                        s += "<div class='add_message'>" + I18n.t("txt.ticket.keep_repeating_yourself") + " <strong>" + o + "</strong><div>"
                    }
                    r.notice(s)
                },
                _ticketSaveMessageKey: function (e) {
                    if (e.get("wasNew")) return "txt.ticket.create.success";
                    var n = t("models/ticket/types").Statuses.SOLVED,
                        r = e.get("hasIncidents") && e.get("serverCopy.status_id") !== n && e.get("status_id") === n;
                    return r ? "txt.ticket.update_with_incidents.success" : "txt.ticket.update.success"
                },
                deleteTicket: function () {
                    var e = this.get("ticket"),
                        t = confirm(I18n.t("txt.ticket.delete.confirm")),
                        n = this.get("workspace");
                    t && (this.set("isWorking", !0), e.destroyResource().done(function () {
                        r.notice(I18n.t("txt.ticket.delete.success")), Zd.workspaces.navigateAfterTicketUpdate(n)
                    }.bind(this)).always(function () {
                        this.set("isWorking", !1)
                    }.bind(this)))
                },
                printTicketUrl: function () {
                    var e = this.get("ticket.id");
                    return "/tickets/%@/print".fmt(e)
                }.property("ticket.id").cacheable(),
                mergeTicket: function () {
                    h.create().mergeTickets({
                        sourceTickets: [this.get("ticket.id")]
                    })
                },
                toForum: function () {
                    var e = this.get("ticket.id");
                    window.open("/entries/new?ticket_id=" + e)
                },
                toMacro: function () {
                    var e = this.get("ticket.id");
                    window.location.hash = "#/admin/macros/from_ticket?id=" + e
                },
                showRequester: !1,
                toggleRequester: function () {
                    this.set("showRequester", !this.get("showRequester")), this.set("viewNameInFocus", this.get("showRequester") ? "requester" : null)
                },
                viewNameInFocusDidChange: function () {
                    this.get("viewNameInFocus") === "requester" && this.set("showRequester", !0)
                }.observes("viewNameInFocus"),
                viewNameInFocus: Em.computed.oneWay("initViewNameInFocus"),
                resetFocus: function () {
                    this.set("viewNameInFocus", null)
                },
                reset: function () {
                    this._super(), this.get("statusController").reset()
                },
                goToTicket: function () {
                    Zd.Routes.goToHash(this.get("ticket.href"))
                },
                goToRequester: function () {
                    Zd.Routes.goToHash(this.get("ticket.href") + "/requester/tickets")
                },
                requesterMode: function () {
                    return this.get("showRequester") || this.get("ticket.isNew")
                }.property("ticket.isNew", "showRequester").cacheable(),
                initViewNameInFocus: function () {
                    var e = this.get("ticket");
                    return e && e.get("isNew") && !e.get("requester_id") && !e.get("comment.body") ? "requester" : "add_comment"
                }.property("ticket", "ticket.isNew", "ticket.isFetched").cacheable(),
                canPreviewMarkdown: function () {
                    var e = this.get("ticketCommentStateManager.currentState"),
                        t = e.get("markdownPreviewAllowed"),
                        n = this.get("markdownPreviewIsEnabled");
                    return n && t
                }.property("markdownPreviewIsEnabled", "ticketCommentStateManager.currentState").cacheable(),
                showCopyToForums: Em.computed.not("currentAccount.helpCenterSettings.hideCopyToForums"),
                requesterOrganizations: Em.computed.oneWay("ticket.requester.organizations"),
                requesterDefaultOrganization: Em.computed.oneWay("ticket.requester.defaultOrganization")
            }).reopenClass({
                openNewTicket: function (e, t) {
                    e = parseInt(e, 10), isNaN(e) && (e = Zd.Ticket.newTicket().get("newTicketId"));
                    var n = "#/tickets/new/%@".fmt(e);
                    t != null && (n += "?" + $.param(t)), Zd.Routes.goToHash(n)
                },
                toString: function () {
                    return "TicketController"
                }
            });
        n.exports = v
    }
}), this.require.define({
    "controllers/feed_ticket_controller": function (e, t, n) {
        var r = t("controllers/ticket_controller").extend({
            source: null,
            ticket: null,
            save: function () {
                return this.set("_lastFeedComment", this.get("ticket.comment")), this.set("_lastFeedComment.is_public", this.get("ticketCommentStateManager.currentState.isPublic")), this._super()
            },
            _afterSave: function (e) {
                var n = t("controllers/ticket_filter_manager_controller").instance(),
                    r = this.get("source");
                Em.Resource.ajax({
                    url: "/api/v2/views/" + n.get("currentFilter.id") + "/tickets/" + e.get("id")
                }).done(_(function (e) {
                    r.refreshTicket(this.get("_lastFeedComment")), n.get("currentFilter").addOwnUpdateDate(new Date(e.ticket.updated_at))
                }).bind(this)).fail(_(function () {
                    r.removeTicket()
                }).bind(this)).always(_(function () {
                    t("lib/comment_drafts").removeDraft(e.get("id"), Zd.currentUser.get("id")), this.set("isWorking", !1), this._notifyTicketSave(e)
                }).bind(this))
            }
        }).reopenClass({
            toString: function () {
                return "FeedTicketController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/filter_column_editor_controller": function (e, t, n) {
        var r = t("models/filter/filter_output"),
            i = function (e, t) {
                return Em.get(t, "title").toLowerCase().indexOf(e.toLowerCase()) > -1
            }, s = function (e) {
                return {
                    id: Em.get(e, "id"),
                    label: Em.get(e, "title")
                }
            }, o = 10,
            u = 1,
            a = Em.Object.extend({
                editorController: null,
                editingFilter: null,
                editingResource: Em.computed.oneWay("editingFilter.resource"),
                active: !1,
                shouldShowActiveColumns: Em.computed.equal("editorMode", "activeColumns"),
                shouldShowAvailableColumns: Em.computed.equal("editorMode", "availableColumns"),
                editorMode: "activeColumns",
                searchKeyword: "",
                fieldDefinitions: Em.computed.singleton("models/filter/user_filter/user_filter_definitions"),
                canRemoveColumns: Em.computed.gt("activeColumns.length", u),
                canAddColumns: Em.computed.lt("activeColumns.length", o),
                shouldShowAddColumn: Em.computed.oneWay("canAddColumns"),
                groupBy: null,
                groupOrder: "desc",
                sortBy: null,
                sortOrder: "desc",
                activeColumns: function (e, t) {
                    if (t !== undefined) return t;
                    var n = this.get("editingFilter");
                    return n ? n.get("columns").filter(function (e) {
                        return Em.get(e, "id") !== "photo"
                    }).map(function (e) {
                        return {
                            id: String(Em.get(e, "id")),
                            title: Em.get(e, "title"),
                            type: Em.get(e, "type")
                        }
                    }) : []
                }.property("editingFilter.columns").cacheable(),
                allColumns: function (e, t) {
                    return t !== undefined ? t : this.get("fieldDefinitions.length") ? this.get("fieldDefinitions").map(function (e) {
                        return {
                            id: String(e.get("key")),
                            title: e.get("title"),
                            type: e.get("type"),
                            groupable: e.get("groupable"),
                            sortable: e.get("sortable")
                        }
                    }) : []
                }.property("fieldDefinitions.content.@each").cacheable(),
                availableColumns: function (e, t) {
                    if (t !== undefined) return t;
                    var n = Object.create(null);
                    return this.get("activeColumns").forEach(function (e) {
                        n[Em.get(e, "id")] = e
                    }), this.get("allColumns").filter(function (e) {
                        return !(Em.get(e, "id") in n)
                    })
                }.property("allColumns", "activeColumns").cacheable(),
                filteredAvailableColumns: function () {
                    var e = this.get("searchKeyword"),
                        t = this.get("availableColumns"),
                        n = i.bind(null, e);
                    return e.length > 0 ? t.filter(n) : t
                }.property("searchKeyword", "availableColumns").cacheable(),
                _arrangeByColumns: function (e) {
                    if (!this.get("allColumns.length")) return [];
                    var t = this.get("allColumns").filter(function (t) {
                        var n = Em.get(t, e + "able");
                        return n == null || n === !0
                    }).map(s);
                    return t.unshift({
                        id: "-1",
                        label: "-"
                    }), t
                },
                groupByColumns: function () {
                    return this._arrangeByColumns("group")
                }.property("allColumns").cacheable(),
                sortByColumns: function () {
                    return this._arrangeByColumns("sort")
                }.property("allColumns").cacheable(),
                activate: function (e) {
                    this.set("editingFilter", e);
                    var t = this.get("editingResource");
                    this.setProperties({
                        groupBy: t.get("group.id"),
                        groupOrder: t.get("group.order") || "desc",
                        sortBy: t.get("sort.id"),
                        sortOrder: t.get("sort.order") || "desc"
                    }), this.set("active", !0), this.get("fieldDefinitions").fetch()
                },
                deactivate: function () {
                    this.setProperties({
                        active: !1,
                        searchKeyword: "",
                        editorMode: "activeColumns",
                        editingFilter: null
                    })
                },
                _processOrderChange: function (e) {
                    if (!this.get("active")) return;
                    if (e && this.get(e + "By") == null) return;
                    this.set("editingFilter.sortManager", null), this.updateEditingResource()
                },
                orderingObserver: function () {
                    this._processOrderChange()
                }.observes("groupBy", "sortBy"),
                groupOrderObserver: function () {
                    this._processOrderChange("group")
                }.observes("groupOrder"),
                sortOrderObserver: function () {
                    this._processOrderChange("sort")
                }.observes("sortOrder"),
                showAvailableColumns: function () {
                    this.set("editorMode", "availableColumns")
                },
                showActiveColumns: function () {
                    this.set("editorMode", "activeColumns")
                },
                toggleGroupOrder: function () {
                    var e = this.get("groupOrder") === "desc" ? "asc" : "desc";
                    this.set("groupOrder", e)
                },
                toggleSortOrder: function () {
                    var e = this.get("sortOrder") === "desc" ? "asc" : "desc";
                    this.set("sortOrder", e)
                },
                removeActiveColumn: function (e) {
                    var t = this.get("searchKeyword");
                    this.get("activeColumns").removeObject(e), this.get("availableColumns").addObject(e), t.length > 0 && i(t, e) && this.get("filteredAvailableColumns").addObject(e), this.updateEditingResource()
                },
                addActiveColumn: function (e) {
                    this.get("activeColumns").addObject(e), this.updateEditingResource()
                },
                removeAvailableColumn: function (e) {
                    this.get("availableColumns").removeObject(e), this.get("filteredAvailableColumns").removeObject(e), this.addActiveColumn(e)
                },
                removeActiveColumnFromUI: function (e) {
                    if (!this.get("canRemoveColumns")) return;
                    var t = e.get("content");
                    e.hide(this.removeActiveColumn.bind(this, t))
                },
                removeAvailableColumnFromUI: function (e) {
                    if (!this.get("canAddColumns")) return;
                    var t = e.get("content");
                    e.hide(this.removeAvailableColumn.bind(this, t))
                },
                reorderActiveColumns: function (e) {
                    var t = this.get("activeColumns"),
                        n = e.map(function (e) {
                            return t.findProperty("id", e)
                        });
                    this.set("activeColumns", n), this.updateEditingResource()
                },
                updateEditingResource: function () {
                    var e = this.get("editingResource");
                    this.updateResourceColumns(e), this.updateResourceGrouping(e), this.updateResourceSorting(e), this.get("editorController").syncFilter()
                },
                updateResourceColumns: function (e) {
                    var t = e.get("columnClass").create({
                        title: "User photo",
                        id: "photo"
                    }),
                        n = [t].concat(this.get("activeColumns"));
                    e.set("execution.columns", n)
                },
                updateResourceGrouping: function (e) {
                    this.get("groupBy") != null && this.get("groupBy") !== "-1" ? e.set("execution.group", {
                        id: this.get("groupBy"),
                        order: this.get("groupOrder")
                    }) : e.set("execution.group", null)
                },
                updateResourceSorting: function (e) {
                    this.get("sortBy") != null && this.get("sortBy") !== "-1" ? e.set("execution.sort", {
                        id: this.get("sortBy"),
                        order: this.get("sortOrder")
                    }) : e.set("execution.sort", null)
                }
            }).reopenClass({
                MAX_COLUMNS: o,
                MIN_COLUMNS: u,
                toString: function () {
                    return "FilterColumnEditorController"
                }
            });
        n.exports = a
    }
}), this.require.define({
    "controllers/filter_controller_mixin": function (e, t, n) {
        var r = t("controllers/item_selection"),
            i = Em.Mixin.create(t("lib/fetch_control"), {
                manager: null,
                selectionClass: r,
                filter: Em.computed.oneWay("manager.currentFilter"),
                paginationController: Em.computed.oneWay("filter"),
                filters: Em.computed.oneWay("manager.filters"),
                init: function () {
                    this._super(), this.set("selectionControllersMap", {})
                },
                selectionController: function () {
                    var e = this.get("filter.href"),
                        t = this.get("selectionClass"),
                        n = this.get("selectionControllersMap");
                    if (!e) return;
                    return n.hasOwnProperty(e) || (n[e] = t.create({
                        controller: this
                    })), n[e]
                }.property("filter").cacheable(),
                expireFilterContent: function () {
                    this.get("filter") && this.get("filter").expireContent()
                },
                refreshFilterContent: function () {
                    this.get("filter") && this.get("filter").refreshContent()
                },
                expirableObjects: {
                    show: [
                        ["filter.resource", "filter.content"]
                    ]
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/filter_modal_editor_controller": function (e, t, n) {
        function s(e) {
            return JSON.stringify(e.get("resource").toJSON())
        }
        var r = t("controllers/conditions_controller"),
            i = t("models/filter/user_filter/user_filter"),
            o = Em.Object.extend({
                previewing: Em.computed.bool("filter.previewing"),
                active: !1,
                filter: null,
                currentUser: Zd.get("currentUser"),
                canEdit: Em.computed.oneWay("editorController.canEdit"),
                shouldShowActions: function () {
                    return !this.get("filter.resource.isNew") || !this.get("previewing")
                }.property("filter.resource.isNew", "previewing"),
                isValid: function () {
                    var e = this.get("filter");
                    return e ? !! e.get("title") && e.get("conditions.all.length") > 0 : !1
                }.property("filter.title", "filter.conditions.all.@each").cacheable(),
                activate: function (e) {
                    var t = r.instance({
                        parentController: this
                    });
                    t.set("content", e.get("conditions.all")), this.setProperties({
                        allConditionsController: t,
                        active: !0,
                        filter: e
                    })
                },
                deactivate: function () {
                    var e = this.get("allConditionsController");
                    this.set("active", !1), e && (e.invoke("confirm"), e.clear())
                },
                toggle: function (e) {
                    return this.get("active") ? this.deactivate() : this.activate(e)
                },
                save: function () {
                    var e = this.get("allConditionsController");
                    if (!e) return;
                    e.save()
                },
                cancel: function () {
                    this.get("editorController").deactivateAndRevert()
                },
                saveFilter: function () {
                    this.get("editorController").saveFilter()
                },
                cloneFilter: function () {
                    this.get("editorController").cloneFilter()
                },
                deactivateFilter: function () {
                    this.get("editorController").deactivateFilter()
                },
                previewFilter: function () {
                    this.get("editorController").previewFilter()
                },
                syncFilter: function () {
                    this.get("editorController").syncFilter()
                },
                deleteFilter: function () {
                    this.get("editorController").deleteFilter()
                },
                syncPreviewState: function () {
                    var e = this.get("filter");
                    if (!e || !e.get("isRefreshable")) return;
                    e.set("previewing", e.get("isDirty"))
                },
                filterDidChange: function () {
                    this.syncPreviewState()
                }.observes("filter.title", "filter.restriction"),
                didRemoveCondition: function (e) {
                    e.get("isNew") ? this.syncPreviewState() : this.get("editorController").syncFilter()
                }
            }).reopenClass({
                toString: function () {
                    return "FilterModalEditorController"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "controllers/filter_editor_controller": function (e, t, n) {
        var r = t("models/filter/user_filter/user_filter"),
            i = t("controllers/filter_modal_editor_controller"),
            s = t("controllers/filter_column_editor_controller"),
            o = t("lib/growl"),
            u = Em.Object.extend({
                currentUser: Zd.currentUser,
                permissions: Em.computed.alias("manager.permissions"),
                active: !1,
                editingFilter: null,
                previousFilter: null,
                currentFilter: Em.computed.alias("manager.currentFilter"),
                canEdit: Em.computed.oneWay("permissions.can_edit"),
                isPreviewing: Em.computed.oneWay("editingFilter.previewing"),
                shouldShowActions: Em.computed.oneWay("editingFilter.isDirty"),
                init: function () {
                    return this.setProperties({
                        modalEditorController: i.create({
                            editorController: this
                        }),
                        columnEditorController: s.create({
                            editorController: this
                        })
                    }), this._super()
                },
                activate: function () {
                    this.set("active", !0)
                },
                deactivate: function () {
                    this.get("modalEditorController.active") && this.get("modalEditorController").deactivate(), this.get("columnEditorController.active") && this.get("columnEditorController").deactivate(), this.setProperties({
                        active: !1,
                        editingFilter: null
                    })
                },
                deactivateAndRestore: function () {
                    var e = this.get("editingFilter");
                    if (!e) return;
                    this.restoreFilter(), this.deactivate()
                },
                deactivateAndRevert: function () {
                    var e = this.get("editingFilter");
                    if (!e) return;
                    e.get("resource.isNew") ? (this.restoreFilter(), this.get("manager.filters").removeObject(e), this.loadPreviousFilter(), e.destroy()) : this.restoreFilter(e.get("isRefreshable")), this.deactivate()
                },
                activateModalEditor: function (e) {
                    this.get("active") || (this.setupFilter(e), this.activate()), this.get("modalEditorController").activate(this.get("editingFilter"))
                },
                activateModalEditorWithFilter: function (e) {
                    if (this.get("active")) return;
                    this.set("editingFilter", e), this.activate(), this.get("modalEditorController").activate(e)
                },
                activateModalEditorWithClone: function (e) {
                    this.deactivateAndRevert(), this.activateModalEditorWithFilter(e)
                },
                activateColumnEditor: function () {
                    this.get("active") || (this.setupFilter("edit"), this.activate()), this.get("columnEditorController").activate(this.get("editingFilter"))
                },
                deactivateModalEditor: function () {
                    var e = this.get("editingFilter");
                    this.get("modalEditorController").deactivate(), e && !e.get("isDirty") && this.deactivateAndRestore()
                },
                deactivateColumnEditor: function () {
                    this.get("columnEditorController").deactivate()
                },
                toggleModalEditor: function () {
                    return this.get("modalEditorController.active") ? this.deactivateModalEditor() : this.activateModalEditor()
                },
                toggleColumnEditor: function () {
                    return this.get("columnEditorController.active") ? this.deactivateColumnEditor() : this.activateColumnEditor()
                },
                setupFilter: function (e) {
                    var t;
                    e === "create" ? (this.set("previousFilter", this.get("currentFilter")), t = this.createFilter()) : (t = this.editFilter(), this.set("previousFilter", t)), this.set("editingFilter", t)
                },
                createClone: function (e) {
                    var t = this.get("editingFilter"),
                        n = t.clone();
                    return e || (e = {}), e.id = null, e.title == null && (e.title = I18n.t("txt.user_filters.copy_title", {
                        title: t.get("title")
                    })), this.get("canEdit") || (e.restriction = {
                        type: "User",
                        id: this.get("currentUser.id")
                    }), n.get("resource").setProperties(e), n
                },
                createFilter: function () {
                    return r.createWithDefaults()
                },
                editFilter: function () {
                    return this.get("currentFilter").edit()
                },
                cloneFilter: function () {
                    var e;
                    this.get("modalEditorController").save(), e = this.createClone(), this.activateModalEditorWithClone(e)
                },
                saveFilter: function () {
                    var e = this.get("editingFilter"),
                        t = e.get("resource");
                    return t.set("title", e.get("title")), this.get("modalEditorController").save(), t.save().done(this.didSave.bind(this, t))
                },
                saveFilterAs: function () {
                    var e;
                    this.get("modalEditorController").save(), e = this.createClone({
                        title: ""
                    }), e.get("columns.0.id") === "photo" && e.get("columns").shiftObject(), this.activateModalEditorWithClone(e)
                },
                previewFilter: function () {
                    this.get("modalEditorController").save(), this.get("manager").setFilterForPreview(this.get("editingFilter")), this.deactivateModalEditor()
                },
                deactivateFilter: function () {
                    this.get("editingFilter").deactivate().done(function () {
                        this.deactivateAndRestore()
                    }.bind(this))
                },
                openDeleteConfirmModal: function (e) {
                    var n = $.Deferred(),
                        r = e.get("title"),
                        i;
                    return e.get("viewType") === "shared" ? i = I18n.t("txt.user_filters.delete_modal.body_for_shared_filter", {
                        view: r
                    }) : i = I18n.t("txt.user_filters.delete_modal.body_for_personal_filter", {
                        view: r
                    }), t("views/modals/confirm_modal").create({
                        body: i,
                        title: I18n.t("txt.user_filters.delete_modal.title"),
                        userDidConfirm: function () {
                            this.hideModal(), n.resolve()
                        },
                        userDidCancel: function () {
                            this._super(), n.reject()
                        }
                    }).append(), n.promise()
                },
                deleteFilter: function () {
                    var e = this,
                        t = this.get("editingFilter");
                    return this.deactivateModalEditor(), this.openDeleteConfirmModal(t).done(function () {
                        t.delete_().done(e.deactivateAndRestore.bind(e)).fail(e.activateModalEditor.bind(e))
                    }).fail(this.activateModalEditor.bind(this))
                },
                loadPreviousFilter: function () {
                    var e = this.get("previousFilter"),
                        t = this.get("manager");
                    e ? (e.set("selected", !0), this.set("currentFilter", e), this.set("previousFilter", null)) : t.selectFirst()
                },
                restoreFilter: function (e) {
                    var t = this.get("editingFilter"),
                        n = t.get("resource"),
                        r = n.get("isDestroyed");
                    r || (t.restore(), t.set("previewing", !1)), this.set("editingFilter", null), e && t.refreshContent()
                },
                syncFilter: function () {
                    var e = this.get("editingFilter");
                    e.get("isRefreshable") ? (e.set("previewing", e.get("isDirty")), e.refreshContent()) : e.get("resource.isNew") && e.get("previewing") && e.refreshContent()
                },
                didSave: function (e) {
                    var t = this.get("manager"),
                        n = this.get("editingFilter").restore(),
                        r = e.get("id");
                    this.deactivate(), n.set("previewing", !1), t.refreshFilters().done(function (e) {
                        t.setFilterById(r)
                    })
                }
            }).reopenClass({
                toString: function () {
                    return "FilterEditorController"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "controllers/filter_list_editor_controller": function (e, t, n) {
        var r = t("views/modals/filter_list_editor"),
            i = function (e) {
                return e.get("active") && e.get("viewType") === "shared"
            }, s = function (e) {
                return !e.get("active") && e.get("viewType") === "shared"
            }, o = function (e) {
                return e.get("active") && e.get("viewType") === "personal"
            }, u = function (e) {
                return !e.get("active") && e.get("viewType") === "personal"
            }, a = Em.Object.extend({
                modal: null,
                manager: Em.required(),
                mode: "shared",
                canManageSharedViews: Em.computed.oneWay("manager.globalPermissions.manageSharedUserViews"),
                shouldShowSharedPanel: Em.computed.equal("mode", "shared"),
                shouldShowPersonalPanel: Em.computed.equal("mode", "personal"),
                isActiveSharedFiltersEmpty: Em.computed.equal("activeSharedFilters.length", 0),
                isInactiveSharedFiltersEmpty: Em.computed.equal("inactiveSharedFilters.length", 0),
                isActivePersonalFiltersEmpty: Em.computed.equal("activePersonalFilters.length", 0),
                isInactivePersonalFiltersEmpty: Em.computed.equal("inactivePersonalFilters.length", 0),
                allFilters: function () {
                    return this.get("manager.allFilters") || []
                }.property("manager.allFilters").cacheable(),
                activeSharedFilters: function (e, t) {
                    return t !== undefined ? t : this.get("allFilters").filter(i)
                }.property("allFilters.@each").cacheable(),
                inactiveSharedFilters: function () {
                    return this.get("allFilters").filter(s)
                }.property("allFilters.@each").cacheable(),
                activePersonalFilters: function (e, t) {
                    return t !== undefined ? t : this.get("allFilters").filter(o)
                }.property("allFilters.@each").cacheable(),
                inactivePersonalFilters: function () {
                    return this.get("allFilters").filter(u)
                }.property("allFilters.@each").cacheable(),
                buildModal: function () {
                    var e = this.get("modal");
                    if (e) return;
                    return e = r.create({
                        controller: this
                    }), this.set("modal", e), e.append(), e
                },
                activate: function () {
                    this.buildModal(), this.get("canManageSharedViews") ? this.showSharedPanel() : this.showPersonalPanel()
                },
                deactivate: function () {
                    this.set("modal", null)
                },
                centerModal: function () {
                    this.get("modal") && this.get("modal").centerIfOutsideView()
                },
                showSharedPanel: function () {
                    this.set("mode", "shared"), Em.run.next(this, this.centerModal)
                },
                showPersonalPanel: function () {
                    this.set("mode", "personal"), Em.run.next(this, this.centerModal)
                },
                activateSharedFilter: function (e) {
                    return e.activate().done(function () {
                        this.get("activeSharedFilters").addObject(e), this.get("inactiveSharedFilters").removeObject(e)
                    }.bind(this))
                },
                activatePersonalFilter: function (e) {
                    return e.activate().done(function () {
                        this.get("activePersonalFilters").addObject(e), this.get("inactivePersonalFilters").removeObject(e)
                    }.bind(this))
                },
                deactivateSharedFilter: function (e) {
                    return e.deactivate().done(function () {
                        this.get("activeSharedFilters").removeObject(e), this.get("inactiveSharedFilters").addObject(e)
                    }.bind(this))
                },
                deactivatePersonalFilter: function (e) {
                    return e.deactivate().done(function () {
                        this.get("activePersonalFilters").removeObject(e), this.get("inactivePersonalFilters").addObject(e)
                    }.bind(this))
                },
                deleteSharedFilter: function (e) {
                    return e.delete_().done(function () {
                        this.get("inactiveSharedFilters").removeObject(e)
                    }.bind(this))
                },
                deletePersonalFilter: function (e) {
                    return e.delete_().done(function () {
                        this.get("inactivePersonalFilters").removeObject(e)
                    }.bind(this))
                },
                reorderSharedFilters: function (e) {
                    return this.reorderFilters(e, "activeSharedFilters")
                },
                reorderPersonalFilters: function (e) {
                    return this.reorderFilters(e, "activePersonalFilters")
                },
                reorderFilters: function (e, t) {
                    var n = this.get(t),
                        r = e.map(function (e) {
                            return n.findProperty("id", e)
                        });
                    return this.set(t, r), this.saveFiltersOrder(t)
                },
                saveFiltersOrder: function (e) {
                    var t = this.get(e).mapProperty("id");
                    return Em.Resource.ajax({
                        type: "PUT",
                        url: "/api/v2/user_views/reorder",
                        dataType: "json",
                        data: {
                            user_view_ids: t
                        }
                    }).done(function () {
                        this.refreshFilters(), this.showMessage(I18n.t("txt.user_filters.reorder_notice"))
                    }.bind(this))
                },
                refreshFilters: function () {
                    this.get("manager").refreshFiltersWithDefinitions()
                },
                showMessage: function (e) {
                    t("lib/growl").notice(e)
                }
            }).reopenClass({
                toString: function () {
                    return "FilterListEditorController"
                }
            });
        n.exports = a
    }
}), this.require.define({
    "controllers/filter_manager_controller": function (e, t, n) {
        var r = t("lib/features").consumer,
            i = t("lib/lotus/global_events"),
            s = Em.Object.extend(r, t("lib/fetch_control"), t("lib/controllers/activity_watching"), {
                currentUser: Zd.get("currentUser"),
                isFetching: !1,
                isPreviewing: !1,
                globalPermissions: Zd.get("globalPermissions"),
                currentFilter: null,
                urlType: null,
                active: !1,
                setup: function (e) {
                    this.setFilter(e), this.set("active", !0), this.watchForActivity()
                },
                deactivate: function () {
                    this.set("active", !1)
                },
                setFilter: function (e) {
                    this.get("currentFilter") && this.set("currentFilter.selected", !1), this.set("currentFilter", e), e.set("selected", !0), this.get("listFilterController").fetchData("show")
                },
                onBrowserActivity: function () {
                    if (!this.get("active")) return;
                    this.refreshCurrentFilterContent()
                },
                setFilterById: function (e) {
                    var t = this.get("filters").findProperty("id", e);
                    t && Zd.Routes.goToHash(t.get("href"))
                },
                setFilterForPreview: function (e) {
                    this.get("currentFilter") && this.set("currentFilter.selected", !1), this.get("filters").pushObject(e), this.set("currentFilter", e), e.setProperties({
                        selected: !0,
                        previewing: !0,
                        viewType: "preview"
                    }), e.refreshContent()
                },
                curFilterIndex: function () {
                    var e = 0,
                        t = this.get("currentFilter");
                    return t && this.get("filters") && (e = this.get("filters").indexOf(t)), e
                }.property("currentFilter", "filters.@each").cacheable(),
                refreshFilters: function () {
                    return this.get("filters").refresh()
                },
                expireFilters: function () {
                    this.get("filters").expireContent()
                },
                refreshCurrentFilterContent: function () {
                    this.get("currentFilter") && this.get("currentFilter").refreshContent()
                },
                refreshCurrentFilterContentAndGoToPageOne: function () {
                    this.get("currentFilter") && (this.set("currentFilter.page", 1), this.get("currentFilter").refreshContent())
                },
                refreshFiltersWithDefinitions: function () {
                    var e;
                    return this.set("isFetching", !0), e = this.refreshFilters().done(_(function (e) {
                        this.set("isFetching", !1)
                    }).bind(this)), this.expireFilters(), this.refreshCurrentFilterContentAndGoToPageOne(), e
                },
                refreshFiltersAndSelectFirst: function () {
                    this.refreshFilters().done(this.selectFirst.bind(this))
                },
                selectFirst: function () {
                    var e = this.get("filters.firstObject");
                    return e && Zd.Routes.goToHash(e.get("href")), e
                },
                exportConfirmationKey: "txt.filters.export_as_csv.confirmation",
                exportAsCsv: function () {
                    var e = t("lib/growl");
                    Em.Resource.ajax({
                        type: "GET",
                        url: "/api/v2/%@/%@/export.json".fmt(this.get("urlType"), this.get("currentFilter.id")),
                        dataType: "json"
                    }).done(function (t) {
                        t["export"].status === "enqueued" ? e.notice(I18n.t(this.get("exportConfirmationKey"), {
                            userEmail: this.get("currentUser.email")
                        })) : t["export"].status === "throttled" && e.error(I18n.t("txt.filters.export_as_csv.throttled"))
                    }.bind(this)).fail(function (t) {
                        var n = JSON.parse(t.responseText).error;
                        e.error(n)
                    })
                },
                onFilterChanged: function (e) {
                    var t = this.get("currentFilter");
                    e === t || !t ? this.refreshFiltersAndSelectFirst() : this.refreshFilters()
                },
                willDestroy: function () {
                    this.deactivate()
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/filter_ui_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/views/view_registrar_mixin"), {
            app: Zendesk,
            manager: Em.required(),
            sectionName: Em.required(),
            focusedView: "contentView",
            indexView: Em.computed.oneWay("views.filterIndexList"),
            contentView: Em.computed.oneWay("views.filterContentList"),
            curFilter: Em.computed.oneWay("manager.currentFilter"),
            curFilterIndex: Em.computed.oneWay("manager.curFilterIndex"),
            isActive: function () {
                return this.get("app.section") === this.get("sectionName")
            }.property("app.section").cacheable(),
            activateContentView: function (e) {
                var t = e.get("elementInFocus.href");
                t != null && Zd.Routes.goToHashNow(t), this.focusContentView()
            },
            focusContentView: function () {
                this.set("focusedView", "contentView")
            },
            focusIndexView: function () {
                this.set("focusedView", "indexView")
            },
            _applyFocus: function () {
                Em.run.next(this, function () {
                    var e = this.get(this.get("focusedView") || " ");
                    e && e.focus()
                })
            },
            filterDidChange: function () {
                if (!this.get("indexView") || !this.get("contentView")) return;
                this.set("indexView.focusIndex", this.get("curFilterIndex")), this.get("contentView").navigateFirst()
            }.observes("curFilterIndex"),
            apllyFocusWatchdog: function () {
                this.get("isActive") && this._applyFocus()
            }.observes("focusedView", "curFilter.content.@each", "isActive")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/incidents_controller": function (e, t, n) {
        var r = t("controllers/ticket_selection"),
            i = t("controllers/ticket_list_controller"),
            s = i.extend({
                workspace: null,
                filter: Em.computed.oneWay("workspace.ticket.incidentsFilter"),
                paginationController: Em.computed.oneWay("filter"),
                selectionController: function () {
                    return r.create({
                        controller: this
                    })
                }.property("filter").cacheable()
            });
        n.exports = s
    }
}), this.require.define({
    "views/modals/backdropless_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["backdropless-modal"],
            options: {
                backdrop: !1
            },
            didInsertElement: function () {
                this._super.apply(this, arguments);
                var e = this;
                this.destroyUnlessClickedInside = function (t) {
                    $(t.target).is(".backdropless-modal *") || e.destroy()
                }, $("html").on("click.backdropless-modal", this.destroyUnlessClickedInside), $("body").on("click.dropdown.backdropless-modal", '[data-toggle="dropdown"]', this.destroyUnlessClickedInside)
            },
            willDestroyElement: function () {
                $("html").off("click.backdropless-modal", this.destroyUnlessClickedInside), $("body").off("click.dropdown.backdropless-modal", '[data-toggle="dropdown"]', this.destroyUnlessClickedInside)
            }
        }).reopenClass({
            preservesContext: !0
        });
        n.exports = r
    }
}), this.require.define({
    "views/modals/ipm/feature_notifications_modal": function (e, t, n) {
        var r = t("views/modals/backdropless_modal").extend({
            classNames: ["feature-notifications"],
            title: I18n.t("txt.ipm.feature_notifications.title"),
            templateName: "templates/modals/ipm/feature_notifications",
            didInsertElement: function () {
                this._super(), this.dismissCurrent()
            },
            featureNotifications: Em.computed.oneWay("controller.sortedFeatureNotifications"),
            totalCount: Em.computed.oneWay("featureNotifications.length"),
            currentIndex: 0,
            currentPage: function () {
                return this.get("currentIndex") + 1
            }.property("currentIndex").cacheable(),
            current: function () {
                return this.get("featureNotifications")[this.get("currentIndex")]
            }.property("currentIndex", "featureNotifications").cacheable(),
            showPagination: function () {
                return this.get("totalCount") > 1
            }.property("totalCount").cacheable(),
            goToPrev: function () {
                this.set("currentIndex", ((this.get("currentIndex") || this.get("totalCount")) - 1) % this.get("totalCount"))
            },
            goToNext: function () {
                this.set("currentIndex", (this.get("currentIndex") + 1) % this.get("totalCount"))
            },
            dismissCurrent: function () {
                this.get("controller").dismissFeatureNotification(this.get("current"))
            }.observes("current")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/ipm/feature_notifications_controller": function (e, t, n) {
        var r = t("views/modals/ipm/feature_notifications_modal"),
            i = Em.Object.extend(t("lib/user_settings_consumer"), {
                viewClass: r,
                featureNotifications: Em.computed.singleton("models/ipm/feature_notifications"),
                sortedFeatureNotifications: Em.computed.oneWay("featureNotifications.sorted"),
                unreadFeatureNotificationCount: Em.computed.oneWay("featureNotifications.unread.length"),
                hasUnreadFeatureNotifications: Em.computed.bool("unreadFeatureNotificationCount"),
                showFeatureNotificationsOnBoot: Em.computed.and("userSettings.showFeatureNotifications", "hasUnreadFeatureNotifications"),
                showModal: function () {
                    this.get("viewClass").create({
                        controller: this
                    }).append()
                },
                dismissFeatureNotification: function (e) {
                    e.get("dismissed") || e.dismiss()
                },
                toggleFeatureNotifications: function () {
                    this.get("userSettings").toggleProperty("showFeatureNotifications")
                },
                toggleFeatureNotificationsText: function () {
                    var e = this.get("userSettings.showFeatureNotifications"),
                        t = e ? "dont_show_messages_at_login" : "show_messages_at_login";
                    return I18n.t("txt.ipm.feature_notifications." + t)
                }.property("userSettings.showFeatureNotifications")
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "Feature Notifications Controller"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/launchpad/add_agents_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = Em.Object.extend({
                inviteAgents: function (e) {
                    $.post("/getting_started/invite_agents.json", {
                        data: {
                            email: e.get("agents")
                        }
                    }).always(function () {
                        e.didSubmit()
                    }).done(function () {
                        r.alert(I18n.t("txt.launchpad.add_agents.alert.success")), e.clearList()
                    }).fail(function () {
                        r.error(I18n.t("txt.launchpad.add_agents.alert.failure"))
                    })
                }
            }).reopenClass({
                toString: function () {
                    return "AddAgentsController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/launchpad/add_facebook_controller": function (e, t, n) {
        var r = Em.Object.extend({
            launchpadTasks: Em.computed.singleton("models/launchpad/launchpad_tasks"),
            jetpackTask: function () {
                return this.get("launchpadTasks").filterProperty("key", "addFacebook")[0]
            }.property("launchpadTasks.content.@each").volatile(),
            taskComplete: function () {
                return this.get("jetpackTask.status") === "complete"
            }.property().volatile(),
            addFacebook: function () {
                window.location.href = "/facebook/auth/request_oauth"
            },
            goToSettings: function () {
                Zd.Routes.goToHash("/admin/facebook")
            }
        }).reopenClass({
            toString: function () {
                return "AddFacebookController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/launchpad/add_twitter_controller": function (e, t, n) {
        var r = Em.Object.extend({
            launchpadTasks: Em.computed.singleton("models/launchpad/launchpad_tasks"),
            jetpackTask: function () {
                return this.get("launchpadTasks").filterProperty("key", "addTwitter")[0]
            }.property("launchpadTasks.content.@each").volatile(),
            addAccount: function () {
                window.location.href = "/account/channels/authorize"
            },
            goToSettings: function () {
                Zd.Routes.goToHash("/admin/twitter")
            }
        }).reopenClass({
            toString: function () {
                return "AddTwitterController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/launchpad/test_ticket_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = Em.Object.extend({
                launchpadTasks: Em.computed.singleton("models/launchpad/launchpad_tasks"),
                jetpackTask: function () {
                    return this.get("launchpadTasks").filterProperty("key", "testTicket")[0]
                }.property("launchpadTasks.content.@each").volatile(),
                taskComplete: function () {
                    return this.get("jetpackTask.status") === "complete"
                }.property("jetpackTask.status").volatile(),
                create: function () {
                    $("#test_ticket_button").attr("disabled", "disabled"), $.ajax({
                        url: "/getting_started/test_ticket"
                    }).done(function () {
                        r.alert(I18n.t("txt.launchpad.test_ticket.alert.success"));
                        var e = this.get("jetpackTask");
                        e.set("status", "started"), e.save()
                    }.bind(this))
                }
            }).reopenClass({
                toString: function () {
                    return "TestTicketController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/nav_bar_controller": function (e, t, n) {
        var r = t("lib/tracking"),
            i = Em.Object.extend(t("lib/features").consumer, {
                init: function () {
                    var e = Zd.Routes.staticPaths;
                    return this.setProperties({
                        dashboardURL: e.dashboardURL,
                        filterURL: e.filterURL,
                        userFilterURL: e.userFilterURL,
                        searchURL: e.searchURL,
                        reportingURL: e.reportingURL
                    }), this._super()
                },
                application: Zd,
                currentAccount: t("lib/current_account"),
                currentSection: Em.computed.oneWay("application.section"),
                helpCenterSettings: Em.computed.alias("currentAccount.helpCenterSettings"),
                dashboardController: Em.computed.singleton("controllers/dashboard/dashboard_controller"),
                adminMenuController: t("controllers/admin_menu_controller"),
                currentUser: Zd.currentUser,
                globalPermissions: Zd.globalPermissions,
                showDashboard: function () {
                    this.get("dashboardController").setDefaultFilter(), this._goToHash(this.get("dashboardURL"))
                },
                showTicketFilters: function () {
                    this._goToHash(this.get("filterURL"))
                },
                showUserFilters: function () {
                    this._goToHash(this.get("userFilterURL"))
                },
                showSearch: function () {
                    this._goToHash(this.get("searchURL"))
                },
                showAdmin: function () {
                    this.get("adminMenuController").show()
                },
                shouldShowReporting: Em.computed.and("hasReporting", "canViewReports"),
                hasReporting: Em.computed.oneWay("currentAccount.settings.lotus_reporting"),
                canViewReports: Em.computed.oneWay("currentUser.userPermissions.canViewReports"),
                shouldShowHelpCenter: Em.computed.bool("helpCenterSettings.showHelpCenterIcon"),
                shouldShowUserViews: function () {
                    return this.get("features.hasUserViews") && this.get("globalPermissions.showUserViews")
                }.property("features.hasUserViews", "globalPermissions.showUserViews").cacheable(),
                showReporting: function () {
                    r("Reporting", "Lotus-general"), this._goToHash(this.get("reportingURL"))
                },
                showHelpCenter: function () {
                    this.get("helpCenterSettings.helpCenterConfigured") ? window.open("/hc") : t("controllers/help_center_onboarding/controller").instance().show()
                },
                _goToHash: function (e) {
                    Zd.Routes.goToHash(e)
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/new_organization_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = t("models/organization"),
            s = Em.Object.extend({
                user: null,
                modal: null,
                previousRoute: null,
                newOrganization: function (e) {
                    e && this.set("previousRoute", e.previousRoute), this.set("organization", i.create({})), this.showModal("create")
                },
                newOrganizationForUser: function (e, t, n) {
                    var r;
                    n && (r = [n]), this.set("organization", i.create({
                        name: t,
                        domain_names: r
                    })), this.set("user", e), this.showModal("createWithUser")
                },
                showModal: function (e) {
                    var n = t("views/modals/new_organization").create({
                        controller: this,
                        saveAction: e
                    }).append();
                    this.set("modal", n)
                },
                cancel: function () {
                    var e = this.get("previousRoute");
                    this._cancel(), e && Zendesk.Routes.goToHash(e)
                },
                create: function () {
                    this._create()
                },
                createWithUser: function () {
                    this._create(!0)
                },
                workspace: function () {
                    return Zd.workspaces.get("current")
                }.property("Zd.workspaces.current"),
                ticket: Em.computed.oneWay("workspace.ticket"),
                _create: function (e) {
                    var t = this.get("organization"),
                        n = this.get("user");
                    t.save().done(_(function () {
                        var i = this.get("ticket");
                        r.hideErrors(), r.notice(I18n.t("txt.organizations.create.success_msg", {
                            name: t.get("name")
                        })), e ? (n.set("organization", t), n.save({
                            update: !1
                        }), t.expireNow(), i ? (i.set("organization", t), Zendesk.Routes.goToHash(this.get("workspace.toolbarOrganizationHref"))) : Zendesk.Routes.goToHash("#/users/" + n.get("id") + "/organization/tickets")) : Zendesk.Routes.goToHash("#/organizations/" + t.get("id")), this._cancel()
                    }).bind(this))
                },
                _cancel: function () {
                    this.set("organization", null), this.set("user", null), this.get("modal") && this.get("modal").hideModal(), this.set("modal", null), this.set("previousRoute", null)
                }
            });
        n.exports = s
    }
}),
function () {
    var e, t, n = require("lib/growl"),
        r = require("lib/custom_roles_consumer"),
        i = Em.Object.extend({
            currentUser: Zd.currentUser,
            toString: function () {
                return "NewUserController"
            }
        }),
        s = i.createWithMixins(r, {
            newUser: function (e) {
                t = e && e.previousRoute, this.get("customRoles").fetch(), this.set("currentOperation", "newUser"), this.set("user", Zendesk.User.create({
                    userPermissions: {
                        editRole: !0
                    }
                })), this.showModal(I18n.t("txt.users.new.header"), "create")
            },
            newUserWithOrganization: function (e) {
                this.set("currentOperation", "newUserWithOrganization"), this.set("user", Zendesk.User.create({})), this.set("userOrganization", e), this.showModal(I18n.t("txt.users.add_in_organization.header"), "createWithOrganization")
            },
            newUserFromTicket: function (e) {
                this.set("user", Zendesk.User.create(e || {})), this.showModal(I18n.t("txt.users.new.header"), "createFromTicket")
            },
            showModal: function (t, n) {
                e = require("views/modals/new_user").create({
                    controller: this,
                    title: t,
                    saveAction: n,
                    canEditRole: this.get("currentUser.isAdmin")
                }).append()
            },
            cancel: function () {
                var e = t;
                this._cancel(), e && Zendesk.Routes.goToHash(e)
            },
            create: function () {
                var e = this.get("user"),
                    t = this;
                e.save().done(function () {
                    Zendesk.Routes.goToHash("#/users/" + e.get("id")), n.hideErrors(), n.notice(I18n.t("txt.users.create.success_msg", {
                        name: e.get("name")
                    })), t._cancel()
                })
            },
            createWithOrganization: function () {
                this.get("user").set("organization_id", this.get("userOrganization.id")), this.create()
            },
            createFromTicket: function () {
                var e = this.get("user"),
                    t = this;
                e.save().done(function () {
                    Zd.workspaces.set("current.ticket.requester_id", e.get("id")), n.hideErrors(), n.notice(I18n.t("txt.users.create.success_msg", {
                        name: e.get("name")
                    })), Zendesk.Routes.goToHash(Zd.workspaces.get("current.toolbarUserHref")), t._cancel()
                })
            },
            updateRole: function (e) {
                this.get("user").setRole(e)
            },
            _cancel: function () {
                this.set("user", null), this.set("userOrganization", null), e && e.hideModal(), e = null, t = null
            }
        });
    Zendesk.set("newUserController", s)
}(), this.require.define({
    "controllers/onboarding_tooltip_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/user_settings_consumer"), {
            currentTooltipIndex: 0,
            totalTooltipCount: function () {
                return this.get("tooltipElements").length
            }.property().volatile(),
            tooltipElements: [{
                title: I18n.t("txt.onboarding.launchpad.title"),
                body: I18n.t("txt.onboarding.launchpad.body"),
                frameCSS: {
                    opacity: 1,
                    left: "405px",
                    right: "auto",
                    top: "205px",
                    bottom: "auto",
                    zIndex: 1e3
                },
                diamondCSS: {
                    left: "-6px",
                    right: "auto",
                    bottom: "50px",
                    top: "auto"
                },
                nextTipCSS: {
                    top: "50px",
                    bottom: "auto",
                    left: "90px",
                    right: "auto"
                }
            }, {
                title: I18n.t("txt.onboarding.views.title"),
                body: I18n.t("txt.onboarding.views.body"),
                frameCSS: {
                    opacity: 1,
                    left: "80px",
                    right: "auto",
                    top: "50px",
                    bottom: "auto",
                    zIndex: 1e3
                },
                diamondCSS: {
                    top: "60px",
                    bottom: "auto",
                    left: "-6px",
                    right: "auto"
                },
                nextTipCSS: {
                    top: "70px",
                    bottom: "auto",
                    left: "40px",
                    right: "auto"
                }
            }, {
                title: I18n.t("txt.onboarding.add.title"),
                body: I18n.t("txt.onboarding.add.body"),
                frameCSS: {
                    opacity: 1,
                    left: "40px",
                    right: "auto",
                    top: "60px",
                    bottom: "auto",
                    zIndex: 1e3
                },
                diamondCSS: {
                    top: "-6px",
                    bottom: "auto",
                    left: "40px",
                    right: "auto"
                },
                nextTipCSS: {
                    top: "95px",
                    bottom: "auto",
                    left: "90px",
                    right: "auto"
                }
            }, {
                title: I18n.t("txt.onboarding.search.title"),
                body: I18n.t("txt.onboarding.search.body"),
                frameCSS: {
                    opacity: 1,
                    left: "80px",
                    right: "auto",
                    top: "95px",
                    bottom: "auto",
                    zIndex: 1e3
                },
                diamondCSS: {
                    top: "60px",
                    bottom: "auto",
                    left: "-6px",
                    right: "auto"
                },
                nextTipCSS: {
                    top: "115px",
                    bottom: "auto",
                    left: "auto",
                    right: "10px"
                }
            }, {
                title: I18n.t("txt.onboarding.learnmore.title"),
                body: I18n.t("txt.onboarding.learnmore.body"),
                frameCSS: {
                    opacity: 1,
                    left: "auto",
                    right: "10px",
                    top: "105px",
                    bottom: "auto",
                    zIndex: 1e3
                },
                diamondCSS: {
                    top: "-6px",
                    bottom: "auto",
                    left: "auto",
                    right: "40px"
                },
                nextTipCSS: {
                    top: "205px",
                    bottom: "auto",
                    left: "415px",
                    right: "auto"
                }
            }],
            title: function () {
                return this.get("tooltipElements")[this.get("currentTooltipIndex")].title || ""
            }.property("currentTooltipIndex").volatile(),
            body: function () {
                return this.get("tooltipElements")[this.get("currentTooltipIndex")].body || ""
            }.property("currentTooltipIndex").volatile(),
            steps: function () {
                return I18n.t("txt.onboarding.learnmore.steps", {
                    number: this.get("currentTooltipIndex") + 1,
                    total: this.get("totalTooltipCount")
                })
            }.property("currentTooltipIndex").volatile(),
            whatsNext: function () {
                return this.get("currentTooltipIndex") < this.get("totalTooltipCount") - 1 ? I18n.t("txt.ticket.next") : I18n.t("date.datepicker.close_text")
            }.property("currentTooltipIndex").volatile(),
            setupTooltip: function (e) {
                if (this.get("userSettings.showOnboardingTooltips")) {
                    var n = t("lib/current_account");
                    setTimeout(function () {
                        n.get("isTrialAccount") && this.startTooltip()
                    }.bind(this), 1e3)
                } else e()
            },
            startTooltip: function () {
                var e = this;
                this.set("tooltipView", Em.View.create({
                    templateName: "templates/layouts/onboarding_tooltip",
                    controller: e,
                    didInsertElement: function () {
                        this.$(".tooltip-mask").animate({
                            opacity: 1
                        }, 500, function () {
                            e.positionTooltip(0)
                        })
                    }
                })), this.get("tooltipView").append()
            },
            positionTooltip: function (e) {
                this.set("currentTooltipIndex", e), $("#onboarding-tooltip .diamond").css(this.get("tooltipElements." + e + ".diamondCSS")), $("#onboarding-tooltip").animate(this.get("tooltipElements." + e + ".frameCSS"), 500)
            },
            closeTooltip: function () {
                this.set("userSettings.showOnboardingTooltips", !1);
                var e = this;
                $("#onboarding-tooltip").animate({
                    opacity: 0
                }, 250, function () {
                    $(".tooltip-mask").animate({
                        opacity: 0
                    }, 250, function () {
                        e.get("tooltipView").remove()
                    })
                })
            },
            next: function () {
                $("#onboarding-tooltip").animate({
                    opacity: 0
                }, 100, function () {
                    $("#onboarding-tooltip").css(this.get("tooltipElements." + this.get("currentTooltipIndex") + ".nextTipCSS"))
                }.bind(this));
                var e = this.get("totalTooltipCount") - 1;
                if (this.get("currentTooltipIndex") < e) {
                    var t = this.get("currentTooltipIndex") + 1;
                    t > e && (t = 0), setTimeout(function () {
                        this.positionTooltip(t), this.set("currentTooltipIndex", t)
                    }.bind(this), 200)
                } else this.closeTooltip()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/organization_controller": function (e, t, n) {
        var r = t("models/filter"),
            i = t("controllers/ticket_list_controller"),
            s = t("controllers/user_list_controller"),
            o = t("controllers/ticket_selection"),
            u = t("controllers/item_selection"),
            a = t("lib/profile_tracker"),
            f = t("lib/growl"),
            l = t("models/filter/user_filter/org_user_filter_factory"),
            c = Em.Object.extend(t("lib/clean_up_on_destroy"), t("lib/fetch_control"), {
                init: function () {
                    this.setupNavigationItems(), this.setupTicketsFilter(), this.setupUsersFilter(), this.setupSubmittedTicketsController(), this.setupUsersController(), this._super()
                },
                organizationFields: function () {
                    return t("models/custom_fields/custom_fields").instance("organization")
                }.property().cacheable(),
                reset: function () {
                    this.get("ticketsFilter").reset(), this.get("usersFilter").reset()
                },
                cleanUpOnDestroy: ["submittedTicketsController"],
                destroy: function () {
                    var e = this.get("navigationItemsForOrganization");
                    e && e.invoke("destroy"), this.set("navigationItemsForOrganization", null), this._super()
                },
                groups: Em.computed.singleton("models/groups"),
                tickets: Em.computed.oneWay("ticketsFilter.content"),
                users: Em.computed.oneWay("usersFilter.content"),
                organization: Em.computed.oneWay("_organization"),
                _organization: Em.computed.any("ticket.organization", "user.organization"),
                organizationDidChange: function () {
                    var e = this.get("organization.id");
                    if (e == null) return;
                    this.get("ticketsFilter").updateForOrg(e), this.get("usersFilter").updateForOrg(e)
                }.observes("organization"),
                setupNavigationItems: function () {
                    this.set("navigationItemsForOrganization", t("lib/views/organization_info_nav_item").navigationItems(this))
                },
                setupTicketsFilter: function () {
                    var e = r.createDynamic({
                        groupBy: "status",
                        groupOrder: "asc",
                        sortBy: "updated",
                        sortOrder: "desc",
                        output: ["status", "id", "subject", "requester", "created", "updated", "group", "assignee"],
                        conditions: {
                            all: [{
                                field: "organization",
                                operator: "is",
                                value: this.get("organization.id")
                            }],
                            any: []
                        }
                    });
                    e.updateForOrg = function (e) {
                        this.set("conditions.all.firstObject.value", e)
                    }, this.set("ticketsFilter", e)
                },
                setupUsersFilter: function () {
                    var e = l();
                    this.set("usersFilter", e), e.updateForOrg = function (e) {
                        this.set("relatedOrgId", e)
                    }
                },
                setupSubmittedTicketsController: function () {
                    var e = i.createWithMixins({
                        controller: this,
                        paginationController: Em.computed.oneWay("controller.ticketsFilter"),
                        filter: Em.computed.oneWay("controller.ticketsFilter"),
                        title: I18n.t("txt.organization.section.tickets"),
                        showFooter: function () {
                            return this.get("controller.section") === "tickets" && this.get("selectionController.hasSelection")
                        }.property("controller.section", "selectionController.hasSelection").cacheable(),
                        toString: function () {
                            return "OrganizationController::submittedTicketsController"
                        }
                    }),
                        t = o.create({
                            controller: e
                        });
                    e.set("selectionController", t), this.set("submittedTicketsController", e)
                },
                setupUsersController: function () {
                    var e = s.extend({
                        showFooter: function () {
                            return this.get("controller.section") === "users" && this.get("selectionController.hasSelection")
                        }.property("controller.section", "selectionController.hasSelection").cacheable(),
                        paginationController: Em.computed.oneWay("controller.usersFilter"),
                        filter: Em.computed.oneWay("controller.usersFilter"),
                        toString: function () {
                            return "OrganizationController::usersController"
                        }
                    }).create({
                        controller: this,
                        title: I18n.t("txt.organization.section.users")
                    }),
                        t = u.create({
                            controller: e
                        });
                    e.set("selectionController", t), this.set("usersController", e)
                },
                addUser: function () {
                    a.track("actions:add_user"), Zd.get("newUserController").newUserWithOrganization(this.get("organization"))
                },
                deleteOrganization: function () {
                    var e = this.get("organization"),
                        t = confirm(I18n.t("txt.organizations.delete_confirm"));
                    t && (a.track("actions:delete"), e.destroyResource().done(_(function (t) {
                        f.notice(I18n.t("txt.organizations.delete_success_msg", {
                            name: e.get("name")
                        }));
                        var n;
                        Zd.workspaces.get("current.ticket") ? (n = Zd.workspaces.get("current.ticket.requester"), n.expireNow(), Zendesk.Routes.goToHash("#/tickets/" + Zd.workspaces.get("current.ticket.id") + "/requester/tickets")) : Zd.workspaces.get("current.user") ? (n = Zd.workspaces.get("current.user"), n.expireNow(), Zendesk.Routes.goToHash("#/users/" + n.get("id"))) : Zendesk.Routes.goToHash("#/dashboard")
                    }).bind(this)))
                },
                expirableObjects: {
                    all: ["organization", "groups", "organization.related", "organizationFields"],
                    tickets: ["organization", "tickets", "organization.related"],
                    users: ["organization", "users", "organization.related"]
                }
            }).reopenClass({
                toString: function () {
                    return "OrganizationController"
                }
            });
        n.exports = c
    }
}), this.require.define({
    "controllers/reporting_tutorial_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/user_settings_consumer"), {
            tooltipView: t("views/reporting/reporting_tooltip"),
            learnmoreButton: t("views/reporting/learnmore_button"),
            setupTutorial: function () {
                $("header.sub-nav a.learn_more").length === 0 && this.get("learnmoreButton").append(), this.get("userSettings.showReportingVideoTutorial") && (this.showTooltip(), this.set("userSettings.showReportingVideoTutorial", !1))
            },
            showTooltip: function () {
                this.get("tooltipView").append()
            }
        }).reopenClass({
            toString: function () {
                return "ReportingTutorialController"
            }
        });
        n.exports = r.create()
    }
}), this.require.define({
    "views/modals/downgrade_role_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["modal", "role-modal"],
            title: I18n.t("txt.user.actions.role.downgrade.title"),
            body: I18n.t("txt.user.actions.role.downgrade.description2"),
            confirmLabel: I18n.t("txt.user.actions.role.downgrade.confirm"),
            cancelLabel: I18n.t("txt.user.actions.role.downgrade.cancel")
        });
        n.exports = r
    }
}), this.require.define({
    "views/modals/upgrade_role_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            classNames: ["modal", "role-modal"],
            title: I18n.t("txt.user.actions.role.upgrade.title"),
            body: I18n.t("txt.user.actions.role.upgrade.description2"),
            confirmLabel: I18n.t("txt.user.actions.role.upgrade.confirm"),
            cancelLabel: I18n.t("txt.user.actions.role.upgrade.cancel")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/roles_controller": function (e, t, n) {
        var r = Em.Object.extend({
            modal: null,
            updateRole: function (e, n, r) {
                var i = t("models/role_change").instance(n, r);
                this.set("userController", e), i.isChanging() ? i.isUpgrading() ? this._displayUpgradeConfirmation() : i.isDowngrading() && this._displayDowngradeConfirmation() : this._confirmRoleChange()
            },
            userDidCancel: function () {
                this._cancelRoleChange(), this._dismissModal()
            },
            userDidConfirm: function () {
                this._confirmRoleChange(), this._dismissModal()
            },
            _displayUpgradeConfirmation: function () {
                this.set("modal", t("views/modals/upgrade_role_modal").create({
                    target: this
                })), this.get("modal").append()
            },
            _displayDowngradeConfirmation: function () {
                this.set("modal", t("views/modals/downgrade_role_modal").create({
                    target: this
                })), this.get("modal").append()
            },
            _confirmRoleChange: function () {
                this.get("userController").confirmRoleChange()
            },
            _cancelRoleChange: function () {
                this.get("userController").cancelRoleChange()
            },
            _dismissModal: function () {
                this.get("modal").hideModal(), this.set("modal", null)
            }
        }).reopenClass({
            toString: function () {
                return "RolesController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/screencast_controller": function (e, t, n) {
        var r = Em.Object.extend({
            domainUrl: null,
            recorderId: null,
            screencast: null,
            recorder: null,
            comment: null,
            setScreencast: function (e) {
                this.set("screencast", e)
            },
            showPreviewForRecorded: function (e) {
                var t = e.context;
                this.setScreencast(t)
            },
            removeScreencast: function () {
                this.set("screencast", null)
            },
            deleteScreencast: function (e, t) {
                e.removeScreencast(t)
            },
            startRecording: function (e) {
                var t = this;
                this.set("comment", e), this._populateInfoFromCurrentAccount(), $.getScript(this._urlToScreenrLibray()).done(function () {
                    t._setUpAndRecord()
                })
            },
            _populateInfoFromCurrentAccount: function () {
                var e = t("lib/settings");
                this.get("domainUrl") == null && this.set("domainUrl", e.get("screenrDomain")), this.get("recorderId") == null && this.set("recorderId", e.get("screenrTicketRecorderId"))
            },
            _setUpAndRecord: function () {
                this._setUpRecorder(), this.recorder.record()
            },
            _setUpRecorder: function () {
                var e = this;
                if (this.recorder == null) {
                    var t = Screenr.Recorder({
                        id: this.recorderId,
                        hideAllFields: !0,
                        scrollToTop: !0
                    });
                    t.setUserName("", !1), t.setUserEmail("", !1), t.setSubject("", !1), t.setDescription("", !1), t.setOnComplete(function (t) {
                        e._onRecordingCompleted(t)
                    }), t.setOnCancel(function (t) {
                        e._onRecordingCanceled()
                    }), this.recorder = t
                }
            },
            _onRecordingCompleted: function (e) {
                var t, n = this.get("comment.recordedScreencasts").length + 1;
                t = {
                    id: e.id,
                    url: e.embedUrl,
                    thumbnail: e.thumbnailUrl,
                    position: n
                }, this.get("comment").addScreencast(t), this._resetCommentForRecorder(), window.Screenr.removeBar()
            },
            _onRecordingCanceled: function () {
                this._resetCommentForRecorder()
            },
            _resetCommentForRecorder: function () {
                this.set("comment", null)
            },
            _urlToScreenrLibray: function () {
                return this._host_with_protocol(this.domainUrl) + "/api/recorder"
            },
            _host_with_protocol: function (e) {
                var t = e.replace(/.*?:\/\//g, ""),
                    n = "https:" == this._protocol() ? "https://" : "http://";
                return n + t
            },
            _protocol: function () {
                return document.location.protocol
            }
        }).reopenClass(t("lib/lotus/singleton"), {
            toString: function () {
                return "ScreencastController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/support_topics_controller": function (e, t, n) {
        function i(e) {
            var t = "https://support.zendesk.com/api/v2/forums/" + e + "/topics.json?include=users";
            return Em.ResourceCollection.create({
                type: r,
                autoFetch: !1,
                expireIn: 86400,
                url: t,
                parse: function (e) {
                    var t = {};
                    return e.users.forEach(function (e) {
                        t[e.id] = e
                    }), e.topics.forEach(function (e) {
                        e.submitter = t[e.submitter_id]
                    }), e.topics
                }
            })
        }
        var r = t("models/support_topic"),
            s = i(1),
            o = i(184361),
            u = i(202607),
            a = i(33615),
            f = [s, o, u, a],
            l = Ember.ArrayController.extend({
                refresh: function () {
                    var e = f.map(function (e) {
                        return e.expireNow(), e.fetch({
                            dataType: "jsonp"
                        })
                    }),
                        t = this;
                    $.when.apply($, e).then(function () {
                        var e = [];
                        f.forEach(function (t) {
                            e.push.apply(e, t.get("content"))
                        }), e.sort(function (e, t) {
                            return e = e.get("createdAt"), t = t.get("createdAt"), e < t ? 1 : e > t ? -1 : 0
                        }), t.set("content", e)
                    })
                }
            }).reopenClass({
                toString: function () {
                    return "SupportTopicsController"
                }
            });
        n.exports = l
    }
}), this.require.define({
    "controllers/suspended_account_modal_controller": function (e, t, n) {
        var r = Em.Object.extend(t("lib/account_consumer"), {
            modalView: t("views/modals/suspended_account_modal"),
            init: function () {
                this.set("currentUser", Zd.currentUser)
            },
            daysSinceTrialExpired: function () {
                var e = (new Date - this.get("currentAccount.trialExpiresOn")) / 864e5;
                return Math.ceil(e)
            }.property("currentAccount.trialExpiresOn").volatile(),
            ownerName: Em.computed.oneWay("currentAccount.owner.name"),
            isTrialAccount: Em.computed.oneWay("currentAccount.isTrialAccount"),
            isAccountOwner: Em.computed.oneWay("currentUser.isAccountOwner"),
            userType: function () {
                return this.get("isAccountOwner") ? "owner" : this.get("currentUser.role")
            }.property("isAccountOwner", "currentUser.role").cacheable(),
            showForSuspendedAccounts: function () {
                this.get("currentAccount.suspended") && (this.get("modalView").create({
                    controller: this
                }), this.get("isAccountOwner") || this.get("currentAccount.owner").fetch())
            }
        }).reopenClass({
            toString: function () {
                return "SuspendedAccountModalController"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/modals/confirm_modal": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            confirmLabel: I18n.t("txt.modal.confirm_modal.ok"),
            cancelLabel: I18n.t("txt.modal.confirm_modal.cancel"),
            target: function () {
                return this
            }.property().cacheable(),
            userDidConfirm: Em.K,
            userDidCancel: function () {
                this.hideModal()
            }
        });
        n.exports = r
    }
}), this.require.define({
    "views/modals/confirm_delete_suspended_modal": function (e, t, n) {
        var r = t("views/modals/confirm_modal").extend({
            title: I18n.t("txt.modal.confirm_delete_suspended_modal.header"),
            body: I18n.t("txt.modal.confirm_delete_suspended_modal.body")
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/suspended_ticket_actions": function (e, t, n) {
        var r = t("lib/growl"),
            i = $.when(),
            s = t("views/modals/confirm_delete_suspended_modal"),
            o = function (e, t, n) {
                var r = {
                    tickets: n
                }, i = 5;
                if (n.length > 1) {
                    r.headerMessage = I18n.t("txt.suspended_ticket.multi_%@.%@".fmt(e, t));
                    if (n.length > i) {
                        var s = n.length - i,
                            o = I18n.t("txt.admin.views.suspended_tickets.failed.other"),
                            u = I18n.t("txt.admin.views.suspended_tickets.failed.others", {
                                ticket_count: s
                            });
                        r.othersMessage = s > 1 ? u : o, r.tickets.length = i
                    }
                    r.footerMessage = I18n.t("txt.admin.views.suspended_tickets.failed.manual_recovery_notice_plural")
                } else r.headerMessage = I18n.t("txt.suspended_ticket.%@.%@".fmt(e, t)), r.footerMessage = I18n.t("txt.admin.views.suspended_tickets.failed.manual_recovery_notice_singular");
                return Em.TEMPLATES["templates/tickets/suspended_recovery_fail_notification"](r)
            }, u = function (e) {
                return "#" + e.join(", #")
            }, a = function (e, t, n) {
                var r = {};
                return n.length > 1 ? (r.tickets = u(n), I18n.t("txt.suspended_ticket.multi_" + e + "." + t, r)) : (r.ticket = u(n), I18n.t("txt.suspended_ticket." + e + "." + t, r))
            }, f = Em.Object.extend({
                showNotice: function (e, t, n) {
                    r.notice(a(e, t, n))
                },
                showError: function (e, t, n) {
                    r.error(a(e, t, n))
                },
                deleteTickets: function (e, t, n) {
                    if (!t) {
                        var i = s.create({
                            userDidConfirm: function () {
                                i.hideModal(), this.deleteTickets(e, !0, n)
                            }.bind(this)
                        }).append();
                        return
                    }
                    return $.ajax({
                        type: "DELETE",
                        url: "/api/v2/suspended_tickets/destroy_many.json?ids=%@".fmt(e.join())
                    }).done(function () {
                        r.notice(a("delete", "success", e)), n && n()
                    }).fail(this.showError.bind(this, "delete", "fail", e))
                },
                recoverTickets: function (e) {
                    return $.ajax({
                        type: "PUT",
                        url: "/api/v2/suspended_tickets/recover_many.json?ids=%@".fmt(e.join())
                    }).done(this.showNotice.bind(this, "recover", "success", e)).fail(function () {
                        var t = [];
                        (e || []).forEach(function (e) {
                            $.ajax({
                                async: !1,
                                type: "GET",
                                url: "/api/v2/suspended_tickets/%@.json".fmt(e),
                                success: function (e) {
                                    t.push(e.suspended_ticket)
                                }
                            })
                        }), r.error(o("recover", "fail", t))
                    })
                },
                recoverTicketManually: function (e) {
                    var n = Zd.Ticket.newTicket(),
                        r = n.get("forEditing"),
                        s;
                    return t("controllers/ticket_controller").openNewTicket(n.get("newTicketId")), e.get("author.email") && (s = Zd.User.create({
                        name: e.get("author.name"),
                        email: e.get("author.email")
                    })), r.set("subject", e.get("subject")), r.set("comment.body", e.get("content")), r.set("requester", s), i
                }
            }).reopenClass({
                toString: function () {
                    return "SuspendedTicketActions"
                }
            });
        n.exports = f.create()
    }
}), this.require.define({
    "controllers/suspended_modal_controller": function (e, t, n) {
        var r = t("controllers/suspended_ticket_actions"),
            i = Em.Object.extend({
                targetTicket: null,
                modal: null,
                getSourceInfo: function (e) {
                    var t = e.get("via.source.from.name") || e.get("author.name"),
                        n = e.get("via.source.from.address") || e.get("author.email");
                    return t && n ? {
                        name: t,
                        email: n
                    } : null
                },
                getAttachmentsInfo: function (e) {
                    var t = [],
                        n = e.get("attachments");
                    return n.length > 0 ? (n.forEach(function (e) {
                        t.push({
                            url: e.content_url,
                            filename: e.file_name
                        })
                    }), t) : null
                },
                showTicket: function () {
                    var e = this.get("targetTicket"),
                        n = {
                            ticket_id: e.get("id")
                        }, r = this.getSourceInfo(e),
                        i = !! r,
                        s = this.getAttachmentsInfo(e),
                        o = !! s,
                        u = t("views/modals/dynamic_modal").create({
                            classNames: ["suspended-ticket-modal"],
                            controller: this,
                            templateName: "templates/modals/suspended_ticket_modal",
                            title: I18n.t("txt.suspended_ticket.info_title_v2", n),
                            showFrom: i,
                            from: I18n.t("txt.suspended_ticket.from", r),
                            to: e.get("via.source.to.address"),
                            subject: e.get("subject"),
                            receivedAt: e.get("created_at"),
                            cause: e.get("cause"),
                            emailId: e.get("message_id"),
                            body: e.get("content"),
                            showAttachments: o,
                            attachments: s
                        });
                    this.set("modal", u)
                },
                recoverTicketManually: function () {
                    return this.get("modal").close(), r.recoverTicketManually(this.get("targetTicket"))
                },
                recoverTicket: function () {
                    var e = [this.get("targetTicket.id")];
                    return r.recoverTickets(e).done(this.cleanup.bind(this))
                },
                deleteTicket: function () {
                    var e = [this.get("targetTicket.id")];
                    return r.deleteTickets(e, !0, this.cleanup.bind(this))
                },
                cleanup: function () {
                    var e = this.get("modal");
                    e && e.close(), this.set("modal", null), this.onActionComplete && this.onActionComplete()
                }
            }).reopenClass({
                toString: function () {
                    return "SuspendedModalController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/suspended_filter_controller": function (e, t, n) {
        var r = t("controllers/suspended_ticket_actions"),
            i = t("controllers/suspended_modal_controller"),
            s = function (e, t) {
                return I18n.t("txt.suspended_ticket." + e + ".button_label_weak", {
                    count: t.length
                })
            }, o = Em.Object.extend({
                manager: null,
                selectionController: Em.computed.oneWay("manager.selectionController"),
                openTicket: function (e) {
                    var t = this.get("manager");
                    i.create({
                        targetTicket: e,
                        onActionComplete: t.refreshFilterContent.bind(t)
                    }).showTicket()
                },
                recoverTickets: function () {
                    var e = this.get("selectionController.itemIds");
                    return r.recoverTickets(e).done(this.cleanup.bind(this))
                },
                deleteTickets: function () {
                    var e = this.get("selectionController.itemIds");
                    return r.deleteTickets(e, !1, this.cleanup.bind(this))
                },
                cleanup: function () {
                    this.clearSelection(), this.refreshFilterContent()
                },
                deleteButtonLabel: function () {
                    return s("delete", this.get("selectionController.itemIds"))
                }.property("selectionController.itemIds.@each").cacheable(),
                recoverButtonLabel: function () {
                    return s("recover", this.get("selectionController.itemIds"))
                }.property("selectionController.itemIds.@each").cacheable(),
                clearSelection: function () {
                    this.get("manager").clearSelection()
                },
                refreshFilterContent: function () {
                    this.get("manager").refreshFilterContent()
                }
            }).reopenClass({
                toString: function () {
                    return "SuspendedFilterController"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "controllers/tab_controller": function (e, t, n) {
        var r = Em.Object.extend({
            content: null,
            wsManager: null,
            activateWorkspaceForTab: function (e) {
                var t = e.get("content");
                this.get("wsManager").activateWorkspaceByHref(t)
            },
            closeWorkspaceForTab: function (e) {
                var t = e.get("content");
                this.get("wsManager").closeWorkspace(t)
            },
            removeTabForWorkspace: function (e) {
                var t = e.get("tabView"),
                    n = this.get("content"),
                    r = n.removeObject.bind(n, e);
                t && t.removeTab(r)
            },
            addTabForWorkspace: function (e) {
                e.get("tabbed") && !this.get("content").contains(e) && this.get("content").pushObject(e)
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/ticket_filter_controller": function (e, t, n) {
        var r = t("controllers/ticket_selection"),
            i = t("controllers/ticket_list_controller"),
            s = t("controllers/suspended_filter_controller"),
            o = i.extend(t("controllers/filter_controller_mixin"), {
                selectionClass: r,
                isSuspendedMode: Em.computed.oneWay("filter.isSuspendedFilter"),
                isRegularMode: Em.computed.not("isSuspendedMode"),
                init: function () {
                    this._super(), this.set("suspendedFilterController", s.create({
                        manager: this
                    }))
                },
                openTicket: function (e, t) {
                    return this.get("isRegularMode") ? this._super(e, t) : this.get("suspendedFilterController").openTicket(e)
                },
                updateViewingStatus: function (e) {
                    return this.get("isRegularMode") && this._super(e)
                }
            }).reopenClass({
                toString: function () {
                    return "TicketFilterController"
                }
            });
        n.exports = o
    }
}), this.require.define({
    "controllers/ticket_filter_manager_controller": function (e, t, n) {
        var r = t("controllers/filter_ui_controller"),
            i = t("controllers/ticket_filter_controller"),
            s = t("models/filter/view_filters"),
            o = t("lib/monitoring/metrics").instance(),
            u = t("models/filter/suspended_filter").instance(),
            a = t("lib/lotus/global_events"),
            f = t("controllers/filter_manager_controller").extend({
                urlType: "views",
                init: function () {
                    return this.setProperties({
                        filters: Em.ArrayProxy.create({
                            content: [],
                            expireContent: function () {
                                this.invoke("expireContent")
                            },
                            refreshContent: function () {
                                this.invoke("refreshContent")
                            }
                        }),
                        viewFilters: s.create(),
                        listFilterController: i.create({
                            manager: this
                        }),
                        uiController: r.create({
                            manager: this,
                            sectionName: "filters"
                        })
                    }), a.on("@ticket:expire", this, this.onTicketExpired), this._super()
                },
                destroy: function () {
                    a.off("@ticket:expire", this, this.onTicketExpired), this._super()
                },
                onTicketExpired: function () {
                    this.get("active") && this.refreshCurrentFilterContent()
                },
                viewFiltersDidFetch: function () {
                    if (!this.get("viewFilters.isFetched")) return;
                    var e = {
                        shared: [],
                        personal: [],
                        sla: []
                    };
                    this.get("viewFilters").forEach(function (t) {
                        e[t.get("viewType")].push(t)
                    });
                    var t = e.shared.concat(u, e.personal, e.sla);
                    this.set("filters.content", t)
                }.observes("viewFilters.isFetched"),
                expirableObjects: {
                    list: ["viewFilters"]
                },
                setFilter: function (e) {
                    o.time("filter/load"), e.get("feedMode") && e.get("content").expireNow(), this._super(e)
                },
                toggleFilterMode: function () {
                    this.set("currentFilter.feedMode", !this.get("currentFilter.feedMode")), this.refreshCurrentFilterContent()
                },
                goToEditFilter: function () {
                    Zd.Routes.goToHash("/admin/views/edit/" + this.get("currentFilter.id"))
                },
                goToCloneFilter: function () {
                    Zd.Routes.goToHash("/admin/views/clone/" + this.get("currentFilter.id"))
                },
                permissions: function () {
                    var e = this.get("currentFilter"),
                        t = this.get("globalPermissions.manageBusinessRules") || e && e.isOwnedBy(this.get("currentUser"));
                    return {
                        can_edit: t,
                        can_switch_mode: this.get("features.hasFeedPrototype")
                    }
                }.property("globalPermissions.manageBusinessRules", "currentUser.id", "currentFilter.restriction", "features.hasFeedPrototype").cacheable(),
                refreshFilters: function () {
                    return this.get("viewFilters").refresh()
                },
                expireFilter: function (e) {
                    e.get("content").expire(), Em.run.next(this, function () {
                        e === this.get("currentFilter") && e.get("content").fetch()
                    })
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "TicketFilterManagerController"
                }
            });
        n.exports = f
    }
}), this.require.define({
    "controllers/tokens_controller": function (e, t, n) {
        var r = t("models/user/tokens"),
            i = t("lib/growl"),
            s = t("lib/user_settings_consumer"),
            o = null,
            u = Em.Object.extend(s, {
                working: function (e, t) {
                    return arguments.length > 1 ? t : this.get("content.isFetching")
                }.property("content.isFetching").cacheable(),
                init: function () {
                    return this.set("content", r.create()), this._super.apply(this, arguments)
                },
                revokeToken: function (e) {
                    var t = this,
                        n = e.get("id");
                    this.set("working", !0), e.destroyResource().done(function () {
                        t.set("working", !1), t.get("content").refresh(), i.notice("Removed token: '%@'".fmt(n))
                    })
                }
            });
        u.reopenClass({
            toString: function () {
                return "TokensController"
            }
        }), n.exports = u
    }
}), this.require.define({
    "controllers/twitter_comment_count_calculator": function (e, t, n) {
        function s() {
            return function () {
                return this
            }()
        }

        function o() {
            var e = i._getGlobal();
            return e.location.protocol === "http:" ? "http" : "https"
        }

        function u() {
            return o() === "https" ? 23 : 22
        }

        function a(e) {
            e = e || "";
            var t = window.twttr.txt.extractUrls(e),
                n = 0,
                r = 0;
            return t.forEach(function (e) {
                n += e.indexOf("http:") === 0 ? 22 : 23
            }), r = t.join("").length, {
                encodedUrlLen: n,
                rawUrlLen: r
            }
        }

        function f(e, t, n) {
            var r = t.length > 0 ? t.length + 2 : 0,
                i = a(e),
                s = e.length - i.rawUrlLen,
                o = n ? u() : 0,
                f = i.encodedUrlLen;
            return 140 - (r + o + s + f)
        }
        var r = t("lib/utils"),
            i = {};
        i.calculate = f, i._getGlobal = s, n.exports = Object.seal(i)
    }
}), this.require.define({
    "views/modals/user_assume": function (e, t, n) {
        var r = t("views/modals/modal").extend({
            userName: null,
            profileImageUrl: null,
            templateName: "templates/modals/user_assume",
            onConfirm: Em.required(),
            confirmLabel: I18n.t("txt.modal.user_revert.confirm"),
            options: {
                keyboard: !1,
                backdrop: "static"
            },
            detailsLabel: function () {
                var e = I18n.t("txt.modal.user_assume.details", {
                    assumed_user_name: this.get("userName")
                });
                return new Handlebars.SafeString(e)
            }.property("userName").cacheable(),
            titleLabel: function () {
                var e = I18n.t("txt.modal.user_assume.title", {
                    assumed_user_name: this.get("userName")
                });
                return new Handlebars.SafeString(e)
            }.property("userName").cacheable(),
            userDidConfirm: function () {
                this.get("onConfirm")(), this.hideModal()
            }
        }).reopenClass({
            preservesContext: !0,
            toString: function () {
                return "UserAssumeModal"
            }
        });
        n.exports = r
    }
}), this.require.define({
    "controllers/user_assume_controller": function (e, t, n) {
        var r = t("views/modals/user_assume"),
            i = function (e) {
                var t = this;
                e.operation === "assume" ? t.enterAssumeMode(e.data) : e.operation === "revert" && t.leaveAssumeMode()
            }, s = Em.Object.extend({
                currentUserAssumeModal: null,
                tabCommunication: t("lib/tabs_com/tabs_com"),
                radarClient: RadarClient,
                voiceClient: null,
                chatClient: null,
                init: function () {
                    this._super(), this.set("_revertIdentity", this.revertIdentity.bind(this)), this.set("tabCommunicationCallback", i.bind(this)), this.set("chatClient", t("lib/user_assume/chat_extension").create()), this.set("voiceClient", t("lib/user_assume/voice_extension").create({
                        voiceService: Zd.get("currentUser.voice")
                    }))
                },
                subscribe: function () {
                    this.get("tabCommunication").subscribe("userAssumeChannel", this.get("tabCommunicationCallback"))
                },
                assumeIdentity: function (e) {
                    this.get("tabCommunication").publish("userAssumeChannel", {
                        operation: "assume",
                        data: e
                    }), this.enterAssumeMode(e), this.assumeOnServer(e.assumeUrl)
                },
                assumeOnServer: function (e) {
                    this.userAssumeForm || (this.userAssumeForm = $("<form id='user-assume-form' method='post' target='_blank'></form>"), $("body").append(this.userAssumeForm)), this.userAssumeForm.attr("action", e).submit()
                },
                revertIdentity: function () {
                    var e = this;
                    return Em.Resource.ajax({
                        url: "/users/revert.json",
                        dataType: "json"
                    }).done(function () {
                        e.get("tabCommunication").publish("userAssumeChannel", {
                            operation: "revert"
                        }), e.leaveAssumeMode()
                    })
                },
                enterAssumeMode: function (e) {
                    this.get("radarClient").detach(), this.get("chatClient").detach(), this.get("voiceClient").detach(), this.currentUserAssumeModal = r.create({
                        onConfirm: this.get("_revertIdentity"),
                        userName: e.assumeUserName,
                        profileImageUrl: e.profileImageUrl
                    }), this.currentUserAssumeModal.append()
                },
                leaveAssumeMode: function () {
                    this.get("radarClient").reattach(), this.get("chatClient").reattach(), this.get("voiceClient").reattach(), this.currentUserAssumeModal.hideModal()
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "UserAssumeController"
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/user_photo_controller": function (e, t, n) {
        var r = t("lib/growl"),
            i = function (e) {
                if (!e) return null;
                var t = e.match(/photos\/(\d+)\/(\d+)\//);
                return t ? parseInt(t[1] + t[2], 10) : null
            }, s = Em.Object.extend({
                user: null,
                removePhoto: function () {
                    var e = this;
                    return this.set("isLoading", !0), $.ajax({
                        type: "POST",
                        url: "/photos/" + i(this.get("user.profileImageUrl")),
                        data: {
                            _method: "delete"
                        }
                    }).done(function () {
                        r.notice(I18n.t("help.user.photo_upload.remove_success"))
                    }).always(function () {
                        e.onActionComplete()
                    })
                },
                canEditPhotoBinding: Em.Binding.oneWay("user.userPermissions.editProperties"),
                isLoading: !1,
                isDefaultPhoto: function () {
                    return i(this.get("user.profileImageUrl")) == null
                }.property("user.profileImageUrl").cacheable(),
                isNormalPhoto: Em.computed.not("isDefaultPhoto"),
                onActionComplete: function () {
                    var e = this;
                    this.get("user").expire(), this.get("user.id") === Zd.get("currentUser.id") && (Zd.get("currentUser").expire(), Em.run.next(this, function () {
                        Zd.get("currentUser").fetch()
                    })), Em.run.next(this, function () {
                        this.get("user").fetch().always(function () {
                            e.set("isLoading", !1)
                        })
                    })
                }
            });
        n.exports = s
    }
}), this.require.define({
    "controllers/user_merge_modal_controller": function (e, t, n) {
        function r() {
            t("views/modals/dynamic_modal").centerModalDom($("#user-merge"))
        }

        function i(e) {
            var t = $("#user-merge .modal-body"),
                n = $("#user-merge");
            n.css("visibility", "hidden"), t.html(e), r(n), n.css("visibility", "")
        }
        var s = {
            rootSelector: "#user-merge",
            waitNoteTemplate: '<div class="wait-note">%@</div>',
            _btnTemplate: '<button type="button" class="%@ btn btn-inverse">%@</button>',
            normalizeHtml: function (e) {
                return e.replace(/\$j(\.|\()/g, "jQuery$1").replace(/\shref(='|="|=)/g, " href$1#")
            },
            swapSubmitButtons: function () {
                var e = $("input[type=submit]", s.rootSelector);
                if (e.length === 0) return;
                e.hide(), e.after(s._btnTemplate.fmt(e.attr("class"), e.val()))
            },
            onError: function (e) {
                var t = e.responseText;
                $.trim(t) === "" ? $("#user-merge").modal("hide") : i(s.normalizeHtml(t))
            }
        }, o = function () {
                function c(t) {
                    e = t.userId, n = t.onSuccess
                }

                function h() {
                    var t = {};
                    this.handler = function (n, r) {
                        var i = n.term;
                        if (t.hasOwnProperty(i)) {
                            r(t[i]);
                            return
                        }
                        $.ajax({
                            dataType: "json",
                            url: l(e, i),
                            success: function (e) {
                                t[i] = e, r(e)
                            }
                        })
                    }
                }

                function p() {
                    var e = o();
                    $.ajax({
                        type: e.attr("method"),
                        data: e.serialize(),
                        url: e.attr("action"),
                        success: n,
                        error: s.onError
                    })
                }

                function d(e) {
                    i(s.normalizeHtml(e)), $("h2", "#user-merge .modal-body").hide();
                    if (u().length === 0) return;
                    s.swapSubmitButtons(), a().hide(), u().autocomplete({
                        minLength: 3,
                        source: (new h).handler
                    }), u().bind("keydown", function (e) {
                        e.which === 13 && (p(), e.preventDefault())
                    }), o().find(".btn").bind("click", p), $("img, a", "#winner_suggestions").css({
                        cursor: "pointer"
                    }).bind("click", function (e) {
                        return u().val($(this.parentNode).find("a").html() + " <" + $(this.parentNode).find("span").html() + ">"), p(), !1
                    })
                }

                function v() {
                    $("#btn-user-confirm-and-merge").hide(), i(s.waitNoteTemplate.fmt(I18n.t("txt.ticket.merge.loading_form"))), $("#user-merge").modal(), $.ajax({
                        url: f(e),
                        success: d,
                        error: s.onError
                    })
                }
                var e, n, r = t("models/url"),
                    o = function () {
                        return $("#winner_form", s.ootSelector)
                    }, u = function () {
                        return o().find("input[type='text']")
                    }, a = function () {
                        return $("#winner_auto_complete", s.rootSelector)
                    }, f = function (e) {
                        return "/users/" + e + "/merge/new"
                    }, l = function (e, t) {
                        var n = new r("/users/%@/merge/autocomplete".fmt(e), {
                            name: encodeURIComponent(t),
                            rand: (new Date).getTime()
                        });
                        return n.toString()
                    };
                return {
                    setup: c,
                    show: v
                }
            }(),
            u = function () {
                function o(n) {
                    t = n.onFormSetup, e = n.onSuccess
                }

                function u() {
                    $("#btn-user-confirm-and-merge").hide(), i(s.waitNoteTemplate.fmt(I18n.t("txt.users.merge_in_progress"))), $.ajax({
                        data: n.data,
                        type: n.type,
                        url: n.url,
                        success: e,
                        error: function (t) {
                            t.status === 0 && t.responseText === "" ? e && e() : s.onError()
                        }
                    })
                }

                function a(e) {
                    i(s.normalizeHtml(e)), $("h2", "#user-merge .modal-body").hide(), s.swapSubmitButtons();
                    var o = r();
                    if (o.length > 0) {
                        var a = $("#btn-user-confirm-and-merge");
                        a.show(), a.data("setup") || (a.data("setup", !0), a.click(u))
                    }
                    n = {
                        data: o.serialize(),
                        type: o.attr("method"),
                        url: o.attr("action")
                    }, t({
                        loserUserName: $("h3", "#user_loser").text(),
                        winnerUserName: $("h3", "#user_winner").text(),
                        winnerUserId: parseInt($("#winner", "#user_winner").val(), 10)
                    }), r().find(".btn").hide()
                }
                var e, t, n, r = function () {
                        return $("#confirm_merge_form", s.rootSelector)
                    };
                return {
                    setup: o,
                    setupForm: a
                }
            }();
        n.exports = Object.seal({
            introStep: o,
            confirmStep: u
        })
    }
}), this.require.define({
    "controllers/user_merge_controller": function (e, t, n) {
        var r = 3,
            i = 10,
            s = t("lib/growl"),
            o = t("lib/lotus/global_events"),
            u = Em.Object.extend({
                winnerUserName: null,
                winnerUserId: null,
                loserUserName: null,
                modalController: t("controllers/user_merge_modal_controller"),
                mergeConfirmationMessage: function () {
                    return I18n.t("txt.users.merge_success", {
                        source_name: this.get("loserUserName"),
                        target_name: this.get("winnerUserName")
                    })
                }.property().volatile(),
                mergeUser: function (e) {
                    var t = this.get("modalController.introStep"),
                        n = this.get("modalController.confirmStep"),
                        r = e.user;
                    this.set("loserUserName", e.user.get("name")), t.setup({
                        userId: e.user.get("id"),
                        onSuccess: n.setupForm.bind(n)
                    }), n.setup({
                        onFormSetup: function (e) {
                            this.set("loserUserName", e.loserUserName), this.set("winnerUserName", e.winnerUserName), this.set("winnerUserId", e.winnerUserId)
                        }.bind(this),
                        onSuccess: function () {
                            var e = this.get("winnerUserId");
                            if (e == null || isNaN(e)) return;
                            var t = Zendesk.User.create({
                                id: e
                            });
                            $("#user-merge").modal("hide"), s.notice(this.get("mergeConfirmationMessage")), Zd.Routes.goToHash("#/users/%@/tickets".fmt(e)), this.adjustRequesterForOpenTickets(t, r);
                            var n = function () {
                                o.trigger("@user:merge"), this.refreshWinner(t), this.closeWorkspaceForUser(r)
                            }.bind(this);
                            this.observeMergeCompletion(t, r, n, i)
                        }.bind(this)
                    }), t.show()
                },
                closeWorkspaceForUser: function (e) {
                    var t = Zd.workspaces.findByContextHref(e);
                    t && Zd.workspaces.closeWorkspace(t, Em.K, !1, !0)
                },
                refreshWinner: function (e) {
                    var t = e.get("organization"),
                        n = Zd.get("workspaces.current");
                    e.expireNow(), t && t.expireNow(), Em.run.next(function () {
                        n && n.get("user") === e && n.didActivate()
                    })
                },
                adjustRequesterForOpenTickets: function (e, t) {
                    Zd.get("workspaces").forEachTicketWorkspace(function (n) {
                        var r = n.get("ticket");
                        r.get("requester") === t && r.setWithoutMarkingDirty("data.requester", e.get("data"))
                    })
                },
                observeMergeCompletion: function (e, t, n, i) {
                    i <= 0 && n();
                    var s = r * 1e3;
                    t.refresh().done(function () {
                        t.get("active") ? setTimeout(this.observeMergeCompletion.bind(this, e, t, n, i - 1), s) : n()
                    }.bind(this))
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "UserMergeController"
                }
            });
        n.exports = u
    }
}), this.require.define({
    "views/modals/password_form": function (e, t, n) {
        function r(e, t) {
            return t = t || e,
            function () {
                var n, r;
                return this.get("isChangingPassword") ? (n = "change_password", r = e) : (n = "set_password", r = t), I18n.t("txt.users.%@.modal.%@".fmt(n, r))
            }.property("isChangingPassword").cacheable()
        }
        var i = t("views/modals/modal").extend({
            controller: Ember.required(),
            target: Em.computed.oneWay("controller"),
            isChangingPassword: Em.computed.oneWay("controller.isChangingPassword"),
            currentPassword: Ember.computed.alias("controller.currentPassword"),
            newPassword: Ember.computed.alias("controller.newPassword"),
            verifyPassword: Ember.computed.alias("controller.verifyPassword"),
            templateName: "templates/modals/password_form",
            title: r("change_password_title", "menu_title"),
            confirmLabel: r("change_password_button", "set_password_button"),
            cancelLabel: I18n.t("txt.modal.edit.close"),
            currentPasswordLabel: I18n.t("txt.users.change_password.modal.current_password_label"),
            currentPasswordDescription: I18n.t("txt.users.change_password.modal.current_password_description"),
            newPasswordLabel: r("new_password_label"),
            newPasswordDescription: r("new_password_description"),
            verifyPasswordLabel: r("verify_password_label"),
            verifyPasswordDescription: r("verify_password_description")
        });
        n.exports = i
    }
}), this.require.define({
    "controllers/user_password_controller": function (e, t, n) {
        function o(e) {
            try {
                var t = JSON.parse(e),
                    n = Ember.get(t, "details.base.0.description");
                if (n != null) return n
            } catch (r) {}
            return e.toString()
        }
        var r = t("views/modals/password_form"),
            i = t("lib/growl"),
            s = t("lib/validation_error"),
            u = Em.Mixin.create({
                newPassword: null,
                verifyPassword: null,
                userId: null,
                url: "/api/v2/users/%@/password",
                showForUser: function (e) {
                    if (e == null) return;
                    this.reset(), this.set("userId", e.get("id")), this.set("view", r.create({
                        controller: this
                    }).append())
                },
                reset: function () {
                    this.set("newPassword", ""), this.set("verifyPassword", "")
                },
                hideModal: function () {
                    var e = this.get("view");
                    e != null && (e.hideModal(), this.set("view", null))
                },
                validate: function () {
                    return this.get("newPassword").length > 0 && this.get("newPassword") === this.get("verifyPassword")
                },
                userDidCancel: function () {
                    this.hideModal()
                },
                userDidConfirm: function () {
                    if (this.get("newPassword").length === 0) return;
                    if (!this.validate()) {
                        i.error(I18n.t("txt.users.new_password.do_not_match_error"));
                        return
                    }
                    this.submit()
                },
                submit: Em.K,
                onAjaxError: function (e) {
                    var t = e.responseText;
                    if (t && t !== "") {
                        var n = s.generateMessage("password", t);
                        i.error(o(n))
                    }
                },
                onAjaxSuccess: function () {
                    i.notice(I18n.t("txt.users.set_password.success")), this.hideModal()
                }
            }),
            a = Em.Object.extend(u, {
                isChangingPassword: !1,
                submit: function () {
                    Em.Resource.ajax({
                        type: "POST",
                        url: this.get("url").fmt(this.get("userId")),
                        dataType: "json",
                        data: {
                            password: this.get("newPassword")
                        },
                        error: this.onAjaxError
                    }).done(this.onAjaxSuccess.bind(this))
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "SetPasswordFormController"
                }
            }),
            f = Em.Object.extend(u, {
                currentPassword: null,
                isChangingPassword: !0,
                reset: function () {
                    this.set("currentPassword", ""), this._super()
                },
                submit: function () {
                    Em.Resource.ajax({
                        type: "PUT",
                        url: this.get("url").fmt(this.get("userId")),
                        dataType: "json",
                        data: {
                            password: this.get("newPassword"),
                            previous_password: this.get("currentPassword")
                        },
                        error: this.onAjaxError
                    }).done(this.onAjaxSuccess.bind(this))
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "ChangePasswordFormController"
                }
            });
        n.exports = Object.seal({
            SetPasswordFormController: a,
            ChangePasswordFormController: f
        })
    }
}), this.require.define({
    "views/users/nav_item": function (e, t, n) {
        var r = Em.Object.extend({
            displayText: function () {
                return I18n.t("txt.user.section." + this.get("name") + "_lower")
            }.property("name", "count").cacheable(),
            userBinding: Em.Binding.oneWay("delegate.user"),
            activeSectionBinding: Em.Binding.oneWay("delegate.section"),
            href: function () {
                return "%@/%@".fmt(this.get("delegate.sectionURLPrefix"), this.get("name"))
            }.property("delegate.sectionURLPrefix", "name").volatile(),
            active: function () {
                return this.get("name") === this.get("activeSection")
            }.property("name", "activeSection").cacheable()
        });
        r.reopenClass({
            toString: function () {
                return "UserInfoNavItem"
            }
        }), n.exports = r
    }
}), this.require.define({
    "views/users/nav_items": function (e, t, n) {
        function o(e, t) {
            var n = e.get("isAgent"),
                r = e.get("id") === Zd.get("currentUser.id");
            return s.filter(function (e) {
                return e.requiresWebPortal && t ? !1 : e.requiresAgent && !n ? !1 : e.requiresCurrentUser && !r ? !1 : e.requiresFeature && !i.hasFeature(e.requiresFeature) ? !1 : !0
            })
        }
        var r = t("views/users/nav_item"),
            i = t("lib/features"),
            s = [{
                section: "assigned_tickets",
                countPath: "delegate.userController.assignedTickets.total",
                requiresAgent: !0
            }, {
                section: "tickets",
                countPath: "user.related.requestedTickets"
            }, {
                section: "ccs",
                countPath: "user.related.ccdTickets"
            }, {
                section: "topics",
                countPath: "user.related.topics",
                requiresWebPortal: !0
            }, {
                section: "topic_comments",
                countPath: "user.related.topicComments",
                requiresWebPortal: !0
            }, {
                section: "votes",
                countPath: "user.related.votes",
                requiresWebPortal: !0
            }, {
                section: "subscriptions",
                countPath: "user.related.subscriptions",
                requiresWebPortal: !0
            }, {
                section: "devices_and_apps",
                requiresCurrentUser: !0
            }];
        n.exports = function (e, n, i) {
            i = i || t("lib/current_account").get("helpCenterSettings.hideWebPortalFilters");
            var s = o(n, i);
            return s.map(function (t) {
                var n = {
                    delegate: e,
                    name: t.section
                };
                return t.countPath && (n.count = function () {
                    var e = this.get(t.countPath);
                    return isNaN(e) ? "-" : e
                }.property(t.countPath).cacheable()), r.createWithMixins(n)
            })
        }
    }
}), this.require.define({
    "controllers/user_controller": function (e, t, n) {
        var r = t("models/filter"),
            i = t("models/filter/ccd_filter_factory"),
            s = t("controllers/roles_controller").create(),
            o = t("views/users/nav_items"),
            u = t("controllers/devices_controller"),
            a = t("controllers/tokens_controller"),
            f = t("lib/profile_tracker"),
            l = t("lib/growl"),
            c = t("controllers/ticket_controller"),
            h = t("controllers/ticket_list_controller"),
            p = t("controllers/ticket_selection"),
            d = t("models/forums/subscriptions"),
            v = t("models/forums/topic_collection"),
            m = t("models/forums/topic_comment_collection"),
            g = t("models/forums/topic_vote_collection"),
            y = t("controllers/user_photo_controller"),
            b = t("controllers/user_password_controller"),
            w = t("lib/voice/integration").instance(),
            E = Em.Object.extend(t("mixins/controller_pagination")).reopenClass({
                toString: function () {
                    return "ExtraCollectionController"
                }
            }),
            S = Em.Object.extend(t("lib/account_consumer"), t("lib/custom_roles_consumer"), t("lib/clean_up_on_destroy"), t("lib/fetch_control"), {
                features: t("lib/features"),
                userAssumeController: Em.computed.singleton("controllers/user_assume_controller"),
                hasMultipleOrganizations: function () {
                    return this.get("features").hasFeature("multipleOrganizations")
                }.property("features").cacheable(),
                init: function () {
                    this.setupExtraCollections(), this.setupRequestedTicketsFilter(), this.setupAssignedTicketsFilter(), this.setupCcdTicketsFilter(), this.setupRequestedTicketsController(), this.setupAssignedTicketsController(), this.setupCcdTicketsController(), this.setupPhotoController(), this._setupDevicesController(), this._setupTokensController(), this._setupTopicCommentsController(), this._setupUserAssumeExtensions(), this.get("hasMultipleOrganizations") && this.expirableObjects.all.push("user.organizationMemberships"), this.setupVoiceIntegration(), this._super()
                },
                userFields: function () {
                    return t("models/custom_fields/custom_fields").instance("user")
                }.property().cacheable(),
                reset: function () {
                    ["assignedTicketsFilter", "requestedTicketsFilter", "ccdFilter", "topics", "topicComments", "votes", "subscriptions"].map(this.get.bind(this)).invoke("reset")
                },
                cleanUpOnDestroy: ["requestedTicketsController", "assignedTicketsController", "ccdTicketsController", "userPhotoController", "devicesController", "tokensController", "topics", "topicComments", "votes", "subscriptions"],
                destroy: function () {
                    var e = this.get("navigationItems");
                    e && e.invoke("destroy"), this.set("navigationItems", null), this._super()
                },
                userDidChange: function () {
                    var e = this.get("user.id");
                    if (e == null) return;
                    ["assignedTicketsFilter", "requestedTicketsFilter", "ccdFilter", "topics", "topicComments", "votes", "subscriptions"].map(this.get.bind(this)).invoke("updateForUser", e)
                }.observes("user"),
                setupAssignedTicketsFilter: function () {
                    var e = r.createDynamic({
                        groupBy: "status",
                        groupOrder: "asc",
                        sortBy: "updated",
                        sortOrder: "desc",
                        output: ["status", "id", "subject", "requester", "created", "updated", "group"],
                        conditions: {
                            all: [{
                                field: "assignee",
                                operator: "is",
                                value: this.get("user.id")
                            }],
                            any: []
                        }
                    });
                    e.updateForUser = function (e) {
                        this.set("conditions.all.firstObject.value", e)
                    }, this.set("assignedTicketsFilter", e)
                },
                setupRequestedTicketsFilter: function () {
                    var e = r.createDynamic({
                        groupBy: "status",
                        groupOrder: "asc",
                        sortBy: "updated",
                        sortOrder: "desc",
                        output: ["status", "id", "subject", "created", "updated", "group", "assignee"],
                        conditions: {
                            all: [{
                                field: "requester",
                                operator: "is",
                                value: this.get("user.id")
                            }],
                            any: []
                        }
                    });
                    e.updateForUser = function (e) {
                        this.set("conditions.all.firstObject.value", e)
                    }, this.set("requestedTicketsFilter", e)
                },
                setupCcdTicketsFilter: function () {
                    var e = i({
                        relatedUserId: this.get("user.id")
                    });
                    e.updateForUser = e.set.bind(e, "relatedUserId"), this.set("ccdFilter", e)
                },
                assignedTickets: Em.computed.oneWay("assignedTicketsFilter.content"),
                requestedTickets: Em.computed.oneWay("requestedTicketsFilter.content"),
                ccdTickets: Em.computed.oneWay("ccdFilter.content"),
                setupRequestedTicketsController: function () {
                    this._setupTicketListController({
                        sectionName: "tickets",
                        title: I18n.t("txt.user.section.tickets"),
                        filterName: "requestedTicketsFilter",
                        controllerName: "requestedTicketsController"
                    })
                },
                setupAssignedTicketsController: function () {
                    this._setupTicketListController({
                        sectionName: "assigned_tickets",
                        title: I18n.t("txt.user.section.assigned_tickets"),
                        filterName: "assignedTicketsFilter",
                        controllerName: "assignedTicketsController"
                    })
                },
                setupCcdTicketsController: function () {
                    this._setupTicketListController({
                        sectionName: "ccs",
                        title: I18n.t("txt.user.section.ccs"),
                        filterName: "ccdFilter",
                        controllerName: "ccdTicketsController"
                    })
                },
                _setupTicketListController: function (e) {
                    var t = h.createWithMixins({
                        title: e.title,
                        controller: this,
                        paginationController: Em.computed.oneWay("filter"),
                        filter: Em.computed.oneWay("controller." + e.filterName),
                        showFooter: function () {
                            return this.get("controller.section") === e.sectionName && this.get("selectionController.hasSelection")
                        }.property("controller.section", "selectionController.hasSelection").cacheable()
                    }),
                        n = p.create({
                            controller: t
                        });
                    t.set("selectionController", n), this.set(e.controllerName, t)
                },
                setupExtraCollections: function () {
                    this._setupExtraCollection(v, "topics"), this._setupExtraCollection(m, "topicComments"), this._setupExtraCollection(g, "votes"), this._setupExtraCollection(d, "subscriptions")
                },
                _setupExtraCollection: function (e, t) {
                    var n = e.create({
                        userId: this.get("user.id")
                    });
                    n.updateForUser = function (e) {
                        this.set("userId", e)
                    }, this.set(t, n)
                },
                topicsIsEmpty: Em.computed.equal("topics.length", 0),
                topicCommentsIsEmpty: Em.computed.equal("topicComments.length", 0),
                votesIsEmpty: Em.computed.equal("votes.length", 0),
                subscriptionsIsEmpty: Em.computed.equal("subscriptions.length", 0),
                setupPhotoController: function () {
                    this.set("userPhotoController", y.create({
                        controller: this,
                        userBinding: "controller.user"
                    }))
                },
                setupVoiceIntegration: function () {
                    var e = Zd.get("currentUser.id");
                    e && this.subscribeToVoiceIntegrationStatuses(e)
                },
                subscribeToVoiceIntegrationStatuses: _.once(function (e) {
                    w.subscribeToVoiceTickets(e), w.subscribeToUserProfiles(e)
                }),
                _setupDevicesController: function () {
                    this.set("devicesController", u.create())
                },
                _setupTokensController: function () {
                    this.set("tokensController", a.create())
                },
                _setupTopicCommentsController: function () {
                    this.set("topicCommentsController", E.create({
                        paginationController: this.get("topicComments")
                    }))
                },
                _setupUserAssumeExtensions: function () {
                    this.set("userAssumeVoice", t("lib/user_assume/voice_extension").create({
                        voiceService: Zd.get("currentUser.voice")
                    })), this.set("userAssumeChat", t("lib/user_assume/chat_extension").create({
                        chatsController: Chat.chatsController
                    }))
                },
                navigationItems: function () {
                    var e = this.get("user");
                    return e ? o(this, e) : null
                }.property("user", "user.isFetched", "user.isAgent").cacheable(),
                sectionURLPrefix: Em.computed.fmt("user.id", "#/users/%@"),
                openNewTicket: function () {
                    return c.openNewTicket(null, {
                        requester_id: this.get("user.id")
                    })
                },
                prefersClassic: function () {
                    return !this.get("currentAccount.settings.prefer_lotus")
                }.property("currentAccount.settings.prefer_lotus").cacheable(),
                hasUserAssumeFeature: function () {
                    return this.get("features").hasFeature("userAssume")
                }.property("features").cacheable(),
                isUserAllowedToAssume: Em.computed.oneWay("user.userPermissions.assumeUser"),
                shouldHideAssumeInHelpCenter: Em.computed.oneWay("currentAccount.helpCenterSettings.hideUserAssume"),
                shouldAllowAssumeIdentity: function () {
                    return this.get("hasUserAssumeFeature") && this.get("isUserAllowedToAssume") && !this.get("shouldHideAssumeInHelpCenter")
                }.property("hasUserAssumeFeature", "isUserAllowedToAssume", "shouldHideAssumeInHelpCenter").cacheable(),
                userSettings: t("lib/user_settings"),
                assumeIdentity: function () {
                    if (this.isUsingChannels()) {
                        this.showUserAssumeUnavailableDialog();
                        return
                    }
                    if (this.get("userSettings.isFirstTimeAssumingUser")) this.showUserAssumeTutorial();
                    else {
                        var e = this.get("user");
                        this.get("userAssumeController").assumeIdentity({
                            assumeUserName: e.get("name"),
                            profileImageUrl: e.get("profileImageUrl"),
                            assumeUrl: e.get("assumeUrl")
                        })
                    }
                },
                isUsingChannels: function () {
                    return this.get("userAssumeChat").isActive() || this.get("userAssumeVoice").isActive()
                },
                showUserAssumeUnavailableDialog: function () {
                    var e = t("views/modals/modal").reopenClass({
                        toString: function () {
                            return "UserAssumeUnavailableModal"
                        }
                    });
                    e.create({
                        title: I18n.t("txt.modal.user_assume_unavailable.title"),
                        body: I18n.t("txt.modal.user_assume_unavailable.details"),
                        confirmLabel: I18n.t("txt.modal.user_assume_unavailable.button"),
                        userDidConfirm: function () {
                            this.hideModal()
                        }
                    }).append()
                },
                showUserAssumeTutorial: function () {
                    var e = this.get("user"),
                        n = this;
                    this.set("saveSettingsAndAssumeUser", function () {
                        this.set("userSettings.isFirstTimeAssumingUser", !1), this.assumeIdentity()
                    }.bind(this));
                    var r = t("views/modals/user_assume_tutorial").create({
                        userName: e.get("name"),
                        profileImageUrl: e.get("profileImageUrl"),
                        onConfirm: this.get("saveSettingsAndAssumeUser")
                    });
                    r.append()
                },
                deleteUser: function () {
                    var e = this.get("user"),
                        t = e.get("organization_id"),
                        n = confirm(I18n.t("txt.users.delete_confirm"));
                    if (n) {
                        f.track("actions:delete");
                        var r = Zd.workspaces.findByContextHref(e);
                        e.destroyResource().done(function (n) {
                            l.notice(I18n.t("txt.users.delete_success_msg", {
                                name: e.get("name")
                            })), r && Zd.workspaces.closeWorkspace(r, Em.K, !1, !! t), t ? Zendesk.Routes.goToHash("#/organizations/" + t) : Zendesk.Routes.goToHash("#/dashboard")
                        }).fail(function (e) {
                            var t = e.responseText;
                            if (t && t !== "") {
                                var n;
                                JSON.parse(t).details ? n = JSON.parse(t).details.base[0].description : n = JSON.parse(t).error.message, l.error(n)
                            }
                        })
                    }
                },
                mergeUser: function () {
                    f.track("actions:merge");
                    var e = t("controllers/user_merge_controller").instance();
                    e.mergeUser({
                        user: this.get("user")
                    })
                },
                suspendUser: function () {
                    var e = this.get("user");
                    e.set("suspended", !0), f.track("actions:suspend"), e.save().done(function () {
                        l.notice(I18n.t("txt.admin.javascrips.users_show.user_suspended_label"))
                    }).error(function () {
                        l.error(I18n.t("txt.admin.javascrips.users_show.suspend_user_label"))
                    })
                },
                unsuspendUser: function () {
                    var e = this.get("user");
                    e.set("suspended", !1), e.save().done(function () {
                        l.notice(I18n.t("txt.admin.javascrips.users_show.user_unsuspended_label"))
                    }).error(function () {
                        l.error(I18n.t("txt.admin.javascrips.users_show.unsuspend_user_label"))
                    })
                },
                resetUserPassword: function () {
                    if (!this.get("user.userPermissions.resetPassword")) return !1;
                    f.track("actions:reset_password"), $.ajax({
                        type: "POST",
                        url: "/api/v2/users/%@/password/reset".fmt(this.get("user.id")),
                        dataType: "json"
                    }).done(function () {
                        l.notice(I18n.t("txt.users.reset_password.success"))
                    }).error(function (e) {
                        Em.get(e, "error.message") && l.error(e.error.message)
                    })
                },
                currentUser: function () {
                    var e = Zendesk.get("currentUser"),
                        t = "#/users/" + e.get("id");
                    Zendesk.Routes.goToHash(t)
                },
                user: Em.computed.oneWay("ticket.requester"),
                updateRole: function (e) {
                    var t = this.get("user.getRole");
                    this.set("_newRole", e), this.set("_currentRole", t), s.updateRole(this, t, e)
                },
                confirmRoleChange: function () {
                    var e = this.get("user"),
                        t = this;
                    e.setRole(this.get("_newRole")), e.save({
                        update: !1
                    }).done(function () {
                        t._resetRoleChange(), t._refreshGroups(), t._expireAssignableGroups()
                    })
                },
                cancelRoleChange: function () {
                    this.get("user").setRole(this.get("_currentRole")), this._resetRoleChange()
                },
                assignableGroups: Em.computed.singleton("models/assignable_groups"),
                _refreshGroups: function () {
                    this.get("user").refreshGroups()
                },
                _expireAssignableGroups: function () {
                    this.get("assignableGroups").expireNow()
                },
                _resetRoleChange: function () {
                    this.set("_newRole", null), this.set("_currentRole", null), this.set("_view", null)
                },
                locales: function () {
                    var e = t("models/locale");
                    return this.get("user.isAgent") ? e.agent : e.all
                }.property("user.isAgent").volatile(),
                passwordChangeMode: function () {
                    var e = this.get("user.userPermissions.setPassword"),
                        t = this.get("user.userPermissions.changePassword");
                    return e ? S.PasswordChangeModes.SET_PASSWORD : t ? S.PasswordChangeModes.CHANGE_PASSWORD : S.PasswordChangeModes.NO_CHANGE
                }.property("user.userPermissions").volatile(),
                updatePassword: function () {
                    var e = this.get("passwordChangeMode");
                    e === S.PasswordChangeModes.SET_PASSWORD && this.setPassword(), e === S.PasswordChangeModes.CHANGE_PASSWORD && this.changePassword()
                },
                setPasswordFormController: b.SetPasswordFormController.instance(),
                changePasswordFormController: b.ChangePasswordFormController.instance(),
                setPassword: function () {
                    this.get("setPasswordFormController").showForUser(this.get("user"))
                },
                changePassword: function () {
                    this.get("changePasswordFormController").showForUser(this.get("user"))
                },
                addOrganizationMembership: function (e) {
                    var n = this.get("user"),
                        r = t("models/organization_membership").create({
                            user: n,
                            organization: e
                        });
                    n.get("organizationMemberships").addObject(r), n.save({
                        update: !1
                    }).always(function () {
                        n.get("organizationMemberships").refresh()
                    })
                },
                openRemoveOrganizationMembershipModal: function (e) {
                    var n = t("views/modals/remove_organization_membership").create({
                        controller: this,
                        membership: e
                    });
                    n.append(), n.showModal()
                },
                removeOrganizationMembership: function (e) {
                    var t = this.get("user");
                    e.destroyResource().done(function () {
                        t.get("organizationMemberships").refresh()
                    })
                },
                makeDefaultOrganizationMembership: function (e) {
                    var t = this.get("user"),
                        n = "/api/v2/users/%@/organization_memberships/%@/make_default";
                    Em.Resource.ajax({
                        type: "PUT",
                        url: n.fmt(e.data.user_id, e.data.id),
                        dataType: "json"
                    }).done(function () {
                        t.get("organizationMemberships").refresh()
                    })
                },
                canUpdatePassword: function () {
                    return this.get("passwordChangeMode") !== S.PasswordChangeModes.NO_CHANGE
                }.property("passwordChangeMode").volatile(),
                organizations: Em.computed.singleton("models/organizations"),
                userOrganizations: function () {
                    var e = this.get("organizations") || [],
                        t = this.get("user.organization"),
                        n = Em.get(e, "isFetched") && Em.get(e, "length") === 0,
                        r = t && Em.get(t, "isFetched");
                    return n && r ? [t] : e
                }.property("organizations.isFetched", "user.organization.isFetched").cacheable(),
                expirableObjects: {
                    all: ["organizations", ["user", "user.organization"], "user.related", "user.groups", "user.identities", "customRoles", "Zendesk.currentUser", "userFields"],
                    assigned_tickets: "assignedTickets",
                    tickets: "requestedTickets",
                    ccs: "ccdTickets",
                    topics: "topics",
                    topic_comments: "topicComments",
                    votes: "votes",
                    subscriptions: "subscriptions",
                    devices_and_apps: ["devicesController.content", "tokensController.content"]
                }
            }).reopenClass({
                toString: function () {
                    return "UserController"
                },
                PasswordChangeModes: {
                    NO_CHANGE: 0,
                    SET_PASSWORD: 1,
                    CHANGE_PASSWORD: 2
                }
            });
        n.exports = S
    }
}), this.require.define({
    "controllers/user_list_controller": function (e, t, n) {
        var r = t("controllers/list_controller"),
            i = r.extend({
                openUser: function (e, t) {
                    var n;
                    t ? (n = Zd.User.create({
                        id: e.get("id"),
                        name: e.get("name")
                    }), Zd.workspaces.activateWorkspace(n, null, null, !0)) : Zd.Routes.goToHash("#/users/" + e.get("id"))
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/user_filter_controller": function (e, t, n) {
        var r = t("controllers/user_list_controller"),
            i = r.extend(t("controllers/filter_controller_mixin")).reopenClass({
                toString: function () {
                    return "UserFilterController"
                }
            });
        n.exports = i
    }
}), this.require.define({
    "controllers/user_filter_manager_controller": function (e, t, n) {
        var r = t("controllers/user_filter_controller"),
            i = t("models/filter/user_filter/user_filters"),
            s = t("controllers/filter_editor_controller"),
            o = t("controllers/filter_column_editor_controller"),
            u = t("controllers/filter_ui_controller"),
            a = t("controllers/filter_list_editor_controller"),
            f = t("lib/growl"),
            l = t("lib/lotus/global_events"),
            c = t("controllers/filter_manager_controller").extend({
                app: Zendesk,
                sectionName: "user_filters",
                urlType: "user_views",
                globalPermissions: Zd.globalPermissions,
                isPreviewing: Em.computed.oneWay("editorController.isPreviewing"),
                isColumnEditorActive: Em.computed.oneWay("editorController.columnEditorController.active"),
                shouldShowViewHeader: Em.computed.notEqual("currentFilter", null),
                shouldShowColumnEditor: Em.computed.and("editorController.canEdit", "currentFilter"),
                shouldShowCSVexport: function () {
                    return this.get("globalPermissions.manageSharedUserViews") && !this.get("isPreviewing")
                }.property("globalPermissions.manageSharedUserViews", "isPreviewing").cacheable(),
                init: function () {
                    return this.setProperties({
                        allFilters: i.create(),
                        listFilterController: r.create({
                            manager: this
                        }),
                        uiController: u.create({
                            manager: this,
                            sectionName: "user_filters"
                        }),
                        editorController: s.create({
                            manager: this
                        }),
                        filterListEditorController: a.create({
                            manager: this
                        })
                    }), l.on("@user_filter:load_failed", this, this.onFilterExecutionFailure), l.on("@user_filter:activated", this, this.onFilterChanged), l.on("@user_filter:deactivated", this, this.onFilterChanged), l.on("@user_filter:deleted", this, this.onFilterChanged), this._super()
                },
                columnEditorController: Em.computed.oneWay("editorController.columnEditorController"),
                filters: function (e, t) {
                    return t !== undefined ? t : (this.get("allFilters") || []).filterProperty("active", !0)
                }.property("allFilters.@each").cacheable(),
                title: function () {
                    var e = this.get("currentFilter.title"),
                        t = this.get("currentFilter.totalCount");
                    return "%@ (%@)".fmt(e, t)
                }.property("currentFilter.title", "currentFilter.totalCount").cacheable(),
                expirableObjects: {
                    list: ["allFilters"]
                },
                exportConfirmationKey: "txt.filters.export_as_csv.confirmation_v2",
                permissions: function () {
                    var e = this.get("currentFilter"),
                        t = this.get("globalPermissions.manageBusinessRules"),
                        n = e && e.isOwnedBy(this.get("currentUser"));
                    return {
                        can_edit: t || n
                    }
                }.property("globalPermissions.manageBusinessRules", "currentUser.id", "currentFilter.restriction").cacheable(),
                setup: function (e) {
                    this.get("editorController").deactivate(), this._super.apply(this, arguments)
                },
                refreshFilters: function () {
                    return this.get("allFilters").refresh()
                },
                selectFirst: function () {
                    var e = this._super();
                    return e || Zd.Routes.goToHash("#/user_filters"), e
                },
                expireFilters: function () {
                    this.get("allFilters").expireContent()
                },
                editFilterList: function () {
                    this.get("filterListEditorController").activate()
                },
                addFilter: function () {
                    this.get("editorController").deactivate(), this.get("editorController").activateModalEditor("create")
                },
                editFilter: function () {
                    this.get("editorController").toggleModalEditor()
                },
                willDestroy: function () {
                    this.get("editorController").destroy(), l.off("@user_filter:load_failed", this, this.onFilterExecutionFailure), l.off("@user_filter:activated", this, this.onFilterChanged), l.off("@user_filter:deactivated", this, this.onFilterChanged), l.off("@user_filter:deleted", this, this.onFilterChanged), this._super()
                },
                onFilterExecutionFailure: function (e) {
                    var t = e.filter;
                    switch (e.xhr.status) {
                    case 403:
                        this.onInactiveFilterLoad(t);
                        break;
                    case 404:
                        this.onFilterLoadFailure(t);
                        break;
                    default:
                        f.error(I18n.t("txt.user_filters.generic.failed_to_execute_filter")), this.expireFilters()
                    }
                },
                onInactiveFilterLoad: function (e) {
                    this._onFilterLoadError(e, "loaded_inactive_filter")
                },
                onFilterLoadFailure: function (e) {
                    this._onFilterLoadError(e, "failed_to_load_filter")
                },
                _onFilterLoadError: function (e, t) {
                    var n = e.get("title"),
                        r;
                    n ? r = I18n.t("txt.user_filters." + t, {
                        view: n
                    }) : r = I18n.t("txt.user_filters.generic." + t), f.error(r), this.refreshFiltersAndSelectFirst()
                }
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "UserFilterManagerController"
                }
            });
        n.exports = c
    }
}), this.require.define({
    "controllers/user_validator": function (e, t, n) {
        var r = t("views/modals/dynamic_modal"),
            i = t("lib/location_history"),
            s = {
                _modal: null,
                _loadUrl: function (e) {
                    if (t("lib/environment").test) return;
                    window.location.replace(e)
                },
                _goToDashboard: function () {
                    Zendesk.Routes.goToHash("#/dashboard")
                },
                _showModal: function () {
                    var e = this;
                    if (this._modal) return;
                    this._modal = r.create({
                        title: I18n.t("txt.modal.error.header"),
                        body: I18n.t("txt.modal.error.body.inactive_user")
                    }).append().reopen({
                        willHideModal: function () {
                            this._super(), e._modal = null
                        }
                    })
                },
                _redirectForInvalidUser: function (e) {
                    var t = new RegExp(e.get("href") + "\\b"),
                        n = i.lastPageExcluding(t);
                    n ? this._loadUrl(n) : this._goToDashboard()
                },
                _onInvalidUser: function (e) {
                    this._showModal(), this._redirectForInvalidUser(e)
                },
                validateUser: function (e) {
                    return this.modal || !e ? !1 : e.get("active") ? !0 : (this._onInvalidUser(e), !1)
                }
            };
        n.exports = Object.seal(s)
    }
}), this
    .require.define({
        "controllers/voice/dialer_controller": function (e, t, n) {
            var r = Minilog("dialer-controller"),
                i = t("controllers/voice/voice_ui_controller").instance(),
                s = t("lib/voice/state").instance(),
                o = t("controllers/voice/voice_controller").instance(),
                u = Em.Object.extend(Ember.Evented, {
                    voiceController: o,
                    voiceState: s,
                    voiceUIController: i,
                    callConsoleStateManager: Em.computed.oneWay("voiceUIController.views.dialerCallConsole.stateManager"),
                    showKeypad: function () {
                        return s.get("hasOutboundEnabled") && s.get("keypadVisible")
                    }.property("voiceState.hasOutboundEnabled", "voiceState.keypadVisible").cacheable(),
                    checkCallingNumber: function () {
                        var e = s.get("phoneNumbers");
                        if (!e) return;
                        var t = s.get("callingNumber"),
                            n = e.someProperty("number", t);
                        t && !n && this.useDefaultPhoneNumber()
                    }.observes("voiceState.callingNumber"),
                    setupDefaultPhoneNumber: function () {
                        s.get("callingNumber") || this.useDefaultPhoneNumber()
                    }.observes("defaultPhoneNumber"),
                    defaultPhoneNumber: function () {
                        return s.get("phoneNumbers.firstObject")
                    }.property("voiceState.phoneNumbers.@each").cacheable(),
                    useDefaultPhoneNumber: function () {
                        var e = this.get("defaultPhoneNumber.number");
                        e && s.set("callingNumber", e)
                    },
                    dialerVisibleChanged: function () {
                        s.get("dialerVisible") ? (t("models/countries").instance().fetch(), this.trigger("dialerIsVisible")) : (s.set("ticketContext", null), this.trigger("dialerIsHidden"))
                    }.observes("voiceState.dialerVisible"),
                    toggleDialer: function () {
                        s.set("dialerVisible", !s.get("dialerVisible"))
                    },
                    toggleKeypad: function () {
                        var e = !this.get("voiceState.keypadVisible");
                        s.set("keypadVisible", e), e && this.trigger("keypadVisible")
                    },
                    characterDialed: function (e) {
                        e = String(e), s.get("activeCall") && this.get("voiceController").sendDigits(e), this.trigger("characterDialed", e)
                    },
                    deleteLastCharacter: function () {
                        s.set("dialedNumber", s.get("dialedNumber").slice(0, -1)), this.characterDialed("")
                    },
                    dialerLogo: function () {
                        return s.get("keypadVisible") ? "dialer-open" : "dialer-closed"
                    }.property("voiceState.keypadVisible").cacheable(),
                    noCallsMessagingVisible: function () {
                        return !s.get("activeCall") && !s.get("keypadVisible") && !this.get("callConsoleStateManager.isMissedCall")
                    }.property("voiceState.activeCall", "voiceState.keypadVisible", "callConsoleStateManager.isMissedCall").cacheable()
                }).reopenClass(t("lib/lotus/singleton"), {
                    toString: function () {
                        return "DialerController"
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/modals/forwarding_number": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                controller: Em.required(),
                target: Em.required(),
                classNames: ["modal", "agent_forwarding_modal"],
                title: I18n.t("txt.modal.agent_forwarding.title"),
                templateName: "templates/modals/forwarding_number",
                confirmLabel: I18n.t("txt.modal.edit.save"),
                cancelLabel: I18n.t("txt.modal.edit.cancel"),
                extensionPlaceholder: I18n.t("txt.admin.view.people.users.basic_info.eg_phone_extension"),
                numberPlaceholder: I18n.t("txt.admin.view.people.users.basic_info.eg_of_phone_number")
            });
            n.exports = r
        }
    }), this.require.define({
        "controllers/voice/voice_forwarding_controller": function (e, t, n) {
            var r = t("lib/growl"),
                i, s = Em.Object.extend({
                    user: null,
                    countries: Em.computed.singleton("models/countries"),
                    fowardingCountryValue: null,
                    forwardingNumberValue: null,
                    forwardingExtensionValue: null,
                    addForwardingNumber: function (e) {
                        this._reset(), this.set("user", e), this.get("countries").fetch(), i = t("views/modals/forwarding_number").create({
                            controller: this,
                            target: this
                        }), i.append()
                    },
                    userDidConfirm: function () {
                        var e = this,
                            n = "%@x%@".fmt(this.get("forwardingNumberValue"), this.get("forwardingExtensionValue"));
                        t("models/user/identity").create({
                            value: n,
                            type: "agent_forwarding",
                            user: this.get("user")
                        }).save().done(function () {
                            e._dismissModal()
                        })
                    },
                    userDidCancel: function () {
                        this._dismissModal()
                    },
                    _dismissModal: function () {
                        r.hideErrors(), i.hideModal(), i = null, this._reset()
                    },
                    _reset: function () {
                        this.set("fowardingCountryValue", null), this.set("forwardingNumberValue", null), this.set("forwardingExtensionValue", null), this.set("user", null)
                    }
                }).reopenClass({
                    toString: function () {
                        return "VoiceForwardingController"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/add_tab": function (e, t, n) {
            var r = t("lib/tracking"),
                i = t("controllers/ticket_controller"),
                s = t("controllers/new_organization_controller"),
                o = Em.View.extend(t("lib/recent_tickets_consumer"), {
                    templateName: "templates/general/add_tab",
                    classNames: ["tab", "add"],
                    tagName: "li",
                    dialogBoxSelector: ".popover.bottom",
                    newOrganizationController: function () {
                        return s.create()
                    }.property(),
                    didInsertElement: function () {
                        this.get("recentTickets").fetch(), this.set("dialogBox", this.$(this.get("dialogBoxSelector")))
                    },
                    mouseEnter: function (e) {
                        var t = function () {
                            this.get("dialogBox").show()
                        };
                        this._clearDialogBoxTimer(), this.set("dialogBoxTimer", setTimeout(t.bind(this), 100));
                        var n = this.$().position().left + this.$(".popover").width(),
                            r = $(document).width(),
                            i = "-8px";
                        n > r && (i = r - n - 40 + "px"), this.$(".popover").css("margin-left", i)
                    },
                    mouseLeave: function (e) {
                        this.hideDialogBox(100)
                    },
                    click: function (e) {
                        this.hideDialogBox(), r("Toolbar: Create", "Lotus-general"), i.openNewTicket()
                    },
                    openNewTicket: function () {
                        i.openNewTicket()
                    },
                    hideDialogBox: function (e) {
                        var t = function () {
                            this.get("dialogBox").hide()
                        };
                        this._clearDialogBoxTimer(), this.set("dialogBoxTimer", setTimeout(t.bind(this), e || 0))
                    },
                    _clearDialogBoxTimer: function () {
                        clearTimeout(this.get("dialogBoxTimer"))
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "AddTabView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/admin/admin_menu_view": function (e, t, n) {
            var r = t("controllers/admin_menu_controller"),
                i = Em.View.extend({
                    templateName: "templates/admin/admin_menu",
                    sections: r.get("sections"),
                    controller: r
                });
            n.exports = i
        }
    }), this.require.define({
        "views/admin/benchmark_survey_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/admin/benchmark",
                classNames: "benchmark-survey".w(),
                learnMoreURL: I18n.t("txt.launchpad.benchmark_survey.learn_more_link"),
                init: function () {
                    this._super(), this.set("controller", t("controllers/benchmark_survey_controller").instance())
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/overview/feature_usage_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/feature_usage_metrics_consumer"), {
                templateName: "templates/admin/overview/feature_usage",
                classNames: ["feature_usage"],
                feature: null,
                totalCountBinding: "controller.count",
                usedPastDayCountBinding: "controller.used_past_day_count",
                updatedPastDayCountBinding: "controller.updated_past_day_count",
                updatedRecentlyBinding: "controller.updated_recently",
                mostUsedPastWeekBinding: "controller.most_used_past_week",
                controller: function () {
                    return this.get("featureUsageMetrics").get(this.get("feature"))
                }.property("feature", "featureUsageMetrics.expireAt"),
                featureHumanName: function () {
                    return I18n.t("txt.admin.overview.feature_usage." + this.get("feature") + "_label")
                }.property("feature"),
                noActiveFeatureHeader: function () {
                    return I18n.t("txt.admin.overview.feature_usage.details_dropdown.no_active_" + this.get("feature") + "_label")
                }.property("feature"),
                hasUsedPastDayCount: function () {
                    var e = this.get("usedPastDayCount");
                    return e || e === 0
                }.property("usedPastDayCount"),
                goToRule: function (e) {
                    Zd.Routes.goToHash("/admin/" + this.get("feature") + "/edit/" + e.get("id"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/overview_view": function (e, t, n) {
            var r = t("lib/tracking"),
                i = 3,
                s = t("controllers/support_topics_controller").create(),
                o = t("controllers/launchpad_controller"),
                u = Em.Mixin.create({
                    trackForumArticleVisit: function (e) {
                        var t = $(e.target).closest("a").attr("href");
                        r(t, "admin_overview:system_updates", !1)
                    },
                    trackSettingsVisit: function (e, t) {
                        var n = e.target.href;
                        n = n.split("#")[1], r(n, t, !1)
                    },
                    trackFeatureUsagesSettings: function (e) {
                        this.trackSettingsVisit(e, "admin_overview:feature_usages")
                    },
                    trackSuggestedFeatureSettings: function (e) {
                        this.trackSettingsVisit(e, "admin_overview:suggested_features")
                    },
                    trackActiveFeatureSettings: function (e) {
                        this.trackSettingsVisit(e, "admin_overview:active_features")
                    }
                }),
                a = Em.View.extend(t("lib/account_consumer"), t("lib/feature_collection_consumer"), t("lib/feature_category_collection_consumer"), t("lib/feature_usage_metrics_consumer"), u, {
                    init: function () {
                        this._super(), this.get("announcements").refresh(), this.get("featureUsageMetrics").refresh(), this.set("launchpadController", o.instance())
                    },
                    templateName: "templates/admin/overview",
                    classNames: "overview".w(),
                    announcements: s,
                    currentAnnouncementsPage: 0,
                    oldestAnnouncementsPage: function () {
                        return Math.floor(((this.get("announcements.length") || 1) - 1) / i)
                    }.property("announcements.length"),
                    atNewestAnnouncementsPage: function () {
                        return !this.get("currentAnnouncementsPage")
                    }.property("currentAnnouncementsPage"),
                    atOldestAnnouncementsPage: function () {
                        return this.get("currentAnnouncementsPage") == this.get("oldestAnnouncementsPage")
                    }.property("currentAnnouncementsPage", "oldestAnnouncementsPage"),
                    visibleAnnouncements: function () {
                        var e = this.get("announcements"),
                            t = this.get("currentAnnouncementsPage"),
                            n = e.slice(t * i, (t + 1) * i);
                        return n
                    }.property("currentAnnouncementsPage", "announcements.length"),
                    goToNewerAnnouncementsPage: function () {
                        this.get("atNewestAnnouncementsPage") || this.set("currentAnnouncementsPage", this.get("currentAnnouncementsPage") - 1)
                    },
                    goToOlderAnnouncementsPage: function () {
                        this.get("atOldestAnnouncementsPage") || this.set("currentAnnouncementsPage", this.get("currentAnnouncementsPage") + 1)
                    },
                    goToUpdateAccount: function () {
                        Zd.Routes.goToHash("#/admin/account")
                    },
                    suggestedFeatures: function () {
                        var e = this.get("featureCollection"),
                            t = e.filterProperty("isAvailable"),
                            n = t.filterProperty("isActive", !1);
                        return n.length < 6 && n.pushObjects(e.filterProperty("isNewlyOfferedInUpgrade")), n.slice(0, 6)
                    }.property("featureCollection.@each.isActive", "featureCollection.@each.isAvailable"),
                    suggestedFeaturesShown: !0,
                    activeFeaturesShown: function () {
                        return !this.get("suggestedFeaturesShown")
                    }.property("suggestedFeaturesShown"),
                    showSuggestedFeatures: function () {
                        this.set("suggestedFeaturesShown", !0)
                    },
                    showActiveFeatures: function () {
                        this.set("suggestedFeaturesShown", !1)
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/admin/subscription/agent_cost_summary_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/admin/subscription/agent_cost_summary",
                controller: t("controllers/admin/subscription_controller"),
                previewSubscriptionBinding: "controller.previewSubscription",
                isStarterPlanBinding: "previewSubscription.isStarterPlan"
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/plan_options_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/admin/subscription/plan_options",
                classNames: ["options"],
                classNameBindings: ["updating", "updateFailed"],
                updateFailed: function () {
                    return this.get("previewSubscription.hasFailedFetch")
                }.property("previewSubscription.hasFailedFetch"),
                updating: function () {
                    var e = this.get("previewSubscription.isFetching"),
                        t = !this.get("previewSubscription.hasFailedFetch");
                    return e && t
                }.property("previewSubscription.isFetching", "previewSubscription.hasFailedFetch"),
                controller: t("controllers/admin/subscription_controller"),
                currentSubscriptionBinding: "controller.currentSubscription",
                previewSubscriptionBinding: "controller.previewSubscription",
                currentAccountBinding: "controller.currentAccount",
                selectedBillingCycle: null,
                navigateToNextPageLabel: function () {
                    return this.get("currentAccount.isInternallyBilled") ? I18n.t("txt.admin.subscription.submit.continue") : I18n.t("txt.admin.subscription.submit.update")
                }.property("currentAccount.isInternallyBilled"),
                isEditing: !1,
                updatePreviewTextField: Em.TextField.extend({
                    shouldInvalidate: !1,
                    change: function () {
                        if (this.get("parentView.canRefresh")) {
                            var e = this.get("parentView.previewSubscription"),
                                t = this.get("parentView.currentSubscription");
                            this.get("shouldInvalidate") && e.ensurePromoCodePermission(t), e.refresh()
                        }
                    },
                    focusIn: function () {
                        this.set("parentView.isEditing", !0)
                    },
                    focusOut: function () {
                        this.set("parentView.isEditing", !1)
                    }
                }),
                updatePreviewSelect: Em.Select.extend({
                    change: function () {
                        if (this.get("parentView.canRefresh")) {
                            var e = this.$().val();
                            if (e) {
                                this.set("parentView.controller.selectedBillingCycle", this.get("content.%@".fmt(e)));
                                var t = this.get("parentView.previewSubscription"),
                                    n = this.get("parentView.currentSubscription");
                                t.ensurePromoCodePermission(n), t.refresh()
                            }
                        }
                    }
                }),
                canRefresh: function () {
                    return this.get("isMaxAgentsCountValid")
                }.property("isMaxAgentsCountValid"),
                disableSubmit: function () {
                    var e = this.get("currentSubscription"),
                        t = this.get("previewSubscription"),
                        n = this.get("currentAccount.isInternallyBilled"),
                        r = t.differsFrom(e),
                        i = this.get("isMaxAgentsCountValid") && this.get("isPromoCodeValid"),
                        s = !this.get("updating") && !this.get("updateFailed");
                    return !n && !r || !i || !s
                }.property("updating", "updateFailed", "currentAccount.isInternallyBilled", "previewSubscription.max_agents", "previewSubscription.promo_code", "previewSubscription.voice_optin", "previewSubscription.voice_transcription_optin"),
                isMaxAgentsCountValid: function () {
                    var e = this.get("previewSubscription.max_agents");
                    return e >= 1
                }.property("previewSubscription.max_agents"),
                isMaxAgentsCountNotValid: function () {
                    return !this.get("isMaxAgentsCountValid")
                }.property("isMaxAgentsCountValid"),
                maxAgentsStatusText: function () {
                    return this.get("updating") || this.get("isEditing") ? "" : this.get("isMaxAgentsCountValid") ? "" : I18n.t("txt.admin.views.subscription.plan_options_view.max_agents_status_text.need_at_least_one_agent")
                }.property("updating", "isEditing", "isMaxAgentsCountValid"),
                billingCycleWithTaxText: function () {
                    return I18n.t("txt.admin.views.settings.account._subscription_options_form.billed_with_tax", {
                        billingCycleName: I18n.t("txt.admin.gems.zendesk_core.billing_cycle_type." + this.get("parentView.previewSubscription.billing_cycle_name").toLowerCase())
                    })
                }.property("parentView.previewSubscription.billing_cycle_name"),
                isPromoCodeValid: function () {
                    var e = this.get("previewSubscription.promo_code_status");
                    return e === "ok" || e == null || e === ""
                }.property("previewSubscription.promo_code_status"),
                isPromoCodeNotValid: function () {
                    return !this.get("isPromoCodeValid")
                }.property("isPromoCodeValid"),
                disablePromoCode: function () {
                    return this.get("isPromoCodeNotAllowed")
                }.property("updating", "isPromoCodeNotAllowed"),
                isPromoCodeAllowed: function () {
                    return this.get("previewSubscription.isPromoCodeAllowed")
                }.property("previewSubscription.isPromoCodeAllowed"),
                isPromoCodeNotAllowed: function () {
                    return !this.get("isPromoCodeAllowed")
                }.property("isPromoCodeAllowed"),
                promoCodePlaceHolderText: function () {
                    var e = I18n.t("txt.admin.views.settings.account._subscription_options_form.promo_code_not_eligible");
                    return this.get("isPromoCodeAllowed") ? "" : e
                }.property("isPromoCodeAllowed"),
                promoCodeStatusText: function () {
                    var e = "",
                        t = this.get("previewSubscription.promo_code");
                    if (this.get("updating") || this.get("isEditing")) return e;
                    switch (this.get("previewSubscription.promo_code_status")) {
                    case null:
                        break;
                    case "ok":
                        break;
                    case "not_active":
                        e = I18n.t("txt.admin.views.subscription.plan_options_view.promo_code_status_text.not_active", {
                            code: t
                        });
                        break;
                    case "not_valid":
                        e = I18n.t("txt.admin.views.subscription.plan_options_view.promo_code_status_text.not_valid", {
                            code: t
                        });
                        break;
                    case "not_allowed":
                        e = I18n.t("txt.admin.views.subscription.plan_options_view.promo_code_status_text.not_allowed")
                    }
                    return e
                }.property("updating", "isEditing", "isPromoCodeValid")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/subscription_cancel_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/account_consumer"), {
                templateName: "templates/admin/subscription/subscription_cancel",
                classNames: ["subscription_cancel"],
                init: function () {
                    this.get("currentUser") == null && this.set("currentUser", Em.get("Zendesk.currentUser")), this._super()
                },
                isVisible: Em.computed.oneWay("currentUser.isAccountOwner"),
                userWantsToCancel: !1,
                showCancelSubscriptionWarning: function () {
                    this.set("userWantsToCancel", !0)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/cancel_subscription": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                classNames: ["modal", "cancel_subscription_modal"],
                title: I18n.t("txt.views.modals.cancel_subscription.title"),
                body: I18n.t("txt.views.modals.cancel_subscription.body"),
                confirmLabel: I18n.t("txt.views.modals.cancel_subscription.confirmLabel"),
                cancelLabel: I18n.t("txt.views.modals.cancel_subscription.cancelLabel")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/subscription_cancel_warning_view": function (e, t, n) {
            var r = t("lib/growl"),
                i = Em.View.extend({
                    CancelSubscriptionModal: t("views/modals/cancel_subscription"),
                    controller: t("controllers/admin/subscription_controller"),
                    templateName: "templates/admin/subscription/subscription_cancel_warning",
                    classNames: ["subscription_cancel_warning"],
                    classNameBindings: ["parentView.userWantsToCancel:visible"],
                    modal: null,
                    userDidCancel: function () {
                        this.get("modal").hideModal()
                    },
                    userDidConfirm: function () {
                        var e = this.get("modal").$(".btn");
                        e.addClass("disabled"), e.attr("disabled", "disabled"), this.get("controller").cancel({
                            subdomain: this.get("parentView.currentAccount.subdomain"),
                            done: function () {
                                $(document.body).replaceWith("<h2>" + I18n.t("txt.views.subscription_view.cancel_subscription.cancel_success_message") + "</h2>")
                            },
                            fail: function () {
                                r.error(I18n.t("txt.views.subscription_view.cancel_subscription.cancel_fail_message"))
                            },
                            always: function () {
                                this.get("modal").hideModal()
                            }
                        })
                    },
                    confirmSubscriptionCancellation: function () {
                        var e = this.get("CancelSubscriptionModal");
                        this.set("modal", e.create({
                            target: this
                        }).append())
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/admin/subscription/subscription_confirmation_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/admin/subscription/subscription_confirmation",
                classNames: ["admin", "subscription", "confirmation"],
                classNameBindings: ["updating", "upgrade", "downgrade"],
                controller: t("controllers/admin/subscription/subscription_confirmation_controller"),
                subscriptionController: t("controllers/admin/subscription_controller"),
                currentSubscriptionBinding: "subscriptionController.currentSubscription",
                previewSubscriptionBinding: "subscriptionController.previewSubscription",
                downgradeBinding: Em.Binding.oneWay("controller.downgrade"),
                upgradeBinding: Em.Binding.oneWay("controller.upgrade"),
                billingCycleDescription: function (e) {
                    var t = e.get("billing_cycle_name");
                    if (t) return t = t.toLowerCase(), I18n.t("txt.views.subscription_view.characteristics.details.billing.%@".fmt(t))
                },
                currentSubscriptionBillingCycle: function () {
                    return this.billingCycleDescription(this.get("currentSubscription"))
                }.property("currentSubscription.billing_cycle_name"),
                previewSubscriptionBillingCycle: function () {
                    return this.billingCycleDescription(this.get("previewSubscription"))
                }.property("previewSubscription.billing_cycle_name"),
                voiceOptionsDescription: function (e) {
                    var t = e.get("voice_optin"),
                        n = e.get("voice_transcription_optin"),
                        r = I18n.t("txt.admin.subscription.confirmation.voice_options_description.None");
                    return t && (r = n ? I18n.t("txt.admin.subscription.confirmation.voice_options_description.ZendeskVoiceWithTranscription") : I18n.t("txt.admin.subscription.confirmation.voice_options_description.ZendeskVoiceWithoutTranscription")), r
                },
                currentSubscriptionVoiceOptions: function () {
                    return this.voiceOptionsDescription(this.get("currentSubscription"))
                }.property("currentSubscription.voice_optin", "currentSubscription.voice_transcription_optin"),
                previewSubscriptionVoiceOptions: function () {
                    return this.voiceOptionsDescription(this.get("previewSubscription"))
                }.property("previewSubscription.voice_optin", "previewSubscription.voice_transcription_optin"),
                cancel: function () {
                    this.goToSubscription()
                },
                status: function () {
                    return this.get("updating") ? I18n.t("txt.admin.subscription.confirmation.updating") : I18n.t("txt.admin.subscription.confirmation.confirm")
                }.property("updating"),
                confirm: function () {
                    var e = this.$("button.confirm"),
                        t = this;
                    this.set("updating", !0), e.attr("disabled", "disabled"), this.get("subscriptionController").update().done(function () {
                        t.goToSubscription()
                    }).always(function () {
                        t.set("updating", !1), e.removeAttr("disabled")
                    })
                },
                goToSubscription: function () {
                    Zd.Routes.goToHash("/admin/subscription")
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/subscription_information_view": function (e, t, n) {
            var r = t("controllers/admin/subscription_controller"),
                i = Em.View.extend({
                    templateName: "templates/admin/subscription/subscription_information",
                    classNames: ["subscription_info"],
                    classNameBindings: ["isFetched", "isSubscribed"],
                    controller: r,
                    isAccountOwner: Em.computed.oneWay("controller.isAccountOwner"),
                    currentSubscription: Em.computed.oneWay("controller.currentSubscription"),
                    isFetchedBinding: "currentSubscription.isFetched",
                    isSubscribed: function () {
                        return !this.get("controller.currentAccount.isInternallyBilled")
                    }.property("controller.currentAccount.isInternallyBilled"),
                    billingCycleFrequencyString: function () {
                        return I18n.t("txt.admin.views.accounts.subscription._subscription_summary.billed_" + this.get("currentSubscription.billing_cycle_name"))
                    }.property("currentSubscription.billing_cycle_name"),
                    trialDetailsString: function () {
                        var e = this.get("currentSubscription.days_left_in_trial");
                        return e <= 0 && (e = "no more"), I18n.t("txt.views.subscription_view.trial.details", {
                            plan_name: this.get("currentSubscription.plan_name"),
                            max_agents: this.get("currentSubscription.max_agents"),
                            days_left_in_trial: e
                        })
                    }.property("currentSubscription"),
                    showCreditCardEntryPage: function () {
                        Zd.Routes.goToHash("/admin/subscription/payment")
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/admin/subscription/subscription_payment_view": function (e, t, n) {
            var r = t("controllers/admin/subscription/subscription_payment_controller").instance,
                i = t("controllers/admin/subscription_controller"),
                s = Em.View.extend({
                    templateName: "templates/admin/subscription/subscription_payment",
                    controller: r,
                    subscriptionController: i,
                    previewSubscriptionBinding: "subscriptionController.previewSubscription",
                    currentSubscriptionBinding: "subscriptionController.currentSubscription",
                    zuoraIframeView: Em.View.extend({
                        tagName: "iframe",
                        classNames: "iframe".w(),
                        attributeBindings: "src name width height".w(),
                        src: null,
                        name: "zendesk-clean-admin",
                        width: "566px",
                        height: "435px"
                    })
                });
            n.exports = s
        }
    }), this.require.define({
        "views/admin/subscription/subscription_plans_view": function (e, t, n) {
            var r = t("controllers/admin/subscription_controller"),
                i = t("lib/subscription/subscription_plan_type"),
                s = Em.View.extend({
                    templateName: "templates/admin/subscription/subscription_plans",
                    classNames: ["section_element", "plans"],
                    classNameBindings: ["previewedPlanName", "updating", "updateFailed"],
                    controller: r,
                    currentSubscriptionBinding: "controller.currentSubscription",
                    previewSubscriptionBinding: "controller.previewSubscription",
                    updateFailed: function () {
                        return this.get("currentSubscription.hasFailedFetch")
                    }.property("currentSubscription.hasFailedFetch"),
                    updating: function () {
                        var e = this.get("currentSubscription.isFetching"),
                            t = !this.get("currentSubscription.hasFailedFetch");
                        return e && t
                    }.property("currentSubscription.isFetching", "currentSubscription.hasFailedFetch"),
                    previewedPlanName: function () {
                        return this.get("previewSubscription.planName")
                    }.property("previewSubscription.planName"),
                    changePlan: function (e) {
                        var t = $(e.target).data("plan"),
                            n = this.get("currentSubscription"),
                            r = this.get("previewSubscription");
                        r.set("plan_type", i.lookupPlanType(t)), r.ensurePromoCodePermission(n), r.refresh()
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/admin/subscription/subscription_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/admin/subscription",
                classNames: ["admin", "subscription"],
                controller: t("controllers/admin/subscription_controller")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/voice_optin_checkbox": function (e, t, n) {
            var r = Em.Checkbox.extend({
                elementId: "voice_optin_checkbox",
                previewSubscriptionBinding: "parentView.previewSubscription",
                checkedBinding: "previewSubscription.voice_optin",
                click: function () {
                    var e = this.get("checked");
                    this.set("previewSubscription.voice_optin", e), this.set("previewSubscription.voice_transcription_optin", e)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/subscription/voice_transcription_checkbox": function (e, t, n) {
            var r = Em.Checkbox.extend({
                elementId: "voice_transcription_optin_checkbox",
                previewSubscriptionBinding: "parentView.previewSubscription",
                checkedBinding: "previewSubscription.voice_transcription_optin",
                disabled: Em.computed.not("previewSubscription.voice_optin"),
                click: function () {
                    this.set("previewSubscription.voice_transcription_optin", this.get("checked"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/switch_to_classic_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/settings_consumer"), {
                templateName: "templates/admin/switch_to_classic",
                classNames: "switch-to-classic".w(),
                currentAccount: t("lib/current_account"),
                switchURL: function () {
                    return I18n.t("txt.admin.switch_to_classic.switchURL", {
                        subdomain: this.get("currentAccount.subdomain")
                    })
                }.property(),
                switchToClassic: function () {
                    $(".switch-to-classic button").attr("disabled", !0);
                    var e = this.get("currentAccount"),
                        t = this.get("settings");
                    t.set("id", "random_id").set("prefer_lotus", !1).save().done(function () {
                        window.location = "/home"
                    })
                }
            });
            n.exports = r.create()
        }
    }), this.require.define({
        "views/admin/ticket_forms_instructions_view": function (e, t, n) {
            var r = Em.View.extend({
                controllerBinding: "parentView.ticketFormsInstructionsController",
                templateName: "templates/admin/ticket_forms_instructions",
                classNames: ["sidebar"],
                label: I18n.t("txt.admin.views.ticket_forms.end_user_text.hint_v2"),
                endUserInstructions: function () {
                    return this.$("textarea").val()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/admin/ticket_forms_view": function (e, t, n) {
            var r = Em.View.extend({
                ticketFormsInstructionsController: null,
                templateName: "templates/admin/ticket_forms_view",
                classNames: ["ticket_forms"],
                TicketFormsListView: t("api/ticket_forms/lib").Views.ListView,
                TicketFormsInstructionsView: t("views/admin/ticket_forms_instructions_view"),
                init: function () {
                    this._super.apply(this, arguments);
                    var e = t("controllers/admin/ticket_forms_instructions_controller");
                    this.set("ticketFormsInstructionsController", e.create({}))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/alert_view": function (e, t, n) {
            var r = t("lib/tracking"),
                i = Em.Mixin.create({
                    trackAlertLoad: Ember.observer(function () {
                        var e = this.get("currentAlert.id");
                        e && r(e, "alert:load")
                    }, "currentAlert"),
                    trackAlertLinkClick: function () {
                        r(this.get("currentAlert.id"), "alert:link")
                    },
                    trackDismissAlerts: function () {
                        r(this.get("sortedAlerts").mapProperty("id"), "alert:dismiss")
                    }
                }),
                s = Em.View.extend(t("lib/features").consumer, i, {
                    templateName: "templates/layouts/alert",
                    classNameBindings: ["visible:visible"],
                    controller: Em.computed.singleton("controllers/alerts_controller"),
                    sortedAlerts: Em.computed.alias("controller.sortedAlerts"),
                    currentAlertPage: 1,
                    currentAlert: function () {
                        return this.get("sortedAlerts")[this.get("currentAlertPage") - 1]
                    }.property("currentAlertPage", "sortedAlerts.@each").cacheable(),
                    visible: function () {
                        return this.get("sortedAlerts").length
                    }.property("sortedAlerts.length").cacheable(),
                    showPagination: function () {
                        return this.get("sortedAlerts").length > 1
                    }.property("sortedAlerts.length").cacheable(),
                    hasPrevAlert: function () {
                        return this.get("currentAlertPage") > 1
                    }.property("currentAlertPage").cacheable(),
                    hasNextAlert: function () {
                        return this.get("currentAlertPage") < this.get("sortedAlerts").length
                    }.property("currentAlertPage", "sortedAlerts.length").cacheable(),
                    goToPrevAlert: function () {
                        this.get("hasPrevAlert") && this.set("currentAlertPage", this.get("currentAlertPage") - 1)
                    },
                    goToNextAlert: function () {
                        this.get("hasNextAlert") && this.set("currentAlertPage", this.get("currentAlertPage") + 1)
                    },
                    dismissAlerts: function () {
                        this.get("controller").dismissAll(), this.trackDismissAlerts()
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/apps/app_pane_mixin": function (e, t, n) {
            n.exports = function (t, n) {
                var r = t.get("app"),
                    i = "apps_" + n;
                return {
                    classNames: ["apps", Em.get(r, "appClassName"), i, "app_pane"],
                    didInsertElement: function () {
                        t.bindEvents(this), r.renderCurrentState(), this._super.apply(this, arguments)
                    }
                }
            }
        }
    }), this.require.define({
        "views/apps/apps_button_group": function (e, t, n) {
            var r = Em.Mixin.create({
                voiceState: Em.computed.singleton("lib/voice/state"),
                classNameBindings: ["voiceState.hasVoiceEnabled:timer_slider"],
                classNames: ["apps_group", "btn-group"]
            });
            n.exports = r
        }
    }), this.require.define({
        "views/apps/apps_toolbar_view": function (e, t, n) {
            var r = t("views/apps/apps_button_group"),
                i = Em.View.extend({
                    controller: Em.computed.singleton("controllers/apps_controller"),
                    title: function () {
                        return I18n.t("apps.button.reload_all")
                    }.property().cacheable(),
                    isVisible: function () {
                        return Zendesk.Apps.isZatEnabled()
                    }.property().cacheable(),
                    classNames: ["reload_apps", "btn"]
                }).create({
                    click: function () {
                        this.get("controller").reloadAllApps()
                    }
                });
            n.exports = Em.ContainerView.extend(r, {
                childViews: [i]
            }).reopenClass({
                preservesContext: !0
            })
        }
    }), this.require.define({
        "views/button_toolbar/button_view": function (e, t, n) {
            var r = Em.Mixin.create({
                attributeBindings: ["title"],
                isActive: !1,
                isHovered: !1,
                tagName: "a",
                title: null,
                mouseEnter: function (e, t) {
                    this.set("isHovered", !0)
                },
                mouseLeave: function (e, t) {
                    this.set("isHovered", !1)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/button_toolbar/button_icon_view": function (e, t, n) {
            var r = t("views/button_toolbar/button_view"),
                i = Em.View.extend({
                    tagName: "img",
                    attributeBindings: ["src", "title"],
                    src: null,
                    title: function () {
                        return this.get("parentView.title")
                    }.property("parentView.title").cacheable(),
                    isVisible: function () {
                        return this.get("viewName") === this.get("parentView.currentIconState")
                    }.property("viewName", "parentView.currentIconState").cacheable()
                }),
                s = Em.Mixin.create(r, {
                    iconStatePattern: Em.required(),
                    getIconPath: Em.required(),
                    createIconView: function (e, t) {
                        var n = this.get("iconStatePattern").fmt(e),
                            r = this.getIconPath(n),
                            s;
                        s = this.createChildView(i, {
                            viewName: e,
                            src: r
                        }), this.get("childViews").pushObject(s)
                    },
                    createIconViews: function () {
                        this.createIconView("active"), this.createIconView("inactive"), this.createIconView("hover")
                    },
                    currentIconState: function () {
                        return this.get("isActive") ? "active" : this.get("isHovered") ? "hover" : "inactive"
                    }.property("isActive", "isHovered").volatile(),
                    didInsertElement: function () {
                        return this.createIconViews(), this._super.apply(this, arguments)
                    },
                    setIconState: function (e, t) {
                        var n = this.get(e);
                        n && n.set("src", t)
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/apps/base_bar_app_view": function (e, t, n) {
            var r = t("views/button_toolbar/button_icon_view"),
                i = Em.Mixin.create(r, Zendesk.Apps.AppView, {
                    classNames: ["btn_apps"],
                    appContainer: Em.computed.alias("parentView"),
                    target: null,
                    isActive: function () {
                        return this.get("appContainer.activeAppView") === this
                    }.property("appContainer.activeAppView"),
                    getIconPath: function (e) {
                        return this.get("app").assetURL(e)
                    },
                    title: function () {
                        var e = this.get("appContainer.app");
                        return e && e.setting("title")
                    }.property(),
                    activatePane: function () {
                        var e = this.get("appContainer"),
                            t = {
                                firstLoad: !1
                            };
                        this.get("target") || (e.createPaneForApp(this), t.firstLoad = !0), e.activateAppView(this, t)
                    },
                    deactivatePane: function () {
                        if (!this.get("isActive")) return;
                        this.get("appContainer").deactivateAppView()
                    },
                    iconStatePattern: function () {
                        return "icon_" + this.get("appContainer.site") + "_%@.png"
                    }.property(),
                    canvas: function () {
                        if (this.get("target.state") === "inDOM") return this.get("target.element")
                    }.property().volatile()
                });
            n.exports = i
        }
    }), this.require.define({
        "views/users/user_view": function (e, t, n) {
            var r = Em.View.extend(t("views/users/user_field_views"), t("lib/lotus/swappable"), t("lib/views/render_if_activated"), t("lib/features").consumer, t("lib/settings_consumer"), {
                templateName: "templates/users/pane",
                name: "user",
                userBinding: "delegate.user",
                tagName: "section",
                classNames: ["main_panes", "split_pane", "user"],
                everActivatedBinding: "controller.everActivated"
            });
            n.exports = r
        }
    }), this.require.define({
        "views/main_pane": function (e, t, n) {
            var r = t("lib/lotus/swappable"),
                i = t("lib/initialization_hooks").uiReady,
                s = Em.ContainerView.extend(t("lib/views/registrable_view_mixin"), t("lib/main_pane_keyboard_shortcuts"), {
                    controller: Em.computed.singleton("controllers/main_panes_controller"),
                    name: "mainPane",
                    childViews: Em.computed.emptyArray(),
                    presentPanes: Em.computed.emptyArray(),
                    activeChildNameBinding: Em.Binding.oneWay("Zendesk.section"),
                    addSection: function (e) {
                        var t, n;
                        return t = Em.View.extend(r, e).create({
                            classNames: ["main_panes"],
                            tagName: "section"
                        }), n = this.createChildView(t), this.get("childViews").pushObject(n), n
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/apps/nav_bar/nav_bar_app_view": function (e, t, n) {
            var r = Em.ContainerView.extend(t("views/apps/base_bar_app_view"), {
                click: function () {
                    this.get("parentView").goToPath("apps/%@".fmt(this.get("appTitle")))
                },
                appTitle: function () {
                    return this.get("app").setting("title").dasherize()
                }.property("app").cacheable(),
                appRoute: function () {
                    return "app-%@".fmt(this.get("appTitle"))
                }.property("appTitle").cacheable()
            }).reopenClass({
                preservesContext: !0
            });
            n.exports = r
        }
    }), this.require.define({
        "views/apps/nav_bar/nav_bar_app_container_view": function (e, t, n) {
            var r = t("views/apps/nav_bar/nav_bar_app_view"),
                i = t("views/apps/app_pane_mixin"),
                s = Em.ContainerView.extend(Zendesk.Apps.BarAppContainer, {
                    site: Zendesk.Apps.Site.NAV_BAR,
                    appViewClass: r,
                    mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
                    mainPane: Em.computed.oneWay("mainPanesController.views.mainPane"),
                    createPaneForApp: function (e) {
                        var t = this._addPane(e);
                        e.set("target", t)
                    },
                    _addPane: function (e) {
                        var t = i(e, this.get("site"));
                        return $.extend(t, {
                            name: e.get("appRoute"),
                            render: function (t) {
                                t.push(e.get("app").renderTemplate("layout"))
                            }
                        }), this.get("mainPane").addSection(t)
                    },
                    paneDidChange: function () {
                        this.get("childViews.length") && this._notifyAppsOfPaneSwitch(Zendesk.get("section"))
                    }.observes("Zendesk.section"),
                    _notifyAppsOfPaneSwitch: function (e) {
                        var t = this.get("childViews").findProperty("appRoute", e);
                        t ? t.activatePane() : this.deactivateAppView()
                    }
                }).reopenClass({
                    preservesContext: !0
                });
            n.exports = s
        }
    }), this.require.define({
        "views/apps/top_bar/top_bar_app_view": function (e, t, n) {
            var r = Em.ContainerView.extend(t("views/apps/base_bar_app_view"), {
                classNames: ["btn"],
                classNameBindings: ["isActive:active"],
                click: function () {
                    this.popover("toggle")
                },
                popover: function (e) {
                    switch (e) {
                    case "hide":
                        this.deactivatePane();
                        break;
                    case "toggle":
                        this.get("isActive") ? this.deactivatePane() : this.activatePane();
                        break;
                    default:
                        this.activatePane()
                    }
                }
            }).reopenClass({
                preservesContext: !0
            });
            n.exports = r
        }
    }), this.require.define({
        "views/apps/top_bar/top_bar_popover_view": function (e, t, n) {
            function l(e) {
                return a = a || e.innerHeight() - e.height() + i + parseInt(e.css("margin-top"), 10), a
            }

            function c(e) {
                return f = f || e.outerWidth() - e.width() + i, f
            }

            function h(e, t, n) {
                return n = Math.min(t, n), Math.max(e, n)
            }
            var r = 5,
                i = r * 2,
                s = 100,
                o = 100,
                u = $(window),
                a, f, p = Em.View.extend({
                    classNames: ["popover", "below", "static"],
                    isVisible: Em.computed.bool("parentView.isActive"),
                    didInsertElement: function () {
                        this.on("becameVisible", this, "position"), this.position(), this._super()
                    },
                    render: function (e) {
                        var t = this.get("parentView.app").renderTemplate("layout"),
                            n = '<div class="arrow"></div><div class="popover-inner">' + t + "</div>";
                        e.push(n)
                    },
                    resize: function (e, t) {
                        var n = this.$(),
                            r = u.width() - c(n),
                            i = u.height() - l(n),
                            a = n.width();
                        e = h(o, r, e), t = h(s, i, t), n.width(e).height(t), !isNaN(e) && e !== a && this.position()
                    },
                    position: function () {
                        var e = this.$(),
                            t = this.get("parentView").$(),
                            n = e.width() / 2,
                            i = t.position().left + t.width() / 2 - n,
                            s = 0,
                            o = 0;
                        e.css("left", i), o = u.width() - this.get("element").getBoundingClientRect().right, o < r && (s = o - r, e.css("left", i + s)), e.find(".arrow").css("left", n - s + 1)
                    }
                }).reopenClass({
                    preservesContext: !0
                });
            n.exports = p
        }
    }), this.require.define({
        "views/apps/top_bar/top_bar_app_container_view": function (e, t, n) {
            var r = t("views/apps/apps_button_group"),
                i = t("views/apps/top_bar/top_bar_app_view"),
                s = t("views/apps/app_pane_mixin"),
                o = t("views/apps/top_bar/top_bar_popover_view"),
                u = t("controllers/voice/dialer_controller").instance(),
                a = Em.ContainerView.extend(r, Zendesk.Apps.BarAppContainer, {
                    site: Zendesk.Apps.Site.TOP_BAR,
                    appViewClass: i,
                    didInsertElement: function () {
                        u.on("dialerIsVisible", this, "deactivateAppView"), this._super()
                    },
                    createPaneForApp: function (e) {
                        var t = s(e, this.get("site")),
                            n = o.extend(t, {
                                parentView: e
                            }),
                            r = this.createChildView(n);
                        e.set("target", r), this.get("childViews").pushObject(r)
                    },
                    containerMethods: function () {
                        var e = this;
                        return $.extend({}, this._super(), {
                            popover: function (t) {
                                var n = e.getAppView(this),
                                    r = n.get("target"),
                                    i = typeof t;
                                !t || i === "string" ? n.popover(t) : i === "object" && r && r.resize(t.width, t.height)
                            }
                        })
                    }
                }).reopenClass({
                    preservesContext: !0
                });
            n.exports = a
        }
    }), this.require.define({
        "views/branding_header": function (e, t, n) {
            var r = t("controllers/voice/dialer_controller").instance(),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    dialerController: r,
                    voiceState: i,
                    showDialer: function () {
                        return ChatLotus.Service.get("hasChatEnabled") || this.get("voiceState.hasVoiceEnabled")
                    }.property("voiceState.hasVoiceEnabled", "ChatLotus.Service.hasChatEnabled").cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/branding_header_button_toolbar_view": function (e, t, n) {
            var r = t("views/apps/top_bar/top_bar_app_container_view"),
                i = t("views/apps/apps_toolbar_view"),
                s = Em.ContainerView.extend({
                    classNames: ["btn-toolbar", "pull-right"],
                    childViews: [r, i]
                }).reopenClass({
                    preservesContext: !0
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/calling_code_view": function (e, t, n) {
            var r = t("lib/channels/country_number_helper"),
                i = t("lib/views/select_view"),
                s = t("lib/voice/state").instance(),
                o = i.extend({
                    countries: Em.computed.singleton("models/countries"),
                    valueBinding: Em.required(),
                    numberBinding: Em.required(),
                    configOptions: {
                        clsSelectMenuScope: "country-select-menu zd-selectmenu",
                        renderItemContent: function (e) {
                            return "<div class='flag-icon flags-%@'></div>%@".fmt(e.value.toLowerCase(), e.label)
                        },
                        renderDisplayValue: function (e) {
                            return "<div class='flag-icon flags-%@'></div>".fmt(e.value.toLowerCase())
                        }
                    },
                    options: function () {
                        var e = [];
                        return (this.get("countries") || []).forEach(function (t, n) {
                            e.push({
                                value: t.get("code"),
                                label: "%@ (+%@)".fmt(t.get("name"), t.get("calling_code"))
                            })
                        }), e
                    }.property("countries.@each").cacheable(),
                    onDialerNumberChanged: function () {
                        if (!s.get("activeCall")) {
                            var e = r.getCountry(this.get("number"));
                            e && this.set("value", e.get("code"))
                        }
                    }.observes("number"),
                    onCountryToggled: function () {
                        var e = this.get("countries").findProperty("code", this.get("value"));
                        if (e) {
                            var t = this.get("number") || "",
                                n = r.getCountry(t);
                            if (n) {
                                t = t.replace(n.get("calling_code"), "").replace("+", "");
                                var i = t.search(/[1-9]/);
                                t = t.substr(i, t.length)
                            }
                            this.set("number", "+%@%@".fmt(e.get("calling_code"), t))
                        }
                    }.observes("value")
                });
            n.exports = o
        }
    }), this.require.define({
        "views/channels/agent_forwarding_number_code_view": function (e, t, n) {
            var r = t("views/channels/calling_code_view"),
                i = r.extend({
                    controllerBinding: "parentView.controller",
                    valueBinding: "controller.fowardingCountryValue",
                    numberBinding: "controller.forwardingNumberValue"
                });
            n.exports = i
        }
    }), this.require.define({
        "views/channels/agent_forwarding_text_field_view": function (e, t, n) {
            var r = Em.TextField.extend({
                controllerBinding: "parentView.controller"
            });
            n.exports = r
        }
    }), this.require.define({
        "views/channels/availability/availability_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "button",
                classNames: ["availability"],
                classNameBindings: ["resultState"],
                label: I18n.t("txt.voice.dialer.offline"),
                availabilityDidChange: Em.required(),
                isAvailable: Em.required(),
                mouseEnter: function () {
                    this.get("isAvailable") ? (this.set("label", I18n.t("txt.voice.dialer.offline")), this.set("resultState", "offline")) : (this.set("label", I18n.t("txt.voice.dialer.online")), this.set("resultState", "online"))
                },
                mouseLeave: function () {
                    this.get("isAvailable") ? (this.set("label", I18n.t("txt.voice.dialer.online")), this.set("resultState", "online")) : (this.set("label", I18n.t("txt.voice.dialer.offline")), this.set("resultState", "offline"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/channels/availability/chat_availability_view": function (e, t, n) {
            var r = t("views/channels/availability/availability_view").extend({
                classNameBindings: ["ChatLotus.Service.Availability.availabilityClass"],
                labelBinding: "ChatLotus.Service.Availability.dialerAvailability",
                availability: function () {
                    return Ember.get("ChatLotus.Service.Availability")
                }.property("ChatLotus.Service.Availability").cacheable(),
                isAvailable: Em.computed.equal("availability.availabilityClass", "available"),
                click: function () {
                    return ChatLotus.Service.Availability.toggleAvailability(), !0
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/channels/availability/voice_availability_view": function (e, t, n) {
            var r = t("controllers/voice/voice_controller").instance(),
                i = t("views/channels/availability/availability_view").extend({
                    voiceController: r,
                    voiceState: r.get("voiceState"),
                    classNameBindings: ["voiceState.available"],
                    labelBinding: "voiceState.voiceResource.dialerAvailability",
                    isAvailableBinding: "voiceState.available",
                    click: function () {
                        return this.get("voiceController").toggleAvailability(), !0
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/channels/availability/voice_split_availability_view": function (e, t, n) {
            var r = t("lib/voice/availability").instance(),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    voiceState: i,
                    voiceNumber: Em.computed.oneWay("voiceState.voiceResource.voiceNumber"),
                    hasVoiceNumber: Em.computed.oneWay("voiceState.voiceResource.hasVoiceNumber"),
                    via: Em.computed.oneWay("voiceState.via"),
                    isViaBrowser: Em.computed.equal("via", "client"),
                    isViaPhone: Em.computed.equal("via", "phone"),
                    availableViaBrowser: function () {
                        return r.via("client").sync(), !0
                    },
                    availableViaPhone: function () {
                        return r.via("phone").sync(), !0
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/call_back_view": function (e, t, n) {
            var r = t("lib/voice/outbound_call"),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    userBinding: "parentView.content.requester",
                    voiceState: i,
                    isVisibleBinding: "voiceState.canCallBack",
                    didInsertElement: function () {
                        var e = this;
                        this.$(".toggle").click(function () {
                            e.$(".dropdown").toggleClass("open")
                        })
                    },
                    openDialer: function (e) {
                        e = e || {};
                        var t = e.keypadVisible != null ? e.keypadVisible : !0;
                        i.set("dialerVisible", !0), i.set("keypadVisible", t), this.$(".dropdown").toggleClass("open"), i.set("dialedNumber", ""), Em.run.next(function () {
                            $("#dialed-number").focus()
                        })
                    },
                    openDialerWithTicketContext: function () {
                        this.setDialerTicketContext(), this.openDialer()
                    },
                    selectNumber: function (e) {
                        this.openDialer({
                            keypadVisible: !1
                        }), i.set("dialedNumber", e.context.get("value")), this.setDialerTicketContext(), r.place()
                    },
                    setDialerTicketContext: function () {
                        i.set("ticketContext", Zd.get("workspaces.current.ticket"))
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/call_console_view": function (e, t, n) {
            var r = Minilog("voice-console"),
                i = Em.StateManager.extend({
                    initialState: "nothing",
                    nothing: Em.State.create({
                        enter: function () {
                            r.debug({
                                short_message: "nothing:enter"
                            })
                        },
                        exit: function () {
                            r.debug({
                                short_message: "nothing:exit"
                            })
                        }
                    }),
                    accepting: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "accepting:enter"
                            })
                        },
                        exit: function (e) {
                            r.debug({
                                short_message: "accepting:exit"
                            })
                        },
                        canAcceptOrDecline: !0
                    }),
                    connected: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "connected:enter"
                            })
                        },
                        exit: function (e) {
                            r.debug({
                                short_message: "connected:exit"
                            })
                        },
                        canHangUp: !0
                    }),
                    wrapUp: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "wrapUp:enter"
                            })
                        },
                        exit: function (e) {
                            r.debug({
                                short_message: "wrapUp:exit"
                            })
                        },
                        canWrapUp: !0
                    }),
                    missedCall: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "missedCall:enter"
                            })
                        },
                        exit: function (e) {
                            r.debug({
                                short_message: "missedCall:exit"
                            })
                        },
                        hasMissedCall: !0
                    }),
                    isMissedCall: function () {
                        return this.get("currentState.name") === "missedCall"
                    }.property("currentState.name").cacheable()
                }),
                s = t("controllers/voice/voice_ui_controller").instance(),
                o = t("controllers/voice/voice_controller").instance(),
                u = t("lib/voice/state").instance(),
                a = Em.View.extend(t("lib/views/registrable_view_mixin"), {
                    voiceController: o,
                    registrar: s,
                    name: "dialerCallConsole",
                    voiceState: u,
                    content: Em.computed.oneWay("voiceState.currentCall"),
                    templateName: "templates/channels/call_console_view",
                    isConnecting: Em.computed.bool("voiceState.isConnecting"),
                    isCheckingForConnection: Em.computed.bool("voiceState.checkingForConnection"),
                    inConnectionPhase: Em.computed.bool("voiceState.inConnectionPhase"),
                    stateManager: null,
                    canHangUp: Em.computed.bool("stateManager.currentState.canHangUp"),
                    canWrapUp: Em.computed.bool("stateManager.currentState.canWrapUp"),
                    hasMissedCall: Em.computed.bool("stateManager.currentState.hasMissedCall"),
                    init: function () {
                        this._super();
                        var e = i.create({
                            view: this
                        });
                        this.set("stateManager", e)
                    },
                    isVisible: function () {
                        var e = this.get("stateManager.currentState.name");
                        return ["accepting", "connected", "wrapUp", "missedCall"].contains(e) && !this.get("voiceState.keypadVisible")
                    }.property("stateManager.currentState.name", "voiceState.keypadVisible").cacheable(),
                    canAcceptOrDecline: function () {
                        return this.get("stateManager.currentState.canAcceptOrDecline") === !0 && !this.get("showMissedCallMessage")
                    }.property("stateManager.currentState.canAcceptOrDecline", "showMissedCallMessage").cacheable(),
                    goToState: function (e) {
                        this.get("stateManager").goToState(e)
                    },
                    acceptButtonText: function () {
                        var e = this.get("isCheckingForConnection") ? "accepting" : "accept";
                        return I18n.t("txt.voice.actions." + e)
                    }.property("isCheckingForConnection").cacheable(),
                    missedCallReason: function () {
                        return this.get("content.reasons.latestReason")
                    }.property("content.reasons.latestReason").cacheable(),
                    showMissedCallMessage: function () {
                        return this.get("hasMissedCall") && this.get("missedCallReason") != null
                    }.property("hasMissedCall", "missedCallReason", "content").cacheable(),
                    closeConsole: function () {
                        this.get("stateManager").goToState("nothing"), this.get("voiceState").resetDialer()
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/channels/call_countdown_view": function (e, t, n) {
            var r = t("lib/countdown_timer"),
                i = ["queued", "in_conference", "voicemail", "voicemail_transcription_completed", "cancelled"],
                s = t("controllers/voice/voice_ui_controller").instance(),
                o = t("lib/voice/state").instance(),
                u = Em.View.extend({
                    voiceState: o,
                    templateName: "templates/channels/call_countdown_view",
                    inConnectionPhase: Em.computed.oneWay("voiceState.inConnectionPhase"),
                    callState: Em.computed.oneWay("voiceController.voiceCallStateManager.currentState.name"),
                    voiceUIController: s,
                    missedCallMessageVisible: Em.computed.oneWay("voiceUIController.views.dialerCallConsole.showMissedCallMessage"),
                    timerDuration: 30,
                    secondsRemaining: 30,
                    timerRunning: !1,
                    destroy: function () {
                        return this.get("countdownTimer") != null && this.resetTimer(), this._super.apply(this, arguments)
                    },
                    toggleTimer: function () {
                        var e = this.get("inConnectionPhase"),
                            t = this.get("callState"),
                            n = this.get("missedCallMessageVisible");
                        !this.get("timerRunning") && t === "routing" && !e && !n ? (this.prepareTimer(), this.startTimer(), this.set("timerRunning", !0)) : this.get("timerRunning") && (_.contains(i, t) || n || e) && (this.resetTimer(), this.set("timerRunning", !1))
                    }.observes("callState", "inConnectionPhase", "missedCallMessageVisible"),
                    isVisible: Em.computed.bool("timerRunning"),
                    prepareTimer: function () {
                        this.set("countdownTimer", new r(this.get("timerDuration")))
                    },
                    startTimer: function () {
                        this.get("countdownTimer").start(this.timerCallback.bind(this))
                    },
                    resetTimer: function () {
                        this.get("countdownTimer").reset()
                    },
                    timerCallback: function (e) {
                        if (this.isDestroyed) return;
                        this.set("secondsRemaining", e)
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/channels/call_timer_view": function (e, t, n) {
            var r = Minilog("voice-timer"),
                i = t("lib/voice/queue"),
                s = new i,
                o = t("lib/voice/state").instance(),
                u = Em.StateManager.extend({
                    initialState: "nothing",
                    nothing: Em.State.create({
                        enter: function () {
                            r.debug({
                                short_message: "nothing:enter"
                            })
                        },
                        exit: function () {
                            r.debug({
                                short_message: "nothing:exit"
                            })
                        }
                    }),
                    messaging: Em.State.create({
                        enter: function (e) {
                            o.set("isConnecting", !0), r.debug({
                                short_message: "messaging:enter"
                            }), e.view.showMessage(), e.view.slideIn()
                        },
                        exit: function (e) {
                            o.set("isConnecting", !1), r.debug({
                                short_message: "messaging:exit"
                            }), e.view.hideMessage()
                        },
                        isConnecting: !0
                    }),
                    counting: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "counting:enter"
                            }), e.view.slideIn(), e.view.startTimer()
                        },
                        exit: function () {
                            r.debug({
                                short_message: "counting:exit"
                            })
                        }
                    }),
                    wrapUp: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "wrapUp:enter"
                            }), e.view.markInWrapUp(!0), e.view.slideIn(), e.view.startTimer()
                        },
                        exit: function () {
                            r.debug({
                                short_message: "wrapUp:exit"
                            })
                        }
                    }),
                    reset: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "reset:enter"
                            }), e.view.stopTimer(), e.view.slideOut(), e.view.markInWrapUp(!1), e.view.set("lastReset", null)
                        },
                        exit: function () {
                            r.debug({
                                short_message: "reset:exit"
                            })
                        }
                    })
                }),
                a = t("controllers/voice/voice_ui_controller").instance(),
                f = Em.View.extend(t("lib/views/registrable_view_mixin"), {
                    registrar: a,
                    name: "callTimer",
                    classNames: ["call_timer"],
                    templateName: "templates/channels/call_timer",
                    voiceState: o,
                    message: Em.computed.oneWay("voiceState.waitingMessage"),
                    stateManager: null,
                    init: function () {
                        this._super();
                        var e = u.create({
                            view: this
                        });
                        this.set("stateManager", e)
                    },
                    goToState: function (e) {
                        this.get("stateManager").goToState(e)
                    },
                    timerSlider: function () {
                        return this.get("parentView").$(".timer_slider")
                    }.property().volatile(),
                    slideIn: function () {
                        s.push(function (e) {
                            r.debug({
                                short_message: "slideIn"
                            }), this.update(), this.get("timerSlider").animate({
                                right: "0px"
                            }, {
                                duration: 500,
                                complete: function () {
                                    r.debug({
                                        short_message: "slideIn:done"
                                    }), e()
                                }
                            })
                        }.bind(this))
                    },
                    slideOut: function () {
                        var e = this;
                        s.push(function (e) {
                            r.debug({
                                short_message: "slideOut"
                            });
                            var t = this.$(".timer_slider_container").width() + 8;
                            this.get("timerSlider").animate({
                                right: "-" + t + "px"
                            }, {
                                duration: 500,
                                complete: function () {
                                    setTimeout(function () {
                                        r.debug({
                                            short_message: "slideOut:done"
                                        }), e()
                                    }, 200)
                                }
                            })
                        }.bind(this))
                    },
                    showMessage: function () {
                        s.push(function (e) {
                            r.debug({
                                short_message: "showMessage"
                            }), this.$(".voice_timer").addClass("connecting"), this.set("showingMessage", !0), Em.run.next(this, function () {
                                r.debug({
                                    short_message: "showMessage:next",
                                    _message: this.get("message")
                                }), this.update(), r.debug({
                                    short_message: "showMessage:done"
                                }), e()
                            })
                        }.bind(this))
                    },
                    hideMessage: function () {
                        s.push(function (e) {
                            r.debug({
                                short_message: "hideMessage"
                            }), this.set("showingMessage", !1), e()
                        }.bind(this))
                    },
                    update: function () {
                        this.get("showingMessage") ? this.$(".time").html(this.get("message") || "") : (this.$(".voice_timer").hasClass("connecting") && this.$(".voice_timer").removeClass("connecting"), this.$(".time").html(this._toHTML()))
                    },
                    startTimer: function () {
                        s.push(function (e) {
                            this.update(), this._lastReset = this.get("lastReset") || new Date, this._timeout = setInterval(this.update.bind(this), 200), e()
                        }.bind(this))
                    },
                    stopTimer: function () {
                        s.push(function (e) {
                            this._timeout != null && (clearInterval(this._timeout), this._timeout = null), this._lastReset = null, e()
                        }.bind(this))
                    },
                    markInWrapUp: function (e) {
                        var t = this.$(".voice_timer");
                        s.push(function (n) {
                            e ? t.addClass("wrap-up") : t.removeClass("wrap-up"), n()
                        })
                    },
                    _pad: function (e) {
                        return e < 10 ? "0" + e : e
                    },
                    _sinceLastReset: function () {
                        var e = (new Date - this._lastReset) / 1e3;
                        return this.set("timerSeconds", Math.floor(e)), [this._pad(Math.floor(e / 60)), this._pad(Math.floor(e % 60))]
                    },
                    _toHTML: function () {
                        if (this._lastReset) {
                            var e = this._sinceLastReset();
                            return e[0] + ":" + e[1]
                        }
                        return "00:00"
                    },
                    timerSeconds: null
                });
            n.exports = f
        }
    }), this.require.define({
        "views/channels/chat_icon_view": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["chat", "channel-icon"],
                classNameBindings: ["ChatLotus.Service.Availability.availabilityClass", "Chat.hasConnection:connected"]
            });
            n.exports = r
        }
    }), this.require.define({
        "views/channels/dialer_calling_code_view": function (e, t, n) {
            var r = t("views/channels/calling_code_view"),
                i = t("lib/voice/state").instance(),
                s = r.extend({
                    voiceState: i,
                    valueBinding: "voiceState.callingCountry",
                    numberBinding: "voiceState.dialedNumber",
                    isVisible: Em.computed.not("voiceState.activeCall")
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/dialer_keypad_view": function (e, t, n) {
            var r = t("controllers/voice/dialer_controller").instance(),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    templateName: "templates/channels/dialer_keypad_view",
                    dialerController: r,
                    didInsertElement: function () {
                        var e = this;
                        this.get("dialerController").on("characterDialed", function (t) {
                            e.highlightByCharacter(t)
                        }), this.$(".keypad-button").click(function (t) {
                            var n = $(this).data("keypad-key");
                            e.dialCharacter(n)
                        })
                    },
                    dialCharacter: function (e) {
                        i.set("dialedNumber", i.get("dialedNumber") + e), this.get("dialerController").characterDialed(e)
                    },
                    highlightByCharacter: function (e) {
                        e = e.toLowerCase();
                        var t = _.find(this.keys, function (t) {
                            return _.contains(t.characters, e)
                        });
                        t && this.highlightByIdentifier(t.identifier)
                    },
                    highlightByIdentifier: function (e) {
                        this.highlightButton($("#keypad-button-" + e))
                    },
                    highlightButton: function (e) {
                        e.addClass("keypad-button-pressed", 150, function () {
                            e.removeClass("keypad-button-pressed", 150)
                        })
                    },
                    keys: [{
                        identifier: "1",
                        characters: ["1"]
                    }, {
                        identifier: "2",
                        characters: ["2", "a", "b", "c"]
                    }, {
                        identifier: "3",
                        characters: ["3", "d", "e", "f"]
                    }, {
                        identifier: "4",
                        characters: ["4", "g", "h", "i"]
                    }, {
                        identifier: "5",
                        characters: ["5", "j", "k", "l"]
                    }, {
                        identifier: "6",
                        characters: ["6", "m", "n", "o"]
                    }, {
                        identifier: "7",
                        characters: ["7", "p", "q", "r", "s"]
                    }, {
                        identifier: "8",
                        characters: ["8", "t", "u", "v"]
                    }, {
                        identifier: "9",
                        characters: ["9", "w", "x", "y", "z"]
                    }, {
                        identifier: "star",
                        characters: ["*"]
                    }, {
                        identifier: "0",
                        characters: ["0", "+"]
                    }, {
                        identifier: "hash",
                        characters: ["#"]
                    }]
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/dialer_view": function (e, t, n) {
            var r = t("controllers/voice/dialer_controller").instance(),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    controller: r,
                    voiceState: i,
                    isPresent: Em.computed.alias("voiceState.dialerVisible"),
                    keypadVisible: Em.computed.oneWay("voiceState.keypadVisible"),
                    country: Em.computed.oneWay("voiceState.callingCountry"),
                    dialedNumber: Em.computed.oneWay("voiceState.dialedNumber"),
                    init: function () {
                        this._super.apply(this, arguments), Em.addListener(Zd, "@window:blur", this, this.windowDidBlur)
                    },
                    isVisible: function () {
                        return this.get("voiceState.hasVoiceEnabled") || ChatLotus.Service.get("hasChatEnabled")
                    }.property("voiceState.hasVoiceEnabled", "ChatLotus.Service.hasChatEnabled").cacheable(),
                    visibilityDidChange: function () {
                        var e = Em.guidFor(this);
                        setTimeout(function () {
                            if (this.get("isPresent")) {
                                var t = [this.$()[0], $(".channels-control")[0], $(".phone-number-select-menu")[0], $(".country-select-menu")[0], $(".voice_timer")[0]];
                                $(document).on("mousedown." + e, function (e) {
                                    for (var n = 0; n < t.length; n++)
                                        if (t[n] && ($.contains(t[n], e.target) || t[n] == e.target)) return;
                                    this.set("isPresent", !1)
                                }.bind(this))
                            } else $(document).off("mousedown." + e)
                        }.bind(this), 0)
                    }.observes("isPresent"),
                    oneChannel: function () {
                        if (i.get("hasVoiceEnabled") != ChatLotus.Service.get("hasChatEnabled")) return "one-channel"
                    }.property("voiceState.hasVoiceEnabled", "ChatLotus.Service.hasChatEnabled").cacheable(),
                    didInsertElement: function () {
                        var e = this;
                        this.$("#backspace-wrapper").click(function () {
                            e.get("controller").deleteLastCharacter()
                        })
                    },
                    onDialerToggled: function () {
                        this.$(".popover").toggle(this.get("isPresent"))
                    }.observes("isPresent"),
                    windowDidBlur: function () {
                        this.set("isPresent", !1)
                    },
                    willDestroy: function () {
                        Em.removeListener(Zd, "@window:blur", this, this.windowDidBlur), $(document).off("mousedown." + Em.guidFor(this)), this._super.apply(this, arguments)
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/outbound_dialer_number_field": function (e, t, n) {
            var r = t("controllers/voice/dialer_controller").instance(),
                i = t("lib/voice/state").instance(),
                s = {
                    onCall: /[0-9#*]/,
                    offCall: /[0-9a-zA-Z#*+ ()\-]/
                }, o = Ember.TextField.extend({
                    dialerController: r,
                    voiceState: i,
                    didInsertElement: function () {
                        var e = this;
                        r.on("characterDialed", function () {
                            e.focus()
                        }), r.on("dialerIsVisible", function () {
                            e.focus()
                        }), r.on("keypadVisible", function () {
                            this.get("voiceState.activeCall") && i.set("dialedNumber", ""), e.focus()
                        })
                    },
                    keyPress: function (e) {
                        if (e.which === 8 || e.which === 0) return !0;
                        var t = String.fromCharCode(e.which),
                            n = this.get("voiceState.activeCall") ? s.onCall : s.offCall,
                            i = n.test(t);
                        return i && r.characterDialed(t), i
                    },
                    focus: function () {
                        var e = this;
                        setTimeout(function () {
                            var e = $("#dialed-number");
                            e.focus().val(e.val())
                        }, 50)
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/channels/outbound_dialer_view": function (e, t, n) {
            var r = t("lib/voice/outbound_call"),
                i = t("lib/voice/state").instance(),
                s = Em.View.extend({
                    templateName: "templates/channels/outbound_dialer_view",
                    voiceState: i,
                    outboundCall: r,
                    noActiveCall: Em.computed.not("voiceState.activeCall"),
                    didInsertElement: function () {
                        this.$("#dialed-number").keyup(function (e) {
                            e.keyCode == 13 && r.place()
                        })
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/phone_number_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("lib/voice/state").instance(),
                s = r.extend({
                    voiceState: i,
                    valueBinding: "voiceState.callingNumber",
                    configOptions: {
                        clsSelectMenuScope: "phone-number-select-menu zd-selectmenu"
                    },
                    options: function () {
                        var e = [];
                        return (i.get("phoneNumbers") || []).forEach(function (t) {
                            e.push({
                                value: t.get("number"),
                                label: t.get("nickname") || t.get("number")
                            })
                        }), e
                    }.property("voiceState.phoneNumbers.@each").cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/channels/voice_icon_view": function (e, t, n) {
            var r = Minilog("voice-icon"),
                i = t("controllers/voice/voice_ui_controller").instance(),
                s = t("lib/voice/state").instance(),
                o = function () {
                    return i.get("views.voiceIcon")
                }, u = Em.View.extend(t("lib/views/registrable_view_mixin"), {
                    registrar: i,
                    name: "voiceIcon",
                    voiceState: s,
                    classNames: ["voice", "channel-icon"],
                    classNameBindings: ["voiceState.availability"],
                    didInsertElement: function () {
                        this._super();
                        var e = this.get("voiceState.currentCall");
                        e && e.onStatusChanged()
                    },
                    startRinging: function () {
                        this.timeouts = [];
                        var e = this.$(),
                            t = this;
                        e.addClass("ring-1"), this.stopped = !1;
                        var n = function (r) {
                            var i = chronos.setTimeout(function () {
                                e.addClass("ring-2"), chronos.setTimeout(function () {
                                    e.addClass("ring-3"), chronos.setTimeout(function () {
                                        e.removeClass("ring-2"), e.removeClass("ring-3"), chronos.setTimeout(function () {
                                            t.stopped || n(r)
                                        }, 250)
                                    }, 250)
                                }, 250)
                            }, 250);
                            r.timeouts.push(i)
                        };
                        n(this)
                    },
                    stopRinging: function () {
                        this.stopped = !0, this.timeouts && this.timeouts.forEach(function (e) {
                            chronos.clearTimeout(e)
                        }), this.timeouts = [];
                        var e = this.$();
                        e.removeClass("ring-1"), e.removeClass("ring-2"), e.removeClass("ring-3")
                    },
                    markOnCall: function (e) {
                        var t = this.$();
                        e ? t.addClass("on-call") : t.removeClass("on-call")
                    },
                    markInWrapUp: function (e) {
                        var t = this.$();
                        e ? t.addClass("wrap-up") : t.removeClass("wrap-up")
                    },
                    status: Em.StateManager.create({
                        initialState: "nothing",
                        nothing: Em.State.create({}),
                        outbound_initial: Em.State.create({
                            enter: function () {
                                r.debug({
                                    short_message: "outbound_initial:enter"
                                }), o().startRinging()
                            },
                            exit: function () {
                                r.debug({
                                    short_message: "outbound_initial:exit"
                                }), o().stopRinging()
                            }
                        }),
                        routing: Em.State.create({
                            enter: function () {
                                r.debug({
                                    short_message: "routing:enter"
                                }), o().startRinging()
                            },
                            exit: function () {
                                r.debug({
                                    short_message: "routing:exit"
                                }), o().stopRinging()
                            }
                        }),
                        customer_leg: Em.State.create({
                            enter: function () {
                                r.debug({
                                    short_message: "customer_leg:enter"
                                }), o().markOnCall(!0)
                            }
                        }),
                        in_conference: Em.State.create({
                            enter: function () {
                                r.debug({
                                    short_message: "in_conference:enter"
                                }), o().markOnCall(!0)
                            },
                            exit: function () {
                                r.debug({
                                    short_message: "in_conference:exit"
                                }), o().markOnCall(!1)
                            }
                        }),
                        completed: Em.State.create({
                            enter: function () {
                                r.debug({
                                    short_message: "completed:enter"
                                }), o().markInWrapUp(!0)
                            },
                            exit: function () {
                                r.debug({
                                    short_message: "completed:exit"
                                }), o().markInWrapUp(!1)
                            }
                        }),
                        voicemail: Em.State.create({}),
                        voicemail_transcription_completed: Em.State.create({}),
                        cancelled: Em.State.create({}),
                        queued: Em.State.create({}),
                        ended: Em.State.create({})
                    })
                });
            n.exports = u
        }
    }), this.require.define({
        "views/contextual_help/contextual_help_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/contextual_help/contextual_help",
                videoView: t("views/contextual_help/modal_video_view"),
                controller: Em.required(),
                classNames: ["contextual_help"],
                classNameBindings: ["expanded", "collapsed"],
                expanded: !1,
                currentTabName: null,
                currentSubject: null,
                tabContents: null,
                initializedBinding: "controller.initialized",
                hasTabContents: function () {
                    return !!this.get("tabContents.length")
                }.property("tabContents").cacheable(),
                tutorials: function () {
                    return this.get("tabContents").findProperty("key", "Tutorials")
                }.property("tabContents.@each").cacheable(),
                videos: function () {
                    return this.get("tabContents").findProperty("key", "Videos")
                }.property("tabContents.@each").cacheable(),
                references: function () {
                    return this.get("tabContents").findProperty("key", "References")
                }.property("tabContents.@each").cacheable(),
                shouldShowTutorials: function () {
                    return this.isCurrentTab("Tutorials")
                }.property("currentTabName").cacheable(),
                shouldShowVideos: function () {
                    return this.isCurrentTab("Videos")
                }.property("currentTabName").cacheable(),
                shouldShowReferences: function () {
                    return this.isCurrentTab("References")
                }.property("currentTabName").cacheable(),
                firstAvailableTabName: function () {
                    if (this.get("hasTabContents")) return this.get("tabContents")[0].key
                }.property("tabContents.@each").cacheable(),
                tabCount: function () {
                    var e = ["zero", "one", "two", "three"];
                    return e[this.get("tabContents").length]
                }.property("tabContents").cacheable(),
                isCurrentTab: function (e) {
                    return this.get("currentTabName") === e
                },
                collapsed: function () {
                    return !this.get("expanded")
                }.property("expanded").cacheable(),
                toggleMenu: function () {
                    this.toggleProperty("expanded");
                    var e = this.get("expanded") ? "Menu opened" : "Menu closed";
                    this.get("controller").recordEvent(e)
                },
                showTab: function (e) {
                    e && this.set("currentTabName", e)
                },
                showVideo: function (e) {
                    this.get("videoView").create().append().show(e)
                },
                orderTabContents: function () {
                    var e = Em.makeArray(this.get("currentSubject.tabContents"));
                    this.set("tabContents", e), this.showTab(this.get("firstAvailableTabName"))
                }.observes("currentSubject"),
                trackGotoForum: function () {
                    this.get("controller").recordEvent("Go to forums")
                },
                trackSubmitRequest: function () {
                    this.get("controller").recordEvent("Submit a request")
                },
                trackLinkVisit: function (e) {
                    var t = e.target.href;
                    this.get("controller").recordEvent("Link visited: " + e.target.href)
                }
            }),
                i = r.create;
            r.reopenClass({
                create: function () {
                    if (r.instance) throw "Only one instance of ContextualHelpView is allowed";
                    var e = i.apply(r, arguments);
                    return r.instance = e, e
                }
            }), n.exports = r
        }
    }), this.require.define({
        "views/contextual_help/modal_video_view": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                templateName: "templates/contextual_help/modal_video",
                classNames: "modal_video".w(),
                videoSrc: "",
                show: function (e) {
                    this.set("videoSrc", e)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/contextual_help/nav_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "a",
                name: Em.required(),
                controller: Em.required(),
                classNameBindings: ["active"],
                dataMap: {
                    Tutorials: {
                        icon: "&#128214;",
                        label: I18n.t("txt.contextual.tabs.tutorials")
                    },
                    Videos: {
                        icon: "&#127916;",
                        label: I18n.t("txt.contextual.tabs.videos")
                    },
                    References: {
                        icon: "&#59141;",
                        label: I18n.t("txt.contextual.tabs.references")
                    }
                },
                active: function () {
                    return this.get("controller.currentTabName") === this.get("name")
                }.property("name", "controller.currentTabName").cacheable(),
                icon: function () {
                    var e = this.get("name");
                    if (e) return this.get("dataMap." + e + ".icon") || ""
                }.property("name").cacheable(),
                label: function () {
                    var e = this.get("name");
                    if (e) return this.get("dataMap." + e + ".label") || ""
                }.property("name").cacheable(),
                click: function () {
                    this.get("controller").showTab(this.get("name"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/contextual_help/subtopics_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/contextual_help/subtopics",
                controller: Em.required(),
                data: Em.required(),
                classNames: ["subtopics_view"],
                classNameBindings: ["show"],
                show: !1,
                toggleSubtopics: function () {
                    this.toggleProperty("show")
                },
                trackLinkVisit: function (e) {
                    var t = e.target.href;
                    t.indexOf("#") > 0 && (t = t.split("#")[0]), this.get("controller").recordEvent("Link visited: " + t)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/contextual_help/video_thumbnail_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/contextual_help/video_thumbnail",
                classNames: ["thumbnails"],
                classNameBindings: ["single"],
                controller: Em.required(),
                data: null,
                currentIndex: 0,
                single: function () {
                    return this.get("data.length") <= 1
                }.property("data.@each").cacheable(),
                didInsertElement: function () {
                    this._super(), this.setDefaultIndex()
                },
                setDefaultIndex: function () {
                    this.set("currentIndex", 0), this.$("nav span").first().addClass("current")
                },
                dataDidChange: function () {
                    if (this.get("single")) return;
                    this.rerender()
                }.observes("single"),
                link: function () {
                    return this.get("data." + this.get("currentIndex") + ".link") || null
                }.property("currentIndex", "data.@each").cacheable(),
                thumbnail: function () {
                    return this.get("data." + this.get("currentIndex") + ".thumbnail") || null
                }.property("currentIndex", "data.@each").cacheable(),
                showThumbnail: function (e) {
                    var t = this.$(e.target).closest("[data-nav-button]"),
                        n = this.$("nav span").index(t);
                    n >= 0 && (this.$("nav span").removeClass("current"), t.addClass("current"), this.set("currentIndex", n))
                },
                showVideo: function () {
                    this.get("controller").showVideo(this.get("link"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/current_user/face_box_view": function (e, t, n) {
            var r = t("lib/tracking"),
                i = Em.View.extend({
                    templateName: "templates/current_user/face_box",
                    currentAccount: t("lib/current_account"),
                    user: function (e, t) {
                        return t || Zendesk.get("currentUser")
                    }.property("Zendesk.currentUser"),
                    keyboardShortcutsModalController: Em.computed.singleton("controllers/keyboard_shortcuts_modal_controller"),
                    featureNotificationsController: Em.computed.singleton("controllers/ipm/feature_notifications_controller"),
                    showGoToWebPortal: Em.computed.not("currentAccount.helpCenterSettings.hideGoToWebPortal"),
                    hasUnreadFeatureNotifications: Em.computed.oneWay("featureNotificationsController.hasUnreadFeatureNotifications"),
                    init: function () {
                        this._super.apply(this, arguments), this.set("signoutURL", Zd.get("Routes.staticPaths.signoutURL")), Em.addListener(Zd, "@window:blur", this, this.windowDidBlur)
                    },
                    windowDidBlur: function () {
                        this.closeMenu()
                    },
                    isOpen: function () {
                        return this.$().hasClass("open")
                    },
                    closeMenu: function () {
                        this.isOpen() && this.$().removeClass("open")
                    },
                    showKeyboardShortcutsModal: function () {
                        return this.get("keyboardShortcutsModalController").showModal(), this.closeMenu(), !1
                    },
                    didInsertElement: function () {
                        this.$().click(function () {
                            r("Global Header: Profile", "Lotus-general")
                        })
                    },
                    willDestroy: function () {
                        Em.removeListener(Zd, "@window:blur", this, this.windowDidBlur), this._super.apply(this, arguments)
                    },
                    logoutLink: function () {
                        var e = this.get("currentAccount.hostMapping"),
                            t = this.get("signoutURL"),
                            n = t;
                        return e && (n += "?return_to=https://" + e + t), n
                    }.property("currentAccount.hostMapping", "signoutURL").cacheable()
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "FaceBoxView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/current_user/feature_notifications": function (e, t, n) {
            n.exports = Em.View.extend(t("lib/features").consumer, {
                templateName: "templates/current_user/feature_notifications",
                controller: Em.computed.singleton("controllers/ipm/feature_notifications_controller"),
                count: Em.computed.oneWay("controller.featureNotifications.length"),
                any: Em.computed.bool("count"),
                unreadCount: Em.computed.oneWay("controller.unreadFeatureNotificationCount"),
                anyUnread: Em.computed.oneWay("controller.hasUnreadFeatureNotifications"),
                isVisible: Em.computed.and("features.hasFeatureNotifications", "any"),
                showModal: function () {
                    return this.get("controller").showModal(), this.get("parentView").closeMenu(), !1
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "CurrentUser/FeatureNotificationsView"
                }
            })
        }
    }), this.require.define({
        "views/custom_fields/custom_field_view": function (e, t, n) {
            var r = t("lib/profile_tracker"),
                i = Em.Mixin.create({
                    targetBinding: "parentView.target",
                    classNames: ["editable", "custom-field-value"],
                    updateField: function () {
                        var e = this.get("target");
                        r.track("fields:custom_field"), e.set(this.get("property"), this.get("value")), e.save({
                            update: !0
                        })
                    },
                    property: Em.computed.fmt("name", "customFields.%@")
                });
            n.exports = i
        }
    }), this.require.define({
        "views/custom_fields/custom_field_text_view": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_view"),
                i = t("lib/views/text_field_editable_view").extend(r, {
                    modelBinding: "target",
                    classNames: ["value", "textarea"]
                });
            n.exports = i
        }
    }), this.require.define({
        "views/custom_fields/custom_field_text_area_view": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_view"),
                i = t("lib/views/text_area_editable_view").extend(r, {
                    modelBinding: "target",
                    classNames: ["value"]
                });
            n.exports = i
        }
    }), this.require.define({
        "views/custom_fields/custom_field_checkbox_view": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_view"),
                i = Em.Checkbox.extend(r, {
                    classNames: ["custom-checkbox"],
                    checked: Em.computed.oneWay("value"),
                    change: function () {
                        this._super(), Em.run.once(this, function () {
                            this.set("value", this.get("checked")), this.updateField()
                        })
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/custom_fields/custom_field_dropdown_view": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_view"),
                i = t("lib/nested_hash"),
                s = t("lib/views/select_view"),
                o = t("lib/core_widgets/configs"),
                u = s.extend(r, {
                    classNames: ["value", "select"],
                    delegateType: "ComboSelectMenu",
                    configOptions: o.comboSelect.searchResultFormat1,
                    options: function () {
                        var e = this.get("content.customFieldOptions"),
                            t = new i;
                        return t.add("-", ""), e.forEach(function (e) {
                            t.add(e.name, e.value)
                        }), t.toList()
                    }.property("content.customFieldOptions").cacheable(),
                    userDidChangeValue: function () {
                        this.updateField()
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/custom_fields/custom_field_date_view": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_view"),
                i = t("lib/views/date_view").extend(r, {
                    classNames: ["value", "date"],
                    clearable: !0,
                    formatDate: function (e) {
                        var t = new Date(e);
                        return $.datepicker.formatDate(I18n.translations["date.datepicker.date_format"], new Date(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()))
                    },
                    processDate: function (e, t, n) {
                        return new Date(Date.UTC(e, t, n))
                    },
                    selectDate: function (e, t) {
                        this._super.apply(this, arguments) && this.updateField()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/organizations/properties/mixins": function (e, t, n) {
            var r = Em.Mixin.create({
                disabled: Em.computed.bool("organization.permissions.can_not_edit_properties")
            }),
                i = Em.Mixin.create({
                    controllerBinding: "controllerView.controller",
                    organizationBinding: "controller.organization"
                });
            n.exports = Object.freeze({
                Properties: i,
                Permissions: r
            })
        }
    }), this.require.define({
        "views/custom_fields/custom_field_builder": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_text_view"),
                i = {
                    text: r,
                    integer: r,
                    decimal: r,
                    regexp: r,
                    textarea: t("views/custom_fields/custom_field_text_area_view"),
                    checkbox: t("views/custom_fields/custom_field_checkbox_view"),
                    dropdown: t("views/custom_fields/custom_field_dropdown_view"),
                    date: t("views/custom_fields/custom_field_date_view")
                }, s = function () {
                    return function (e) {
                        var n = e.content,
                            r = n.get("key"),
                            s = n.get("type"),
                            o = e._parentView.get("kind"),
                            u = i[s],
                            a;
                        a = o === "user" ? t("views/users/user_property_permissions").UserCanEditProperties : t("views/organizations/properties/mixins").Permissions;
                        var f = u.extend(a, {
                            value: Em.computed.alias("target.customFields.%@".fmt(r)),
                            user: Em.computed.oneWay("target"),
                            organization: Em.computed.oneWay("target")
                        }).create(e),
                            l = "%@_%@_%@".fmt(o, r, Em.guidFor(f));
                        f.set("name", r), f.set("id", l);
                        var c = Em.View.create({
                            title: n.get("title"),
                            templateName: "templates/custom_fields/label"
                        }),
                            h = n.get("description"),
                            p = n.get("title"),
                            d = Em.ContainerView.createWithMixins(t("lib/views/popover_view"), {
                                childViews: [c, f],
                                targetBinding: "parentView.target",
                                classNames: ["property"],
                                content: h,
                                title: p
                            });
                        return d
                    }
                };
            n.exports = s
        }
    }), this.require.define({
        "views/custom_fields/custom_field_collection": function (e, t, n) {
            var r = t("views/custom_fields/custom_field_builder"),
                i = Em.View.extend().reopenClass({
                    create: r()
                }),
                s = Em.CollectionView.extend(t("lib/features").consumer, {
                    tagName: "div",
                    classNames: ["property_box", "details", "customer_record"],
                    itemViewClass: i,
                    isVisible: function () {
                        return this.get("content.length") > 0
                    }.property("content.@each").cacheable(),
                    fields: function () {
                        return t("models/custom_fields/custom_fields").instance(this.get("kind"))
                    }.property("kind").cacheable(),
                    content: function () {
                        return this.get("fields").filter(function (e) {
                            return e.get("active")
                        })
                    }.property("fields.@each.active").cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/dashboard/activities_view": function (e, t, n) {
            var r = t("lib/formatting_helper").truncateWithEllipsis,
                i = Em.View.extend({
                    tagName: "div",
                    classNames: ["item"],
                    classNameBindings: ["cssClass"],
                    templateName: "templates/dashboard/activity_item",
                    verbToCssClassMap: {
                        "tickets.assignment": "assignment",
                        "tickets.comment": "comment",
                        "tickets.priority_increase": "priority-increased"
                    },
                    verbToTitleMap: {
                        "tickets.assignment": I18n.template("txt.dashboard.activities.assigned_you"),
                        "tickets.comment": I18n.template("txt.dashboard.activities.commented"),
                        "tickets.priority_increase": I18n.template("txt.dashboard.activities.priority_increased_on_ticket")
                    },
                    click: function () {
                        window.location.hash = "#/tickets/" + this.get("content.target.ticket.id")
                    },
                    title: function () {
                        return this.verbToTitleMap[this.get("content.verb")]({
                            user: this.get("content.actor.name"),
                            ticket: '"' + r(this.get("content.target.ticket.subject"), 60) + '"'
                        })
                    }.property().volatile(),
                    comment: function () {
                        var e = this.get("content.object.comment.value");
                        if (e) return r(this.get("content.object.comment.value"), 80)
                    }.property().volatile(),
                    actorPhotoBinding: Em.Binding.oneWay("content.actor.profileImageUrl"),
                    cssClass: function () {
                        return this.verbToCssClassMap[this.get("content.verb")] || ""
                    }.property().volatile()
                }),
                s = t("models/activities").instance(),
                o = Em.CollectionView.extend({
                    content: s,
                    tagName: "div",
                    classNames: "wrapper",
                    itemViewClass: i,
                    emptyView: Ember.View.extend({
                        classNames: "no-updates",
                        template: function () {
                            return I18n.t("txt.dashboard.activities.no_updates")
                        }
                    })
                });
            n.exports = o
        }
    }), this.require.define({
        "views/dashboard/buy_now_button": function (e, t, n) {
            var r = t("controllers/buy_now_controller").create(),
                i = Em.View.extend({
                    controller: r,
                    tagName: "button",
                    classNames: ["btn", "btn-warning", "buy_now_btn"],
                    click: function () {
                        this.controller.buyNow()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/dashboard/incoming_table_body_view": function (e, t, n) {
            var r = t("lib/views/tickets_table_body_view").extend({}).reopenClass(t("lib/lotus/singleton"));
            n.exports = r
        }
    }), this.require.define({
        "views/dashboard/launchpad_swappable_view": function (e, t, n) {
            var r = t("controllers/launchpad_controller"),
                i = Em.View.extend({
                    init: function () {
                        this._super(), this.set("launchpadController", r.instance())
                    },
                    activeChildName: function () {
                        var e = this.get("launchpadController.swappableName");
                        return Em.empty(e) ? "updates" : e
                    }.property("launchpadController.swappableName").cacheable()
                });
            n.exports = i
        }
    }), this.require.define({
        "views/dashboard/ticket_list_title_view": function (e, t, n) {
            n.exports = Em.View.extend({
                tagName: "span",
                controller: null,
                titleBinding: Em.Binding.oneWay("controller.activeFilterTitle"),
                ticketCount: Em.computed.ifNull("controller.activeFilterTicketCount", "-")
            })
        }
    }), this.require.define({
        "views/dialog_button": function (e, t, n) {
            var r = t("lib/tracking"),
                i = t("views/add_tab"),
                s = Em.View.extend(t("mixins/button_support"), {
                    attributeBindings: ["title"],
                    click: function (e) {
                        var t = this.nearestInstanceOf(i);
                        return t && t.get("dialogBox").hide(), this.$().hasClass("recent_ticket") ? (r("Toolbar: Recent", "Lotus-general"), window.location = this.get("content.href")) : r("Toolbar: Create", "Lotus-general"), !1
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "DialogButtonView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/filters/column_editor_active_list_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "li",
                templateName: "templates/filters/column_editor/active_column_item",
                classNames: ["column"],
                attributeBindings: ["columnId:data-column-id"],
                columnId: Em.computed.oneWay("content.id"),
                controller: Em.computed.oneWay("parentView.controller"),
                hide: function (e) {
                    this.$().slideUp(125, e)
                },
                remove: function () {
                    this.get("controller").removeActiveColumnFromUI(this)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ColumnItemView"
                }
            }),
                i = Em.CollectionView.extend(t("lib/views/sortable_collection_view_mixin"), {
                    content: null,
                    controller: null,
                    itemViewClass: r,
                    sortableItemSelector: ".column",
                    sortableItemIdAttribute: "data-column-id",
                    syncColumnOrder: function (e) {
                        this.get("controller").reorderActiveColumns(e)
                    },
                    sortableDidChange: function (e) {
                        this.syncColumnOrder(e)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ColumnEditorActiveListView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/column_editor_available_list_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "li",
                templateName: "templates/filters/column_editor/available_column_item",
                classNames: ["column"],
                attributeBindings: ["columnId:data-column-id"],
                columnId: Em.computed.oneWay("content.id"),
                controller: Em.computed.oneWay("parentView.controller"),
                hide: function (e) {
                    this.$().slideUp(125, e)
                },
                remove: function () {
                    this.get("controller").removeAvailableColumnFromUI(this)
                },
                click: function () {
                    this.remove()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ColumnItemView"
                }
            }),
                i = Em.CollectionView.extend({
                    content: null,
                    controller: null,
                    itemViewClass: r
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ColumnEditorAvailableListView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/column_editor_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/filters/column_editor/column_editor",
                classNames: ["column-editor"],
                isVisible: Em.computed.bool("controller.active"),
                placeholder: I18n.t("txt.user_filters.search_placeholder"),
                init: function () {
                    this.set("boundClickHandler", this.clickHandler.bind(this)), this._super()
                },
                captureDocumentClick: function () {
                    document.addEventListener("mousedown", this.get("boundClickHandler"), !0)
                },
                releaseDocumentClick: function () {
                    document.removeEventListener("mousedown", this.get("boundClickHandler"), !0)
                },
                panelDidToggle: function () {
                    this.releaseDocumentClick(), this.get("controller.active") && this.captureDocumentClick()
                }.observes("controller.active"),
                clickHandler: function (e) {
                    var t = $(e.target).is(".zd-menu-root *");
                    !t && !$.contains(this.$()[0], e.target) && e.target.className !== "column-editor-base" && (this.get("controller").deactivate(), e.stopPropagation())
                },
                destroy: function () {
                    this.releaseDocumentClick(), this._super()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ColumnEditorView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/filters/editor/actions_view": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["editing-actions"],
                templateName: "templates/filters/editor/actions",
                isVisible: Em.computed.bool("controller.isPreviewing")
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "FilterEditorView.ActionsView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/filters/editor/fieldset_view": function (e, t, n) {
            var r = t("lib/lotus/labeled_field_view"),
                i = r.extend({
                    tagName: "fieldset",
                    classNames: ["filter-field"]
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "FilterEditorView.FieldsetView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/editor/conditions_view": function (e, t, n) {
            var r = t("lib/zentence/views/action"),
                i = t("lib/zentence/views/group"),
                s = t("lib/zentence/views/menu"),
                o = t("views/filters/editor/fieldset_view");
            r.reopen({
                confirmText: I18n.t("txt.zentence.action.confirm")
            });
            var u = s.extend({}).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "FilterEditorView.ConditionMenuView"
                }
            }),
                a = o.extend({
                    tagName: "fieldset",
                    classNames: ["filter-conditions"],
                    label: I18n.t("txt.user_filters.filters"),
                    menu: u.instance(),
                    FieldView: Em.View.extend({
                        viewName: "fieldView",
                        templateName: "templates/filters/editor/conditions",
                        controller: Em.computed.oneWay("parentView.controller"),
                        menu: Em.computed.alias("parentView.menu"),
                        ZentenceGroupView: i.extend({
                            controller: Em.computed.oneWay("parentView.controller")
                        })
                    }).reopenClass({
                        preservesContext: !0,
                        toString: function () {
                            return "FilterEditorView.ConditionsFieldView"
                        }
                    })
                }).reopenClass({
                    toString: function () {
                        return "FilterEditorView.ConditionsView"
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/filters/editor/title_view": function (e, t, n) {
            var r = t("views/filters/editor/fieldset_view"),
                i = r.extend({
                    classNames: ["filter-title"],
                    label: I18n.t("txt.user_filters.title_label"),
                    FieldView: Em.TextField.extend({
                        viewName: "fieldView",
                        attributeBindings: ["placeholder"],
                        placeholder: I18n.t("txt.user_filters.title_placeholder"),
                        controller: Em.computed.oneWay("parentView.controller"),
                        value: Em.computed.alias("parentView.content"),
                        focusOut: function () {
                            if (!this.get("controller.editing")) return;
                            this._super.apply(this, arguments)
                        }
                    }).reopenClass({
                        preservesContext: !0,
                        toString: function () {
                            return "FilterEditorView.TitleFieldView"
                        }
                    })
                }).reopenClass({
                    toString: function () {
                        return "FilterEditorView.TitleView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/editor/visibility_view": function (e, t, n) {
            var r = t("views/filters/editor/fieldset_view"),
                i = {
                    group: "group",
                    all: "group",
                    me: "agent"
                }, s = r.extend({
                    classNames: ["filter-visibility"],
                    label: I18n.t("txt.user_filters.visibility"),
                    isVisible: Em.computed.bool("controller.canEdit"),
                    FieldView: t("lib/views/select_view").extend({
                        configOptions: {
                            typeToClassMapBase: i,
                            typeToClassMapSearch: i,
                            typeToClassMapSelect: {
                                group: "group indented",
                                all: "group",
                                me: "agent"
                            },
                            clsSelectMenuScope: "zd-combo-selectmenu filter-editor-menu",
                            enableMenuItemIcons: !0,
                            renderItemContentForBase: function (e) {
                                return '<span class="icon"></span>' + e.label
                            }
                        },
                        viewName: "fieldView",
                        classNames: ["value", "select"],
                        delegateType: "ComboSelectMenu",
                        controller: Em.computed.alias("parentView.controller"),
                        options: function () {
                            var e = [{
                                value: "all",
                                label: I18n.t("txt.views.filter.editor.all_agents"),
                                type: "all"
                            }];
                            return e.push({
                                value: "me",
                                label: I18n.t("txt.views.filter.editor.me_only"),
                                type: "me"
                            }), e.push({
                                label: I18n.t("txt.views.filter.editor.group")
                            }), t("models/assignable_groups").instance().forEach(function (t) {
                                e.push({
                                    value: t.get("id"),
                                    label: t.get("name"),
                                    type: "group"
                                })
                            }), e
                        }.property().cacheable(),
                        value: function (e, t) {
                            if (arguments.length == 2) {
                                var n;
                                return t == "me" ? n = {
                                    type: "User",
                                    id: Zd.get("currentUser.id")
                                } : t == "all" ? n = null : n = {
                                    type: "Group",
                                    id: t
                                }, this.set("parentView.content", n), t
                            }
                            var r = this.get("parentView.content");
                            if (!r) return "all";
                            if (r.type == "Group") return r.id;
                            if (r.type == "User") return "me"
                        }.property("parentView.content").cacheable()
                    }).reopenClass({
                        preservesContext: !0,
                        toString: function () {
                            return "FilterEditorVisibilityFieldView"
                        }
                    })
                }).reopenClass({
                    toString: function () {
                        return "FilterEditor.VisibilityView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/add_comment": function (e, t, n) {
            var r = t("lib/account_consumer"),
                i = t("lib/growl"),
                s = t("lib/views/focusable_view_mixin"),
                o = "/api/v2/uploads.json",
                u = Em.View.extend(r, s, {
                    ticketBinding: Em.Binding.oneWay("content"),
                    classNames: ["event", "comment_input"],
                    classNameBindings: ["controller.commentIsPublic:is-public"],
                    name: "add_comment",
                    uploading: !1,
                    focusManager: Em.computed.alias("controller"),
                    screencastController: Em.computed.singleton("controllers/screencast_controller"),
                    isVisible: Em.computed.bool("ticket.userPermissions.makeAnyComments"),
                    didInsertElement: function () {
                        return this.setup(), this.$(".fileinput-button").click(this._hideTip.bind(this)), this._super.apply(this, arguments)
                    },
                    resetAttachmentLinks: function () {
                        Em.run.next(this, this.setup)
                    }.observes("ticket", "controller.shouldShowAttachment"),
                    setup: function () {
                        var e = this.$("textarea.autoresize");
                        Em.run.next(e.autoResize.bind(e)), this.setupAttachments()
                    },
                    authenticityToken: function () {
                        return t("lib/session").instance().authenticityToken
                    }.property().cacheable(),
                    setupAttachments: function () {
                        this.fileInput().unbind(), this.fileInput().attr({
                            "accept-charset": "UTF-8"
                        }).fileupload({
                            dropZone: this.dropZone(),
                            url: o,
                            formData: {
                                authenticity_token: this.get("authenticityToken")
                            }
                        }).bind("fileuploadadd", this._onAddUpload.bind(this)).bind("fileuploaddone", this._onUploadDone.bind(this)).bind("fileuploadsubmit", this._onUploadSubmit.bind(this)).bind("focus", this._moveFocusToButton.bind(this)).bind("fileuploadfail", this._onUploadFail.bind(this))
                    },
                    dropZone: function () {
                        var e = this.$().parents("section.ticket");
                        return e.length === 0 && (e = this.$()), e
                    },
                    fileInput: function () {
                        return this.$('input[type="file"]')
                    },
                    focus: function () {
                        this.$("textarea.autoresize").focus()
                    },
                    _hideTip: function () {
                        this.$(".fileinput-button").tooltip("hide")
                    },
                    willDestroyElement: function () {
                        var e = this.fileInput();
                        e.data("fileupload") && e.fileupload("destroy"), this.counter && this.counter.destroy()
                    },
                    _moveFocusToButton: function () {
                        try {
                            this.fileInput().focus()
                        } catch (e) {}
                    },
                    _onAddUpload: function (e, t) {
                        this.startUpload(t)
                    },
                    startUpload: function (e) {
                        this.set("uploading", !1);
                        var t = this.get("ticket.comment.uploadSet");
                        t && this.get("ticket.comment.uploadSet").beginUploadingFiles(e)
                    },
                    _onUploadDone: function (e, t) {
                        this.set("uploading", !1);
                        var n = this.get("content.comment.uploadSet");
                        n.uploadSucceeded(t), this.fileInput().fileupload("option", "url", o + "?token=" + n.get("token"))
                    },
                    _onUploadFail: function (e, t) {
                        this.set("uploading", !1);
                        var n = this.get("currentAccount.fileUploadCap");
                        t.errorThrown === "Request Entity Too Large" || t.errorThrown === "Not Acceptable" ? i.error(I18n.t("txt.uploads.create.too_large", {
                            max_size: n
                        })) : i.error(t.errorThrown)
                    },
                    _onUploadSubmit: function (e, t) {
                        this.set("uploading", !0)
                    }
                }).reopenClass({
                    toString: function () {
                        return "AddCommentView"
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/filters/feeds/feed_ticket_view": function (e, t, n) {
            var r = t("controllers/feed_ticket_controller"),
                i = t("states/ticket_comment"),
                s = t("views/tickets/add_comment"),
                o = Em.View.extend({
                    template: Em.TEMPLATES["templates/tickets/audits"],
                    didInsertElement: function () {
                        this.get("parentView.parentView").$(".latest_conversation").hide().removeClass("working")
                    }
                }),
                u = s.extend(t("mixins/ticket_keyboard_shortcuts"), t("lib/lotus/responder_view"), {
                    classNameBindings: ["isPublic", "controller.isWorking:working"],
                    templateName: "templates/filters/feeds/add_comment",
                    collisionController: Em.computed.singleton("controllers/collision_controller"),
                    init: function () {
                        this.set("content", Zendesk.Ticket.create({
                            id: this.get("parentView.content.id")
                        })), this.get("content").fetch(), this.set("controller", r.create({
                            source: this.get("parentView"),
                            ticket: this.get("content"),
                            collisionController: this.get("collisionController"),
                            ticketCommentStateManager: i.create()
                        })), this._super.apply(this, arguments)
                    },
                    didInsertElement: function () {
                        this.$("textarea").focus(), this.get("collisionController").markAsViewing(this.get("content"))
                    },
                    willDestroyElement: function () {
                        this.get("collisionController").markAsNotViewing(this.get("content")), this.get("controller").destroy(), this.get("content").expire(), this._super()
                    }
                }),
                a = Em.View.extend({
                    classNames: "ticket",
                    classNameBindings: ["content.isClosed:closed"],
                    templateName: "templates/filters/feeds/feed_ticket",
                    fullConversationView: null,
                    addCommentView: null,
                    toggleConversation: function () {
                        if (this.$(".latest_conversation").is(":visible")) {
                            this.$(".latest_conversation").addClass("working");
                            var e = this.get("content.comments");
                            e.refresh().done(_(function () {
                                this.set("fullConversationView", o.create({
                                    content: e.get("content")
                                })), this.$(".full.link").show(), this.$(".latest.link").hide()
                            }).bind(this))
                        } else this._showLatestConversation()
                    },
                    toggleAddComment: function () {
                        this._removeToggleView(this.get("addCommentView")) || this.set("addCommentView", u.create({
                            parentView: this
                        }))
                    },
                    refreshTicket: function (e) {
                        if (e.get("body")) {
                            var t = {
                                body: e.get("body"),
                                "public": e.get("is_public"),
                                author: Zd.get("currentUser"),
                                created_at: new Date
                            };
                            this.set("content.last_comments", [t].concat(this.get("content.last_comments")))
                        }
                        this.toggleAddComment(), this._showLatestConversation()
                    },
                    removeTicket: function () {
                        this.$().slideUp(_(function () {
                            this.$().remove()
                        }).bind(this))
                    },
                    _showLatestConversation: function () {
                        this.$(".latest_conversation").show(), this._removeToggleView(this.get("fullConversationView")), this.$(".full.link").hide(), this.$(".latest.link").show()
                    },
                    _removeToggleView: function (e) {
                        return e && !e.get("isDestroyed") ? e.$().slideUp(function () {
                            e.destroy()
                        }) : !1
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/filters/feed_filter_view": function (e, t, n) {
            var r = t("controllers/ticket_filter_manager_controller").instance(),
                i = t("views/filters/feeds/feed_ticket_view");
            n.exports = Em.CollectionView.extend({
                ticketFilterManagerController: r,
                contentBinding: "ticketFilterManagerController.currentFilter.content",
                classNameBindings: ["ticketFilterManagerController.currentFilter.content.isFetching:working"],
                classNames: ["filter_feed"],
                itemViewClass: i,
                emptyView: Ember.View.extend({
                    tagName: "p",
                    classNames: "empty_set",
                    template: function () {
                        return I18n.t("txt.filters.empty_filter")
                    }
                })
            })
        }
    }), this.require.define({
        "views/filters/filter_content_view": function (e, t, n) {
            var r = Em.Object.create({
                focus: Em.K,
                navigateFirst: Em.K
            }),
                i = Em.View.extend(t("lib/views/registrable_view_mixin"), {
                    controller: Em.required(),
                    uiController: Em.required(),
                    templateName: "templates/filters/ticket_list",
                    name: "filterContentList",
                    registrar: Em.computed.alias("uiController"),
                    classNames: ["scroll_content"],
                    didInsertElement: function () {
                        var e = this.get("childViews").filter(function (e) {
                            return String(e).indexOf("TicketsTableBodyView") > -1
                        })[0] || r;
                        this.set("bodyView", e), this._super()
                    },
                    navigateLeft: function () {
                        this.get("uiController").focusIndexView()
                    },
                    focus: function () {
                        this.get("bodyView").focus()
                    },
                    navigateFirst: function () {
                        this.get("bodyView").navigateFirst()
                    }
                }).reopenClass({
                    toString: function () {
                        return "FilterContentView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/filter_editor_view": function (e, t, n) {
            var r = t("views/filters/editor/conditions_view"),
                i = t("views/filters/editor/title_view"),
                s = t("views/filters/editor/visibility_view"),
                o = $(document.body),
                u = Em.View.extend({
                    tagName: "form",
                    classNames: ["filter-editor", "static"],
                    classNameBindings: ["editMode", "isValid:valid", "isReadOnly:readonly"],
                    templateName: "templates/filters/editor",
                    isVisible: Em.computed.oneWay("controller.active"),
                    isModal: Em.computed.equal("editMode", "modal"),
                    isValid: Em.computed.bool("controller.isValid"),
                    isReadOnly: Em.computed.not("controller.canEdit"),
                    menu: Em.computed.alias("conditionsView.menu"),
                    previewable: Em.computed.and("isModal", "isValid"),
                    shouldShowActions: Em.computed.oneWay("controller.shouldShowActions"),
                    init: function () {
                        this.set("boundClickHandler", this.didClickOut.bind(this)), this._super()
                    },
                    editMode: function () {
                        var e = this.get("content.resource.isNew"),
                            t = this.get("content.previewing");
                        return e && !t ? "modal" : "popover"
                    }.property("content.resource.isNew").cacheable(),
                    TitleView: i.extend({
                        viewName: "titleView",
                        controller: Em.computed.oneWay("parentView.controller"),
                        content: Em.computed.alias("parentView.content.title")
                    }),
                    VisibilityView: s.extend({
                        viewName: "visibilityView",
                        content: Em.computed.alias("parentView.content.restriction"),
                        controller: Em.computed.oneWay("parentView.controller")
                    }),
                    AllConditionsView: r.extend({
                        viewName: "conditionsView",
                        controller: Em.computed.alias("parentView.controller.allConditionsController")
                    }),
                    submit: function (e) {
                        return !1
                    },
                    didClickOut: function (e) {
                        var t = e.target,
                            n = $(t);
                        if (this.$()[0].contains(t)) return;
                        if (n.hasClass("editor-toggle") || n.parent().hasClass("editor-toggle")) return;
                        var r = this.get("menu") && this.get("menu").$()[0];
                        if (r && r.contains(t)) return;
                        if (n.closest(".ui-datepicker").length > 0) return;
                        var i = this.get("visibilityView.fieldView.delegate");
                        if (i && i.domMenuHolder.contains(t)) return;
                        if ($(".editing-actions .btn").index(t) !== -1) return;
                        this.get("isModal") ? this.get("controller").cancel() : this.get("controller").deactivate(), e.stopPropagation()
                    },
                    becameVisible: function () {
                        var e;
                        this.set("content", this.get("controller.filter")), this.get("isModal") ? (e = $('<div class="filter-modal-bd"></div>'), e.on("mousedown", this.get("boundClickHandler")), e.appendTo("body"), this.set("backdrop", e)) : document.addEventListener("mousedown", this.get("boundClickHandler"), !0), this.$("input:first").focus()
                    },
                    becameHidden: function () {
                        var e = this.get("backdrop");
                        e && (e.remove(), this.set("backdrop", null)), document.removeEventListener("mousedown", this.get("boundClickHandler"), !0), this.set("content", null)
                    },
                    willDestroyElement: function () {
                        return this.becameHidden(), this._super()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "FilterEditorView"
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/filters/filter_index_item_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/lotus/collection_navigation_item"), {
                classNameBindings: ["content.isSuspendedFilter:suspended_tickets"],
                title: Em.computed.oneWay("content.title"),
                templateName: Em.required(),
                headerTemplate: Em.required(),
                headerLabels: Em.required(),
                parentContent: Em.computed.oneWay("parentView.content"),
                activate: function () {
                    this.set("parentView.focusIndex", this.get("contentIndex")), this.get("parentView").activate()
                },
                didInsertElement: function () {
                    this.prependHtmlIfNeeded(), this._super()
                },
                prependHtmlIfNeeded: function () {
                    var e = this.get("headerTemplate"),
                        t = this.get("headerLabels"),
                        n, r, i;
                    this.hasNewTitle() && (i = this.get("content.viewType"), n = t[i] || "", r = e.fmt(n), this.prependHtml(r))
                },
                prependHtml: function (e) {
                    this.$().before(e)
                },
                _getOffsetContent: function (e) {
                    var t = this.get("contentIndex"),
                        n = this.get("parentContent");
                    return t > 0 && n && n.objectAt(t + e) || null
                },
                prevContent: function () {
                    return this._getOffsetContent(-1)
                }.property("parentContent", "contentIndex").cacheable(),
                nextContent: function () {
                    return this._getOffsetContent(1)
                }.property("parentContent", "contentIndex").cacheable(),
                hasNewTitle: function () {
                    var e = this.get("prevContent.viewType");
                    return e && e !== this.get("content.viewType")
                },
                willDestroyElement: function () {
                    var e = this.get("nextContent");
                    if (e && e.get("viewType") === this.get("content.viewType")) return;
                    this.$().prev(".filter-group-heading").remove()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "FilterIndexItemView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/filters/filter_index_view": function (e, t, n) {
            var r = Em.CollectionView.extend(t("lib/lotus/collection_navigation"), t("lib/lotus/responder_view"), t("lib/views/registrable_view_mixin"), {
                name: "filterIndexList",
                content: Em.required(),
                tagName: "ul",
                classNames: ["filters"],
                uiController: Em.required(),
                registrar: Em.computed.alias("uiController"),
                activate: function () {
                    this.get("uiController").activateContentView(this)
                },
                navigateRight: function () {
                    this.activate()
                },
                select: function () {
                    this.activate(), this._super()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "FilterIndexView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/filters/filter_table_header_view": function (e, t, n) {
            var r = t("lib/views/table_header_view"),
                i = r.extend(t("lib/views/table_header_with_selection_mixin"), {
                    tagName: "tr",
                    controller: null,
                    classNameBindings: ["isSortingEnabled:sorting"],
                    filter: Em.computed.oneWay("controller.filter"),
                    currentPageFullySelected: Em.computed.oneWay("controller.currentPageFullySelected"),
                    selectAll: function () {
                        this.get("controller").selectAll()
                    },
                    deselectAll: function () {
                        this.get("controller").deselectCurrentPage()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/list_editor/active_filters_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "li",
                templateName: "templates/filters/list_editor/active_filter_item",
                classNames: ["filter"],
                attributeBindings: ["filterId:data-filter-id"],
                filterId: Em.computed.oneWay("content.id"),
                controller: Em.computed.oneWay("parentView.controller"),
                filterType: Em.computed.oneWay("parentView.filterType"),
                hide: function (e) {
                    this.$().slideUp(125, e)
                },
                deactivateFilter: function () {
                    var e = this.get("content");
                    this.get("filterType") === "shared" ? this.get("controller").deactivateSharedFilter(e) : this.get("controller").deactivatePersonalFilter(e)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ActiveFilterItemView"
                }
            }),
                i = Em.CollectionView.extend(t("lib/views/sortable_collection_view_mixin"), {
                    tagName: "ul",
                    filterType: null,
                    content: null,
                    controller: null,
                    itemViewClass: r,
                    sortableItemSelector: ".filter",
                    sortableItemIdAttribute: "data-filter-id",
                    syncFilterOrder: function (e) {
                        this.get("filterType") === "shared" ? this.get("controller").reorderSharedFilters(e) : this.get("controller").reorderPersonalFilters(e)
                    },
                    sortableDidChange: function (e) {
                        this.syncFilterOrder(e)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ActiveFilterListView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/list_editor/inactive_filters_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "li",
                templateName: "templates/filters/list_editor/inactive_filter_item",
                classNames: ["filter"],
                attributeBindings: ["filterId:data-filter-id"],
                filterId: Em.computed.oneWay("content.id"),
                controller: Em.computed.oneWay("parentView.controller"),
                filterType: Em.computed.oneWay("parentView.filterType"),
                hide: function (e) {
                    this.$().slideUp(125, e)
                },
                activateFilter: function () {
                    var e = this.get("content");
                    this.get("filterType") === "shared" ? this.get("controller").activateSharedFilter(e) : this.get("controller").activatePersonalFilter(e)
                },
                deleteFilter: function () {
                    var e = this.get("content");
                    this.get("filterType") === "shared" ? this.get("controller").deleteSharedFilter(e) : this.get("controller").deletePersonalFilter(e)
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "InactiveFilterItemView"
                }
            }),
                i = Em.CollectionView.extend({
                    tagName: "ul",
                    filterType: null,
                    content: null,
                    controller: null,
                    itemViewClass: r
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "InactiveFilterListView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/original_filter_view": function (e, t, n) {
            var r = t("controllers/ticket_filter_manager_controller").instance(),
                i = Em.View.extend({
                    tagName: "span",
                    ticketFilterManagerController: r,
                    currentFilterBinding: "ticketFilterManagerController.currentFilter",
                    isVisible: Em.computed.ifNull("currentFilter.sortManager", !1),
                    resetSortOrder: function () {
                        var e = this.get("currentFilter.resource.execution"),
                            t = this.get("currentFilter");
                        t.setProperties({
                            sortManager: null,
                            groupBy: e.group_by,
                            groupOrder: e.group_order,
                            sortBy: e.sort_by,
                            sortOrder: e.sort_order
                        }), t.refreshContent()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/ticket_filter_index_item_view": function (e, t, n) {
            var r = t("views/filters/filter_index_item_view"),
                i = r.extend({
                    isVisible: Em.computed.bool("content.shouldShow"),
                    templateName: "templates/filters/ticket_filter_index_item",
                    headerTemplate: '<div class="filter-group-heading">%@</div>',
                    headerLabels: {
                        personal: I18n.t("txt.filters.personal_group_heading"),
                        sla: I18n.t("txt.filters.sla_group_heading")
                    }
                }).reopenClass({
                    toString: function () {
                        return "TicketFilterIndexItemView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/ticket_filter_index_view": function (e, t, n) {
            var r = t("views/filters/filter_index_view"),
                i = t("views/filters/ticket_filter_index_item_view"),
                s = r.extend({
                    itemViewClass: i
                }).reopenClass({
                    toString: function () {
                        return "TicketFilterIndexView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/filters/ticket_list_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/filters/ticket_list",
                controller: null,
                filter: null,
                ticketList: null
            });
            n.exports = r
        }
    }), this.require.define({
        "views/filters/user_filter_content_view": function (e, t, n) {
            var r = Em.Object.create({
                focus: Em.K,
                navigateFirst: Em.K
            }),
                i = Em.View.extend(t("lib/views/registrable_view_mixin"), {
                    controller: Em.required(),
                    uiController: Em.required(),
                    templateName: "templates/filters/user_table_list",
                    name: "filterContentList",
                    registrar: Em.computed.alias("uiController"),
                    classNames: ["scroll_content"],
                    classNameBindings: ["controller.manager.isColumnEditorActive:column-editor-active"],
                    didInsertElement: function () {
                        var e = this.get("childViews").filter(function (e) {
                            return String(e).indexOf("UserTableBodyView") > -1
                        })[0] || r;
                        this.set("bodyView", e), this._super()
                    },
                    navigateLeft: function () {
                        this.get("uiController").focusIndexView()
                    },
                    focus: function () {
                        this.get("bodyView").focus()
                    },
                    navigateFirst: function () {
                        this.get("bodyView").navigateFirst()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "UserFilterContentView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/user_filter_index_item_view": function (e, t, n) {
            var r = t("views/filters/filter_index_item_view"),
                i = r.extend({
                    templateName: "templates/filters/user_filter_index_item",
                    headerTemplate: '<div class="filter-group-heading">%@</div>',
                    headerLabels: {
                        personal: I18n.t("txt.user_filters.personal_group_heading"),
                        preview: I18n.t("txt.user_filters.preview")
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserFilterIndexItemView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/user_filter_index_view": function (e, t, n) {
            var r = t("views/filters/filter_index_view"),
                i = t("views/filters/user_filter_index_item_view"),
                s = function (e) {
                    e.preventDefault(), e.stopPropagation()
                }, o = function (e, t) {
                    e.addEventListener(t, s, !0)
                }, u = function (e, t) {
                    e.removeEventListener(t, s, !0)
                }, a = ["mousedown", "click", "focus"],
                f = r.extend({
                    itemViewClass: i,
                    disabled: !1,
                    activate: function () {
                        if (this.get("disabled")) return;
                        return this._super()
                    },
                    didInsertElement: function () {
                        return this.syncState(), this._super()
                    },
                    disabledDidChange: function () {
                        this.syncState()
                    }.observes("disabled"),
                    syncState: function () {
                        if (this.get("state") !== "inDOM") return;
                        this.get("disabled") ? this.blockEvents() : this.unblockEvents()
                    },
                    blockEvents: function () {
                        a.forEach(o.bind(null, this.$()[0]))
                    },
                    unblockEvents: function () {
                        a.forEach(u.bind(null, this.$()[0]))
                    },
                    willDestroyElement: function () {
                        this.unblockEvents(), this._super && this._super()
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserFilterIndexView"
                    }
                });
            n.exports = f
        }
    }), this.require.define({
        "views/filters/user_filter_table_header_view": function (e, t, n) {
            var r = t("lib/views/table_header_view"),
                i = r.extend({
                    tagName: "tr",
                    controller: null,
                    classNameBindings: ["isSortingEnabled:sorting"],
                    filter: Em.computed.oneWay("controller.filter"),
                    fieldDefinitions: t("models/filter/user_filter/user_filter_definitions").instance(),
                    toggleColumnSort: function (e) {
                        if (!this.get("fieldDefinitions").canSort(e)) return;
                        return this._super(e)
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/filters/user_list_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/filters/user_list",
                controller: null,
                filter: null
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "UserListView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/launchpad/benchmark_survey_text_field": function (e, t, n) {
            var r = t("controllers/benchmark_survey_controller"),
                i = Em.TextField.extend({
                    tagName: "input",
                    type: "text",
                    category: null,
                    classNameBindings: "hide".w(),
                    init: function () {
                        this._super(), this.set("benchmarkSurveyController", r.instance())
                    },
                    didInsertElement: function () {
                        var e, t;
                        switch (this.get("category")) {
                        case "teams":
                            e = this.get("benchmarkSurveyController.teamCountResult");
                            break;
                        case "agents":
                            e = this.get("benchmarkSurveyController.agentCountResult");
                            break;
                        default:
                        }
                        e !== 0 && e != null && (t = e > 1 ? this.get("unitPlural") : this.get("unitSingular"), this.set("value", e + " " + t))
                    },
                    hide: function () {
                        switch (this.get("category")) {
                        case "teams":
                            return !this.get("benchmarkSurveyController.shouldShowTeamCount");
                        case "agents":
                            return !this.get("benchmarkSurveyController.shouldShowAgentCount");
                        default:
                        }
                    }.property("benchmarkSurveyController.shouldShowTeamCount", "benchmarkSurveyController.shouldShowAgentCount").volatile(),
                    placeholder: function () {
                        switch (this.get("category")) {
                        case "teams":
                            return I18n.t("txt.launchpad.benchmark_survey.how_many_teams");
                        case "agents":
                            return I18n.t("txt.launchpad.benchmark_survey.how_many_agents");
                        default:
                        }
                    }.property().volatile(),
                    unitPlural: function () {
                        switch (this.get("category")) {
                        case "teams":
                            return I18n.t("txt.launchpad.benchmark_survey.teams");
                        case "agents":
                            return I18n.t("txt.launchpad.benchmark_survey.agents");
                        default:
                        }
                    }.property().volatile(),
                    unitSingular: function () {
                        switch (this.get("category")) {
                        case "teams":
                            return I18n.t("txt.launchpad.benchmark_survey.team");
                        case "agents":
                            return I18n.t("txt.launchpad.benchmark_survey.agent");
                        default:
                        }
                    }.property().volatile(),
                    unit: function () {
                        return this.getCount() > 1 ? this.get("unitPlural") : this.get("unitSingular")
                    }.property().volatile(),
                    click: function () {
                        var e = this.get("unit"),
                            t = this.$().val().indexOf(e);
                        t <= 0 && this.set("value", " " + e), this.setCaretPosition(this.elementId, t - 1)
                    },
                    keyUp: function () {
                        var e = this.elementId,
                            t = this.$().val(),
                            n = "",
                            r = this.get("unitSingular"),
                            i = this.get("unitPlural");
                        this.getCount() > 1 ? t.indexOf(i) < 0 ? n = t.replace(r, i) : n = t : n = t.replace(i, r), this.set("value", n), this.setCaretPosition(e, t.indexOf(" "))
                    },
                    keyDown: function () {
                        this.$().click()
                    },
                    focusOut: function () {
                        var e = this.get("unit"),
                            t = this.$().val();
                        (t.indexOf(" " + e) === 0 || t.indexOf(e) === 0) && this.set("value", "")
                    },
                    setCaretPosition: function (e, t) {
                        var n = document.getElementById(e);
                        if (n != null)
                            if (n.createTextRange) {
                                var r = n.createTextRange();
                                r.move("character", t), r.select()
                            } else n.selectionStart ? (n.focus(), n.setSelectionRange(t, t)) : n.focus()
                    },
                    getCount: function () {
                        var e = this.$().val();
                        if (e === "") return 0;
                        var t = parseInt(e.substr(0, e.indexOf(" ")), 10);
                        return t
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/launchpad/benchmark_survey_view": function (e, t, n) {
            n.exports = Em.View.extend({
                templateName: "templates/launchpad/benchmark_survey",
                init: function () {
                    this._super(), this.set("benchmarkSurveyController", t("controllers/benchmark_survey_controller").instance())
                },
                submitSurvey: function () {
                    this.get("benchmarkSurveyController").submitSurvey()
                }
            })
        }
    }), this.require.define({
        "views/launchpad/tasks/task_settings_view": function (e, t, n) {
            var r = Em.View.extend({
                taskName: Em.required(),
                jetpackTasks: Em.computed.singleton("models/launchpad/launchpad_tasks"),
                jetpackTask: function () {
                    return this.get("jetpackTasks").findProperty("key", this.get("taskName"))
                }.property("jetpackTasks.@each").cacheable(),
                shouldShowSample: function () {
                    return this.get("jetpackTask.status") !== "started"
                }.property("jetpackTask.status").cacheable(),
                shouldShowSettings: function () {
                    return this.get("jetpackTask.status") === "started"
                }.property("jetpackTask.status").cacheable(),
                shouldGoToSettings: function () {
                    return this.get("jetpackTask.status") === "complete"
                }.property("jetpackTask.status").cacheable(),
                showSettings: function () {
                    this.get("jetpackTask").set("status", "started").save()
                },
                goToSettings: function () {
                    Zd.Routes.goToHash(this.get("settingsPath"))
                },
                sortByOrder: function (e) {
                    return e.sort(function (e, t) {
                        return e.get("order") > t.get("order")
                    })
                },
                getNextIncompleteTaskName: function () {
                    var e = this.get("jetpackTask.section"),
                        t = e === "admin" ? "admin" : "agent",
                        n = e === "admin" ? "agent" : "admin",
                        r = this.get("jetpackTasks"),
                        i = this.sortByOrder(r.filterProperty("section", t).slice(this.get("jetpackTask.order") + 1).filterProperty("enabled", !0)),
                        s = this.sortByOrder(r.filterProperty("section", n).filterProperty("enabled", !0)),
                        o = i.findProperty("incomplete", !0) || s.findProperty("incomplete", !0);
                    return o ? o.get("key") : null
                },
                goToNextIncompleteTask: function () {
                    var e = this.get("jetpackTask"),
                        t = e.get("status") !== "complete",
                        n = ["benchmark", "addHelpCenter"].contains(this.get("taskName"));
                    e && (t || n) && (e.set("status", "complete").save(), Zd.launchpadViewStates.goToState(this.getNextIncompleteTaskName()))
                },
                willDestroyElement: function () {
                    this.$().fadeOut(250), this._super()
                },
                willInsertElement: function () {
                    this._super(), this.$().fadeIn(500)
                }
            }),
                i = r.extend({
                    taskName: "configureEmail",
                    templateName: "templates/launchpad/configure_email",
                    iFrameSrc: "/settings/email",
                    learnMoreURL: I18n.t("txt.admin.views.settings.email.show.email_description_link"),
                    settingsPath: "/admin/email"
                }),
                s = i.extend({
                    taskName: "configureGoogleEmail"
                }),
                o = r.extend({
                    taskName: "configureWebPortal",
                    templateName: "templates/launchpad/configure_web_portal",
                    iFrameSrc: "/settings/portal",
                    learnMoreURL: I18n.t("txt.admin.views.settings.portal.show.portal_description_link"),
                    settingsPath: "/admin/portal"
                }),
                u = r.extend({
                    taskName: "addHelpCenter",
                    templateName: "templates/launchpad/add_help_center",
                    controller: t("controllers/nav_bar_controller").create(),
                    currentAccount: t("lib/current_account"),
                    helpCenterSettings: Em.computed.alias("currentAccount.helpCenterSettings"),
                    showSettings: function () {
                        this.get("controller").showHelpCenter(), this.get("shouldGoToSettings") || (this.get("helpCenterSettings.helpCenterConfigured") ? this.get("jetpackTask").set("status", "complete").save() : this._super())
                    }
                }),
                a = r.extend({
                    taskName: "addFeedbackTab",
                    templateName: "templates/launchpad/add_feedback_tab",
                    iFrameSrc: "/account/dropboxes/new",
                    learnMoreURL: I18n.t("txt.admin.views.account.dropboxes._general.learn_more_link"),
                    settingsPath: "/admin/dropboxes"
                }),
                f = r.extend({
                    taskName: "addChat",
                    templateName: "templates/launchpad/add_chat",
                    iFrameSrc: "/settings/chat",
                    learnMoreURL: I18n.t("txt.admin.views.account.chat_settings.show.learn_more_link"),
                    settingsPath: "/admin/chat"
                }),
                l = r.extend({
                    taskName: "addVoice",
                    templateName: "templates/launchpad/add_voice",
                    iFrameSrc: "/voice/settings#number_picker",
                    learnMoreURL: I18n.t("txt.admin.views.voice.settings.description.learn_more_URL"),
                    settingsPath: "/admin/voice"
                }),
                c = r.extend({
                    taskName: "addTwitter",
                    templateName: "templates/launchpad/add_twitter",
                    learnMoreURL: I18n.t("txt.admin.views.twitter.settings.index.learn_more_link"),
                    controller: t("controllers/launchpad/add_twitter_controller").create(),
                    showSettings: function () {
                        this._super(), this.get("controller").addAccount()
                    },
                    settingsPath: "/admin/twitter"
                }),
                h = r.extend({
                    taskName: "addFacebook",
                    templateName: "templates/launchpad/add_facebook",
                    learnMoreURL: I18n.t("txt.facebook_integration.views.settings.intro_text_link"),
                    controller: t("controllers/launchpad/add_facebook_controller").create(),
                    showSettings: function () {
                        this._super(), this.get("controller").addFacebook()
                    },
                    settingsPath: "/admin/facebook"
                }),
                p = r.extend({
                    taskName: "benchmark",
                    templateName: "templates/launchpad/benchmark",
                    init: function () {
                        this._super(), this.set("controller", t("controllers/benchmark_survey_controller").instance()), this.get("controller").initialize()
                    },
                    learnMoreURL: I18n.t("txt.launchpad.benchmark_survey.learn_more_link")
                }),
                d = r.extend({
                    taskName: "updateProfile",
                    templateName: "templates/launchpad/update_profile",
                    iFrameSrc: function () {
                        return "/users/%@/edit".fmt(Zd.currentUser.get("id"))
                    }.property("Zd.currentUser").cacheable(),
                    learnMoreURL: I18n.t("txt.users.edit.identities_msg_link"),
                    settingsPath: function () {
                        return "/users/" + Zd.currentUser.get("id")
                    }.property("Zd.currentUser.id").cacheable()
                }),
                v = r.extend({
                    taskName: "testTicket",
                    elementId: "LaunchpadTestTicketView",
                    controller: t("controllers/launchpad/test_ticket_controller").create(),
                    templateName: "templates/launchpad/test_ticket",
                    learnMoreURL: I18n.t("txt.launchpad.test_ticket.learn_more_link")
                }),
                m = r.extend({
                    taskName: "createView",
                    templateName: "templates/launchpad/create_view",
                    iFrameSrc: function () {
                        return Zd.currentUser.get("isAdmin") ? "/rules/new?filter=view&return_to=" + encodeURIComponent("/rules/views?filter=views") : "/rules/new?filter=view&return_to=" + encodeURIComponent("/rules/views?filter=views&select=personal")
                    }.property().cacheable(),
                    learnMoreURL: I18n.t("txt.admin.views.rules.analysis.show.views_description_link"),
                    settingsPath: "/admin/views"
                }),
                g = r.extend({
                    taskName: "createMacro",
                    templateName: "templates/launchpad/create_macro",
                    iFrameSrc: function () {
                        return Zd.currentUser.get("isAdmin") ? "/rules/new?filter=macro&return_to=" + encodeURIComponent("/rules/macros?filter=macros") : "/rules/new?filter=macro&return_to=" + encodeURIComponent("/rules/macros?filter=macros&select=personal")
                    }.property().cacheable(),
                    learnMoreURL: I18n.t("txt.admin.views.rules.analysis.show.macros_description_link"),
                    settingsPath: "/admin/macros"
                }),
                y = Em.View.extend({
                    templateName: "templates/launchpad/add_agents"
                });
            n.exports = Object.freeze({
                MainView: r,
                ConfigureEmailView: i,
                ConfigureGoogleEmailView: s,
                ConfigureWebPortalView: o,
                AddHelpCenterView: u,
                AddFeedbackTabView: a,
                AddAgentsView: y,
                AddChatView: f,
                AddVoiceView: l,
                AddTwitterView: c,
                AddFacebookView: h,
                BenchmarkSurveyView: p,
                UpdateProfileView: d,
                TestTicketView: v,
                CreateViewView: m,
                CreateMacroView: g
            })
        }
    }), this.require.define({
        "views/launchpad/tasks/add_agents_view": function (e, t, n) {
            var r = t("lib/views/textarea_view").extend({
                classNames: "agent_list".w(),
                placeholder: I18n.t("txt.launchpad.add_agents.directions"),
                keyUp: function () {
                    this.get("parentView.agents") !== this.$().val() && this.set("parentView.agents", this.$().val())
                },
                clear: function () {
                    this.set("parentView.agents", null), this.$().val("")
                }
            }),
                i = Em.View.extend(t("mixins/button_support"), {
                    classNames: "btn btn-info".w(),
                    submitLabel: I18n.t("txt.launchpad.add_agents.button.invite"),
                    submittingLabel: I18n.t("txt.launchpad.add_agents.button.inviting"),
                    label: I18n.t("txt.launchpad.add_agents.button.invite"),
                    target: t("controllers/launchpad/add_agents_controller").create(),
                    action: "inviteAgents",
                    agentsBinding: "parentView.agents",
                    click: function () {
                        this.set("label", this.get("submittingLabel")), this.set("disabled", !0)
                    },
                    didInsertElement: function () {
                        this.set("label", this.get("submitLabel"))
                    },
                    didSubmit: function () {
                        this.set("label", this.get("submitLabel")), this.set("disabled", !1)
                    },
                    clearList: function () {
                        this.get("list").clear()
                    }
                }),
                s = t("views/launchpad/tasks/task_settings_view"),
                o = s.MainView.extend({
                    taskName: "addAgents",
                    videoSrc: "//fast.wistia.net/embed/iframe/3eb7y06aa8?playerColor=030303&plugin%5BpostRoll-v1%5D%5Braw%5D=%3Cdiv%20style%3D%22text-align%3Acenter%3B%22%3E%3Ca%20href%3D%22https%3A%2F%2Fsupport.zendesk.com%2Fentries%2F21222511-managing-your-tickets%22%20style%3D%22color%3A%23ffffff%3Btext-decoration%3Anone%3B%20font-family%3A%20%27Lucida%20Grande%27%2C%20Helvetica%2C%20Arial%3B%22%20target%3D%22_blank%22%3EClick%20to%20learn%20more%20about%3Cbr%3E%20%3Cstrong%3EManaging%20your%20tickets%3C%2Fstrong%3E%3C%2Fa%3E%3C%2Fdiv%3E&plugin%5BpostRoll-v1%5D%5Bstyle%5D%5BbackgroundColor%5D=%23616161&plugin%5BpostRoll-v1%5D%5Bstyle%5D%5Bcolor%5D=%23ffffff&plugin%5BpostRoll-v1%5D%5Bstyle%5D%5BfontFamily%5D=Gill%20Sans%2C%20Helvetica%2C%20Arial%2C%20sans-serif&plugin%5BpostRoll-v1%5D%5Bstyle%5D%5BfontSize%5D=36px&plugin%5BpostRoll-v1%5D%5Bstyle%5D%5BtextAlign%5D=left&version=v1&videoHeight=540&videoWidth=960&volumeControl=true",
                    learnMoreURL: I18n.t("txt.launchpad.add_agents.learn_more_link"),
                    AgentListTextArea: r,
                    InviteAgentsButton: i,
                    didInsertElement: function () {
                        var e = this.get("childViews.0"),
                            t = this.get("childViews.1");
                        typeof t != "undefined" && t.set("list", e)
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/launchpad/tasks/tour_view": function (e, t, n) {
            var r = t("controllers/welcome_modal_controller").instance(),
                i = t("lib/account_consumer"),
                s = Em.View.extend(i, {
                    templateName: "templates/launchpad/tour/carousel",
                    helpCenterOnboardingEnabled: Em.computed.oneWay("currentAccount.helpCenterSettings.helpCenterOnboardingEnabled"),
                    willInsertElement: function () {
                        this._super(), this.$().fadeIn(500), this.$(".tour_page").carousel({
                            interval: 4e3,
                            pause: "hover"
                        })
                    },
                    willDestroyElement: function () {
                        this.$(".tour_page").carousel("pause"), this.$().fadeOut(250), this._super()
                    }
                }),
                o = Em.ViewState.extend({
                    enter: function () {
                        var e = function () {
                            t("controllers/help_center_onboarding/controller").instance().showIntroTooltip()
                        }, n = function () {
                                var n = t("controllers/onboarding_tooltip_controller").create();
                                n.setupTooltip(e)
                            };
                        return r.showForNewOwner(n), this._super.apply(this, arguments)
                    },
                    routeToPage: function (e) {
                        var t = this.get("view");
                        t && t.$(".tour_page").carousel(e - 1)
                    },
                    view: s
                });
            n.exports = o
        }
    }), this.require.define({
        "views/launchpad/view_states": function (e, t, n) {
            var r = t("models/launchpad/launchpad_tasks").instance(),
                i = $.Deferred(),
                s = t("views/launchpad/tasks/task_settings_view"),
                o = Em.StateManager.extend({
                    initialState: "announcements",
                    init: function () {
                        var e = this._super.apply(this, arguments);
                        return Zendesk.set("launchpadViewStates", this), i.resolveWith(this, [this]), e
                    },
                    currentStateName: function () {
                        var e = this.get("currentState.name");
                        return e ? e.replace(/^\./, "") : null
                    }.property("currentState.name").cacheable(),
                    goToConfigureEmail: function () {
                        var e = "configureEmail";
                        r.findProperty("key", "configureGoogleEmail") && (e = "configureGoogleEmail"), this.goToState(e)
                    },
                    goToConfigureWebPortal: function () {
                        this.goToState("configureWebPortal")
                    },
                    goToBenchmark: function () {
                        this.goToState("benchmark")
                    },
                    goToMacros: function () {
                        this.goToState("createMacro")
                    },
                    goToApps: function () {
                        Zd.Routes.goToHash("#/admin/apps")
                    },
                    goToTestTicket: function () {
                        this.goToState("testTicket")
                    },
                    goToCreateView: function () {
                        this.goToState("createView")
                    },
                    goToAnnouncements: function () {
                        this.goToState("announcements")
                    },
                    announcements: t("views/launchpad/tasks/tour_view").create(),
                    configureEmail: Em.ViewState.extend({
                        view: s.ConfigureEmailView
                    }),
                    configureGoogleEmail: Em.ViewState.extend({
                        view: s.ConfigureGoogleEmailView
                    }),
                    addAgents: Em.ViewState.extend({
                        view: s.AddAgentsView
                    }),
                    configureWebPortal: Em.ViewState.extend({
                        view: s.ConfigureWebPortalView
                    }),
                    addHelpCenter: Em.ViewState.extend({
                        view: s.AddHelpCenterView
                    }),
                    addFeedbackTab: Em.ViewState.extend({
                        view: s.AddFeedbackTabView
                    }),
                    addChat: Em.ViewState.extend({
                        view: s.AddChatView
                    }),
                    addVoice: Em.ViewState.extend({
                        view: s.AddVoiceView
                    }),
                    addTwitter: Em.ViewState.extend({
                        view: s.AddTwitterView
                    }),
                    addFacebook: Em.ViewState.extend({
                        view: s.AddFacebookView
                    }),
                    updateProfile: Em.ViewState.extend({
                        view: s.UpdateProfileView
                    }),
                    testTicket: Em.ViewState.extend({
                        view: s.TestTicketView
                    }),
                    createView: Em.ViewState.extend({
                        view: s.CreateViewView
                    }),
                    createMacro: Em.ViewState.extend({
                        view: s.CreateMacroView
                    }),
                    benchmark: Em.ViewState.extend({
                        view: s.BenchmarkSurveyView
                    })
                }).reopenClass(t("lib/lotus/singleton"));
            o.onInit = i.promise(), n.exports = o
        }
    }), this.require.define({
        "views/launchpad/carousel_buttons": function (e, t, n) {
            var r = t("lib/account_consumer"),
                i = Em.View.extend(t("mixins/button_support"), {
                    controller: null,
                    classNameBindings: ["active:current"],
                    index: Em.computed.oneWay("parentView.index"),
                    page: Em.computed.oneWay("content"),
                    init: function () {
                        return this.set("controller", Zd.get("launchpadViewStates.announcements")), this._super()
                    },
                    active: function () {
                        return this.get("index") === this.get("content")
                    }.property("index", "content").cacheable(),
                    click: function () {
                        this.get("controller").routeToPage(parseInt(this.get("page") || 1, 10))
                    }
                });
            n.exports = Em.CollectionView.extend(r, {
                tagName: "nav",
                itemViewClass: i,
                helpCenterOnboardingEnabled: Em.computed.oneWay("currentAccount.helpCenterSettings.helpCenterOnboardingEnabled"),
                content: function () {
                    return this.get("section") == "admin" ? this.get("helpCenterOnboardingEnabled") ? [1, 2, 3, 4, 5, 6] : [1, 2, 3, 4, 5, 6, 7] : [1, 2, 3]
                }.property("section").cacheable()
            }).reopenClass({
                preservesContext: !0
            })
        }
    }), this.require.define({
        "views/launchpad/toggle_button": function (e, t, n) {
            var r = Em.View.extend(t("mixins/button_support"), {
                classNames: ["btn"],
                classNameBindings: ["active"],
                controller: Em.computed.oneWay("parentView.controller"),
                disabledBinding: "active"
            });
            n.exports = r
        }
    }), this.require.define({
        "views/launchpad/dashboard_button": function (e, t, n) {
            var r = t("views/launchpad/toggle_button").extend({
                click: function () {
                    this.get("controller").activateDashboard()
                },
                active: function () {
                    return this.get("controller.currentLaunchpadMenuItem") === "dashboard"
                }.property("controller.currentLaunchpadMenuItem").volatile()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/launchpad/launchpad_button": function (e, t, n) {
            var r = t("views/launchpad/toggle_button").extend({
                targetBinding: "controller",
                click: function () {
                    this.get("controller").activateLaunchpad()
                },
                active: function () {
                    return this.get("controller.currentLaunchpadMenuItem") === "launchpad"
                }.property("controller.currentLaunchpadMenuItem").volatile()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/launchpad/learn_more_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "a",
                templateName: "templates/launchpad/learn_more_view",
                attributeBindings: "href target".w(),
                href: I18n.t("txt.launchpad.learn_more.link"),
                target: "_blank",
                label: I18n.t("txt.launchpad.learn_more.button")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/launchpad/menu_view": function (e, t, n) {
            var r = t("models/launchpad/launchpad_tasks").instance(),
                i = t("controllers/launchpad_controller"),
                s = t("lib/tracking"),
                o = Em.View.extend({
                    templateName: "templates/launchpad/launchpad_task_view",
                    classNames: "task".w(),
                    classNameBindings: "taskStatus disabled active".w(),
                    taskStatusBinding: "content.status",
                    disabled: Em.computed.not("content.enabled"),
                    defaultTaskBinding: Em.Binding.oneWay("parentView.menu.defaultTask"),
                    currentStateBinding: Em.Binding.oneWay("Zd.launchpadViewStates.currentStateName"),
                    keyBinding: Em.Binding.oneWay("content.key"),
                    label: function () {
                        return I18n.t("txt.launchpad.menu.task.%@.label".fmt(this.get("key")))
                    }.property("content.label").cacheable(),
                    active: function () {
                        return this.get("currentState") === this.get("key")
                    }.property("currentState").cacheable(),
                    action: function () {
                        return this.get("key")
                    }.property("key").cacheable(),
                    click: function () {
                        if (this.get("disabled")) return;
                        var e = this.get("action");
                        s(e, "Lotus-launchpad"), Zd.Routes.goToHash("#/launchpad/" + e)
                    }
                }),
                u = Em.View.extend({
                    templateName: "templates/launchpad/launchpad_menu_section",
                    classNames: ["section"],
                    title: null,
                    section: null,
                    menuBinding: Em.Binding.oneWay("parentView"),
                    isVisible: function () {
                        return !Em.empty(this.get("content"))
                    }.property("content").cacheable(),
                    content: function () {
                        var e = this.get("parentView.content");
                        return e ? e.filterProperty("section", this.get("section")) : Em.makeArray()
                    }.property("parentView.content", "section").cacheable(),
                    TaskCollectionView: Em.CollectionView.extend({
                        tagName: "ul",
                        itemViewClass: o,
                        contentBinding: Em.Binding.oneWay("parentView.content"),
                        menuBinding: Em.Binding.oneWay("parentView.menu")
                    })
                }),
                a = Em.ContainerView.extend({
                    init: function () {
                        this._super(), this.set("launchpadController", i.instance())
                    },
                    tasks: Em.computed.alias("launchpadController.tasks"),
                    defaultTask: "announcements",
                    content: function () {
                        return this.get("tasks") ? this.get("tasks").sort(function (e, t) {
                            return e.get("order") - t.get("order")
                        }) : Em.makeArray()
                    }.property("tasks.@each").cacheable(),
                    childViews: ["infoTaskSectionView", "adminTasksSectionView", "agentTasksSectionView"],
                    infoTaskSectionView: u.create({
                        classNames: "info".w(),
                        section: "info",
                        content: Em.makeArray({
                            key: "announcements",
                            enabled: !0
                        })
                    }),
                    adminTasksSectionView: u.create({
                        classNames: "admin".w(),
                        title: I18n.t("txt.launchpad.menu.admin"),
                        section: "admin"
                    }),
                    agentTasksSectionView: u.create({
                        classNames: "agent".w(),
                        title: I18n.t("txt.launchpad.menu.agent"),
                        section: "agent"
                    }),
                    didInsertElement: function () {
                        return r.fetch(), this._super.apply(this, arguments)
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/launchpad/toggle_view": function (e, t, n) {
            var r = t("controllers/launchpad_controller"),
                i = Em.View.extend({
                    tagName: "nav",
                    classNames: ["launchpad_toggle", "btn-group"],
                    controller: r.instance()
                });
            n.exports = i
        }
    }), this.require.define({
        "views/launchpad/view_states_root_view": function (e, t, n) {
            n.exports = Em.ContainerView.extend({
                elementId: "launchpad_content",
                didInsertElement: function () {
                    return t("views/launchpad/view_states").create({
                        rootView: this
                    }), this._super.apply(this, arguments)
                }
            })
        }
    }), this.require.define({
        "views/modals/audit_notification": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                classNames: ["audit-notification-modal"],
                templateName: "templates/modals/audit_notification",
                cancelLabel: I18n.t("txt.modal.audit_notification.cancel"),
                userDidCancel: function () {
                    this.hideModal()
                },
                title: function () {
                    switch (this.get("type")) {
                    case "Notification":
                        return I18n.t("txt.modal.audit_notification.title", {
                            eventId: this.get("eventId")
                        });
                    case "Cc":
                        return I18n.t("txt.modal.audit_cc_notification.title", {
                            eventId: this.get("eventId")
                        })
                    }
                }.property("type", "eventId").cacheable()
            });
            r.reopenClass({
                toString: function () {
                    return "AuditNotificationModal"
                }
            }), n.exports = r
        }
    }), this.require.define({
        "views/modals/filter_list_editor": function (e, t, n) {
            var r = t("views/modals/dynamic_modal").extend({
                controller: Em.required(),
                classNames: ["filter-list-editor"],
                templateName: "templates/modals/filter_list_editor",
                title: I18n.t("txt.user_filters.manage_views"),
                onHidden: function (e) {
                    this.get("controller").deactivate(), this._super()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "FilterListEditor"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/group_memberships_modal": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                classNames: ["group_memberships", "modal"],
                templateName: "templates/modals/group_memberships",
                controller: null,
                destroyOnHide: !1,
                onHidden: function () {
                    this.get("controller").onHideModal(), this._super()
                }
            }).reopenClass({
                toString: function () {
                    return "GroupMembershipsModal"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/make_public_comment_private": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                templateName: "templates/modals/make_public_comment_private",
                onConfirm: Em.required(),
                userDidConfirm: function () {
                    this.onConfirm(), this.hideModal()
                },
                userDidCancel: function () {
                    this.hideModal()
                }
            }).reopenClass({
                toString: function () {
                    return "MakePublicCommentToPrivateModal"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/new_entity": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                classNames: ["people_form"],
                templateName: Ember.required(),
                title: Ember.required(),
                cancelLabel: I18n.t("txt.modal.edit.cancel"),
                confirmLabel: I18n.t("txt.modal.edit.save"),
                saveAction: Ember.required(),
                cancelAction: "cancel",
                target: function () {
                    return this
                }.property().cacheable(),
                userDidConfirm: function () {
                    var e = this.get("controller"),
                        t = this.get("saveAction");
                    return e[t].apply(e, arguments)
                },
                userDidCancel: function () {
                    var e = this.get("controller"),
                        t = this.get("cancelAction");
                    if (e[t]) return e[t].apply(e, arguments);
                    this.hideModal()
                },
                didInsertElement: function () {
                    var e = this._super.apply(this, arguments);
                    return this.$("input:first").focus(), e
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/new_organization": function (e, t, n) {
            var r = t("views/modals/new_entity"),
                i = r.extend({
                    classNames: ["people_form"],
                    templateName: "templates/modals/new_organization",
                    title: I18n.t("txt.organizations.new.header"),
                    organization: Ember.computed.alias("controller.organization"),
                    saveAction: Ember.required()
                });
            n.exports = i
        }
    }), this.require.define({
        "views/modals/new_user": function (e, t, n) {
            var r = t("views/modals/new_entity"),
                i = r.extend({
                    templateName: "templates/modals/new_user",
                    title: Ember.required(),
                    user: Em.computed.oneWay("controller.user"),
                    saveAction: Ember.required()
                }).reopenClass({
                    toString: function () {
                        return "NewUserModal"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/modals/remove_organization_membership": function (e, t, n) {
            var r = t("views/modals/confirm_modal"),
                i = r.extend({
                    title: I18n.t("txt.modal.remove_organization_membership.title"),
                    bodyTemplate: "templates/modals/remove_organization_membership_body",
                    cancelLabel: I18n.t("txt.modal.remove_organization_membership.cancel"),
                    confirmLabel: I18n.t("txt.modal.remove_organization_membership.confirm"),
                    classNames: ["remove-organization-modal"],
                    controller: null,
                    membership: null,
                    userDidConfirm: function () {
                        this.get("controller").removeOrganizationMembership(this.get("membership")), this.hideModal()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "RemoveOrganizationMembershipModal"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/modals/suspended_account_modal": function (e, t, n) {
            var r = t("lib/tracking"),
                i = t("views/modals/dynamic_modal").extend({
                    templateName: "templates/modals/suspended_account",
                    classNames: ["suspended_account"],
                    controller: Em.required(),
                    planSelectionController: Em.computed.singleton("controllers/plan_selection_controller"),
                    options: {
                        keyboard: !1,
                        backdrop: "static"
                    },
                    trackEvent: function (e) {
                        r(e, "suspended_account_modal:" + this.get("controller.userType"), !1)
                    },
                    goToSubscriptions: function () {
                        var e = this.get("planSelectionController");
                        this.get("controller.isTrialAccount") ? (e.show(), this.trackEvent("find_a_plan")) : (e.show("update_credit_card"), this.trackEvent("update_credit_card")), Zd.Routes.goToHash("#/admin/subscription"), this.hideModal()
                    },
                    "continue": function () {
                        this.get("controller.isTrialAccount") ? this.trackEvent("continue_as_expired") : this.trackEvent("continue_as_suspended"), this.hideModal()
                    },
                    didInsertElement: function () {
                        this._super(), this.get("planSelectionController").initialize();
                        var e = this;
                        this.$("a").bind("click", function () {
                            e.trackEvent("contact_support")
                        }), this.get("controller.isTrialAccount") ? this.trackEvent("expired_trial_dialog_shown") : this.trackEvent("suspended_account_dialog_shown")
                    },
                    willHideModal: function () {
                        this.$("a").unbind("click"), this._super()
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/modals/ticket_close_confirm": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                title: I18n.t("txt.modal.unsaved.header"),
                body: I18n.t("txt.modal.unsaved.body"),
                confirmLabel: I18n.t("txt.modal.unsaved.close"),
                cancelLabel: I18n.t("txt.modal.unsaved.cancel"),
                target: function () {
                    return this
                }.property().cacheable(),
                userDidConfirm: Em.K,
                userDidCancel: function () {
                    this.hideModal()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/modals/user_assume_tutorial": function (e, t, n) {
            var r = t("views/modals/modal").extend({
                userName: null,
                profileImageUrl: null,
                templateName: "templates/modals/user_assume_tutorial",
                onConfirm: Em.required(),
                cancelLabel: I18n.t("txt.modal.edit.cancel"),
                confirmLabel: I18n.t("txt.users.assume"),
                titleLabel: function () {
                    var e = I18n.t("txt.modal.user_assume_tutorial.title", {
                        user_name: this.get("userName")
                    });
                    return new Handlebars.SafeString(e)
                }.property("userName").cacheable(),
                detailsLabel: function () {
                    var e = I18n.t("txt.modal.user_assume_tutorial.details");
                    return new Handlebars.SafeString(e)
                }.property("userName").cacheable(),
                userDidConfirm: function () {
                    this.get("onConfirm")(), this.hideModal()
                },
                userDidCancel: function () {
                    this.hideModal()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "UserAssumeTutorialModal"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/nav_bar/nav_bar_view": function (e, t, n) {
            var r = Em.View.extend(Zendesk.Apps.AppContainerHostView, {
                controller: t("controllers/nav_bar_controller").create(),
                classNameBindings: ["controller.currentSection"]
            });
            n.exports = r
        }
    }), this.require.define({
        "views/organizations/nav_item_view": function (e, t, n) {
            var r = t("controllers/new_organization_controller"),
                i = t("models/organizations"),
                s = Em.View.extend({
                    tagName: "span",
                    classNames: "btn",
                    classNameBindings: ["active", "create"],
                    hrefBinding: "parentView.organizationHref",
                    organizationBinding: "parentView.organization",
                    userBinding: "parentView.user",
                    newOrganizationController: function () {
                        return r.create()
                    }.property(),
                    active: function () {
                        return this.get("parentView.activePill") === this.get("name")
                    }.property("parentView.activePill").volatile(),
                    create: function () {
                        return this.get("organization.isDeleted") || !this.get("organization")
                    }.property("organization", "organization.isDeleted").volatile(),
                    click: function () {
                        if (this.get("create")) {
                            if (!Zendesk.get("currentUser.canCreateOrganization")) return !1;
                            var e = i.suggestNameFromDomain(this.get("user.emailDomain"));
                            return e ? this.get("newOrganizationController").newOrganizationForUser(this.get("user"), e, this.get("user.emailDomain")) : this.get("newOrganizationController").newOrganizationForUser(this.get("user")), !1
                        }
                        Zd.Routes.goToHash(this.get("href"))
                    },
                    suggestedName: function () {
                        var e = i.suggestNameFromDomain(this.get("user.emailDomain"));
                        return e ? e : I18n.t("txt.header.new_organization")
                    }.property("user.emailDomain").volatile(),
                    label: function () {
                        var e = this.get("organization.name"),
                            t = this.get("organization.isDeleted");
                        return e && !t ? e == null || e.trim() === "" ? new Handlebars.SafeString("&nbsp;") : e : Zendesk.get("currentUser.canCreateOrganization") ? ("%@ " + I18n.t("txt.organizations.create_postfix")).fmt(this.get("suggestedName")) : I18n.t("txt.organization.ticket.none")
                    }.property("organization.isDeleted", "organization.name", "suggestedName").volatile()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/workspace_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/lotus/swappable"), {
                classNames: ["workspace"],
                linkToWorkspace: function (e) {
                    this.set("workspace", e), e.set("view", this)
                }
            });
            r.reopenClass({
                toString: function () {
                    return "WorkspaceView"
                }
            }), n.exports = r
        }
    }), this.require.define({
        "views/organizations/organization_workspace_view": function (e, t, n) {
            var r = t("views/workspace_view"),
                i = r.extend({
                    templateName: "templates/organizations/organization_workspace",
                    organization: Em.computed.oneWay("workspace.context"),
                    activeChildName: "organization",
                    nameBinding: "workspace.name",
                    didActivate: Em.K,
                    didDeactivate: Em.K
                }).reopenClass({
                    toString: function () {
                        return "OrganizationWorkspaceView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/organizations/properties/groups_view": function (e, t, n) {
            var r = t("views/organizations/properties/mixins"),
                i = t("lib/views/select_view"),
                s = t("lib/profile_tracker"),
                o = i.extend(r.Properties, r.Permissions, {
                    valueBinding: "organization.group_id",
                    classNames: ["select", "value"],
                    groups: Em.computed.singleton("models/groups"),
                    userDidChangeValue: function () {
                        Em.run.next(this, function () {
                            s.track("fields:group"), this.get("organization").save({
                                update: !1
                            })
                        })
                    },
                    options: function () {
                        var e = [];
                        return e.push({
                            value: "",
                            label: "-"
                        }), e = e.concat(this.get("groups").map(function (e) {
                            return {
                                label: e.get("name"),
                                value: e.get("id")
                            }
                        })), e
                    }.property("groups.@each", "value").cacheable()
                });
            n.exports = o
        }
    }), this.require.define({
        "views/organizations/properties/is_shared_comments_view": function (e, t, n) {
            var r = t("views/organizations/properties/mixins"),
                i = t("lib/views/select_view"),
                s = i.extend(r.Properties, r.Permissions, {
                    valueBinding: "organization.shared_comments",
                    classNames: ["select", "value"],
                    options: function () {
                        return [{
                            value: !1,
                            label: I18n.t("txt.organizations.edit.shared_comments_no")
                        }, {
                            value: !0,
                            label: I18n.t("txt.organizations.edit.shared_comments_yes")
                        }]
                    }.property().cacheable(),
                    userDidChangeValue: function () {
                        this.get("organization").set("shared_comments", this.get("value")), this.get("organization").save({
                            update: !1
                        })
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/organizations/properties/is_shared_view": function (e, t, n) {
            var r = t("views/organizations/properties/mixins"),
                i = t("lib/views/select_view"),
                s = t("lib/profile_tracker"),
                o = i.extend(r.Properties, r.Permissions, {
                    valueBinding: "organization.shared_tickets",
                    classNames: ["select", "value"],
                    options: function () {
                        return [{
                            value: !1,
                            label: I18n.t("txt.organizations.edit.shared_no")
                        }, {
                            value: !0,
                            label: I18n.t("txt.organizations.edit.shared_yes")
                        }]
                    }.property().cacheable(),
                    userDidChangeValue: function () {
                        s.track("fields:shared_org"), this.get("organization").set("shared_tickets", this.get("value")), this.get("organization").save({
                            update: !1
                        })
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/organizations/properties/tags_view": function (e, t, n) {
            var r = t("views/organizations/properties/mixins"),
                i = t("lib/views/tags_view").extend(r.Properties, r.Permissions, {
                    sourceBinding: "parentView.organization",
                    tokensBinding: "source.tags"
                });
            n.exports = i
        }
    }), this.require.define({
        "views/organizations/properties/text_area_view": function (e, t, n) {
            var r = t("views/organizations/properties/mixins"),
                i = t("lib/profile_tracker"),
                s = t("lib/views/text_area_editable_view").extend(r.Properties, r.Permissions, {
                    modelBinding: "organization",
                    focusOut: function () {
                        i.track("fields:" + this.get("property")), this._super()
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/play/play_start_view": function (e, t, n) {
            var r = t("lib/tracking"),
                i = Em.View.extend({
                    nextTicketController: Em.computed.singleton("controllers/next_ticket_controller"),
                    click: function () {
                        var e = this.$("span").data("tooltip"),
                            t = this.get("nextTicketController");
                        e && e.hide(), r("Filters: Start", "Lotus-general"), t.set("playOn", !0);
                        var n = this.get("filter");
                        return t.nextPlayTicket(n), !1
                    },
                    isVisible: function () {
                        var e = this.get("filter");
                        return e && e.get("tickets.length") > 0 && !e.get("isDynamic") && e.get("id") !== "suspended"
                    }.property("filter.id", "filter.tickets.length").volatile(),
                    render: function (e) {
                        var t = '<span title="%@" class="btn btn-inverse _tooltip">%@<i class="play_start_icon icon-forward icon-white"></i></span>';
                        e.push(t.fmt(I18n.t("txt.play.start_msg"), I18n.t("txt.play.button"))), this._super()
                    },
                    toString: function () {
                        return "PlayStartView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/reporting/learnmore_button": function (e, t, n) {
            var r = Em.View.extend({
                template: Em.Handlebars.compile('<a class="learn_more" href="{{unbound learnmoreURL}}" target="_blank" tabindex="-1">{{unbound learnmoreLabel}}</a>'),
                learnmoreURL: I18n.t("txt.reporting_tutorial.learn_more_link"),
                learnmoreLabel: I18n.t("txt.apps.admin.apps.index.learn_more"),
                didInsertElement: function () {
                    this.$().appendTo("header.sub-nav"), this._super()
                }
            });
            n.exports = r.create()
        }
    }), this.require.define({
        "views/reporting/reporting_tooltip": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/reporting/reporting_tooltip",
                elementId: "reporting_tooltip",
                title: I18n.t("txt.reporting_tutorial.tooltip_title"),
                body: I18n.t("txt.reporting_tutorial.tooltip_body"),
                playButtonText: I18n.t("txt.reporting_tutorial.play_button_text"),
                videoView: t("views/reporting/reporting_tutorial"),
                didInsertElement: function () {
                    this.$(".tooltip-mask").animate({
                        opacity: 1
                    }, 500, function () {
                        $("#reporting-tooltip").animate({
                            opacity: 1,
                            top: "100px"
                        }, 500)
                    }), this._super()
                },
                closeTooltip: function () {
                    var e = this;
                    $("#reporting-tooltip, #reporting-video-tutorial").animate({
                        opacity: 0
                    }, 200, function () {
                        $(".tooltip-mask").animate({
                            opacity: 0
                        }, 200, function () {
                            e.get("videoView") && e.get("videoView").remove(), e.remove()
                        })
                    })
                },
                showVideo: function () {
                    var e = this;
                    $("#reporting-tooltip").fadeOut(function () {
                        e.get("videoView").append()
                    })
                }
            });
            n.exports = r.create()
        }
    }), this.require.define({
        "views/reporting/reporting_tutorial": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/reporting/reporting_tutorial",
                videoSrc: "https://fast.wistia.com/embed/iframe/u3vy81wzfv?autoPlay=true&fullscreenButton=true&playerColor=030303&version=v1&videoHeight=540&videoWidth=960&volumeControl=true",
                didInsertElement: function () {
                    $("#reporting-video-tutorial").animate({
                        opacity: 1
                    }, 200), this._super()
                }
            });
            n.exports = r.create()
        }
    }), this.require.define({
        "views/root_view": function (e, t, n) {
            function s() {
                return t("lib/lotus/global_events")
            }

            function u(e) {
                return s().triggerOnResponder("showKeyboardHelp", {
                    shift: (e || {}).shiftKey
                }), !1
            }
            var r = t("lib/logging/logger"),
                i = new r("booting"),
                o = Em.View.extend({
                    classNameBindings: ["operatingSystem"],
                    screencastController: Em.computed.singleton("controllers/screencast_controller"),
                    operatingSystem: function () {
                        return "os-" + t("lib/operating_system").platform
                    }.property().cacheable(),
                    init: function () {
                        var e = this._super();
                        return s().set("firstResponder", this), e
                    },
                    rerender: function () {
                        return this.get("state") !== "inDOM" && i.info({
                            view: "RootView",
                            state: this.get("state"),
                            message: "rerender triggered when view state wasn't inDOM"
                        }), this._super()
                    }
                });
            $(function () {
                var e = "?".charCodeAt(0);
                $("body").bind("keypress", function (t) {
                    t.which === e && !window.key.ignoreEvent(t) && u()
                }), $(".show_keyboard_shortcut_help").live("click", u)
            }), n.exports = o
        }
    }), this.require.define({
        "views/search/article_result": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/items/article",
                createdStamp: function () {
                    var e = t("lib/views/timestamp_view"),
                        n = this.get("content.created_at");
                    return new Handlebars.SafeString(e.renderDateTime(n))
                }.property("content.created_at").cacheable()
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ArticleResultView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/search/search_field_view": function (e, t, n) {
            var r = Em.TextField.extend(t("lib/lotus/responder_view"), {
                classNameBindings: ["working", "errored"],
                globalSection: function (e, t) {
                    return t || Ember.get("Zendesk.section")
                }.property("Zendesk.section").cacheable(),
                cancel: function () {
                    this.get("controller").cancel()
                },
                isNumRe: /^\d+$/,
                insertNewline: function () {
                    var e = $.trim(this.get("value"));
                    this.isNumRe.test(e) ? window.location = "#/tickets/" + e : this.get("controller").set("query", this.get("value"))
                },
                initialFocus: function () {
                    this.get("globalSection") === "search" && setTimeout(function () {
                        this.$().focus().select()
                    }.bind(this), 100)
                }.observes("globalSection"),
                didInsertElement: function () {
                    return this.initialFocus(), this._super.apply(this, arguments)
                },
                setFocus: function () {
                    var e = this.get("controller");
                    if (e.get("navigateSearchResults")) return;
                    this.focus(), this.$().focus(), setTimeout(function () {
                        this.$().val(e.get("query"))
                    }.bind(this), 10)
                }.observes("controller.navigateSearchResults"),
                navigateToResults: function () {
                    if (!this.get("controller.searchResults")) return;
                    this.$().blur(), this.get("controller").set("navigateSearchResults", !0)
                },
                interpretKeyEvents: function (e) {
                    e.keyCode === 40 ? this.navigateToResults() : this._super.apply(this, arguments)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/search/search_filter_view": function (e, t, n) {
            n.exports = Em.View.extend(t("lib/lotus/responder_view"), {
                filterCategory: "",
                activeFiltersBinding: Em.Binding.oneWay("controller.activeFilters"),
                classNameBindings: ["content.active"],
                controllerBinding: "parentView.controller",
                setActiveFilter: function () {
                    if (this.get("content.active")) {
                        var e = this;
                        this.get("collectionView.childViews").forEach(function (t, n) {
                            t !== e && t.set("content.active", !1)
                        })
                    }
                }.observes("content.active"),
                click: function () {
                    this.set("content.active", !0), this.get("controller").filterSelected(this)
                },
                reset: function () {
                    this.get("parentView.childViews").map(function (e) {
                        e.set("content.active", !1)
                    }), this.get("parentView.childViews")[0].set("content.active", !0)
                }.observes("activeFilters"),
                cancel: function () {
                    this.get("controller").cancel()
                }
            })
        }
    }), this.require.define({
        "views/search/search_filter_collection": function (e, t, n) {
            n.exports = Em.CollectionView.extend({
                itemViewClass: t("views/search/search_filter_view"),
                controllerBinding: "parentView.controller",
                classNames: ["nav", "nav-pills", "nav-stacked"],
                classNameBindings: ["category"],
                tagName: "ul"
            })
        }
    }), this.require.define({
        "views/search/search_tips_toggle": function (e, t, n) {
            var r = ["section.search .search_bar .help", "section.search .show_tips", "section.search .hide_tips"].join(","),
                i = Em.View.extend({
                    tagName: "span",
                    classNames: ["link", "search_tips_toggle"],
                    click: function () {
                        $(r).toggle();
                        var e = $(".search.main_panes .search_bar").outerHeight();
                        $("#search_results_container").css("top", e)
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/section_toolbar/section_nav_item_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "span",
                classNames: "btn",
                classNameBindings: "active",
                active: function () {
                    return this.get("parentView.activePill") === this.get("name")
                }.property("parentView.activePill").cacheable(),
                click: function () {
                    Zd.Routes.goToHash(this.get("href"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/section_toolbar/section_toolbar_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/tickets/section_toolbar",
                tagName: "nav",
                classNames: "btn-group",
                shouldShowUser: Em.computed.oneWay("delegate.toolbarShouldShowUser"),
                shouldShowOrganization: Em.computed.oneWay("delegate.toolbarShouldShowOrganization"),
                shouldShowTicket: Em.computed.oneWay("delegate.toolbarShouldShowTicket"),
                shouldShowIncidents: Em.computed.oneWay("delegate.toolbarShouldShowIncidents"),
                shouldShowProblem: Em.computed.oneWay("delegate.toolbarShouldShowProblem"),
                shouldShowChat: Em.computed.oneWay("delegate.toolbarShouldShowChat"),
                user: Em.computed.oneWay("delegate.toolbarUser"),
                userHref: Em.computed.oneWay("delegate.toolbarUserHref"),
                ticket: Em.computed.oneWay("delegate.toolbarTicket"),
                organization: Em.computed.oneWay("delegate.toolbarOrganization"),
                organizationHref: Em.computed.oneWay("delegate.toolbarOrganizationHref"),
                activePill: Em.computed.oneWay("delegate.toolbarActivePill"),
                ticketName: function () {
                    return this.get("ticket.id") ? "%@ #%@".fmt(this.get("ticket.typeDisplayName"), this.get("ticket.id")) : I18n.t("txt.header.new_ticket")
                }.property("ticket.typeDisplayName").cacheable(),
                incidentsTotalHeader: function () {
                    return this.get("ticket.incidentsTotal") || "-"
                }.property("ticket.incidentsTotal").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tabs/tab_factory_view": function (e, t, n) {
            var r = Em.View.extend().reopenClass({
                create: function (e) {
                    var n;
                    switch (Em.get(e, "content.type")) {
                    case "ticketWorkspace":
                        n = t("views/tabs/ticket_tab_view");
                        break;
                    case "userWorkspace":
                        n = t("views/tabs/user_tab_view");
                        break;
                    case "organizationWorkspace":
                        n = t("views/tabs/organization_tab_view")
                    }
                    return n.create(e)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tabs": function (e, t, n) {
            var r = t("views/tabs/tab_factory_view"),
                i = t("views/add_tab"),
                s = Em.CollectionView.extend({
                    tagName: "ul",
                    elementId: "tabs",
                    itemViewClass: r,
                    tabWidth: null,
                    controller: null,
                    content: Em.computed.oneWay("controller.content"),
                    init: function () {
                        this._super.apply(this, arguments), $(window).resize(_.debounce(this.resizeTabs.bind(this), 100))
                    },
                    didInsertElement: function () {
                        this.get("childViews").pushObject(i.create())
                    },
                    resizeTabs: function () {
                        var e = this.$(".tab:not(.add)");
                        if (e.length === 0) return;
                        var t = e.parent().width() - 45 - this.get("parentView").$("#user_options").outerWidth() - this.$(".tab").last().outerWidth(),
                            n = e.outerWidth(!0) - e.width(),
                            r = this.get("content.length"),
                            i = parseInt(t / r - n, 10);
                        this.set("tabWidth", i), e.animate({
                            width: i
                        }, 300)
                    },
                    childViewsDidChange: function (e, t, n, r) {
                        return r > 0 && this.resizeTabs(), this._super.apply(this, arguments)
                    },
                    mouseLeave: function () {
                        this.resizeTabs()
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "TabsView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tabs/tab_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/general/tab",
                classNames: ["tab"],
                classNameBindings: ["content.active:selected"],
                tabType: "tab",
                controller: Em.computed.oneWay("parentView.controller"),
                init: function () {
                    this._super.apply(this, arguments), this.set("content.tabView", this)
                },
                click: function () {
                    this.get("controller").activateWorkspaceForTab(this)
                },
                close: function () {
                    return this.get("controller").closeWorkspaceForTab(this), !1
                },
                removeTab: function (e) {
                    this.$().css({
                        visibility: "hidden"
                    }).hide(100, e)
                },
                didInsertElement: function () {
                    this.$().width(this.get("parentView.tabWidth"))
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TabView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tabs/organization_tab_view": function (e, t, n) {
            var r = t("views/tabs/tab_view"),
                i = r.extend({
                    classNames: "organization",
                    tabType: "organizationTab"
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tabs/ticket_tab_view": function (e, t, n) {
            var r = t("views/tabs/tab_view"),
                i = "web",
                s = ["chat", "facebook", "forum", "mail", "twitter", "voice_inbound", "voice_outbound", "voice_voicemail", "web"],
                o = r.extend({
                    templateName: "templates/general/ticket_tab",
                    classNameBindings: ["content.active:selected", "content.hasActivity:activity", "channel", "content.ticket.chat.unread:new_chat"],
                    tabType: "ticketTab",
                    channel: function () {
                        if (!this.get("content.isTicketWorkspace")) return null;
                        var e = this.get("content.ticket.viaClass");
                        return e == "fb_private_message" && (e = "facebook"), s.contains(e) ? e : i
                    }.property("content.ticket.viaClass").cacheable()
                }).reopenClass({
                    toString: function () {
                        return "TicketTabView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tabs/user_tab_view": function (e, t, n) {
            var r = t("views/tabs/tab_view"),
                i = r.extend({
                    classNames: "user",
                    tabType: "userTab"
                });
            n.exports = i
        }
    }), this.require.define({
        "views/ticket_list/bulk_footer_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/filters/footer_bulk",
                tagName: "footer",
                numSelected: Em.computed.oneWay("controller.numSelected"),
                bulkEditLabel: function () {
                    return I18n.t("txt.ticket.bulk.edit_button_label", {
                        count: this.get("numSelected")
                    })
                }.property("numSelected").cacheable(),
                isVisible: Em.computed.bool("controller.showFooter"),
                classNames: ["bulk-footer"],
                visibilityChanged: function () {
                    Em.run.next(this, function () {
                        this.$().parents("section").toggleClass("bulk-mode", this.get("isVisible"))
                    })
                }.observes("isVisible")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/comments/comment_view_common_properties": function (e, t, n) {
            var r = Em.Mixin.create({
                tagName: "span",
                classNames: ["btn"],
                classNameBindings: "active",
                active: function () {
                    var e = this.get("controller.commentMode");
                    if (e == this.get("myState")) return "active"
                }.property("controller.commentMode", "myState").volatile(),
                click: function () {
                    this.get("controller").toggleCommentMode(this.get("myState")), this.get("controllerView").$("textarea").focus()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/comments/reply_button": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile("{{t txt.ticket.actions.public_comment}}"),
                    myState: "publicComment"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "ReplyButtonView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/note_button": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    classNames: ["private_note"],
                    template: Em.Handlebars.compile("{{t txt.ticket.actions.add_note}}"),
                    myState: "privateComment"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "NoteButtonView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/add_bulk_comment_view": function (e, t, n) {
            var r = t("views/tickets/comments/reply_button"),
                i = t("views/tickets/comments/note_button"),
                s = t("views/tickets/add_comment"),
                o = r.extend({
                    classNameBindings: "active",
                    active: function () {
                        return this.get("controllerView.controller.ticket.comment.is_public") ? "active" : ""
                    }.property("controllerView.controller.ticket.comment.is_public").cacheable(),
                    click: function () {
                        this.get("controllerView.controller").toggleReply(), this.get("controllerView").$("textarea").focus()
                    }
                }),
                u = i.extend({
                    classNameBindings: "active",
                    active: function () {
                        return this.get("controllerView.controller.ticket.comment.is_public") ? "" : "active"
                    }.property("controllerView.controller.ticket.comment.is_public").cacheable(),
                    click: function () {
                        t("controllers/bulk_edit_controller").instance().toggleNote(), this.get("controllerView").$("textarea").focus()
                    }
                }),
                a = s.extend({
                    controller: Em.computed.singleton("controllers/bulk_edit_controller"),
                    replyButton: o,
                    noteButton: u,
                    templateName: "templates/tickets/add_bulk_comment_view",
                    classNames: ["bulk-comment"],
                    contentBinding: "controller.ticket",
                    ticketPath: "controller.ticket"
                });
            n.exports = a
        }
    }), this.require.define({
        "views/tickets/bulk_edit_progress_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/tickets/bulk_edit_progress",
                controller: null
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/submit_view": function (e, t, n) {
            var r = t("components/simple_content").extend(t("mixins/button_support"), {
                tagName: "li",
                classNames: "status _tooltip".w(),
                classNameBindings: "status".w(),
                attributeBindings: "title".w(),
                status: Ember.required(),
                propagateEvents: !0,
                target: Em.computed.oneWay("controllerView.controller"),
                hasNewStatus: Em.computed.oneWay("target.ticket.serverCopy.hasNewStatus"),
                hasHoldStatus: Em.computed.oneWay("target.hasHoldStatus"),
                action: function () {
                    var e = this.get("status").capitalize();
                    return "saveAs%@".fmt(e)
                }.property("status").cacheable(),
                text: function () {
                    var e = "txt.ticket.actions.save_as_%@".fmt(this.get("status"));
                    return new Handlebars.SafeString(I18n.t(e))
                }.property("status").cacheable(),
                title: function () {
                    return I18n.t("txt.ticket.status.%@.tip".fmt(this.get("status")))
                }.property("status").cacheable(),
                isVisible: function () {
                    var e = this.get("status");
                    return e === "new" ? this.get("hasNewStatus") : e === "hold" ? this.get("hasHoldStatus") : !0
                }.property("status", "hasNewStatus", "hasHoldStatus").cacheable()
            });
            r.reopenClass({
                toString: function () {
                    return "SubmitView"
                }
            }), n.exports = r
        }
    }), this.require.define({
        "views/tickets/bulk_edit_submit_view": function (e, t, n) {
            var r = t("views/tickets/submit_view").extend({
                target: Em.computed.singleton("controllers/bulk_edit_controller"),
                hasHoldStatus: Em.computed.oneWay("target.hasHoldStatus"),
                isVisible: function () {
                    return this.get("status") === "hold" ? this.get("hasHoldStatus") : !0
                }.property("hasHoldStatus").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/call_console_ticket_manager": function (e, t, n) {
            var r = Minilog("ticket-call-console"),
                i = Em.StateManager.extend({
                    initialState: "nothing",
                    nothing: Em.State.create({
                        enter: function () {
                            r.debug({
                                short_message: "nothing:enter"
                            })
                        },
                        exit: function () {
                            r.debug({
                                short_message: "nothing:exit"
                            })
                        }
                    }),
                    connected: Em.State.create({
                        enter: function (e) {
                            r.debug({
                                short_message: "connected:enter"
                            })
                        },
                        exit: function (e) {
                            r.debug({
                                short_message: "connected:exit"
                            })
                        },
                        isConnected: !0
                    })
                }),
                s = t("controllers/voice/voice_ui_controller").instance(),
                o = t("controllers/voice/voice_controller").instance(),
                u = t("lib/voice/state").instance(),
                a = Em.Object.extend(Em.Evented, {
                    voiceUIController: s,
                    voiceState: u,
                    voiceController: o,
                    init: function () {
                        this._super();
                        var e = i.create({
                            controller: this
                        });
                        this.set("stateManager", e)
                    },
                    goToState: function (e) {
                        this.get("stateManager").goToState(e)
                    },
                    isConnected: Em.computed.bool("stateManager.currentState.isConnected"),
                    canHangUp: Em.computed.oneWay("voiceUIController.views.dialerCallConsole.canHangUp"),
                    ticketDidChange: function () {
                        var e = this.get("voiceState.currentCall.ticket"),
                            t = e && e.get("id"),
                            n = this.get("ticketIdWas"),
                            i = this;
                        if (!t) return;
                        if (n && t == n) return;
                        this.set("ticketIdWas", t), r.info({
                            short_message: "ticketDidChange",
                            _nice_id: t
                        }), Em.run.next(this, function () {
                            setTimeout(function () {
                                r.info({
                                    short_message: "ticketDidChange:goToTicket",
                                    _nice_id: t
                                }), i.get("voiceController").goToTicket(e)
                            }, 1e3)
                        })
                    }.observes("voiceState.currentCall.ticket"),
                    isConnectedDidChange: function () {
                        var e = this.get("isConnected");
                        r.debug({
                            short_message: "isConnectedDidChange",
                            _isConnected: e
                        }), e ? Em.run.next(this, this.showConsole) : Em.run.next(this, this.hideConsole)
                    }.observes("isConnected"),
                    showConsole: function () {
                        this.trigger("showConsole")
                    },
                    hideConsole: function () {
                        this.trigger("hideConsole")
                    }
                }).reopenClass(t("lib/lotus/singleton"), {
                    toString: function () {
                        return "CallConsoleTicketManager"
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/tickets/call_console_ticket_view": function (e, t, n) {
            var r = Minilog("ticket-call-console"),
                i = t("views/tickets/call_console_ticket_manager").instance(),
                s = t("lib/voice/state").instance(),
                o = t("controllers/voice/voice_controller").instance(),
                u = Em.View.extend({
                    voiceState: s,
                    classNames: ["ticket_call_console", "clearfix"],
                    templateName: "templates/channels/call_console_ticket_view",
                    controller: i,
                    voiceController: o,
                    content: Em.computed.oneWay("voiceState.currentCall"),
                    isConnecting: Em.computed.bool("voiceState.isConnecting"),
                    init: function () {
                        this._super();
                        var e = this;
                        i.on("showConsole", function () {
                            var t = e.get("ticket.id"),
                                n = e.get("isCurrentCallTicket"),
                                i = e.get("isFrontmostTicket");
                            n && (r.info({
                                short_message: "showConsole",
                                _ticket: t,
                                _current: n,
                                _frontmost: i
                            }), i ? e.showConsole(!0) : e.showConsole(!1))
                        }), i.on("hideConsole", function () {
                            var t = e.get("ticket.id"),
                                n = e.get("isCurrentCallTicket"),
                                i = e.get("isFrontmostTicket");
                            n && (r.info({
                                short_message: "hideConsole",
                                _ticket: t,
                                _current: n,
                                _frontmost: i
                            }), i ? e.hideConsole(!0) : e.hideConsole(!1))
                        })
                    },
                    isCurrentCallTicket: function () {
                        var e = this.get("ticket.id"),
                            t = this.get("voiceState.currentCall.ticket.id");
                        return e && t && e == t
                    }.property().volatile(),
                    isFrontmostTicket: function () {
                        var e = this.get("ticket.id"),
                            t = this.getWorkspaceTicketId();
                        return e && t && e == t
                    }.property().volatile(),
                    getWorkspaceTicketId: function () {
                        return Em.get("Zendesk.workspaces.current.ticket.id")
                    },
                    didInsertElement: function () {
                        this._super(), i.isConnectedDidChange()
                    },
                    showConsole: function (e) {
                        var t = this.$(),
                            n = this;
                        t.clearQueue(), e ? (t.delay(2500), t.animate({
                            marginTop: "0"
                        })) : t.queue(function (e) {
                            t.css({
                                marginTop: "0"
                            }), e()
                        })
                    },
                    hideConsole: function (e) {
                        var t = this.$();
                        t.clearQueue(), e ? t.animate({
                            marginTop: "-57px"
                        }) : t.queue(function (e) {
                            t.css({
                                marginTop: "-57px"
                            }), e()
                        })
                    },
                    toString: function () {
                        return "CallConsoleTicketView"
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/tickets/change_requester_view": function (e, t, n) {
            n.exports = Em.View.extend({
                tagName: "a",
                classNames: "change_requester_email",
                controller: null,
                isVisible: Em.computed.bool("controller.ticket.userPermissions.updateTicket"),
                render: function (e) {
                    return e.push(I18n.t("txt.ticket.actions.change_requester")), this._super(e)
                },
                click: function () {
                    var e = this.get("controller");
                    e && e.toggleRequester()
                }
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ChangeRequesterView"
                }
            })
        }
    }), this.require.define({
        "views/tickets/collision_notification_view": function (e, t, n) {
            var r = Em.View.extend({
                attributeBindings: ["title:data-title", "data-placement"],
                updateTooltipTitle: function () {
                    $(this.get("element")).attr("data-original-title", this.get("title"))
                }.observes("title"),
                isVisible: Em.computed.bool("workspace.ticket.isViewedByOthers"),
                toString: function () {
                    return "CollisionNotificationView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/comment_text_area": function (e, t, n) {
            var r = t("lib/views/auto_resizable_text_area").extend({
                didInsertElement: function () {
                    this._super(), Ember.run.once(this, function () {
                        var e = this.get("controller");
                        if (!e) return;
                        e.on("@focus:comment", this, "focusComment")
                    })
                },
                focusIn: function (e) {
                    var n = t("lib/autocompleters/selectable");
                    this.select = new n(e.currentTarget);
                    var r = this;
                    $(e.currentTarget).bind("add-collaborator", function (e) {
                        if (!e.email) return;
                        r.get("controller").addCollaborator(e.email, e.name)
                    })
                },
                focusOut: function (e) {
                    this.select && (this.select.container.is(":hover") ? (this.select.list.trigger("click"), e.currentTarget.focus()) : ($(e.currentTarget).unbind("add-collaborator"), this.select.detach()))
                },
                click: function () {
                    this.focusComment()
                },
                focusComment: function () {
                    this.$().focus()
                },
                willDestroy: function () {
                    var e = this.get("controller");
                    if (!e) return;
                    e.off("@focus:comment", this, "focusComment"), this._super()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/comments/email_button": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile("{{t txt.ticket.actions.twitter.email_only}}"),
                    myState: "publicComment"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "EmailButtonView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/facebook_wall_channel": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile('<div class="icon facebook"></div>{{t txt.ticket.actions.facebook.reply_on_wall}}'),
                    myState: "fbWallReply"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "FacebookWallChannelView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/fb_private_message_channel": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile('<div class="icon facebook"></div>{{t txt.ticket.actions.facebook.private_message}}'),
                    myState: "fbPrivateMessage"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "FbPrivateMessageChannelView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/labeled_comment_text_area": function (e, t, n) {
            var r = t("lib/lotus/labeled_field_view"),
                i = t("views/tickets/comment_text_area"),
                s = r.extend({
                    FieldView: i.extend({
                        viewName: "fieldView",
                        attributeBindings: ["placeholder"],
                        placeholderBinding: "parentView.placeholder",
                        valueBinding: "parentView.value",
                        controllerBinding: "parentView.controller"
                    })
                }).reopenClass({
                    toString: function () {
                        return "LabeledCommentTextArea"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/comments/record_screencast_button": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(t("mixins/button_support"), {
                    classNames: ["record-button", "_tooltip"],
                    tagName: "span",
                    ticketBinding: "parentView.content",
                    screencastController: Em.computed.singleton("controllers/screencast_controller"),
                    click: function () {
                        var e = this.get("ticket.comment");
                        this.get("screencastController").startRecording(e)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "RecordScreencastButtonView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/remove_screencast_from_list": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(t("mixins/button_support"), {
                    classNames: ["delete", "ui-state-default"],
                    ticketBinding: "parentView.content",
                    screencastController: Em.computed.singleton("controllers/screencast_controller"),
                    click: function () {
                        var e = this.get("ticket.comment"),
                            t = this.get("content");
                        this.get("screencastController").deleteScreencast(e, t)
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "RemoveScreencastFromListView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/short_url_comment_option": function (e, t, n) {
            var r = Em.Checkbox.extend({
                checkedBinding: "controller.ticket.comment.add_short_url"
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ShortUrlCommentOptionView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/comments/twitter_char_counter": function (e, t, n) {
            var r = t("lib/settings_consumer"),
                i = t("controllers/twitter_comment_count_calculator"),
                s = Em.View.extend(r, {
                    classNames: "_tooltip",
                    classNameBindings: "counterClass",
                    template: Em.Handlebars.compile('<div {{translateAttr title="txt.ticket.comment.twitter.count_tootltip"}} >{{ view.count }}</div>'),
                    shortenUrlBinding: Em.Binding.oneWay("settings.shorten_url"),
                    isVisibleBinding: Em.Binding.oneWay("controller.shouldShowCharCounter"),
                    counterClass: function () {
                        return this.get("count") < 0 ? "counter_exceeded" : "counter_normal"
                    }.property("count").volatile(),
                    twitterName: function () {
                        var e = this.get("ticket.requester.identities.twitterIdentities") || [],
                            t = e[0];
                        return t ? t.get("value") : ""
                    }.property("ticket", "ticket.requester.identities.length").cacheable(),
                    count: function () {
                        var e = this.get("ticket.comment.add_short_url"),
                            t = this.get("shortenUrl"),
                            n = t === "always" || t === "optional" && e;
                        return i.calculate(this.get("ticket.comment.body") || "", this.get("twitterName") || "", n)
                    }.property("ticket.comment.body.length", "ticket.comment.add_short_url", "shortenUrl", "twitterName").cacheable()
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "TwitterCharCounter"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/comments/twitter_dm_channel": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile('<div class="icon twitter"></div>{{t txt.ticket.actions.twitter.direct_message}}'),
                    myState: "twitterDm"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "TwitterDMChannelView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/twitter_mention_channel": function (e, t, n) {
            var r = t("views/tickets/comments/comment_view_common_properties"),
                i = Em.View.extend(r, {
                    template: Em.Handlebars.compile('<div class="icon twitter"></div>{{t txt.ticket.actions.twitter.tweet_mention}}'),
                    myState: "twitterMention"
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "TwitterMentionChannelView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/comments/upload_spinner": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "span",
                classNames: ["uploading"],
                isVisibleBinding: "parentView.uploading"
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "UploadSpinnerView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/incidents_view": function (e, t, n) {
            var r = Em.View.extend(t("lib/lotus/swappable"), {
                templateName: "templates/tickets/incidents",
                name: "incidents",
                incidentsBinding: "workspace.incidents",
                tagName: "section",
                classNames: ["main_panes", "split_pane", "incidents"],
                toString: function () {
                    return "IncidentsView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/macro_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("lib/core_widgets/configs"),
                s = t("lib/nested_hash"),
                o = t("models/macro"),
                u = t("lib/utils").htmlEscape,
                a = r.extend({
                    delegateType: "ComboSelectMenu",
                    controller: null,
                    macros: o.all,
                    configOptions: _.extend({
                        position: "up",
                        clsBaseArrow: "zd-selectmenu-base-arrow zd-icon-triangle-1-n",
                        clsSelectMenuScope: "zd-combo-selectmenu macro-selector",
                        clsSelectMenuRoot: "zd-combo-selectmenu zd-combo-selectmenu-root zd-menu-show-all",
                        defaultValueLabel: I18n.t("txt.ticket.actions.macro_selector"),
                        renderItemContentForBase: function (e) {
                            return '<span class="icon"></span>' + u(e.label)
                        }
                    }, i.comboSelect.searchResultFormat1),
                    options: function () {
                        var e = new s;
                        return this.get("macros").forEach(function (t) {
                            e.add(t.get("title"), t.get("id"), t.get("availability_type"))
                        }), e.toList()
                    }.property("macros.@each").cacheable(),
                    userDidChangeValue: function () {
                        var e = o.create({
                            id: this.get("value")
                        }),
                            t = this;
                        this.get("controller").applyMacro(e), Em.run.next(this, function () {
                            this.set("value", this.delegate.defaultValue)
                        })
                    },
                    showMacroListObserver: function () {
                        if (!this.$().is(":visible")) return;
                        if (this.delegate.isFocused) {
                            this.delegate.close(), this.delegate.blur();
                            if (this.previousActiveElement && $(this.previousActiveElement).is(":visible")) try {
                                this.previousActiveElement.focus()
                            } catch (e) {}
                        } else this.get("controller.showMacroList") && (this.previousActiveElement = document.activeElement, window.setTimeout(function () {
                            this.delegate.focus(), this.delegate.open()
                        }.bind(this), 0))
                    }.observes("controller.showMacroList"),
                    isVisibleBinding: Em.Binding.oneWay("controller.canMakeAnyComments"),
                    buildDelegate: function () {
                        this._super.apply(this, arguments), this.delegate.addObserver("close", function () {
                            this.set("controller.showMacroList", !1)
                        }.bind(this))
                    },
                    toString: function () {
                        return "MacroView"
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/tickets/markdown_preview_view": function (e, t, n) {
            function r(e) {
                var t = $("<div> </div>").appendTo(e);
                if (t[0] == null) return;
                t[0].offsetHeight, t.remove()
            }
            var i = Em.View.extend({
                formattedMarkdown: function () {
                    var e = this;
                    return Em.run.next(function () {
                        r(e.$(".markdown_preview"))
                    }), this.get("controller.formattedMarkdown")
                }.property("controller.formattedMarkdown").cacheable(),
                templateName: "templates/tickets/markdown_preview"
            });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/markdown_toggle_view": function (e, t, n) {
            var r = t("components/simple_content").extend({
                tagName: "span",
                classNames: ["markdown_preview_toggle", "btn"],
                classNameBindings: ["isPreviewing:active"],
                isVisibleBinding: Em.Binding.oneWay("controller.canPreviewMarkdown"),
                isWritingBinding: Em.Binding.oneWay("controller.isWriting"),
                text: function () {
                    return I18n.t("txt.admin.helpers.tickets_helper.preview_mode")
                }.property(),
                isPreviewing: function () {
                    return this.get("controller.isPreviewing") || this.get("controller.isGenerating")
                }.property("controller.isPreviewing", "controller.isGenerating").cacheable(),
                click: function () {
                    this.get("controller").toggleMode(), this.get("controllerView").$("textarea").focus()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/mast": function (e, t, n) {
            var r = Em.View.extend({
                classNameBindings: ["viaClass"],
                viaClassBinding: "workspace.ticketController.ticket.viaClass",
                toString: function () {
                    return "MastView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/mustache_audits_view": function (e, t, n) {
            var r = t("lib/monitoring/metrics").instance(),
                i = Em.View.extend(t("lib/lotus/screencast_view"), {
                    auditsController: null,
                    template: Em.TEMPLATES["templates/tickets/audits"],
                    screencastController: Em.computed.singleton("controllers/screencast_controller"),
                    auditsBinding: Em.Binding.
                    oneWay("auditsController.audits"),
                    ticketBinding: Em.Binding.oneWay("auditsController.ticket"),
                    viaSubmitter: Em.computed.oneWay("auditsController.viaSubmitter"),
                    contentBinding: Em.Binding.oneWay("audits.content"),
                    canMakeCommentPrivateBinding: Em.Binding.oneWay("Zd.currentUser.userPermissions.canMakeCommentPrivate"),
                    classNames: ["audits"],
                    classNameBindings: ["auditsController.showAllEvents:show-audits", "ticket.requesterIsNotSubmitter:is_on_behalf_of"],
                    update: function () {
                        if (this.get("isDestroyed")) return;
                        if (this.get("state") !== "inDOM") return;
                        this.rerender()
                    }.observes("audits.@each", "viaSubmitter"),
                    willDestroyElement: function () {
                        this._super(), this.teardownVoicePlayers()
                    },
                    didInsertElement: function () {
                        this._super(), this.setupVoicePlayers(), this.setupTwitterComments();
                        var e = this.get("ticket.id");
                        e && r.timeEnd("ticket/%@/load".fmt(e))
                    },
                    willRerender: function () {
                        r.count("auditsView/willRerender");
                        var e = this.get("ticket.id");
                        e && r.count("ticket/%@/auditsView/willRerender".fmt(e)), this._super()
                    },
                    setupVoicePlayers: function () {
                        var e = this.$(".audio.player"),
                            t = [];
                        for (var n = 0; n < e.length; n++) {
                            var r = $(e[n]);
                            if (r.data("player")) continue;
                            var i = new Player({
                                domId: r.attr("id"),
                                url: r.data("recording-url"),
                                swfUrl: "/media/voice/soundmanager"
                            });
                            t.push(i)
                        }
                        this.set("players", t)
                    },
                    teardownVoicePlayers: function () {
                        var e = this.get("players");
                        e.forEach(function (e) {
                            var t = e.sound;
                            t && t.destruct()
                        })
                    },
                    setupTwitterComments: function () {
                        var e = this.get("auditsController.twitterCommentsController"),
                            t = this.$(".twitter-action");
                        e && t.length > 0 && e.setupActionViewsFromDom(t)
                    },
                    setupComments: function () {
                        if (!this.get("canMakeCommentPrivate") || !this.get("content")) return;
                        var e = this.get("content").filter(function (e) {
                            return e.comment
                        }),
                            t = e.length - 1;
                        e.forEach(function (e, n) {
                            n !== t && e.comment.is_public && (e.comment.canMakePrivate = !0, e.comment.makePrivateActionLabel = I18n.t("txt.app.helpers.events_helper.make_this_comment_private"))
                        })
                    }.observes("audits.@each"),
                    confirmPublicToPrivate: function (e) {
                        var n = this;
                        t("views/modals/make_public_comment_private").create({
                            onConfirm: function () {
                                n.get("auditsController").makePublicCommentPrivate(e)
                            }
                        }).append()
                    },
                    _notifications: null,
                    _cacheNotifications: function (e) {
                        var t = {};
                        return this.get("audits").forEach(function (n) {
                            if (!n.events) return;
                            n.events.forEach(function (n) {
                                n.type === e && (t[n.id] = n)
                            })
                        }), t
                    },
                    findNotification: function (e, t) {
                        return this._notifications || (this._notifications = {}), this._notifications[t] || (this._notifications[t] = this._cacheNotifications(t)), this._notifications[t][e]
                    },
                    showNotification: function (e, n) {
                        var r = this.findNotification(e, n);
                        if (!r) return;
                        t("views/modals/audit_notification").create({
                            type: r.type,
                            eventId: r.id,
                            subject: r.subject,
                            body: r.body
                        }).append()
                    },
                    click: function (e) {
                        switch ($(e.target).data("action")) {
                        case "assign-ticket":
                            var t = Zendesk.User.create({
                                id: $(e.target).data("author-id")
                            });
                            t.assignTo(this.get("ticket"));
                            break;
                        case "make-private":
                            this.confirmPublicToPrivate($(e.target).data("audit-id"));
                            break;
                        case "show-notification":
                            this.showNotification($(e.target).data("notification-id"), $(e.target).data("notification-type"));
                            break;
                        default:
                            this.handleClickForScreencast(e)
                        }
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/next_ticket_view": function (e, t, n) {
            var r = Em.View.extend({
                templateName: "templates/tickets/next_ticket_view",
                classNames: "origin next".w(),
                workspace: null,
                controller: Em.computed.singleton("controllers/next_ticket_controller"),
                title: function () {
                    var e = {
                        title: this.get("workspace.origin.filter.title") || ""
                    };
                    return I18n.t("txt.next_in_origin", e)
                }.property("workspace.origin.filter.title"),
                hideTooltip: function () {
                    var e = this.$("span").data("tooltip");
                    e && e.hide()
                },
                gotoNextTicket: function () {
                    this.hideTooltip(), this.get("controller").nextTicket()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/no_apps_view": function (e, t, n) {
            n.exports = Em.View.extend({
                templateName: "templates/tickets/empty_view_class",
                classNames: ["empty"]
            })
        }
    }), this.require.define({
        "views/tickets/receiver_identity_view": function (e, t, n) {
            n.exports = Em.View.extend({
                tagName: "span",
                classNames: "receiver",
                templateName: "templates/tickets/mast/receiver",
                controller: null,
                ticket: Em.computed.oneWay("controller.ticket"),
                isVisible: Em.computed.bool("receiverIdentity"),
                getViaSource: function () {
                    var e = this.get("ticket.comments.content.lastObject");
                    return e !== undefined ? e.viaSource.source : e
                },
                identityWithPrefix: function (e) {
                    return I18n.t("txt.ticket.show.receiver.identity", {
                        identity: e
                    })
                },
                receiverIdentityVoice: function () {
                    var e, t, n = this.getViaSource();
                    return n !== undefined && (t = n.rel == "outbound" ? n.from.formatted_phone : n.to.formatted_phone, t && (e = this.identityWithPrefix("[%@]".fmt(t)))), e || (e = this.identityWithPrefix("[%@]".fmt(I18n.t("txt.ticket.show.receiver.via.phone_number")))), e || ""
                },
                receiverIdentityFacebook: function () {
                    var e = this.getViaSource(),
                        t = this.get("ticket.viaClass") == "facebook" ? "txt.ticket.show.receiver.via.facebook_wall" : "txt.ticket.show.receiver.via.facebook_message";
                    return e !== undefined ? new Handlebars.SafeString("[<a href='/facebook/communications/%@' target='_blank'>%@</a>]".fmt(e.communication, I18n.t(t))) : this.identityWithPrefix("[%@]".fmt(I18n.t(t)))
                },
                receiverIdentity: function () {
                    if (!this.get("ticket.comments.isFetched") && !this.get("ticket.related.isReady")) return "";
                    switch (this.get("ticket.viaClass")) {
                    case "mail":
                        return this.identityWithPrefix(this.get("ticket.recipient"));
                    case "twitter":
                        return this.get("ticket.related.TwitterNotice");
                    case "topic":
                        return this.get("ticket.related.topicNotice");
                    case "voice":
                    case "voice_inbound":
                    case "voice_outbound":
                    case "voice_voicemail":
                        return this.receiverIdentityVoice();
                    case "facebook":
                    case "fb_private_message":
                        return this.receiverIdentityFacebook();
                    case "chat":
                        return this.identityWithPrefix("[%@]".fmt(I18n.t("txt.ticket.show.receiver.via.chat")));
                    case "feedback tab":
                        return this.identityWithPrefix("[%@]".fmt(I18n.t("txt.ticket.show.receiver.via.feedback_tab")))
                    }
                }.property("ticket.related.isReady", "ticket.comments.isFetched").cacheable()
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "ReceiverIdentityView"
                }
            })
        }
    }), this.require.define({
        "views/tickets/reload_apps_view": function (e, t, n) {
            n.exports = Em.View.extend({
                classNames: ["reload_apps"],
                templateName: "templates/tickets/reload_apps",
                appContainerViewBinding: "parentView",
                reloadApps: function () {
                    var e = this.get("appContainerView");
                    e && e.reloadApps && e.reloadApps()
                }
            })
        }
    }), this.require.define({
        "views/tickets/satisfaction_notice_view": function (e, t, n) {
            var r = Em.View.extend({
                satisfaction: null,
                commentBinding: Em.Binding.oneWay("satisfaction.comment"),
                ratingLabel: function () {
                    var e = this.get("satisfaction.rating");
                    return I18n.t("txt.satisfaction.score.%@".fmt(e))
                }.property("satisfaction.rating").cacheable(),
                ratingClassName: function () {
                    var e = this.get("satisfaction.rating");
                    return "rating" + (e ? " " + e : "")
                }.property("satisfaction.rating").cacheable(),
                toString: function () {
                    return "SatisfactionNoticeView"
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/sender_identity_view": function (e, t, n) {
            n.exports = Em.View.extend({
                tagName: "span",
                classNames: "sender",
                templateName: "templates/tickets/mast/sender",
                controller: null,
                ticket: Em.computed.oneWay("controller.ticket"),
                requester: Em.computed.oneWay("ticket.requester"),
                senderIdentityEmail: function () {
                    var e = this.get("requester.email");
                    return e ? '&lt;<a href="mailto:%@" class="email" target="_blank" tabindex="-1">%@</a>&gt;'.fmt(e, e) : !1
                },
                senderIdentityTwitter: function () {
                    var e = this.get("requester.twitterIdentities.0");
                    if (!e) return "";
                    var t = e.get("data.screen_name");
                    return t ? '(<a href="http://twitter.com/%@" target="_blank" tabindex="-1">@%@</a>)'.fmt(t, t) : ""
                },
                senderIdentityFacebook: function () {
                    var e = this.get("requester.facebookIdentities.0"),
                        t = I18n.t("txt.ticket.show.sender.identity.facebook_page");
                    return e ? '(<a href="http://facebook.com/%@" target="_blank" tabindex="-1">%@</a>)'.fmt(e.get("value"), t) : !1
                },
                senderIdentity: function () {
                    if (!this.get("requester.identities.isFetched")) return "";
                    switch (this.get("ticket.viaClass")) {
                    case "twitter":
                        return this.senderIdentityTwitter();
                    case "voice":
                    case "voice_inbound":
                    case "voice_outbound":
                    case "voice_voicemail":
                        return (this.get("requester.phone") || "").fmt("(%@)");
                    case "facebook":
                    case "fb_private_message":
                        return this.senderIdentityFacebook();
                    default:
                        var e = this.senderIdentityEmail();
                        if (e.length > 0) return e
                    }
                }.property("requester.identities.isFetched").cacheable(),
                requesterIsNotSubmitter: Em.computed.oneWay("ticket.requesterIsNotSubmitter"),
                submitterName: Em.computed.oneWay("ticket.submitter.name")
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TicketSenderIdentityView"
                }
            })
        }
    }), this.require.define({
        "views/tickets/sidebar": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["pane", "left", "section"],
                allTicketFieldsBinding: "Zendesk.ticketFields.forPropertiesWithoutAssignee",
                ticketFormsFieldsBinding: "controller.ticketFormsFieldsWithoutAssignee",
                ticketBinding: "workspace.ticket",
                features: t("lib/features"),
                requesterOrganizations: Em.computed.oneWay("controller.requesterOrganizations"),
                hasCollisionNotification: function () {
                    return this.get("ticket.wasUpdatedByOthers") || this.get("ticket.isViewedByOthers")
                }.property("ticket.wasUpdatedByOthers", "ticket.isViewedByOthers").cacheable(),
                ticketFields: function () {
                    return this.get("ticketFormsFields") || this.get("allTicketFields")
                }.property("ticketFormsFields", "allTicketFields").cacheable(),
                _onTicketErrors: function () {
                    this.get("ticket.errors") && this.$().scrollTop(0)
                }.observes("ticket.errors"),
                hasMultipleOrganizations: function () {
                    return this.get("features").hasFeature("multipleOrganizations")
                }.property("features").cacheable(),
                shouldShowOrganizationField: function () {
                    var e = this.get("hasMultipleOrganizations"),
                        t = this.get("requesterOrganizations.length") > 1;
                    return e && t
                }.property("hasMultipleOrganizations", "requesterOrganizations.length").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/subject_mast_view": function (e, t, n) {
            n.exports = t("lib/views/text_field_editable_view").extend(t("views/tickets/ticket_fields/ticket_property_macro_change"), t("lib/views/focusable_view_mixin"), {
                ticketBinding: "model",
                name: "subject",
                inlineUpdates: !1,
                disabled: function () {
                    return this.get("model.isClosed") || !Zendesk.ticketFields.byAttributeName("subject") || !this.get("model.userPermissions.updateTicket")
                }.property("model.userPermissions.updateTicket").volatile(),
                attributeBindings: ["tabindex"],
                tabindex: "-1"
            }).reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TicketSubjectMastView"
                }
            })
        }
    }), this.require.define({
        "views/tickets/ticket_app_container_view": function (e, t, n) {
            var r = t("views/tickets/no_apps_view"),
                i = t("views/tickets/reload_apps_view"),
                s = Em.ContainerView.extend(t("lib/agreements_consumer"), Zendesk.Apps.TicketAppContainer, {
                    site: function () {
                        return this.get("isNewTicket") === !0 ? Zendesk.Apps.Site.NEW_TICKET_SIDEBAR : Zendesk.Apps.Site.TICKET_SIDEBAR
                    }.property("isNewTicket").cacheable(),
                    ticketBinding: "parentView.ticket",
                    ticketControllerBinding: "parentView.controller",
                    ticketFieldViewsBinding: "parentView.ticketFieldViews",
                    isNewTicket: Em.computed.bool("workspace.ticket.isNew"),
                    isVisible: Em.computed.bool("appsController.isActive"),
                    ticketFields: function () {
                        return Zendesk.get("ticketFields.all")
                    }.property().cacheable(),
                    appViewClass: Zendesk.Apps.DefaultAppViewClass.extend({
                        tagName: "div",
                        classNames: ["box"]
                    }),
                    emptyViewClass: r,
                    childViews: [i],
                    toString: function () {
                        return "TicketAppContainerView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_field_select_menu_options": function (e, t, n) {
            var r, i = function (t, n) {
                    var r = [];
                    return n && (r = n.get(t)), _.isArray(r) && !_.isEmpty(r) ? r : []
                };
            r = Em.Mixin.create({
                customOptions: null,
                selectOptions: null,
                options: function () {
                    var e = i("customOptions", this),
                        t = i("selectOptions", this);
                    return e.concat(t)
                }.property("customOptions", "selectOptions").cacheable()
            }), n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/assignee/menu_label_builder": function (e, t, n) {
            var r = t("lib/utils").htmlEscape;
            n.exports = function (t, n) {
                var i, s = r(t.label);
                n = n || Infinity;
                if (t.type === "agent") {
                    var o = r(t.parentItem.label || "");
                    o.length > n && (o = o.slice(0, n - 1) + "&hellip;"), i = (o ? o + "/" : "") + s
                } else i = s;
                return i
            }
        }
    }), this.require.define({
        "views/tickets/ticket_fields/assignee/config_options": function (e, t, n) {
            var r = t("lib/core_widgets/menu_utils"),
                i = r.MenuDataParser.menuModelParsers.LabelConcatenator,
                s = r.FilteringDataSource,
                o = t("lib/utils").htmlEscape,
                u = [s.buildFilter(function (e, t, n, r) {
                    return e.type === "group"
                }), s.buildFilter(function (e, t, n, r) {
                    return e.type === "agent"
                })],
                a = {
                    agent: "agent",
                    group: "group"
                }, f = 8,
                l = "concatenatedLabel",
                c = "/",
                h = t("views/tickets/ticket_fields/assignee/menu_label_builder");
            n.exports = function () {
                return {
                    filteredField: l,
                    modelParser: new i(c, l),
                    filteringDataSource: new s(f, l, u),
                    clsSelectMenuScope: "zd-combo-selectmenu agent",
                    clsSelectMenuRoot: "zd-combo-selectmenu zd-combo-selectmenu-root zd-menu-show-all",
                    enableMenuItemIcons: !0,
                    typeToClassMapBase: a,
                    typeToClassMapSearch: a,
                    typeToClassMapSelect: a,
                    renderItemContentForBase: function (e) {
                        return '<span class="icon"></span>' + h(e, 10)
                    },
                    renderItemContentForSearch: function (e, t) {
                        return t(e.concatenatedLabel)
                    },
                    renderItemContentForSelect: function (e) {
                        return o(e.label)
                    }
                }
            }
        }
    }), this.require.define({
        "views/tickets/ticket_fields/assignee/assignee_view": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/assignee/config_options"),
                i = t("lib/views/select_view"),
                s = t("models/group"),
                o = t("views/tickets/ticket_fields/ticket_field_select_menu_options"),
                u = t("views/tickets/ticket_fields/ticket_property"),
                a = t("views/tickets/ticket_fields/assignee/menu_label_builder"),
                f = i.extend(u, o, {
                    classNames: ["assignee_widget"],
                    delegateType: "ComboSelectMenu",
                    assignableGroups: Em.computed.singleton("models/assignable_groups"),
                    name: "assignee",
                    templateName: "templates/tickets/ticket_fields/assignee_view",
                    init: function () {
                        return this.set("configOptions", r()), this.set("content", Zendesk.TicketFields.byType("assignee")), this._super.apply(this, arguments)
                    },
                    value: function (e, t) {
                        var n = this.get("ticket.assignee.id"),
                            r = this.get("ticket.group.id"),
                            i;
                        if (arguments.length === 2) {
                            if (!this.get("ticket")) return;
                            i = t == null ? [null, null] : String(t).split(":");
                            if (i[0] === r && i[1] === n) return;
                            return this.set("ticket.group", i[0] == null ? null : s.create({
                                id: i[0]
                            })), this.set("ticket.assignee", i[1] == null ? null : Zd.User.create({
                                id: i[1]
                            })), t
                        }
                        return n == null ? r == null ? -1 : r : r + ":" + n
                    }.property("ticket.group", "ticket.assignee").cacheable(),
                    buildDelegate: function () {
                        this._super.apply(this, arguments), this.delegate.addObserver("change", _(function (e, t) {
                            var n = this.delegate.dom.data("tooltip");
                            n && n.hide();
                            var r = this.delegate.getItemByValue(t.value);
                            if (!r) {
                                this.delegate.dom.removeClass("_tooltip");
                                return
                            }
                            var i = a(r);
                            if (i.length < 26) {
                                this.delegate.dom.removeClass("_tooltip");
                                return
                            }
                            this.delegate.dom.addClass("_tooltip").attr("data-original-title", i).attr("data-placement", "top")
                        }).bind(this))
                    },
                    groupData: function (e) {
                        return {
                            label: e.get("name"),
                            value: String(e.get("id")),
                            enabled: !0,
                            type: "group"
                        }
                    },
                    assigneeData: function (e, t) {
                        return {
                            label: t.get("name"),
                            value: e.get("id") + ":" + t.get("id"),
                            enabled: !0,
                            type: "agent"
                        }
                    },
                    selectOptions: function () {
                        var e = this.get("assignableGroups"),
                            t, n, r = this;
                        return t = e.map(function (e) {
                            return n = r.groupData(e), e.get("agents") && (n.children = e.get("agents").map(function (t) {
                                return r.assigneeData(e, t)
                            }), n.children.length && n.children.unshift(r.groupData(e))), n
                        }), t
                    }.property("assignableGroups.isFetched").cacheable(),
                    fieldID: function () {
                        return "ticket_assignee_name_%@".fmt(Em.guidFor(this))
                    }.property().cacheable()
                });
            n.exports = f
        }
    }), this.require.define({
        "views/tickets/ticket_fields/assignee/bulk_assignee_view": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/assignee/config_options"),
                i = t("views/tickets/ticket_fields/assignee/assignee_view"),
                s = t("controllers/bulk_edit_controller").instance(),
                o = i.extend({
                    customOptions: [{
                        value: s.NO_CHANGE_NUM_VALUE + ":" + s.NO_CHANGE_NUM_VALUE,
                        label: s.NO_CHANGE_STRING
                    }],
                    configOptions: _.extend({}, r(), {
                        defaultValue: s.NO_CHANGE_NUM_VALUE + ":" + s.NO_CHANGE_NUM_VALUE,
                        defaultValueLabel: s.NO_CHANGE_STRING
                    })
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tickets/ticket_fields/assignee/take_it_view": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["link_light", "for_save"],
                currentUser: Zd.get("currentUser"),
                ticket: null,
                isVisible: Em.computed.bool("currentUser.isAssignable"),
                click: function () {
                    this.get("currentUser").assignTo(this.get("ticket"))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_date_view": function (e, t, n) {
            var r = t("lib/views/date_view").extend(t("views/tickets/ticket_fields/ticket_property"), {
                template: Em.TEMPLATES["templates/tickets/ticket_fields/ticket_date_view"],
                clearable: !0,
                formatDate: function (e) {
                    var t = new Date(e);
                    return $.datepicker.formatDate(I18n.translations["date.datepicker.date_format"], new Date(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()))
                },
                processDate: function (e, t, n) {
                    return new Date(e, t, n, 12)
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/bulk_labeled_ticket_date_field": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/ticket_date_view"),
                i = t("controllers/bulk_edit_controller").instance(),
                s = r.extend({
                    formattedValue: function () {
                        var e;
                        return this.get("value") == i.NO_CHANGE_STRING ? e = i.NO_CHANGE_STRING : e = $.datepicker.formatDate(I18n.translations["date.datepicker.date_format"], new Date(this.get("value"))), this.get("value") && e
                    }.property("value").cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/tags_view": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/ticket_property"),
                i = t("views/tags_view"),
                s = i.extend(r, {
                    sourceBinding: "ticket",
                    disabled: Em.computed.not("ticket.userPermissions.editTicketTags")
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/text_field": function (e, t, n) {
            var r = Em.TextField.extend({
                didInsertElement: function () {
                    this.$().attr("id", this.get("id"))
                },
                updateValue: function () {
                    var e = this.get("value");
                    e !== this.$().val() && this.$().val(this.get("value"))
                }.observes("value"),
                focusOut: function () {
                    this.$().blur()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/linked_problem_view": function (e, t, n) {
            var r = t("lib/views/autocomplete_view"),
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = t("lib/core_widgets/menu_utils").RemoteSearchDataSource,
                o = function (e) {
                    return "#" + e.get("id") + " " + e.get("subject")
                }, u = r.extend(i, {
                    name: "linked_problem",
                    classNames: ["select", "value"],
                    controllerBinding: "workspace.ticketController",
                    isVisibleBinding: Em.Binding.oneWay("controller.shouldShowLinkedProblem"),
                    init: function () {
                        var e = this,
                            n = 8,
                            r = "/search/incremental?query=type:ticket ticket_type_id:" + Zd.Ticket.Types.PROBLEM + " %@";
                        this.searchDataSource = new s(n, r, {
                            httpMethod: "POST",
                            dataFilter: function (e) {
                                return e
                            },
                            parse: function (t) {
                                var r = [{
                                    value: "-1",
                                    label: "-"
                                }];
                                if (!t || !t.payload) return r;
                                if (t.payload.length === 0) return r;
                                var i = t.payload,
                                    s = e.get("ticket.id");
                                for (var o = 0; o < i.length && o < n; o++) {
                                    if (i[o].result.nice_id === s) continue;
                                    r.push({
                                        label: "#" + i[o].result.nice_id + " " + i[o].result.subject,
                                        value: i[o].result.nice_id
                                    })
                                }
                                return r
                            }
                        }), this._super.apply(this, arguments), this.defaultDataSource = t("lib/problems_data_source")
                    },
                    buildDelegate: function () {
                        this._super.apply(this, arguments), this.delegate.addObserver("close", function () {
                            this.searchDataSource.resetFilter()
                        }.bind(this))
                    },
                    value: function (e, t) {
                        var n = this.get("ticket");
                        return n ? arguments.length === 2 ? (t = !t || t === "-1" ? null : t, n.set("problem_id", t), t || "-1") : n.get("problem_id") || "-1" : null
                    }.property("ticket.problem_id").cacheable(),
                    problemDidFetch: function () {
                        var e = this.get("ticket.problem");
                        if (!this.delegate || !e || !e.get("isFetched")) return;
                        this.delegate.setBaseContent(o(e))
                    }.observes("ticket.problem", "ticket.problem.isFetched"),
                    configOptions: {
                        maxSearchResults: 8,
                        roleToClassMap: {
                            uiLabel: "autocomplete-label"
                        },
                        renderItemContentForMenu: function (e, t) {
                            return t(e.label)
                        },
                        renderItemContentForBase: function (e, t) {
                            if (t) return t.label;
                            if (e && e !== "-1" && e !== -1) {
                                var n = Zd.Ticket.create({
                                    id: e
                                });
                                if (n.get("isFetched")) return o(n)
                            }
                            return "-"
                        }
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/tickets/ticket_fields/due_date_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "div",
                classNames: ["link_light", "for_save", "info"],
                classNameBindings: ["isHidden:hidden"],
                templateName: "templates/tickets/ticket_fields/add_to_calendar_link",
                ticketBinding: "parentView.ticket",
                ticketLink: function () {
                    return "/tickets/%@.ics".fmt(this.get("ticket.id"))
                }.property("ticket.id").cacheable(),
                isHidden: Em.computed.not("ticket.canBeAddedToCalendar")
            }),
                i = t("lib/views/date_view").extend(t("views/tickets/ticket_fields/ticket_property"), {
                    template: Em.TEMPLATES["templates/tickets/ticket_fields/due_date_view"],
                    addToCalendarView: r,
                    clearable: !1,
                    isVisible: function (e, t) {
                        return arguments.length > 1 ? !! t : !! this.get("ticket.isTask")
                    }.property("ticket.isTask").cacheable(),
                    processDate: function (e, t, n) {
                        return new DateWithOffset(e, t, n, 12, 0, 0)
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/tickets/ticket_fields/select_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("views/tickets/ticket_fields/ticket_field_select_menu_options"),
                s = t("views/tickets/ticket_fields/ticket_property"),
                o = r.extend(s, i, {
                    init: function () {
                        this._super.apply(this, arguments);
                        var e = this.get("content"),
                            t, n = [];
                        e && (n = _.map(e.possibleValues(this.get("ticket.serverCopy")), function (t) {
                            return {
                                label: e.humanizeValue(t),
                                enabled: !0,
                                value: t
                            }
                        })), this.set("selectOptions", n)
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_property_factory_builder": function (e, t, n) {
            n.exports = function (e) {
                return function (t) {
                    var n = t.content,
                        r = n.get("attributeName"),
                        i = n.get("type"),
                        s = e[r] || e[i] || Em.View.extend(),
                        o;
                    r === "assignee_id" || r === "ticket_form_id" ? o = s.create(t) : o = s.extend({
                        value: Em.computed.alias("ticket." + r)
                    }).create(t);
                    var u = "ticket_%@_%@".fmt(r, Em.guidFor(o));
                    return o.set("name", r), o.set("id", u), o
                }
            }
        }
    }), this.require.define({
        "views/tickets/ticket_fields/custom_tagger_view": function (e, t, n) {
            var r = t("lib/nested_hash"),
                i = t("lib/views/select_view"),
                s = t("lib/core_widgets/configs"),
                o = t("views/tickets/ticket_fields/ticket_property"),
                u = t("views/tickets/ticket_fields/ticket_field_select_menu_options"),
                a = function l(e) {
                    var t = {
                        enabled: !0
                    };
                    return _.map(e, function (e) {
                        return _.has(e, "children") && (e.children = l(e.children)), _.defaults(e, t)
                    })
                }, f = i.extend(o, u, {
                    delegateType: "ComboSelectMenu",
                    configOptions: s.comboSelect.searchResultFormat1,
                    init: function () {
                        this._super.apply(this, arguments);
                        var e = new r,
                            t = [],
                            n, i = this.get("content");
                        i && (e.add("-", ""), i.get("customFieldOptions").forEach(function (t) {
                            e.add(t.name, t.value)
                        }), t = a(e.toList())), this.set("selectOptions", t)
                    }
                });
            n.exports = f
        }
    }), this.require.define({
        "views/tickets/ticket_fields/field_classes": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/ticket_property_field"),
                i = function (e) {
                    return e.extend(r, {
                        viewName: "fieldView",
                        template: null,
                        ticketBinding: "parentView.ticket"
                    })
                }, s = i(Em.Checkbox.extend({
                    checkedBinding: "parentView.value"
                }));
            n.exports = Object.seal({
                ticketFieldClass: i,
                checkboxFieldClass: s
            })
        }
    }), this.require.define({
        "views/tickets/ticket_fields/labeled_ticket_checkbox_view": function (e, t, n) {
            var r = t("lib/lotus/labeled_field_view"),
                i = t("views/tickets/ticket_fields/ticket_property_wrapper"),
                s = t("views/tickets/ticket_fields/field_classes").checkboxFieldClass,
                o = r.extend(i, {
                    didInsertElement: function () {
                        this._super(), this.$("input").on("focus", function () {
                            this.$().addClass("focused")
                        }.bind(this)).on("blur", function () {
                            this.$().removeClass("focused")
                        }.bind(this))
                    },
                    willDestroyElement: function () {
                        this._super(), this.$("input").off()
                    },
                    classNames: "checkbox-field form_field".w(),
                    labelBinding: "hintedLabelText",
                    templateName: "templates/tickets/ticket_fields/labeled_ticket_checkbox_view",
                    FieldView: s
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "LabeledTicketCheckbox"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_property_views": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("lib/lotus/labeled_field_view"),
                s = t("views/tickets/ticket_fields/tags_view"),
                o = t("views/tickets/ticket_fields/text_field"),
                u = t("views/tickets/ticket_fields/linked_problem_view"),
                a = t("views/tickets/ticket_fields/due_date_view"),
                f = t("views/tickets/ticket_fields/ticket_date_view"),
                l = t("views/tickets/ticket_fields/bulk_labeled_ticket_date_field"),
                c = t("views/tickets/ticket_fields/select_view"),
                h = t("views/tickets/ticket_fields/ticket_property_factory_builder"),
                p = t("views/tickets/ticket_fields/ticket_property_macro_change"),
                d = t("views/tickets/ticket_fields/ticket_property_wrapper"),
                v = t("views/tickets/ticket_fields/ticket_property_field"),
                m = t("views/tickets/ticket_fields/ticket_property"),
                g = t("views/tickets/ticket_fields/custom_tagger_view"),
                y = t("views/tickets/ticket_fields/assignee/assignee_view"),
                b = t("views/tickets/ticket_fields/assignee/bulk_assignee_view"),
                w = t("views/tickets/ticket_fields/field_classes").ticketFieldClass,
                E = t("views/tickets/ticket_fields/labeled_ticket_checkbox_view"),
                S = t("views/tickets/ticket_fields/ticket_forms_view"),
                x = t("controllers/bulk_edit_controller").instance(),
                T = r.extend(m, {
                    options: function () {
                        return [x.NO_CHANGE_OPTION, {
                            value: "0",
                            label: I18n.t("txt.ticket.bulk_modal.checkbox.off")
                        }, {
                            value: "1",
                            label: I18n.t("txt.ticket.bulk_modal.checkbox.on")
                        }]
                    }.property().cacheable()
                }),
                N = c.extend({
                    configOptions: {
                        defaultValue: x.NO_CHANGE_NUM_VALUE,
                        defaultValueLabel: x.NO_CHANGE_STRING
                    },
                    customOptions: [x.NO_CHANGE_NUM_OPTION]
                }),
                C = S.extend({
                    configOptions: {
                        defaultValue: x.NO_CHANGE_NUM_VALUE,
                        defaultValueLabel: x.NO_CHANGE_STRING
                    },
                    customOptions: [x.NO_CHANGE_NUM_OPTION]
                });
            Zendesk.BulkTextField = o.extend(p, {
                click: function () {
                    this.$().select()
                }
            });
            var k = function (e, t) {
                var n = ["form_field"];
                t && (n = n.concat(t));
                var r = w(e);
                return i.extend(d, {
                    classNames: n,
                    labelBinding: "hintedLabelText",
                    FieldView: r.extend({
                        valueBinding: "parentView.value",
                        initialized: !1,
                        update: function () {
                            this.$().hasClass("autoresize") && !this.get("initialized") && this.get("parentView.ticket.isFetched") && (this.$().autoResize(), this.set("initialized", !0))
                        }.observes("value")
                    })
                })
            }, L = k(o),
                A = L.extend({
                    click: function () {
                        this.$("input").select()
                    }
                }),
                O = k(t("lib/views/auto_resizable_text_area")),
                M = O.extend({
                    click: function () {
                        this.$("textarea").select()
                    }
                }),
                _ = u,
                D = a,
                P = s.extend({
                    isInitialized: !0,
                    hintedLabelText: I18n.t("ticket_fields.add_tags.label"),
                    tokensBinding: "ticket.tags"
                }),
                H = s.extend({
                    isInitialized: !0,
                    hintedLabelText: I18n.t("ticket_fields.remove_tags.label"),
                    tokensBinding: "ticket.remove_tags"
                }),
                B = s.extend({
                    tokensBinding: "ticket.tags"
                }),
                j = g.extend({
                    customOptions: [x.NO_CHANGE_OPTION]
                }),
                F = {
                    priority_id: c,
                    ticket_type_id: c,
                    assignee_id: y,
                    tags: B,
                    due_date: a,
                    problem_id: u,
                    ticket_form_id: S,
                    text: L,
                    integer: L,
                    decimal: L,
                    regexp: L,
                    textarea: O,
                    checkbox: E,
                    date: f,
                    tagger: g
                }, I = {
                    priority_id: N,
                    ticket_type_id: N,
                    assignee_id: b,
                    tags: P,
                    remove_tags: H,
                    due_date: D,
                    problem_id: _,
                    ticket_form_id: C,
                    text: A,
                    integer: A,
                    decimal: A,
                    regexp: A,
                    textarea: M,
                    checkbox: T,
                    date: l,
                    tagger: j
                }, q = Em.View.extend().reopenClass({
                    create: h(F)
                }),
                R = Em.View.extend().reopenClass({
                    create: h(I)
                });
            n.exports = Object.seal({
                TicketPropertyView: q,
                BulkTicketPropertyView: R
            })
        }
    }), this.require.define({
        "views/tickets/ticket_fields/bulk_ticket_property_collection_view": function (e, t, n) {
            n.exports = Em.CollectionView.extend({
                controller: null,
                tagName: "div",
                classNames: "property_box ticket_properties",
                itemViewClass: t("views/tickets/ticket_fields/ticket_property_views").BulkTicketPropertyView,
                allTicketFieldsBinding: "Zendesk.ticketFields.forProperties",
                content: function () {
                    var e = this.get("allTicketFields");
                    if (this.get("controller.hasTicketForms")) {
                        var t = Zendesk.get("ticketFields").byAttributeName("ticket_form_id");
                        e = [t].concat(e)
                    }
                    return e
                }.property("allTicketFields").cacheable()
            })
        }
    }), this.require.define({
        "views/tickets/ticket_fields/cc_me_view": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["link_light", "for_save"],
                ticket: null,
                click: function () {
                    var e = this.get("parentView"),
                        t = Zendesk.User.create({
                            id: Zd.currentUser.get("id")
                        });
                    t.fetch().done(function () {
                        e.get("tokens").addObject(t)
                    })
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/collaborators_view": function (e, t, n) {
            var r = t("lib/utils").htmlEscape,
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = t("lib/views/token_list_view").extend(t("lib/account_consumer"), i, {
                    name: "collaborator",
                    lookup: t("lib/autocompleters/autocompleters").userAutocompleterLookup,
                    sourceBinding: "ticket",
                    tokensBinding: "source.collaborators",
                    controllerBinding: "parentView.controller",
                    isInitialized: !0,
                    isSearchResultHighlighted: !1,
                    enableAutocompleteSeparators: !0,
                    autocompleteSeparators: /,/,
                    compactModeLimit: 3,
                    isVisibleBinding: "currentAccount.settings.is_collaboration_enabled",
                    init: function () {
                        this._super(), this.set("content", Zendesk.ticketFields.byAttributeName("current_collaborators"))
                    },
                    selectSuggestion: function (e) {
                        this.collaboratorSelected(e.data("collaborator-id"))
                    },
                    groupFocusOut: function () {
                        $.trim(this.get("searchField").val()) !== "" && this.addToken(this.get("searchField").val()), this._super()
                    },
                    collaboratorSelected: function (e) {
                        this._resetSearch(), this.get("controller").addCollaborator(e), this.get("searchField").focus()
                    },
                    renderToken: function (e, t) {
                        var n = "",
                            i = "",
                            s = r(t.get("name"));
                        t.get("email") && (n = r(t.get("email")), i = ' <span class="postfix">%@</span>'.fmt(n)), e.push('<li class="collaborator token" data-collaborator-id="%@" data-collaborator-email="%@"><span>%@</span>%@<a class="delete" tabindex="-1">&times;</a></li>'.fmt(t.get("id"), n, s, i))
                    },
                    removeTokenByElement: function (e) {
                        this.removeToken(e.data("collaborator-id") || e.data("collaborator-email"))
                    },
                    renderSuggestion: function (e, t) {
                        var n = Zendesk.User.create(e),
                            i = n.get("name"),
                            s = n.get("email");
                        return this.get("isSearchResultHighlighted") && (i = this.highlightSearchResult(i, t), s = s && this.highlightSearchResult(s, t)), i = r(i), s ? (s = r(s), '<li class="agent" data-collaborator-id="%@"><a tabindex="-1"><div class="icon"></div>%@ <span>%@</span></a></li>'.fmt(n.get("id"), i, s)) : '<li class="agent" data-collaborator-id="%@"><a tabindex="-1"><div class="icon"></div>%@</a></li>'.fmt(n.get("id"), i)
                    },
                    addToken: function (e) {
                        this.get("parentView").get("controller").addCollaborator(e), this._resetSearch()
                    },
                    removeToken: function (e) {
                        this.get("parentView").get("controller").removeCollaborator(e)
                    },
                    fieldID: function () {
                        return "ticket_collaborators_%@".fmt(Em.guidFor(this))
                    }.property().cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/linked_agreements_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = r.extend(t("lib/agreements_consumer"), i, {
                    name: "ticket_sharing",
                    classNames: ["form_field"],
                    _hiddenManually: !1,
                    init: function () {
                        this._super(), this.set("content", Zendesk.ticketFields.byAttributeName("ticket_sharing"))
                    },
                    activeAgreements: function () {
                        return this.get("agreements.active")
                    },
                    value: function (e, t) {
                        return arguments.length === 2 ? (t = t == null || t === 0 ? "" : t, this.set("ticket.agreementIdToShare", t), t) : this.get("ticket.agreementIdToShare") || this.get("ticket.sharedWith.firstObject.id")
                    }.property("ticket.agreementIdToShare", "ticket.sharedWith.length").cacheable(),
                    isVisible: function (e, t) {
                        var n = this.activeAgreements();
                        return n.length === 0 ? !1 : (arguments.length === 2 && this.set("_hiddenManually", !t), !this.get("_hiddenManually"))
                    }.property("agreements.length", "_hiddenManually").cacheable(),
                    optionsWhenNotShared: function () {
                        var e = [],
                            t = this.activeAgreements() || [];
                        return e.push({
                            value: "",
                            label: "-"
                        }), e = e.concat(t.map(function (e) {
                            return {
                                value: e.get("id"),
                                label: e.get("name")
                            }
                        })), e
                    }.property("agreements.@each").cacheable(),
                    optionsWhenShared: function () {
                        var e = [],
                            t = this.get("ticket.sharedWith");
                        return t ? (e.push({
                            value: t[0].id,
                            label: t[0].name
                        }), e.push({
                            value: -1,
                            label: I18n.t("txt.views.tickets.share_and_unshare_tickets.unshare_ticket")
                        }), e) : []
                    }.property("ticket.sharedWith").volatile(),
                    options: function () {
                        return this.get("ticket.isNotShared") ? this.get("optionsWhenNotShared") : this.get("optionsWhenShared")
                    }.property("ticket.isNotShared", "agreements.@each").cacheable(),
                    fieldID: function () {
                        return "ticket_sharing_%@".fmt(Em.guidFor(this))
                    }.property().cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/next_ticket_upon_submit_toggle_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "li",
                template: Em.Handlebars.compile('<label>{{view Ember.Checkbox checkedBinding="checked"}}{{labelText}}</label>'),
                classNames: "next_option _tooltip".w(),
                workspaceOrigin: Em.computed.oneWay("parentView.controllerView.workspace.origin"),
                checked: Em.computed.alias("workspaceOrigin.nextUponSubmit"),
                filterName: Em.computed.oneWay("workspaceOrigin.filter.title"),
                titleTranslation: "txt.ticket.next_view.tip",
                labelText: function () {
                    var e = I18n.t("txt.next_in_origin_with_title_upon_submit", {
                        title: this.get("filterName")
                    });
                    return new Handlebars.SafeString(e)
                }.property("filterName").cacheable(),
                click: function (e) {
                    e.stopPropagation()
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/organizations_select_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = t("models/organization"),
                o = r.extend(i, {
                    organizations: Em.computed.ifNull("controller.requesterOrganizations", []),
                    ticketOrganization: Em.computed.oneWay("ticket.organization"),
                    name: "organization",
                    delegateType: "SelectMenu",
                    options: function () {
                        return this.get("organizations").map(function (e) {
                            return {
                                label: e.get("name"),
                                value: e.get("id")
                            }
                        })
                    }.property("organizations.@each").cacheable(),
                    value: function (e, t) {
                        return arguments.length > 1 && t != null && t !== this.get("ticketOrganization.id") && this.set("ticket.organization", s.create({
                            id: t
                        })), this.get("ticketOrganization.id")
                    }.property("ticket", "ticketOrganization").cacheable()
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "TicketOrganizationsSelectView"
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tickets/ticket_fields/requester_view": function (e, t, n) {
            var r = t("lib/views/autocomplete_view"),
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = t("lib/core_widgets/menu_utils").RemoteSearchDataSource,
                o = /(.*)@(.*)\.(.*)$/,
                u = function (e) {
                    return o.test(e.toString())
                }, a = function (e) {
                    return e.split("@")[0]
                }, f = r.extend(i, {
                    classNames: ["requester", "agent"],
                    name: "requester",
                    controller: Em.computed.oneWay("workspace.ticketController"),
                    init: function () {
                        this.searchDataSource = new s(8, "/api/v2/users/autocomplete.json?name=%@&per_page=%@", {
                            httpMethod: "POST"
                        }), this.set("content", Zendesk.ticketFields.byAttributeName("requester_id")), this._super.apply(this, arguments)
                    },
                    didInsertElement: function () {
                        this._super();
                        var e = this;
                        this.delegate.onBeforeBlur = function (t) {
                            e.setValueAsEmail(t)
                        }, this.$("input").on("keypress", function (t) {
                            t.keyCode === 13 && e.set("value", this.value)
                        })
                    },
                    willDestroy: function () {
                        this.$("input").off("keypress"), this._super && this._super()
                    },
                    setValueAsEmail: function (e) {
                        e && u(e) && (e = e.trim(), this._setRequesterFromEmail(e), Em.run.next(this, function () {
                            this.delegate.setValue(e)
                        }))
                    },
                    _setRequesterFromEmail: function (e) {
                        this.set("ticket.requester", Zd.User.create({
                            name: a(e),
                            email: e
                        }))
                    },
                    value: function (e, t) {
                        return arguments.length === 2 && t != null && t !== this.get("ticket.requester.id") && (u(t) ? this._setRequesterFromEmail(t) : this.set("ticket.requester", t == null ? null : Zd.User.create({
                            id: t
                        }))), this.get("ticket.requester.id") || this.get("ticket.requester.email")
                    }.property("ticket", "ticket.requester").cacheable(),
                    configOptions: {
                        maxSearchResults: 8,
                        enableMenuItemIcons: !0,
                        clsSelectMenuScope: "zd-searchmenu requester",
                        clsItem: "zd-menu-item agent",
                        renderItemContentForMenu: function (e, t, n) {
                            return t(e.label) + (e.data.email ? '<span class="zd-aux">' + n(e.data.email) + "</span>" : "")
                        },
                        renderItemContentForBase: function (e, t) {
                            return t ? t.label : e != null && e !== "" ? u(e) ? e : Zendesk.User.create({
                                id: e
                            }).get("name") : ""
                        }
                    },
                    isVisible: Em.computed.oneWay("controller.requesterMode"),
                    focus: function () {
                        this.delegate && this.set("isVisible", !0)
                    },
                    requesterNameDidChange: function () {
                        this.delegate && this.delegate.syncViewWithValue(), this.get("ticket.requester.organization") && this.get("ticket.requester.organization").fetch()
                    }.observes("ticket.requester.name"),
                    fieldID: function () {
                        return "ticket_requester_name_%@".fmt(Em.guidFor(this))
                    }.property().cacheable(),
                    toString: function () {
                        return "TicketRequesterView"
                    }
                });
            n.exports = f
        }
    }), this.require.define({
        "views/tickets/ticket_fields/status_dropdown_menu_item_view": function (e, t, n) {
            var r = Em.View.extend(t("mixins/button_support"), {
                tagName: "li",
                propagateEvents: !0,
                templateName: "templates/tickets/ticket_fields/status_dropdown_menu_item_view",
                classNameBindings: "name assignable:status:option isDisabled:disabled enabled:_tooltip".w(),
                attributeBindings: ["title"],
                target: Em.computed.oneWay("parentView.controllerView.controller"),
                isVisible: Em.computed.oneWay("content.visible"),
                isDisabled: Em.computed.oneWay("content.isDisabled"),
                assignable: Em.computed.oneWay("content.assignable"),
                enabled: Em.computed.oneWay("content.enabled"),
                title: Em.computed.oneWay("content.title"),
                label: Em.computed.oneWay("content.label"),
                name: Em.computed.oneWay("content.name"),
                escapedLabel: function () {
                    return new Handlebars.SafeString(this.get("label"))
                }.property("label").cacheable(),
                titleDidChange: function () {
                    this.get("isDisabled") ? this.$().removeAttr("data-original-title") : this.$().attr("data-original-title", this.get("title"))
                }.observes("isDisabled", "title"),
                _hideTooltip: function () {
                    var e = this.$().data("tooltip");
                    e && e.hide()
                },
                action: function () {
                    return this._hideTooltip(), "save_as_%@".fmt(this.get("name")).camelize()
                }.property("name").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/tickets/ticket_fields/status_dropdown_menu_view": function (e, t, n) {
            var r = t("views/tickets/ticket_fields/next_ticket_upon_submit_toggle_view"),
                i = t("views/tickets/ticket_fields/status_dropdown_menu_item_view"),
                s = Em.CollectionView.extend({
                    tagName: "ul",
                    content: Em.computed.emptyArray(),
                    classNames: "menu dropdown-menu pull-right".w(),
                    createChildView: function (e, t) {
                        return t.content.name === "next" ? e = r : t.content.name === "divider" && (e = Em.View.extend({
                            tagName: "li",
                            classNames: "next_option divider".w()
                        })), this._super(e, t)
                    },
                    itemViewClass: i
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/status_view": function (e, t, n) {
            var r = function (e, t, n) {
                var r = e.get("statusController.assignable"),
                    s = e.get("hiddenOptions"),
                    o, u, a, f = !1;
                t = Em.makeArray(t), o = r.filter(function (e) {
                    return t.contains(e.get("value"))
                });
                if (o.get("length") === 0) return;
                o.forEach(function (e) {
                    a = e.get("value"), !n && !s[a] ? (f = !0, s[a] = e, e.get("isSelected") && (u = e)) : n && s[a] ? (f = !0, delete s[a]) : e.get("visible") !== n && (f = !0)
                });
                if (!f) return;
                o.setEach("visible", n), u && Em.run.next(i.bind(null, e, u))
            }, i = function (e, t) {
                    var n = e.get("statusController.assignable");
                    if (t && !t.get("visible")) {
                        var r = n.indexOf(t),
                            i = n.without(t),
                            s = i.get("length"),
                            o = !1,
                            u, a;
                        for (a = r; a < s && !o; a++) u = i.objectAt(a), o = u.get("visible");
                        if (!o)
                            for (a = r - 1; a >= 0 && !o; a--) u = i.objectAt(a), o = u.get("visible");
                        o ? (e.set("statusDisplayLabel", u.get("label")), e.set("ticket.status_id", u.get("id"))) : e.set("statusDisplayLabel", "")
                    }
                }, s = Em.View.extend(t("lib/account_consumer"), t("views/tickets/ticket_fields/register_ticket_view"), {
                    DropdownMenuView: t("views/tickets/ticket_fields/status_dropdown_menu_view"),
                    templateName: "templates/tickets/ticket_fields/status_view",
                    classNames: ["btn-group", "dropup", "ticket_submit_buttons", "status_button"],
                    classNameBindings: ["workspace.origin.nextUponSubmit:origin_next_upon_submit"],
                    controller: Em.computed.oneWay("workspace.ticketController"),
                    statusController: Em.computed.oneWay("controller.statusController"),
                    statusDisplayLabel: Em.computed.alias("statusController.statusDisplayLabel"),
                    isVisible: Em.computed.bool("workspace.shouldShowSubmitButton"),
                    disabled: Em.computed.bool("controller.submitButtonDisabled"),
                    disabledDropdown: Em.computed.bool("controller.submitDropdownDisabled"),
                    name: "status",
                    ticket: Em.computed.oneWay("workspace.ticket"),
                    hiddenOptions: Object.create(null),
                    buttonLabel: function () {
                        var e = this.get("statusDisplayLabel");
                        return _.isString(e) || (e = Em.I18n.t("txt.ticket.actions.save_as_status_with_formatting", {
                            status: this.get("ticket.statusDisplayName")
                        })), new Handlebars.SafeString(e)
                    }.property("ticket.statusDisplayName", "statusDisplayLabel").cacheable(),
                    options: function () {
                        var e = this.get("hiddenOptions"),
                            t = _.filter(this.get("statusController.assignable"), function (t) {
                                var n = t.get("value"),
                                    r = _.map(e, function (e) {
                                        return e.get("value")
                                    });
                                return t.get("visible") || r.contains(t.get("value"))
                            });
                        return t
                    }.property("statusController.visible").cacheable(),
                    hideOptions: function (e) {
                        r(this, e, !1)
                    },
                    showOptions: function (e) {
                        r(this, e, !0)
                    },
                    optionIsVisible: function (e) {
                        return this.get("statusController").optionIsVisible(e)
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_forms_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = t("views/tickets/ticket_fields/ticket_property"),
                s = t("views/tickets/ticket_fields/ticket_field_select_menu_options"),
                o = r.extend(i, s, {
                    name: "ticket_forms",
                    classNames: ["form_field", "delim"],
                    controller: Em.computed.oneWay("parentView.workspace.ticketController"),
                    isVisibleBinding: Em.Binding.oneWay("controller.shouldShowTicketFormField"),
                    ticketFormIdBinding: "controller.ticket.ticketFormId",
                    customLabelText: I18n.t("txt.views.ticket.ticketforms.ticket_form"),
                    selectOptions: function () {
                        var e, t = this.get("controller.ticketForms");
                        return t && (e = t.map(function (e) {
                            return {
                                value: e.id,
                                label: e.name
                            }
                        })), e || []
                    }.property("controller.ticketForms").cacheable(),
                    value: function (e, t) {
                        if (!(arguments.length > 1)) return this.get("controller.currentTicketFormId");
                        this.set("ticketFormId", t)
                    }.property("ticketFormId", "controller.currentTicketFormId").cacheable()
                });
            n.exports = o
        }
    }), this.require.define({
        "views/tickets/ticket_fields/ticket_property_collection_view": function (e, t, n) {
            n.exports = Em.CollectionView.extend({
                content: null,
                tagName: "div",
                classNames: "property_box ticket_properties",
                itemViewClass: t("views/tickets/ticket_fields/ticket_property_views").TicketPropertyView
            })
        }
    }), this.require.define({
        "views/tickets/ticket_view": function (e, t, n) {
            var r = t("mixins/ticket_keyboard_shortcuts"),
                i = t("views/tickets/ticket_field_views"),
                s = Em.View.extend(i, t("lib/lotus/swappable"), t("lib/views/focus_container_view_mixin"), t("lib/views/render_if_activated"), r, {
                    StatusView: t("views/tickets/ticket_fields/status_view"),
                    templateName: "templates/tickets/pane",
                    tagName: "section",
                    classNames: ["main_panes", "split_pane", "ticket"],
                    classNameBindings: ["workspace.origin.playOn:play", "workspace.hasPlay", "controller.showMacroList", "controller.isWorking:working", "controller.submitButtonDisabled:disabled"],
                    focusManager: Em.computed.alias("controller"),
                    eventDelegate: t("lib/main_pane_keyboard_shortcuts"),
                    ticketBinding: "delegate.ticket",
                    everActivatedBinding: "ticket",
                    navigateLeft: Em.K,
                    navigateRight: Em.K,
                    navigatePrevious: Em.K,
                    navigateNext: Em.K,
                    navigateFirst: Em.K,
                    navigateLast: Em.K,
                    toString: function () {
                        return "TicketView"
                    }
                });
            s.reopenClass({
                toString: function () {
                    return "TicketView"
                }
            }), n.exports = s
        }
    }), this.require.define({
        "views/tickets/ticket_workspace_view": function (e, t, n) {
            var r = t("views/workspace_view"),
                i = r.extend(Zendesk.Apps.AppContainerHostView, {
                    templateName: "templates/tickets/workspace",
                    ticket: Em.computed.oneWay("workspace.context"),
                    requester: Em.computed.oneWay("ticket.requester"),
                    organization: Em.computed.oneWay("requester.organization"),
                    activeChildName: "ticket",
                    nameBinding: "workspace.name"
                });
            i.reopenClass({
                toString: function () {
                    return "TicketWorkspaceView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "views/tickets/update_collision_view": function (e, t, n) {
            var r = Em.View.extend({
                ticket: Em.computed.oneWay("workspace.ticket"),
                isVisible: Em.computed.bool("ticket.wasUpdatedByOthers"),
                classNames: ["notification", "collisionnotification-updated"],
                click: function () {
                    this.set("workspace.ticket.otherUpdaters", []), this.set("workspace.auditsController.audits", null), this.get("workspace").refreshTicket()
                },
                otherUpdatersMessage: function () {
                    var e = this.get("ticket.otherUpdaters");
                    return _.isEmpty(e) ? "" : e.length === 1 ? I18n.t("txt.ticket.collision.others_updated.one", {
                        person: e[0]
                    }) : e.length === 2 ? I18n.t("txt.ticket.collision.others_updated.two", {
                        person1: e[0],
                        person2: e[1]
                    }) : I18n.t("txt.ticket.collision.others_updated.many", {
                        count: e.length
                    })
                }.property("ticket.otherUpdaters.@each").cacheable()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/devices_view": function (e, t, n) {
            var r = t("lib/lotus/swappable"),
                i = Em.View.extend(r, {
                    name: "devices_and_apps",
                    templateName: "templates/users/devices_view",
                    classNames: ["pane_body", "section", "device_list"],
                    classNameBindings: ["controller.working:working"],
                    removeDevice: function (e) {
                        this.get("controller").removeDevice(e.context)
                    },
                    deviceNotificationLabel: function () {
                        var e = this.get("controller.deviceNotification") ? "txt.user.section.devices_email_notifications_on" : "txt.user.section.devices_email_notifications_off";
                        return I18n.t(e)
                    }.property("controller.deviceNotification").cacheable()
                });
            i.reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "DevicesView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "views/users/photo_view": function (e, t, n) {
            var r = Em.View.extend({
                classNames: ["user_photo"],
                classNameBindings: ["agentClass:agent", "sharedClass:shared", "endUserClass:end_user"],
                templateName: "templates/users/photo",
                agentClass: function () {
                    var e = this.get("user.role");
                    return e == "agent" || e == "admin"
                }.property("user.role").cacheable(),
                sharedClass: function () {
                    return this.get("user.shared") || this.get("user.sharedAgent")
                }.property("user.shared", "user.sharedAgent").cacheable(),
                endUserClass: function () {
                    return this.get("user.shared") && !this.get("user.sharedAgent")
                }.property("user.shared", "user.sharedAgent").cacheable()
            });
            r.reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "UserPhotoView"
                }
            }), n.exports = r
        }
    }), this.require.define({
        "views/users/editable_photo_view": function (e, t, n) {
            var r = t("lib/growl"),
                i = t("lib/validation_error"),
                s = t("views/users/photo_view").extend({
                    classNames: ["user_photo", "user_photo_editable", "dropdown"],
                    templateName: "templates/users/photo_editable",
                    authenticityToken: function () {
                        return t("lib/session").instance().authenticityToken
                    }.property().cacheable(),
                    didInsertElement: function () {
                        return this.setupPhotoUpload(), this._super()
                    },
                    loadingStatusChanged: function () {
                        var e = this.get("controller.userPhotoController.isLoading");
                        this.$(".loading-indicator").toggle(e)
                    }.observes("controller.userPhotoController.isLoading"),
                    setupPhotoUpload: function () {
                        var e = this;
                        this.$("input[type=file]").click(function () {
                            $(this).fileupload({
                                autoUpload: !0,
                                url: "/api/v2/users/%@.json".fmt(e.get("user.id")),
                                type: "PUT",
                                formData: [{
                                    name: "authenticity_token",
                                    value: e.get("authenticityToken")
                                }],
                                change: function (t, n) {
                                    e.set("controller.userPhotoController.isLoading", !0)
                                },
                                done: function () {
                                    r.notice(I18n.t("help.user.photo_upload.upload_success"))
                                },
                                fail: function (e, t) {
                                    if (t.jqXHR.status === 413) r.error(I18n.t("help.user.photo_upload.too_large"));
                                    else {
                                        var n, s = t.jqXHR.responseText;
                                        n = i.generateMessage("user", s), r.error(n)
                                    }
                                },
                                always: function () {
                                    e.get("controller.userPhotoController").onActionComplete()
                                }
                            })
                        })
                    }
                });
            s.reopenClass({
                toString: function () {
                    return "EditableUserPhotoView"
                }
            }), n.exports = s
        }
    }), this.require.define({
        "views/users/forum": function (e, t, n) {
            var r = t("lib/utils").htmlEscape,
                i = Em.View.extend({
                    templateName: "templates/items/forum",
                    meta: function () {
                        var e = t("lib/views/timestamp_view"),
                            n = this.get("content.createdAt"),
                            r;
                        if (n) {
                            var i = new Handlebars.SafeString(e.renderDateTime(n));
                            r = I18n.t("txt.user.section.forum_item_meta", {
                                createdDate: i
                            })
                        } else r = "";
                        return new Handlebars.SafeString(r)
                    }.property("content.createdAt").cacheable(),
                    contentUrl: function () {
                        var e = this.get("content.id"),
                            t = "/forums/%@".fmt(r(e));
                        return new Handlebars.SafeString(t)
                    }.property("content.id").cacheable()
                }).reopenClass({
                    toString: function () {
                        return "UserForumView"
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/users/identities/add_identity_form_view": function (e, t, n) {
            var r = Em.View.extend({
                controller: Em.computed.singleton("controllers/identities/add_identity_form"),
                identitiesController: Em.computed.singleton("controllers/identities/identities_controller"),
                identityTypeTolabelMap: {
                    email: I18n.t("txt.identities.label.new_email"),
                    twitter: I18n.t("txt.identities.label.new_twitter"),
                    google: I18n.t("txt.identities.label.new_google_account"),
                    phone: I18n.t("txt.identities.label.new_phone"),
                    facebook: I18n.t("txt.identities.label.new_facebook"),
                    openid: I18n.t("txt.identities.label.new_openid"),
                    agent_forwarding: I18n.t("txt.identities.label.new_agent_phone_forward")
                },
                isVisible: function () {
                    return this.get("controller.type") != null && this.get("identitiesController.user.userPermissions.manageIdentities")
                }.property("controller.type", "identitiesController.user.userPermissions.manageIdentities").volatile(),
                newContactLabel: function () {
                    return this.identityTypeTolabelMap[this.get("controller.type")]
                }.property("controller.type").cacheable(),
                twitterType: Em.computed.equal("controller.type", "twitter")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/identities/add_identity_text_field_view": function (e, t, n) {
            var r = Em.TextField.extend({
                controller: Em.computed.singleton("controllers/identities/add_identity_form"),
                didInsertElement: function () {
                    this._super(), this.updatedDomDisabled()
                },
                addIdentity: function () {
                    this.set("value", $.trim(this.get("value"))), this.get("controller").addIdentity()
                },
                insertNewline: function () {
                    this.addIdentity()
                },
                cancel: function () {
                    this.get("controller").reset()
                },
                focusOut: function () {
                    this.addIdentity()
                },
                updatedDomDisabled: function () {
                    this.$().toggleClass("ui-state-disabled", this.get("disabled"))
                },
                onShow: function () {
                    this.get("controller.type") && this.$().focus()
                }.observes("controller.type"),
                onDisableChange: function () {
                    this.updatedDomDisabled()
                }.observes("disabled")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/identities/agent_forwarding_view": function (e, t, n) {
            var r = t("controllers/voice/voice_forwarding_controller"),
                i = Em.View.extend({
                    user: Em.computed.oneWay("parentView.user"),
                    agentForwardingIdentities: Em.computed.oneWay("user.agentForwardingIdentities"),
                    isVisible: Em.computed.oneWay("user.userPermissions.viewAndManageAgentForwarding"),
                    classNames: ["agent_forwarding", "property"],
                    controller: r.create(),
                    addForwardingNumber: function () {
                        this.get("controller").addForwardingNumber(this.get("user"))
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/users/identities/command_view": function (e, t, n) {
            var r = Em.View.extend({
                controller: Em.computed.singleton("controllers/identities/add_identity_form"),
                identitiesController: Em.computed.singleton("controllers/identities/identities_controller"),
                commandId: Em.required,
                userBinding: Em.Binding.oneWay("parentView.user"),
                isVisible: function () {
                    return this.get("identitiesController.user.isFetched") ? this.get("controller.type") == null && this.get("identitiesController.user.userPermissions.manageIdentities") : !0
                }.property("controller.type", "identitiesController.user.userPermissions.manageIdentities").volatile(),
                click: function (e) {
                    e.target.tagName === "SPAN" && (e.stopPropagation(), t("controllers/identities/context_menu").instance().toggle({
                        commandId: this.get("commandId"),
                        relativeEl: e.target
                    }))
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/identities/identity_view": function (e, t, n) {
            var r = Em.View.extend({
                userBinding: Em.Binding.oneWay("parentView.user"),
                isVisible: Em.computed.bool("identities.length")
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/identities/phone_identity_view": function (e, t, n) {
            var r = t("views/users/identities/identity_view").extend({
                isVisible: Ember.computed.oneWay("user.hasPhoneNumber"),
                templateName: "templates/users/phone_identity_view",
                displayPhoneNumber: function () {
                    var e = this.get("user");
                    return e && e.get("phone") && !e.get("hasDirectLine") && !e.get("userPermissions.manageIdentities")
                }.property("user.phone", "user.hasDirectLine", "user.userPermissions.manageIdentities").cacheable(),
                phoneIdentities: function () {
                    return (this.get("user.phoneIdentities") || []).map(function (e) {
                        var t = "%@ %@".fmt(e.get("value"), I18n.t("txt.users.show.number_is_direct_line"));
                        return e.set("label", t)
                    })
                }.property("user.phoneIdentities").cacheable()
            }).reopenClass({
                preservesContext: !0
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/properties/access/access_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("lib/views/select_view"),
                s = t("lib/profile_tracker"),
                o = i.extend(r.UserProperties, {
                    name: "access",
                    valueBinding: "user.ticket_restriction",
                    classNames: ["select", "value"],
                    options: function () {
                        return [{
                            value: "requested",
                            label: I18n.t("txt.users.edit.end_user_access_tickets")
                        }, {
                            value: "organization",
                            label: I18n.t("txt.users.edit.end_user_access_organization")
                        }]
                    }.property().cacheable(),
                    userDidChangeValue: function () {
                        s.track("fields:access"), this.get("user").set("ticket_restriction", this.get("value")), this.get("user").save({
                            update: !1
                        })
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/users/properties/access/agent_access_view": function (e, t, n) {
            var r = t("views/users/user_property_permissions"),
                i = t("views/users/properties/access/access_view"),
                s = i.extend(r.UserCanEditRole, {
                    options: function () {
                        return [{
                            value: "agent_access_all",
                            label: I18n.t("txt.users.edit.agent_access_all")
                        }, {
                            value: "groups",
                            label: I18n.t("txt.users.edit.agent_access_group")
                        }, {
                            value: "organization",
                            label: I18n.t("txt.users.edit.agent_access_organization")
                        }, {
                            value: "assigned",
                            label: I18n.t("txt.users.edit.agent_access_assigned")
                        }]
                    }.property().cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/properties/access/agent_commenting_access_view": function (e, t, n) {
            var r = t("views/users/user_property_permissions"),
                i = t("views/users/properties/access/access_view"),
                s = i.extend(r.UserCanEditRole, {
                    valueBinding: "user.only_private_comments",
                    options: function () {
                        return [{
                            value: !1,
                            label: I18n.t("txt.users.edit.agent_commenting_all")
                        }, {
                            value: !0,
                            label: I18n.t("txt.users.edit.agent_commenting_notes")
                        }]
                    }.property().cacheable(),
                    userDidChangeValue: function () {
                        this.get("user").set("only_private_comments", this.get("value")), this.get("user").save({
                            update: !1
                        })
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/properties/access/agent_moderation_access_view": function (e, t, n) {
            var r = t("views/users/user_property_permissions"),
                i = t("views/users/properties/access/access_view"),
                s = i.extend(r.UserCanEditRole, t("lib/account_consumer"), {
                    valueBinding: "user.moderator",
                    helpCenterSettings: Em.computed.alias("currentAccount.helpCenterSettings"),
                    options: function () {
                        var e = [],
                            t;
                        return this.get("helpCenterSettings.renameEditorPermissionToManager") ? t = "txt.users.edit.agent_moderation_yes_hc" : t = "txt.users.edit.agent_moderation_yes", e.push({
                            value: !0,
                            label: I18n.t(t)
                        }), e.push({
                            value: !1,
                            label: I18n.t("txt.users.edit.agent_moderation_no")
                        }), e
                    }.property("helpCenterSettings.renameEditorPermissionToManager").cacheable(),
                    userDidChangeValue: function () {
                        this.get("user").set("moderator", this.get("value")), this.get("user").save({
                            update: !1
                        })
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/properties/access/end_user_access_view": function (e, t, n) {
            var r = t("views/users/user_property_permissions"),
                i = t("views/users/properties/access/access_view"),
                s = i.extend(r.UserCanEditAccess, {
                    options: function () {
                        return [{
                            value: "requested",
                            label: I18n.t("txt.users.edit.end_user_access_tickets")
                        }, {
                            value: "organization",
                            label: I18n.t("txt.users.edit.end_user_access_organization")
                        }]
                    }.property().cacheable()
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/properties/groups/member_default_view": function (e, t, n) {
            var r = t("lib/views/select_view"),
                i = r.extend({
                    groupMembershipsController: Em.computed.singleton("controllers/group_memberships_controller"),
                    valueBinding: Em.Binding.oneWay("user.group_memberships.default.group_id"),
                    classNames: ["select", "value"],
                    configOptions: {
                        position: "up"
                    },
                    options: function () {
                        if (!this.get("user.groups")) return [];
                        var e = [];
                        return this.get("value") || e.push({
                            value: "-1",
                            label: "-"
                        }), e = e.concat(this.get("user.groups.content").map(function (e) {
                            return {
                                label: e.get("name"),
                                value: e.get("id")
                            }
                        })), e
                    }.property("user.groups.@each", "value").cacheable(),
                    userDidChangeValue: function () {
                        this.get("groupMembershipsController").makeDefaultMembership(this.get("value"))
                    }
                });
            n.exports = i
        }
    }), this.require.define({
        "views/users/properties/locales_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/select_view"),
                o = t("lib/profile_tracker"),
                u = s.extend(r.UserProperties, i.UserCanEditProperties, {
                    name: "locales",
                    valueBinding: "user.locale_id",
                    classNames: ["select", "value"],
                    mouseEnter: function () {
                        var e = this.get("popover");
                        if (!e) return;
                        this.get("user.id") === Zendesk.get("currentUser.id") ? (e.enable(), e.show()) : (e.hide(), e.disable())
                    },
                    userDidChangeValue: function () {
                        Em.run.next(this, function () {
                            o.track("fields:language"), this.get("user").save({
                                update: !1
                            })
                        })
                    },
                    options: function () {
                        var e = [];
                        e.push({
                            value: "",
                            label: "-"
                        });
                        var t = this.get("controller.locales");
                        return t && (e = e.concat(t.map(function (e) {
                            return {
                                label: e.get("name"),
                                value: e.get("id")
                            }
                        }))), e
                    }.property("controller.locales.@each").cacheable(),
                    didInsertElement: function () {
                        this._super();
                        var e = this.$().parent().data("popover");
                        e && (this.set("popover", e), e.disable())
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/users/properties/organizations_search_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/autocomplete_view"),
                o = t("lib/core_widgets/menu_utils").RemoteSearchDataSource,
                u = t("models/organization"),
                a = function () {
                    return new o(8, "/search/incremental?query=type:organization %@", {
                        httpMethod: "POST",
                        dataFilter: function (e) {
                            return e
                        },
                        parse: function (e) {
                            var t = [{
                                value: "-1",
                                label: "-"
                            }];
                            if (!e || !e.payload) return t;
                            if (e.payload.length === 0) return t;
                            var n = e.payload;
                            for (var r = 0; r < n.length && r < this.maxRecords; r++) t.push({
                                label: n[r].result.name,
                                value: n[r].result.id
                            });
                            return t
                        }
                    })
                }, f = s.extend(r.UserProperties, i.UserCanEditOrganization, r.UserOrganizationViewBase, {
                    name: "organization",
                    buildSearchDataSource: a,
                    init: function () {
                        this.searchDataSource = this.buildSearchDataSource(), this._super.apply(this, arguments)
                    },
                    configOptions: {
                        maxSearchResults: 8,
                        renderItemContentForMenu: function (e, t) {
                            return t(e.label)
                        },
                        renderItemContentForBase: function (e, t) {
                            if (t) return t.label;
                            if (e == null || e === "-1" || e === -1 || e.trim && e.trim() === "") return "-";
                            var n = u.create({
                                id: e
                            });
                            return n.get("name") == null ? (n.fetch(), "") : n.get("name")
                        }
                    },
                    organizationObserver: function () {
                        if (!this.get("delegate")) return;
                        var e = this.get("user.organization.name");
                        if (e == null) return;
                        this.get("delegate").setBaseContent(e)
                    }.observes("user.organization.name")
                });
            n.exports = f
        }
    }), this.require.define({
        "views/users/properties/multiple_organizations_search_view": function (e, t, n) {
            var r = t("lib/profile_tracker"),
                i = t("views/users/properties/organizations_search_view"),
                s = t("lib/core_widgets/menu_utils").RemoteSearchDataSource,
                o = t("models/organization"),
                u = function () {
                    return new s(8, "/api/v2/organizations/autocomplete.json?name=%@", {
                        httpMethod: "POST",
                        dataFilter: function (e) {
                            return e
                        },
                        parse: function (e) {
                            var t = [],
                                n;
                            if (!e || !e.organizations) return t;
                            n = e.organizations;
                            for (var r = 0; r < n.length && r < this.maxRecords; r++) t.push({
                                label: n[r].name,
                                value: n[r].id
                            });
                            return t
                        }
                    })
                }, a = i.extend({
                    buildSearchDataSource: u,
                    controller: Em.computed.oneWay("parentView.controller"),
                    addingOrganization: Em.computed.alias("parentView.addingOrganization"),
                    value: null,
                    focusOut: function () {
                        this.set("value", null), this.set("addingOrganization", !1)
                    },
                    userDidChangeValue: function () {
                        var e = o.create({
                            id: this.get("value")
                        });
                        this.get("controller").addOrganizationMembership(e), this.focusOut(), r.track("fields:organization")
                    }
                }).reopenClass({
                    preservesContext: !0,
                    toString: function () {
                        return "UserOrganizationsSearchView"
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "views/users/properties/multiple_organizations_view": function (e, t, n) {
            var r = function (e, t) {
                var n = e.findProperty("action", "makeDefaultOrganizationMembership");
                t.get("default") ? n.set("status", "inactive") : n.set("status", null)
            };
            n.exports = t("lib/views/popover_view").extend({
                templateName: "templates/users/properties/multiple_organizations_view",
                classNames: ["property", "value"],
                titleI18n: "help.user.organization.title",
                contentI18n: "help.user.organization.content",
                user: Em.computed.oneWay("parentView.user"),
                controller: Em.computed.oneWay("parentView.controller"),
                organizationMemberships: Em.computed.oneWay("user.organizationMemberships"),
                currentOrganizationMembership: null,
                addingOrganization: !1,
                init: function () {
                    this._super.apply(this, arguments), this.set("menuItems", [Em.Object.create({
                        label: I18n.t("txt.organizations.action.make_default"),
                        action: "makeDefaultOrganizationMembership",
                        target: this
                    }), Em.Object.create({
                        label: I18n.t("txt.organizations.action.remove"),
                        action: "removeOrganizationMembership",
                        target: this
                    })]), this._setupActions(this.get("menuItems"))
                },
                _setupActions: function (e) {
                    e.forEach(function (e) {
                        var t = e.get("action");
                        this[t] = function () {
                            this.get("controller")[t](this.get("currentOrganizationMembership")), this.set("currentOrganizationMembership", null)
                        }
                    }, this)
                },
                _eventToDomMembership: function (e) {
                    e.stopPropagation();
                    var t = this.$(e.target).closest(".item");
                    if (t.length > 0) return t
                },
                _domMembershipToMembership: function (e) {
                    var t = e.data("org-membership-id");
                    return this.get("organizationMemberships").findProperty("id", t)
                },
                click: function (e) {
                    var t = this._eventToDomMembership(e),
                        n;
                    if (!t) return;
                    n = this._domMembershipToMembership(t), r(this.get("menuItems"), n), this.showMenu(n, t)
                },
                startAddingOrganization: function (e) {
                    e.preventDefault();
                    var t = this;
                    this.set("addingOrganization", !0), Em.run.next(function () {
                        t.$("input").focus()
                    })
                },
                showMenu: function (e, n) {
                    var r = t("lib/views/context_menu_view").instance();
                    this.get("currentOrganizationMembership") ? (this.set("currentOrganizationMembership", null), r.hide()) : (r.show(this.get("menuItems"), n), this.set("currentOrganizationMembership", e))
                }
            }).reopenClass({
                preservesContext: !0
            })
        }
    }), this.require.define({
        "views/users/properties/organizations_select_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/select_view"),
                o = s.extend(r.UserProperties, i.UserCanEditOrganization, r.UserOrganizationViewBase, {
                    name: "organization",
                    delegateType: "ComboSelectMenu",
                    configOptions: {
                        maxSearchResults: 100
                    },
                    options: function () {
                        var e = [],
                            t = this.get("controller.userOrganizations");
                        return e.push({
                            value: "-1",
                            label: "-"
                        }), e = e.concat(t.map(function (e) {
                            return {
                                label: e.get("name"),
                                value: e.get("id")
                            }
                        })), e
                    }.property("controller.userOrganizations").cacheable()
                });
            n.exports = o
        }
    }), this.require.define({
        "views/users/properties/role_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/select_view"),
                o = t("lib/profile_tracker"),
                u = t("lib/features").consumer,
                a = t("lib/custom_roles_consumer"),
                f = s.extend(r.UserProperties, i.UserCanEditRole, u, a, {
                    name: "role",
                    valueBinding: "user.getRole",
                    classNames: ["select", "value"],
                    hasCustomRoles: Em.computed.oneWay("features.hasCustomRoles"),
                    options: function () {
                        var e = this.get("legacyRoleOptions");
                        return this.get("hasCustomRoles") && (e = e.concat(this.get("customRoleOptions"))), e
                    }.property("legacyRoleOptions", "customRoleOptions", "hasCustomRoles").cacheable(),
                    legacyRoleOptions: function () {
                        var e = [{
                            value: "end-user",
                            label: I18n.t("txt.users.edit.role_end_user")
                        }, {
                            value: "agent",
                            label: I18n.t("txt.users.edit.role_agent")
                        }, {
                            value: "admin",
                            label: I18n.t("txt.users.edit.role_admin")
                        }];
                        return this.get("hasCustomRoles") && (e = e.filter(function (e) {
                            return e.value !== "agent"
                        })), e
                    }.property("hasCustomRoles").cacheable(),
                    customRoleOptions: function () {
                        return this.get("customRoles").map(function (e) {
                            return {
                                value: e.get("id"),
                                label: e.get("name")
                            }
                        })
                    }.property("customRoles.@each").cacheable(),
                    userDidChangeValue: function () {
                        o.track("fields:role"), this.get("controller").updateRole(this.get("value"))
                    }
                }).reopenClass({
                    toString: function () {
                        return "UserRoleView"
                    }
                });
            n.exports = f
        }
    }), this.require.define({
        "views/users/properties/single_organization_view": function (e, t, n) {
            n.exports = t("lib/views/popover_view").extend({
                templateName: "templates/users/properties/single_organization_view",
                classNames: ["property"],
                titleI18n: "help.user.organization.title",
                contentI18n: "help.user.organization.content",
                organizations: Em.computed.singleton("models/organizations")
            }).reopenClass({
                preservesContext: !0
            })
        }
    }), this.require.define({
        "views/users/properties/tags_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/tags_view").extend(r.UserProperties, i.UserCanEditTags, {
                    sourceBinding: "parentView.user",
                    tokensBinding: "source.tags"
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/properties/time_zones_view": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/views/select_view"),
                o = t("lib/profile_tracker"),
                u = s.extend(r.UserProperties, i.UserCanEditProperties, {
                    name: "timezone",
                    value: Em.computed.oneWay("user.timeZoneName"),
                    classNames: ["select", "value"],
                    options: function () {
                        return t("models/time_zones").instance().all()
                    }.property().cacheable(),
                    userDidChangeValue: function () {
                        o.track("fields:time_zone"), this.get("user").set("timeZoneName", this.get("value")), this.get("user").save({
                            update: !1
                        })
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "views/users/properties/user_text_area": function (e, t, n) {
            var r = t("views/users/properties/mixins"),
                i = t("views/users/user_property_permissions"),
                s = t("lib/profile_tracker"),
                o = t("lib/views/text_area_editable_view").extend(r.UserProperties, i.UserCanEditProperties, {
                    name: Em.computed.oneWay("property"),
                    modelBinding: "user",
                    focusOut: function () {
                        s.track("fields:" + this.get("property")), this._super()
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "views/users/properties_role_view": function (e, t, n) {
            n.exports = Ember.View.extend(t("lib/features").consumer, t("lib/account_consumer"), {
                templateName: "templates/users/properties_role",
                showLegacyAgentAccessDropdown: Em.computed.not("features.hasCustomRoles"),
                helpCenterSettings: Em.computed.alias("currentAccount.helpCenterSettings"),
                user: Ember.required(),
                showAgentModerationAccessDropdown: Em.computed.not("helpCenterSettings.hideForumsPermission"),
                showEndUserAccessRestriction: function () {
                    var e = this.get("user.isEndUser"),
                        t = !this.get("helpCenterSettings.hideEndUserAccessRestriction");
                    return e && t
                }.property("helpCenterSettings.hideEndUserAccessRestriction", "user.isEndUser").cacheable(),
                agentModerationLabel: function () {
                    return this.get("helpCenterSettings.renameForumsToHelpCenter") ? I18n.t("txt.users.edit.agent_moderation_hc") : I18n.t("txt.users.edit.agent_moderation")
                }.property("helpCenterSettings.renameForumsToHelpCenter").cacheable()
            }).reopenClass({
                preservesContext: !0
            })
        }
    }), this.require.define({
        "views/users/suspension_button": function (e, t, n) {
            n.exports = Em.View.extend(t("mixins/button_support"), {
                user: null,
                tagName: "a",
                isVisible: Em.computed.bool("user.userPermissions.suspendUser")
            })
        }
    }), this.require.define({
        "views/users/tokens_view": function (e, t, n) {
            var r = t("lib/lotus/swappable"),
                i = Em.View.extend(r, {
                    name: "devices_and_apps",
                    templateName: "templates/users/tokens_view",
                    classNames: ["pane_body", "section", "device_list", "user_token_list"],
                    classNameBindings: ["controller.working:working"],
                    revokeToken: function (e) {
                        this.get("controller").revokeToken(e.context)
                    }
                });
            i.reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "TokensView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "views/users/topic_comments": function (e, t, n) {
            var r = t("lib/utils").htmlEscape,
                i = Em.View.extend({
                    templateName: "templates/items/topic_comment",
                    topicLink: function () {
                        var e = this.get("content.topic.title"),
                            t = this.get("content.topic.id"),
                            n = '<a href="/entries/%@" target="_blank">%@</a>'.fmt(r(t), r(e));
                        return new Handlebars.SafeString(n)
                    }.property("content.topic.title", "content.topic.id").cacheable(),
                    createdStamp: function () {
                        var e = t("lib/views/timestamp_view"),
                            n = this.get("content.createdAt");
                        return new Handlebars.SafeString(e.renderDateTime(n))
                    }.property("content.createdAt").cacheable(),
                    strippedComment: function () {
                        var e = this.get("content.body"),
                            t = r($("<div>" + e + "</div>").text());
                        return new Handlebars.SafeString(t)
                    }.property("content.body").cacheable()
                });
            i.reopenClass({
                toString: function () {
                    return "UserTopicCommentsView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "views/users/topic_votes": function (e, t, n) {
            var r = t("lib/utils").htmlEscape,
                i = Em.View.extend({
                    templateName: "templates/items/topic_vote",
                    createdStamp: function () {
                        var e = t("lib/views/timestamp_view"),
                            n = this.get("content.createdAt");
                        return new Handlebars.SafeString(e.renderDateTime(n))
                    }.property("content.createdAt").cacheable()
                });
            i.reopenClass({
                toString: function () {
                    return "UserTopicCommentsView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "views/users/update_password_button": function (e, t, n) {
            var r = t("controllers/user_controller"),
                i = Em.View.extend(t("mixins/button_support"), {
                    controller: null,
                    userBinding: Em.Binding.oneWay("controller.user"),
                    tagName: "li",
                    label: function () {
                        var e = this.get("controller.passwordChangeMode");
                        return e === r.PasswordChangeModes.SET_PASSWORD ? I18n.t("txt.users.set_password.menu") : e === r.PasswordChangeModes.CHANGE_PASSWORD ? I18n.t("txt.users.change_password.menu") : ""
                    }.property("controller.passwordChangeMode").volatile(),
                    canUpdatePasswordDidChange: function () {
                        Em.run.next(this, function () {
                            Em.run.next(this, function () {
                                this.get("isDestroyed") || this.set("isVisible", this.get("canUpdatePassword"))
                            })
                        })
                    }.observes("canUpdatePassword"),
                    canUpdatePassword: function () {
                        return this.get("controller.passwordChangeMode") !== r.PasswordChangeModes.NO_CHANGE
                    }.property("controller.passwordChangeMode").volatile()
                });
            n.exports = i
        }
    }), this.require.define({
        "views/users/user_app_container_view": function (e, t, n) {
            var r = t("views/tickets/no_apps_view"),
                i = t("views/tickets/reload_apps_view"),
                s = Em.ContainerView.extend(Zendesk.Apps.UserAppContainer, {
                    userFieldViews: Em.computed.oneWay("parentView.userFieldViews"),
                    userController: function () {
                        return this.get("parentView.controller")
                    }.property("parentView.controller").cacheable(),
                    user: function () {
                        return this.get("parentView.user")
                    }.property("parentView.user").cacheable(),
                    isVisible: Em.computed.bool("appsController.isActive"),
                    appViewClass: Zendesk.Apps.DefaultAppViewClass.extend({
                        tagName: "div",
                        classNames: ["box"]
                    }),
                    emptyViewClass: r,
                    childViews: [i],
                    toString: function () {
                        return "UserAppContainerView"
                    }
                });
            n.exports = s
        }
    }), this.require.define({
        "views/users/user_nav_item_view": function (e, t, n) {
            var r = Em.View.extend({
                tagName: "span",
                classNames: "btn",
                classNameBindings: ["active", "create"],
                hrefBinding: "parentView.userHref",
                userBinding: "parentView.user",
                active: function () {
                    return this.get("parentView.activePill") === this.get("name")
                }.property("parentView.activePill").volatile(),
                createBinding: Em.Binding.oneWay("user.isNew"),
                click: function () {
                    if (this.get("user.isNew")) return Zendesk.get("currentUser.canCreateUser") ? (Zendesk.get("newUserController").newUserFromTicket({
                        name: this.get("user.name"),
                        email: this.get("user.email")
                    }), !1) : !1;
                    Zd.Routes.goToHash(this.get("href"))
                },
                label: function () {
                    var e = this.get("user.name");
                    return this.get("user.isNew") ? Zendesk.get("currentUser.canCreateUser") ? ("%@ " + I18n.t("txt.users.create_postfix")).fmt(e) : I18n.t("txt.organization.ticket.none") : e == null || e.trim() === "" ? new Handlebars.SafeString("&nbsp;") : e
                }.property("user.name").volatile()
            });
            n.exports = r
        }
    }), this.require.define({
        "views/users/user_workspace_view": function (e, t, n) {
            var r = t("views/workspace_view"),
                i = r.extend(Zendesk.Apps.AppContainerHostView, {
                    templateName: "templates/users/user_workspace",
                    user: Em.computed.oneWay("workspace.context"),
                    organization: Em.computed.oneWay("user.organization"),
                    activeChildName: "user",
                    nameBinding: "workspace.name"
                });
            i.reopenClass({
                preservesContext: !0,
                toString: function () {
                    return "UserWorkspaceView"
                }
            }), n.exports = i
        }
    }), this.require.define({
        "post_initializers/feature_notifications": function (e, t, n) {
            var r = t("lib/features").hasFeature,
                i = Em.Object.extend(t("lib/user_settings_consumer"), {
                    controller: Em.computed.singleton("controllers/ipm/feature_notifications_controller"),
                    enabled: Em.computed.and("userSettings.showFeatureNotifications", "controller.hasUnreadFeatureNotifications"),
                    perform: function () {
                        r("featureNotifications") && this.get("controller.featureNotifications").fetch().done(this.onFetched.bind(this))
                    },
                    onFetched: function () {
                        this.get("enabled") && this.get("controller").showModal()
                    }
                });
            n.exports = function () {
                i.create().perform()
            }
        }
    }), this.require.define({
        "states/booting": function (e, t, n) {
            function f() {
                var e = t("lib/session").instance().data,
                    n = Zendesk.get("currentUser");
                n.populateWithSessionData(e)
            }
            var r = t("lib/features").hasFeature,
                i = t("lib/environment"),
                s = t("lib/initialization_hooks").uiReady,
                o = t("models/voice"),
                u = t("lib/tracking"),
                a = t("lib/user_tech_metrics");
            n.exports = Object.freeze({
                initialState: "booting",
                loading: Em.computed.singleton("lib/lotus/loading"),
                booting: Em.State.extend({
                    enter: function (e) {
                        this._super();
                        var n = t("lib/monitoring/metrics").instance();
                        n.storeTime("runningSince", +(new Date)), n.time("booting/load"), t("lib/location_history").setup(), $.readyWait++;
                        var r = t("lib/current_account");
                        e.get("loading").start(), $.when(Zendesk.ticketFields.fetch(), r.fetch(), r.get("settings").fetch(), r.get("expirableSettings").fetch(), t("lib/session").instance().start()).done(this.afterRecordsFetched.bind(this, e))
                    },
                    afterRecordsFetched: function (e) {
                        f(), Zendesk.get("currentUser").set("voice", o.create()), t("lib/voice/availability").initialize(), Zendesk.currentUser.get("identities").fetch(), Zendesk.setupBulkTicketSchema(), Zendesk.setupTicketSchema(Zendesk.TicketFields.instance()), t("lib/comment_drafts").startGarbageCollection(), typeof Minilog != "undefined" && t("lib/current_account").get("deployments.clientSideLogging") && Minilog.enableBlackbox(), this.addLocaleAttribute(), e.goToState("booting.done")
                    },
                    addLocaleAttribute: function () {
                        var e = Zd.get("currentUser.locale");
                        e && $("body").attr("lang", e)
                    },
                    done: Em.State.extend({
                        enter: function (e) {
                            var n = t("lib/current_account"),
                                o = t("lib/monitoring/metrics").instance(),
                                f = t("lib/monitoring/page_load_performance"),
                                l = t("controllers/ipm/feature_notifications_controller").instance();
                            $.ready(!0), $(window).blur(function () {
                                Em.sendEvent(Zd, "@window:blur")
                            });
                            if (i.development || r("lotusLogging")) {
                                var c = f.instance();
                                c.displayTimes()
                            }
                            r("lotusLogging") && o.enableLogging(), r("ticketForms") && t("controllers/ticket_controller").reopen(t("lib/ticket_forms_consumer"));
                            if (r("userAssume")) {
                                var h = t("lib/tabs_com/tabs_com");
                                h.start();
                                var p = t("controllers/user_assume_controller").instance();
                                p.subscribe()
                            }
                            window.location.hash = window.location.hash || "#/", t("lib/user_settings").fetch().done(function () {
                                Em.run.next(function () {
                                    s.then(function () {
                                        t("post_initializers/feature_notifications")(), o.timeEnd("booting/load"), window.performance !== undefined && window.performance.now !== undefined && o.storeTime("booting/userperceived/load", parseInt(window.performance.now(), 10)), Zd.workspaces.warmCache(), Zendesk.Routes.run()
                                    })
                                })
                            }), t("models/assignable_groups").instance().fetch(), t("models/macro").all.fetch(), t("models/locale").all.fetch(), t("models/locale").agent.fetch(), Em.run.next(this, function () {
                                $("#main_panes").tooltip({
                                    selector: "._tooltip",
                                    placement: "left"
                                });
                                var e = t("lib/current_account");
                                document.title = I18n.t("txt.browser.document_title_2", {
                                    account_name: new Handlebars.SafeString(e.get("name"))
                                })
                            });
                            var d = t("controllers/suspended_account_modal_controller").create();
                            d.showForSuspendedAccounts(), t("models/alerts").instance().fetch(), u(a.screenResolution(), "technology:resolution", !0), u(a.browser(), "technology:browser", !0), u(a.operatingSystem(), "technology:os", !0)
                        }
                    })
                })
            })
        }
    }), this.require.define({
        "states/filter": function (e, t, n) {
            n.exports = Object.freeze({
                filters: Em.State.extend({
                    loading: Em.State.extend(),
                    show: Em.State.extend()
                })
            })
        }
    }), this.require.define({
        "states/section": function (e, t, n) {
            n.exports = Em.Mixin.create({
                enter: function () {
                    return Zendesk.set("section", this.get("name")), Zendesk.set("subsection", null), this._super.apply(this, arguments)
                }
            })
        }
    }), this.require.define({
        "states/subsection": function (e, t, n) {
            n.exports = Em.Mixin.create({
                enter: function () {
                    return Zendesk.set("subsection", this.get("name")), this._super.apply(this, arguments)
                }
            })
        }
    }), this.require.define({
        "states/other": function (e, t, n) {
            var r = t("states/section"),
                i = t("states/subsection"),
                s = t("lib/tracking");
            n.exports = Object.freeze({
                mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
                goToState: function (e) {
                    var t = e.split(".")[0];
                    this.get("mainPanesController").addViewIfNotPresent(t), this._super(e)
                },
                goToLaunchpad: function () {
                    s("Toolbar: Getting-started", "Lotus-general"), this.goToState("dashboard"), Zd.set("section", "dashboard"), t("controllers/launchpad_controller").instance().activateLaunchpad()
                },
                goToRecent: function () {
                    this.goToState("recent")
                },
                goToBookmarks: function () {
                    this.goToState("bookmarks")
                },
                goToNotFound: function () {
                    this.goToState("notFound")
                },
                goToReporting: function () {
                    Zendesk.Reporting ? Em.run.next(this, function () {
                        Zendesk.Reporting.router.sync(), this.goToState("reporting")
                    }) : this.setupReporting()
                },
                setupReporting: function () {
                    Zd.Routes.removeRoute("get", /#\/reporting(\/.*)/), Zendesk.Reporting = Reporting, Zendesk.Reporting.initialize(), Zendesk.Reporting.router.on("change", function () {
                        t("states/main").instance().goToReporting()
                    }), this.get("mainPanesController").addViewIfNotPresent("reporting"), Zendesk.Routes.refresh()
                },
                recent: Em.State.extend(r, {}),
                bookmarks: Em.State.extend(r, {}),
                search: Em.State.extend({}),
                admin: Em.State.extend(),
                dashboard: Em.State.extend({}),
                reporting: Em.State.extend(r, {
                    enter: function () {
                        this._super(), setTimeout(function () {
                            var e = t("controllers/reporting_tutorial_controller");
                            e.setupTutorial()
                        }, 2e3)
                    }
                }),
                app: Em.State.extend({}),
                notFound: Em.State.extend(r, {})
            })
        }
    }), this.require.define({
        "states/ticket": function (e, t, n) {
            function i(e) {
                var t = Zd.workspaces.findByContextHref(e.get("forEditing"));
                e.get("isNew") ? t || r.count("newTicket/opened") : (r.count("ticket/opened"), t || (r.time("ticket/%@/load".fmt(e.get("id"))), r.count("ticket/newTabOpened")))
            }
            var r = t("lib/monitoring/metrics").instance(),
                s = function (e, t, n) {
                    var r = e.get("forEditing");
                    e.get("isNew") && r.set("newTicketId", e.get("newTicketId")), i(e), Zd.workspaces.activateWorkspace(r, t, null, n), n || this.goToState("workspaces")
                };
            n.exports = Object.freeze({
                goToTicket: function (e, t, n) {
                    var r = t ? "ticket.allEvents" : "ticket.comments",
                        i = e.get("id");
                    s.call(this, e, r, n)
                },
                goToIncidents: function (e) {
                    Zd.workspaces.activateWorkspace(e.get("forEditing"), "incidents"), this.goToState("workspaces")
                },
                goToRequester: function (e, t) {
                    Zd.workspaces.activateWorkspace(e.get("forEditing"), t)
                },
                goToNewTicket: function (e, t) {
                    var n = Zendesk.Ticket.newTicket(e);
                    s.call(this, n, t)
                },
                goToChat: function (e) {
                    s.call(this, e, "ticket.chat")
                }
            })
        }
    }), this.require.define({
        "states/main": function (e, t, n) {
            Ember.assert("Load order problem: Zd.workspaces is not yet defined", Zd.workspaces != null), n.exports = Em.StateManager.extend(t("states/booting"), t("states/filter"), t("states/user_filter"), t("states/other"), t("states/ticket"), {
                rootElement: "#main_panes",
                workspaces: Zd.workspaces
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "States.MainStateManager"
                }
            })
        }
    }), this.require.define({
        "states/ticket_comment": function (e, t, n) {
            var r = Em.Mixin.create({
                getTwitterHint: function (e, t) {
                    var n = e.get("workspace.ticket");
                    if (n) {
                        var r = n.get("primaryIdentityForChannel"),
                            i = n.get("monitoredTwitterHandle");
                        if (r && i) return I18n.t(t, {
                            requesterHandle: r,
                            monitoredHandle: i
                        })
                    }
                }
            });
            n.exports = Em.StateManager.extend(r, {
                initialState: "publicComment",
                commentIsPublic: function () {
                    return this.get("currentState.isPublic")
                }.property("currentState").cacheable(),
                publicComment: Em.State.extend({
                    hint: I18n.t("txt.ticket.actions.public_hint"),
                    isPublic: !0,
                    twitterChannelBack: null,
                    fbChannelBack: !1,
                    attachmentsAllowed: !0,
                    markdownPreviewAllowed: !0
                }),
                privateComment: Em.State.extend({
                    hint: I18n.t("txt.ticket.actions.private_hint"),
                    isPublic: !1,
                    twitterChannelBack: null,
                    fbChannelBack: !1,
                    attachmentsAllowed: !0,
                    markdownPreviewAllowed: !0
                }),
                twitterDm: Em.State.extend({
                    isPublic: !0,
                    twitterChannelBack: "dm",
                    fbChannelBack: null,
                    attachmentsAllowed: !1,
                    markdownPreviewAllowed: !1,
                    enter: function (e) {
                        this.set("hint", e.getTwitterHint(e, "txt.ticket.actions.twitter_dm_hint"))
                    }
                }),
                twitterMention: Em.State.extend({
                    isPublic: !0,
                    twitterChannelBack: "1",
                    fbChannelBack: null,
                    attachmentsAllowed: !1,
                    markdownPreviewAllowed: !1,
                    enter: function (e) {
                        this.set("hint", e.getTwitterHint(e, "txt.ticket.actions.twitter_mention_hint"))
                    }
                }),
                fbWallReply: Em.State.extend({
                    hint: I18n.t("txt.ticket.actions.facebook.reply_on_wall_hint"),
                    isPublic: !0,
                    twitterChannelBack: null,
                    fbChannelBack: "1",
                    attachmentsAllowed: !1,
                    markdownPreviewAllowed: !1
                }),
                fbPrivateMessage: Em.State.extend({
                    hint: I18n.t("txt.ticket.actions.facebook.private_message_hint"),
                    isPublic: !0,
                    twitterChannelBack: null,
                    fbChannelBack: "1",
                    attachmentsAllowed: !1,
                    markdownPreviewAllowed: !1
                })
            }).reopenClass({
                toString: function () {
                    return "TicketComment StateManager"
                }
            })
        }
    }), this.require.define({
        "states/user_filter": function (e, t, n) {
            n.exports = Object.freeze({
                userFilters: Em.State.extend({
                    loading: Em.State.extend(),
                    show: Em.State.extend()
                })
            })
        }
    }), this.require.define({
        "states/voice_call": function (e, t, n) {
            var r = t("lib/current_account"),
                i = t("lib/voice/phone_call").instance(),
                s = Minilog("voice-call-state"),
                o = t("views/tickets/call_console_ticket_manager").instance(),
                u = t("controllers/voice/voice_ui_controller").instance(),
                a = t("lib/voice/state").instance();
            n.exports = Em.StateManager.extend({
                initialState: "nothing",
                nothing: Em.State.extend({}),
                outbound_initial: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "outbound_initial:enter"
                        }), a.setProperties({
                            dialerVisible: !0,
                            keypadVisible: !1,
                            callConsoleVisible: !0,
                            callConsoleMuted: !1
                        }), u.get("views.dialerCallConsole").goToState("connected")
                    },
                    exit: function () {
                        s.info({
                            short_message: "outbound_initial:exit"
                        })
                    }
                }),
                agent_leg: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "agent_leg:enter"
                        }), u.get("views.dialerCallConsole").goToState("connected")
                    },
                    exit: function () {
                        s.info({
                            short_message: "agent_leg:exit"
                        })
                    }
                }),
                customer_leg: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "customer_leg:enter"
                        }), a.setProperties({
                            keypadVisible: !1,
                            dialerVisible: !1,
                            ticketConsoleVisible: !0
                        }), u.get("views.dialerCallConsole").goToState("connected")
                    },
                    exit: function () {
                        s.info({
                            short_message: "customer_leg:exit"
                        })
                    }
                }),
                routing: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "routing:enter"
                        }), a.setProperties({
                            callConsoleVisible: !0,
                            dialerVisible: !0,
                            keypadVisible: !1,
                            callConsoleLocked: !0,
                            callConsoleMuted: !1
                        }), u.get("views.dialerCallConsole").goToState("accepting")
                    },
                    exit: function () {
                        s.info({
                            short_message: "routing:exit"
                        }), a.set("ticketConsoleVisible", !1)
                    }
                }),
                in_conference: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "in_conference:enter"
                        }), a.setProperties({
                            dialerVisible: !1,
                            callConsoleVisible: !0,
                            ticketConsoleVisible: !0
                        }), u.get("views.dialerCallConsole").goToState("connected"), u.get("views.callTimer").goToState("reset"), i.activeInWindow() && u.get("views.callTimer").goToState("counting"), o.goToState("connected")
                    },
                    exit: function () {
                        s.info({
                            short_message: "in_conference:exit"
                        }), a.set("ticketConsoleVisible", !1), o.goToState("nothing")
                    }
                }),
                completed: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "completed:enter"
                        }), u.get("views.dialerCallConsole").goToState("wrapUp"), a.setProperties({
                            callConsoleVisible: !0,
                            ticketConsoleVisible: !1,
                            animateTicketConsole: !1,
                            dialing: !1
                        });
                        var e = Zendesk.workspaces.get("current.ticket"),
                            t = Zendesk.workspaces.get("current.auditsController");
                        chronos.setTimeout(function () {
                            e && t && chronos.setTimeout(function () {
                                e.expire(), Em.run.next(this, function () {
                                    t.get("audits").expire(), t.get("audits").fetch()
                                })
                            }, 500)
                        }, 500), u.get("views.callTimer").goToState("reset"), u.get("views.callTimer").set("lastReset", a.get("currentCall.ended_at")), u.get("views.callTimer").goToState("wrapUp")
                    },
                    exit: function () {
                        s.info({
                            short_message: "completed:exit"
                        }), chronos.setTimeout(function () {
                            u.get("views.voiceIcon").status.goToState("nothing")
                        }, 500), u.get("views.callTimer").goToState("reset"), u.get("views.dialerCallConsole").goToState("nothing")
                    }
                }),
                voicemail: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "voicemail:enter"
                        }), a.set("callConsoleVisible", !0), u.get("views.callTimer").goToState("reset"), a.get("ignoreMissedCallMessaging") ? (u.get("views.dialerCallConsole").goToState("nothing"), a.set("ignoreMissedCallMessaging", !1)) : u.get("views.dialerCallConsole").goToState("missedCall")
                    },
                    exit: function () {
                        s.info({
                            short_message: "voicemail:exit"
                        })
                    }
                }),
                voicemail_transcription_completed: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "voicemail_transcription_completed:enter"
                        }), a.set("callConsoleVisible", !0), u.get("views.callTimer").goToState("reset"), u.get("views.dialerCallConsole").goToState("missedCall")
                    },
                    exit: function () {
                        s.info({
                            short_message: "voicemail_transcription_completed:exit"
                        })
                    }
                }),
                cancelled: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "cancelled:enter"
                        }), a.set("ticketConsoleVisible", !1), a.set("callConsoleVisible", !0), u.get("views.callTimer").goToState("reset"), a.get("ignoreMissedCallMessaging") ? (u.get("views.dialerCallConsole").goToState("nothing"), a.set("ignoreMissedCallMessaging", !1)) : u.get("views.dialerCallConsole").goToState("missedCall"), a.set("dialing", !1)
                    },
                    exit: function () {
                        s.info({
                            short_message: "cancelled:exit"
                        })
                    }
                }),
                queued: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "queued:enter"
                        }), u.get("views.callTimer").goToState("reset"), a.get("ignoreMissedCallMessaging") ? (a.set("callConsoleVisible", !1), u.get("views.dialerCallConsole").goToState("nothing"), a.resetDialer(), a.set("ignoreMissedCallMessaging", !1)) : (a.set("callConsoleVisible", !0), u.get("views.dialerCallConsole").goToState("missedCall"))
                    },
                    exit: function () {
                        s.info({
                            short_message: "queued:exit"
                        })
                    }
                }),
                ended: Em.State.extend({
                    enter: function () {
                        s.info({
                            short_message: "ended:enter"
                        }), a.set("callConsoleVisible", !1), u.get("views.callTimer").goToState("reset"), u.get("views.dialerCallConsole").goToState("nothing"), a.set("dialing", !1)
                    },
                    exit: function () {
                        s.info({
                            short_message: "ended:exit"
                        })
                    }
                })
            }).reopenClass(t("lib/lotus/singleton"), {
                toString: function () {
                    return "VoiceCall StateManager"
                }
            })
        }
    }), this.require.define({
        "workspaces/workspace": function (e, t, n) {
            n.exports = Em.Object.extend(Em.Evented, {
                context: Em.required(),
                state: Em.required(),
                name: Em.required(),
                defaultState: Em.required(),
                tabbed: !1,
                active: !1,
                activeState: Em.required(),
                activeDidChange: function () {
                    this.get("active") ? this.didActivate() : this.didDeactivate()
                }.observes("active"),
                didCreate: Em.K,
                didActivate: Em.K,
                didDeactivate: Em.K,
                didDestroy: Em.K,
                goToState: function (e) {
                    var t = this.get("state.currentState.name");
                    this.get("state").goToState(e || t || this.get("defaultState"))
                },
                reset: function () {
                    this.set("active", !1), this.set("name", "-");
                    var e = this.get("view");
                    e && e.set("name", "-")
                }
            })
        }
    }), this.require.define({
        "workspaces/tabbed_workspace": function (e, t, n) {
            n.exports = Em.Mixin.create({
                tabbed: !0
            })
        }
    }), this.require.define({
        "workspaces/workspace_state_mixin": function (e, t, n) {
            n.exports = Em.Mixin.create({
                workspace: function () {
                    return this.get("parentState.workspace")
                }.property("parentState.workspace").volatile(),
                href: function () {
                    var e = this.get("name").split(".").get("lastObject");
                    return [this.get("parentState.href"), e].compact().join("/")
                }.property().volatile()
            })
        }
    }), this.require.define({
        "workspaces/workspace_state": function (e, t, n) {
            n.exports = Em.State.extend(t("workspaces/workspace_state_mixin"))
        }
    }), this.require.define({
        "workspaces/organization_workspace_states": function (e, t, n) {
            var r = t("states/subsection"),
                i = {}, s = t("workspaces/workspace_state").extend({
                    enter: function () {
                        this.set("workspace.currentMainSection", this), this.set("workspace.view.activeChildName", "organizationWorkspace.%@".fmt(this.get("name"))), this.updateEverActivated(), this._super()
                    },
                    updateEverActivated: function () {
                        var e = this.get("controllerName"),
                            t;
                        e && (t = this.get("parentState.workspace.%@.everActivated".fmt(e)), t || this.set("parentState.workspace.%@.everActivated".fmt(e), !0))
                    },
                    href: function () {
                        return "/" + this.get("name")
                    }.property().volatile()
                });
            i.State = s;
            var o = Em.State.extend(t("workspaces/workspace_state_mixin"), {
                enter: function () {
                    this.set("workspace.organizationSection", this.get("subsection")), this._super()
                },
                href: function () {
                    return "/" + this.get("name")
                }.property().volatile()
            });
            i.OrganizationSubstate = o;
            var u = function () {
                return Em.StateManager.create({
                    name: "organizationWorkspace",
                    organization: s.create({
                        controllerName: "organizationController",
                        toolbarSectionName: "organization",
                        name: "organization",
                        tickets: o.create({
                            subsection: "tickets"
                        }),
                        users: o.create({
                            subsection: "users"
                        })
                    })
                })
            };
            i.createOrganizationWorkspaceStateManager = u, n.exports = Object.seal(i)
        }
    }), this.require.define({
        "workspaces/organization_workspace": function (e, t, n) {
            var r = t("lib/views/organization_info_nav_item"),
                i = t("workspaces/organization_workspace_states"),
                s = t("controllers/organization_controller"),
                o = Em.Mixin.create({
                    toolbarShouldShowUser: !1,
                    toolbarShouldShowOrganization: !0,
                    toolbarShouldShowTicket: !1,
                    toolbarShouldShowIncidents: !1,
                    toolbarShouldShowProblem: !1,
                    toolbarOrganization: Em.computed.oneWay("organization"),
                    toolbarOrganizationHref: Em.computed.oneWay("organization.href"),
                    toolbarActivePill: "organization"
                }),
                u = t("workspaces/workspace").extend(t("workspaces/tabbed_workspace"), o, {
                    tabbed: !0,
                    manager: null,
                    type: "organizationWorkspace",
                    origin: null,
                    hasPlay: !1,
                    defaultState: "organization.tickets",
                    view: null,
                    section: Em.computed.oneWay("state.currentState.subsection"),
                    name: Em.computed.oneWay("context.href"),
                    organization: Em.computed.oneWay("context"),
                    title: Em.computed.oneWay("organization.name"),
                    baseHref: Em.computed.oneWay("organization.href"),
                    href: function () {
                        return this.get("baseHref") + this.get("state.currentState.href")
                    }.property("baseHref", "state.currentState.href").cacheable(),
                    organizationSection: function (e, t) {
                        return t == null ? "tickets" : t
                    }.property("context").cacheable(),
                    sectionURLPrefixForOrganization: Em.computed.oneWay("organization.href"),
                    collisionController: Em.computed.singleton("controllers/collision_controller"),
                    init: function () {
                        this._super.apply(this, arguments), this.set("state", i.createOrganizationWorkspaceStateManager()), this.set("state.workspace", this), this.set("navigationItemsForOrganization", r.navigationItems(this)), this.set("organizationController", s.create())
                    },
                    fetchData: function (e) {
                        var t = e.split(".")[1];
                        return this.set("organizationController.organization", this.get("organization")), this.set("organizationController.section", t), this.get("organizationController").fetchData(t)
                    },
                    didActivate: function () {
                        Zd.set("section", this.get("name"));
                        var e = this.fetchData(this.get("startState") || this.get("defaultState"));
                        this.get("view") && this.get("view").didActivate(), this.set("loading", e), this.goToState(this.get("startState")), this._super.apply(this, arguments)
                    },
                    didDeactivate: function () {
                        this.get("view") && this.get("view").didDeactivate(), this.get("tabbed") || Em.run.next(this, function () {
                            this.get("manager").closeWorkspace(this, null, null, !0)
                        })
                    },
                    resetForOrganization: Em.K,
                    reset: function () {
                        this._super(), this.get("organizationController").reset()
                    },
                    close: function (e) {
                        e && e()
                    }
                });
            n.exports = u
        }
    }), this.require.define({
        "workspaces/workspace_view_cache": function (e, t, n) {
            var r = function (e) {
                this.cache = [], this.wsManager = e
            };
            r.prototype = {
                purge: function () {
                    this.cache.length = 0
                },
                size: function () {
                    return this.cache.length
                },
                warm: function () {
                    this.add(this.wsManager.createWorkspaceView())
                },
                deferredWarm: function () {
                    Em.run.next(this, function () {
                        this.warm()
                    })
                },
                fetchView: function () {
                    return this.cache.length === 0 && this.warm(), this.cache.length === 1 && this.deferredWarm(), this.cache.pop()
                },
                add: function (e) {
                    this.cache.push(e)
                }
            }, n.exports = r
        }
    }), this.require.define({
        "workspaces/workspace_builder": function (e, t, n) {
            var r = t("workspaces/workspace_view_cache"),
                i = Em.Object.extend({
                    wsManager: null,
                    emptyContext: null,
                    mainPanesController: Em.computed.singleton("controllers/main_panes_controller"),
                    init: function () {
                        this.set("cache", new r(this)), this._super()
                    },
                    workspaceViewFactory: Em.K,
                    createWorkspaceView: function () {
                        var e = this.workspaceViewFactory(),
                            t = this.createWorkspaceAndLinkToView(this.get("emptyContext"), e);
                        return Em.run.next(this, function () {
                            this.addWorkspaceView(e), this.activateWorkspaceSectionViews(t)
                        }), e
                    },
                    putWorkspaceBackInPool: function (e) {
                        var t = e.get("view");
                        this.get("cache").add(t), this.resetWorkspace(e)
                    },
                    createWorkspaceAndLinkToView: function (e, t) {
                        var n = this.constructWorkspaceForContext(e);
                        return t.linkToWorkspace(n), n
                    },
                    fetchWorkspace: function () {
                        return this.get("cache").fetchView().get("workspace")
                    },
                    addWorkspaceView: function (e) {
                        this.get("mainPanesController").addPane(e)
                    },
                    warmCache: function () {
                        this.get("cache").warm()
                    },
                    activateWorkspaceSectionViews: Em.K,
                    constructWorkspaceForContext: Em.K,
                    resetWorkspace: Em.K
                });
            n.exports = i
        }
    }), this.require.define({
        "workspaces/user_workspace_states": function (e, t, n) {
            var r = t("states/subsection"),
                i = {}, s = t("workspaces/workspace_state_mixin"),
                o = t("workspaces/workspace_state").extend({
                    enter: function () {
                        this.set("workspace.currentMainSection", this), this.set("workspace.view.activeChildName", "userWorkspace.%@".fmt(this.get("name"))), this.updateEverActivated(), this._super()
                    },
                    updateEverActivated: function () {
                        var e = this.get("controllerName"),
                            t;
                        e && (t = this.get("parentState.workspace.%@.everActivated".fmt(e)), t || this.set("parentState.workspace.%@.everActivated".fmt(e), !0))
                    },
                    href: function () {
                        return "/" + this.get("name").split(".").get("lastObject")
                    }.property().volatile()
                });
            i.State = o;
            var u = Em.State.extend(s, {
                enter: function () {
                    this.set("workspace.userSection", this.get("subsection")), this._super()
                },
                href: function () {
                    return "/" + this.get("name").split(".").get("lastObject")
                }.property().volatile()
            });
            i.UserSubstate = u;
            var a = Em.State.extend(s, {
                enter: function () {
                    this.set("workspace.organizationSection", this.get("subsection")), this._super()
                },
                href: function () {
                    return "/" + this.get("parentState.name") + "/" + this.get("name")
                }.property().volatile()
            });
            i.OrganizationSubstate = a;
            var f = function () {
                return Em.StateManager.create({
                    name: "userWorkspace",
                    user: o.create({
                        controllerName: "userController",
                        toolbarSectionName: "user",
                        name: "user",
                        assigned_tickets: u.create({
                            subsection: "assigned_tickets"
                        }),
                        tickets: u.create({
                            subsection: "tickets"
                        }),
                        ccs: u.create({
                            subsection: "ccs"
                        }),
                        topics: u.create({
                            subsection: "topics"
                        }),
                        topic_comments: u.create({
                            subsection: "topic_comments"
                        }),
                        votes: u.create({
                            subsection: "votes"
                        }),
                        subscriptions: u.create({
                            subsection: "subscriptions"
                        }),
                        devices_and_apps: u.create({
                            subsection: "devices_and_apps"
                        })
                    }),
                    organization: o.create({
                        controllerName: "organizationController",
                        toolbarSectionName: "organization",
                        name: "organization",
                        tickets: a.create({
                            subsection: "tickets"
                        }),
                        users: a.create({
                            subsection: "users"
                        })
                    })
                })
            };
            i.createUserWorkspaceStateManager = f, n.exports = Object.seal(i)
        }
    }), this.require.define({
        "workspaces/user_workspace": function (e, t, n) {
            var r = t("views/users/nav_items"),
                i = t("controllers/organization_controller"),
                s = t("workspaces/user_workspace_states"),
                o = t("controllers/user_controller"),
                u = Em.Mixin.create({
                    toolbarShouldShowUser: !0,
                    toolbarShouldShowOrganization: !0,
                    toolbarShouldShowTicket: !1,
                    toolbarShouldShowIncidents: !1,
                    toolbarShouldShowProblem: !1,
                    toolbarUser: Em.computed.oneWay("user"),
                    toolbarUserHref: Em.computed.oneWay("user.href"),
                    toolbarOrganization: Em.computed.oneWay("user.organization"),
                    toolbarOrganizationHref: Em.computed.fmt("user.id", "#/users/%@/organization"),
                    toolbarActivePill: function () {
                        var e, t = this.get("state.currentState");
                        while (t) {
                            e = Em.get(t, "toolbarSectionName");
                            if (e) return e;
                            t = t.get("parentState")
                        }
                        return ""
                    }.property("state.currentState").cacheable()
                }),
                a = t("workspaces/workspace").extend(t("workspaces/tabbed_workspace"), u, t("lib/apps_consumer"), {
                    tabbed: !0,
                    manager: null,
                    type: "userWorkspace",
                    isUserWorkspace: !0,
                    origin: null,
                    hasPlay: !1,
                    defaultState: "user",
                    view: null,
                    section: Em.computed.oneWay("state.currentState.subsection"),
                    name: Em.computed.oneWay("context.href"),
                    user: Em.computed.oneWay("context"),
                    organization: Em.computed.oneWay("user.organization"),
                    baseHref: Em.computed.oneWay("context.href"),
                    title: function () {
                        return this.get("context.name") || this.get("context.email") || this.get("context.phone")
                    }.property("context.name", "context.email", "context.phone").cacheable(),
                    href: function () {
                        return [this.get("baseHref"), this.get("state.currentState.href")].join("")
                    }.property().volatile(),
                    userSection: function (e, t) {
                        return t != null ? t : this.get("user.isAgent") ? "assigned_tickets" : "tickets"
                    }.property("user.isAgent").cacheable(),
                    navigationItems: function () {
                        var e = this.get("user");
                        return e ? r(this, e) : null
                    }.property("user.isAgent").cacheable(),
                    organizationSection: function (e, t) {
                        return t == null ? "tickets" : t
                    }.property("context").cacheable(),
                    sectionURLPrefix: Em.computed.oneWay("user.href"),
                    collisionController: Em.computed.singleton("controllers/collision_controller"),
                    sectionURLPrefixForOrganization: function () {
                        return "%@/organization".fmt(this.get("user.href"))
                    }.property("user.id").cacheable(),
                    init: function () {
                        this._super.apply(this, arguments), this.set("state", s.createUserWorkspaceStateManager()), this.set("state.workspace", this), this.set("navigationItemsForOrganization", t("lib/views/organization_info_nav_item").navigationItems(this)), this.set("userController", o.create()), this.set("organizationController", i.create())
                    },
                    fetchDataForUser: function (e) {
                        return this.set("userController.section", e), this.get("userController").fetchData(e)
                    },
                    fetchDataForOrganization: function (e) {
                        return this.get("user") && this.get("user").fetch(), this.set("organizationController.section", e), this.get("organizationController").fetchData(e)
                    },
                    fetchData: function (e) {
                        var t = e.split(".")[0],
                            n = e.split(".")[1];
                        this.set("userController.user", this.get("user")), this.set("organizationController.user", this.get("user"));
                        switch (t) {
                        case "user":
                            return this.fetchDataForUser(n);
                        case "organization":
                            return this.fetchDataForOrganization(n)
                        }
                        return $.when()
                    },
                    didActivate: function () {
                        Zd.set("section", this.get("name")), this.get("view") && this.get("view").reset();
                        var e = this.fetchData(this.get("startState") || "user").done(function () {
                            this.trigger("@workspace:fetched")
                        }.bind(this));
                        this.set("loading", e), this.get("startState") && (this.goToState(this.get("startState")), this.set("startState", null)), this._super.apply(this, arguments)
                    },
                    didDeactivate: function () {
                        this.get("tabbed") || Em.run.next(this, function () {
                            this.get("manager").closeWorkspace(this, null, null, !0)
                        })
                    },
                    resetForUser: function () {
                        this.get("appsController").resetAppsForView(this.get("view"))
                    },
                    reset: function () {
                        this._super(), this.get("userController").reset(), this.get("organizationController").reset()
                    },
                    close: function (e) {
                        e && e()
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "workspaces/organization_workspace_builder": function (e, t, n) {
            var r = t("workspaces/workspace_builder"),
                i = t("workspaces/organization_workspace"),
                s = t("models/organization").create(),
                o = r.extend({
                    emptyContext: s,
                    activateWorkspaceSectionViews: function (e) {
                        e.set("organizationController.everActivated", !0)
                    },
                    workspaceViewFactory: function () {
                        return t("views/organizations/organization_workspace_view").create({
                            workspace: null
                        })
                    },
                    resetWorkspace: function (e) {
                        if (!e) return;
                        e.resetForOrganization(), e.reset()
                    },
                    constructWorkspaceForContext: function (e) {
                        return i.create({
                            context: e,
                            manager: this.get("wsManager")
                        })
                    }
                });
            n.exports = o
        }
    }), this.require.define({
        "workspaces/origin_resolver": function (e, t, n) {
            var r = Em.Object.extend({
                app: Zendesk,
                nextTicketController: Em.computed.singleton("controllers/next_ticket_controller"),
                ticketFilterManagerController: Em.computed.singleton("controllers/ticket_filter_manager_controller"),
                userFilterManagerController: Em.computed.singleton("controllers/user_filter_manager_controller"),
                resolveForWorkspace: function (e) {
                    switch (e.get("type")) {
                    case "ticketWorkspace":
                        return this.resolveForTicketWorkspace(e);
                    case "userWorkspace":
                        return this.resolveForUserWorkspace(e);
                    case "organizationWorkspace":
                        return this.resolveForOrganizationWorkspace(e)
                    }
                },
                resolveForTicketWorkspace: function (e) {
                    var n, r, i, s = this.get("app.section");
                    return e.get("ticket.isNew") ? n : (s === "filters" ? r = this.get("ticketFilterManagerController.currentFilter") : s === "dashboard" ? r = t("models/filter").create({
                        id: "incoming"
                    }) : s === "search" && (i = "#/search"), r ? n = Em.Object.create({
                        url: r.get("href"),
                        filter: r,
                        playOn: this.get("nextTicketController.playOn"),
                        nextUponSubmit: this.get("nextTicketController.playOn")
                    }) : i && (n = Em.Object.create({
                        url: i
                    })), this.set("nextTicketController.playOn", !1), n)
                },
                resolveForUserWorkspace: function (e) {
                    var t, n = this.get("app.section");
                    n === "user_filters" ? t = this.get("userFilterManagerController.currentFilter.href") : n === "search" && (t = "#/search");
                    if (t) return Em.Object.create({
                        url: t
                    })
                },
                resolveForOrganizationWorkspace: function (e) {
                    if (this.get("app.section") === "search") return Em.Object.create({
                        url: "#/search"
                    })
                }
            });
            n.exports = r
        }
    }), this.require.define({
        "workspaces/ticket_workspace_states": function (e, t, n) {
            var r = t("states/subsection"),
                i = {}, s = t("workspaces/workspace_state_mixin"),
                o = t("workspaces/workspace_state").extend({
                    enter: function () {
                        this.set("workspace.currentMainSection", this), this.set("workspace.view.activeChildName", "ticketWorkspace.%@".fmt(this.get("name"))), this.updateEverActivated(), this._super()
                    },
                    updateEverActivated: function () {
                        var e = this.get("controllerName"),
                            t;
                        e && (t = this.get("parentState.workspace.%@.everActivated".fmt(e)), t || this.set("parentState.workspace.%@.everActivated".fmt(e), !0))
                    }
                });
            i.State = o;
            var u = Em.State.extend(s, {
                enter: function () {
                    this.set("workspace.userSection", this.get("subsection")), this._super()
                }
            });
            i.RequesterSubstate = u;
            var a = Em.State.extend(s, {
                enter: function () {
                    this.set("workspace.organizationSection", this.get("subsection")), this._super()
                }
            });
            i.OrganizationSubstate = a;
            var f = function () {
                return Em.StateManager.create({
                    name: "ticketWorkspace",
                    ticket: o.createWithMixins({
                        toolbarSectionName: "ticket",
                        name: "ticket",
                        enter: function (e) {
                            this._super.apply(this, arguments);
                            var t = this
                        },
                        comments: Em.State.createWithMixins(r, {
                            subsection: "comments",
                            enter: function () {
                                return this.get("parentState.workspace.auditsController").setComments(), this._super.apply(this, arguments)
                            }
                        }),
                        allEvents: Em.State.createWithMixins(r, {
                            subsection: "events",
                            href: "/events",
                            enter: function () {
                                return this.get("parentState.workspace.auditsController").setAllEvents(), this._super.apply(this, arguments)
                            }
                        }),
                        chat: Em.State.createWithMixins(r, {
                            subsection: "chat",
                            href: "/chat",
                            toolbarSectionName: "chat",
                            enter: function () {
                                return this.get("parentState.workspace").activateChatPanel(), this._super.apply(this, arguments)
                            },
                            exit: function () {
                                return this.get("parentState.workspace").deactivateChatPanel(), this._super.apply(this, arguments)
                            }
                        })
                    }),
                    ticketCommentStateManager: null,
                    requester: o.create({
                        controllerName: "userController",
                        toolbarSectionName: "user",
                        name: "requester",
                        assigned_tickets: u.create({
                            subsection: "assigned_tickets"
                        }),
                        tickets: u.create({
                            subsection: "tickets"
                        }),
                        ccs: u.create({
                            subsection: "ccs"
                        }),
                        topics: u.create({
                            subsection: "topics"
                        }),
                        topic_comments: u.create({
                            subsection: "topic_comments"
                        }),
                        votes: u.create({
                            subsection: "votes"
                        }),
                        subscriptions: u.create({
                            subsection: "subscriptions"
                        })
                    }),
                    organization: o.create({
                        controllerName: "organizationController",
                        toolbarSectionName: "organization",
                        name: "organization",
                        tickets: a.create({
                            subsection: "tickets"
                        }),
                        users: a.create({
                            subsection: "users"
                        })
                    }),
                    incidents: o.create({
                        controllerName: "incidentsController",
                        toolbarSectionName: "incidents",
                        name: "incidents"
                    }),
                    chat: o.create({
                        toolbarSectionName: "chat",
                        name: "chat"
                    })
                })
            };
            i.createTicketWorkspaceStateManager = f, n.exports = Object.seal(i)
        }
    }), this.require.define({
        "workspaces/ticket_workspace": function (e, t, n) {
            var r = t("controllers/audits_controller"),
                i = t("lib/monitoring/metrics").instance(),
                s = t("states/ticket_comment"),
                o = t("views/users/nav_items"),
                u = t("views/modals/ticket_close_confirm"),
                a = t("controllers/ticket_controller"),
                f = t("controllers/user_controller"),
                l = t("workspaces/ticket_workspace_states"),
                c = t("controllers/incidents_controller"),
                h = t("controllers/organization_controller"),
                p = t("lib/features").hasFeature,
                d = function () {
                    return !1
                }.property().volatile(),
                v = Em.Object.createWithMixins({
                    hasChat: d,
                    shouldShowEndChat: d,
                    isActive: d,
                    pillVisible: d,
                    destroy: Em.K
                }),
                m = Em.Mixin.create({
                    ticketIsActive: !0,
                    toolbarShouldShowTicket: !0,
                    toolbarShouldShowUser: Em.computed.notAmong("ticket.requester", null, undefined),
                    toolbarShouldShowIncidentsBinding: Em.Binding.oneWay("ticket.hasIncidents"),
                    toolbarShouldShowProblemBinding: Em.Binding.oneWay("ticket.problem"),
                    toolbarShouldShowChatBinding: Em.Binding.oneWay("chatController.pillVisible"),
                    toolbarUserBinding: Em.Binding.oneWay("ticket.requester"),
                    toolbarTicketBinding: Em.Binding.oneWay("ticket"),
                    toolbarOrganizationBinding: Em.Binding.oneWay("ticket.organization"),
                    toolbarUserHref: function () {
                        return "%@/requester/%@".fmt(this.get("ticket.href") || "#/tickets/new", this.get("userSection"))
                    }.property("ticket.id", "userSection").volatile(),
                    toolbarShouldShowOrganization: function () {
                        return this.get("ticket.requester") && !this.get("ticket.requester.isNew")
                    }.property("ticket.requester.isNew").cacheable(),
                    toolbarOrganizationHref: function () {
                        return "%@/organization/%@".fmt(this.get("ticket.href") || "#/tickets/new", this.get("organizationSection"))
                    }.property("ticket.id", "organizationSection").volatile(),
                    toolbarActivePill: function () {
                        var e, t = this.get("state.currentState");
                        while (t) {
                            e = Em.get(t, "toolbarSectionName");
                            if (e) return e;
                            t = t.get("parentState")
                        }
                        return ""
                    }.property("state.currentState").cacheable()
                }),
                g = t("workspaces/workspace").extend(m, t("workspaces/tabbed_workspace"), t("lib/fetch_control"), t("lib/agreements_consumer"), t("lib/recent_tickets_consumer"), t("lib/apps_consumer"), {
                    manager: null,
                    type: "ticketWorkspace",
                    isTicketWorkspace: !0,
                    origin: null,
                    macros: t("models/macro").all,
                    assignableGroups: Em.computed.singleton("models/assignable_groups"),
                    organizations: Em.computed.singleton("models/organizations"),
                    expirableObjects: {
                        all: ["ticket"],
                        "ticketWorkspace.ticket": ["agreements", "ticket.comments", "ticket.twitterStatuses", "ticket.requester.identities", "ticket.incidents", ["ticket.related", "ticket.related.topic"], "macros", "assignableGroups"],
                        "ticketWorkspace.requester": ["ticket.requester", "organizations"],
                        "ticketWorkspace.organization": ["ticket.organization"],
                        "ticketWorkspace.incidents": ["ticket.incidents"]
                    },
                    ticket: function () {
                        return this.get("context")
                    }.property("context").cacheable(),
                    title: function () {
                        return this.get("context.isNew") ? this.get("context.subject") || I18n.t("txt.ticket.new") : this.get("context.subject") || I18n.t("txt.ticket.id_label", {
                            id: this.get("context.id")
                        }) + "&hellip;"
                    }.property("context.subject").cacheable(),
                    baseHrefBinding: Em.Binding.oneWay("ticket.href"),
                    href: function () {
                        return [this.get("baseHref"), this.get("state.currentState.href")].join("")
                    }.property().volatile(),
                    defaultState: "ticket",
                    section: function () {
                        return this.get("state.currentState.subsection")
                    }.property("state.currentState.subsection").cacheable(),
                    view: null,
                    user: function () {
                        return this.get("currentMainSection") == this.get("state.requester") ? (this.set("requester", this.get("ticket.requester")), this.get("requester")) : this.get("requester") || null
                    }.property("ticket.requester", "currentMainSection").volatile(),
                    userSection: function (e, t) {
                        return t != null ? t : this.get("ticket.requester.isAgent") ? "assigned_tickets" : "tickets"
                    }.property("ticket.requester.isAgent").cacheable(),
                    navigationItems: function () {
                        var e = this.get("ticket.requester");
                        return e ? o(this, e) : null
                    }.property("ticket.requester.isAgent").cacheable(),
                    organization: function () {
                        return this.get("currentMainSection") == this.get("state.organization") ? (this.set("requesterOrganization", this.get("ticket.requester.organization")), this.get("requesterOrganization")) : this.get("requesterOrganization") || null
                    }.property("ticket.requester.organization", "currentMainSection").volatile(),
                    organizationSection: function (e, t) {
                        return t == null ? "tickets" : t
                    }.property("context").cacheable(),
                    sectionURLPrefix: function () {
                        return "%@/requester".fmt(this.get("ticket.href") || "#/tickets/new")
                    }.property("ticket.id").cacheable(),
                    sectionURLPrefixForOrganization: function () {
                        return "%@/organization".fmt(this.get("ticket.href") || "#/tickets/new")
                    }.property("ticket.id").cacheable(),
                    collisionController: Em.computed.singleton("controllers/collision_controller"),
                    hasMultipleOrganizations: function () {
                        return p("multipleOrganizations")
                    }.property().cacheable(),
                    init: function () {
                        this._super.apply(this, arguments), this.get("hasMultipleOrganizations") && this.expirableObjects["ticketWorkspace.ticket"].push("ticket.requester.organizationMemberships");
                        var e = s.create();
                        this.set("state", l.createTicketWorkspaceStateManager()), this.get("state").set("workspace", this), this.set("navigationItemsForOrganization", t("lib/views/organization_info_nav_item").navigationItems(this)), this.set("ticketController", a.create({
                            workspace: this,
                            appsController: this.get("appsController"),
                            collisionController: this.get("collisionController"),
                            ticketCommentStateManager: e
                        })), this.set("incidentsController", c.create({
                            workspace: this
                        })), this.set("userController", f.create()), this.set("organizationController", h.create()), this.set("auditsController", r.create({
                            workspace: this
                        })), this.set("chatController", v), this.set("state.ticketCommentStateManager", e), this.get("state.ticketCommentStateManager").set("workspace", this)
                    },
                    name: Em.computed.oneWay("context.href"),
                    lotusLoading: Em.computed.singleton("lib/lotus/loading"),
                    fetchData: function (e) {
                        var t = e.split("."),
                            n = t[0],
                            r = t[1];
                        return !this.get("ticket.isNew") && !this.get("ticket.isFetched") && i.time("ticket/%@/fetch".fmt(this.get("ticket.id"))), this._super("ticketWorkspace.%@".fmt(n)).done(function () {
                            this.fetchDataForMainState(n, r).done(function () {
                                this.pushToRecent(this.get("ticket")), i.timeEnd("ticket/%@/fetch".fmt(this.get("ticket.id"))), this.trigger("@workspace:fetched"), this.get("lotusLoading").stop()
                            }.bind(this))
                        }.bind(this))
                    },
                    fetchDataForMainState: function (e, t) {
                        return e === "requester" ? (this.set("userController.ticket", this.get("ticket")), this.set("userController.user", this.get("ticket.requester")), this.set("userController.section", t), this.get("userController").fetchData(t)) : e === "organization" ? (this.set("organizationController.ticket", this.get("ticket")), this.set("organizationController.section", t), this.get("organizationController").fetchData(t)) : $.when()
                    },
                    pushToRecent: function (e) {
                        e && !e.get("isNew") && this.get("recentTickets").push(e)
                    },
                    didCreate: function () {
                        this.get("collisionController").openedTicket(this.get("context"))
                    },
                    didActivate: function () {
                        Zd.set("section", this.get("name")), this.set("ticketController.ticket", this.get("context")), this.set("ticketController.isWorking", !1), this.set("ticketController.workspace", this), this.get("view") && this.get("view").reset();
                        var e = this.fetchData(this.get("startState") || "ticket");
                        this.get("currentMainSection") == this.get("state.requester") && this.set("userController.ticket", this.get("ticket")), this.get("currentMainSection") == this.get("state.organization") && this.set("organizationController.ticket", this.get("ticket")), this.get("ticketController").didActivate(), this.set("loading", e), this.get("startState") && (this.goToState(this.get("startState")), this.set("startState", null)), this.get("collisionController").markAsViewing(this.get("context")), this.get("hasChatController") && this.get("state.currentState.name") === "chat" && this.get("chatController").activate(), this._super.apply(this, arguments)
                    },
                    requesterChanged: function () {
                        var e = this.get("ticket.requester"),
                            t = this;
                        e && !e.get("isNew") && $.when(e.get("organizationMemberships").fetch(), e.fetch()).done(function () {
                            t.requesterIsDirty(t.get("ticket")) && t.get("ticket").set("organization", e.get("defaultOrganization"))
                        })
                    }.observes("ticket.requester"),
                    requesterIsDirty: function (e) {
                        return e.get("dirty") && _.include(Em.keys(e.get("dirtyAttributes")), "requester")
                    },
                    didDeactivate: function () {
                        var e = this.get("context.id");
                        this.get("hasChatController") && this.get("chatController").deactivate(), e && this.get("collisionController").markAsNotViewing(this.get("context")), this.get("ticketController").didDeactivate()
                    },
                    hasPlay: Em.computed.bool("origin.filter"),
                    replaceTicket: function (e) {
                        this.resetForTicket(), this.set("active", !1), this.set("context", e.get("forEditing")), Zendesk.Routes.goToHashNow(e.get("href"))
                    },
                    reset: function () {
                        this._super(), this.get("ticketController").reset(), this.get("userController").reset(), this.get("organizationController").reset()
                    },
                    resetForTicket: function () {
                        this.get("ticketController").reset(), this.get("appsController").resetAppsForView(this.get("view"));
                        var e = this.get("context");
                        Em.run.next(function () {
                            !e.get("isSaving") && !e.get("errors") && e.destroyAllCopies()
                        })
                    },
                    refreshTicket: function () {
                        var e = this.get("ticket");
                        e.globalExpire(), e.resetDirtyAttributes(), this.fetchData("ticket").done(_(function () {
                            this.get("auditsController").setAudits()
                        }).bind(this))
                    },
                    ticketDidSave: function () {
                        var e = this.get("ticket"),
                            t = this.get("manager").findByTicket(e);
                        t ? t.refreshTicket() : e.destroyAllCopies()
                    },
                    setupChatController: function () {
                        window.ChatLotus && !this.get("hasChatController") && this.set("chatController", window.ChatLotus.ChatController.create({
                            workspace: this
                        })), Em.run.sync()
                    },
                    hasChatController: function () {
                        return this.get("chatController") && this.get("chatController") !== v
                    }.property("chatController").cacheable(),
                    activateChatPanel: function () {
                        !this.get("hasChatController") && this.setupChatController(), this.get("chatController").activate()
                    },
                    deactivateChatPanel: function () {
                        !this.get("hasChatController") && this.setupChatController(), this.get("chatController").deactivate()
                    },
                    hasChat: function () {
                        return this.get("chatController.hasChat")
                    }.property("chatController.hasChat").cacheable(),
                    hasActivity: function () {
                        var e = this.get("context.comment.body.length"),
                            t = this.get("context.comment.uploadSet.attachments.length"),
                            n = this.get("context.dirty"),
                            r = this.get("hasChat");
                        return !!(e || t || n || r)
                    }.property("context.comment.body", "context.dirty", "context.comment.uploadSet.attachments.@each", "hasChat").cacheable(),
                    shouldShowSubject: function () {
                        return !!Zendesk.ticketFields.byAttributeName("subject") && !this.get("hasChat")
                    }.property("hasChat").volatile(),
                    shouldShowEndChat: function () {
                        return !!this.get("chatController.shouldShowEndChat")
                    }.property("chatController.shouldShowEndChat").cacheable(),
                    shouldShowSubmitButton: function () {
                        return !this.get("ticket.isClosed") && !this.get("shouldShowEndChat")
                    }.property("ticket.isClosed", "shouldShowEndChat").cacheable(),
                    chatProxy: function () {
                        var e = this.get("ticket.chat");
                        if (e) return e.set("workspace", this), Zendesk.ChatProxy.create({
                            chat: e
                        })
                    }.property("ticket.chat").cacheable(),
                    close: function (e, t) {
                        if (this.get("hasActivity") && !t) {
                            var n = u.create({
                                userDidConfirm: function () {
                                    n.hideModal(), this.set("ticket.errors", !1), this.close(e, !0)
                                }.bind(this)
                            }).append();
                            return
                        }
                        this.get("hasChat") && this.get("chatController.chat") && this.get("chatController.chat").end(), e && e(), this.get("collisionController").closedTicket(this.get("context"))
                    }
                });
            n.exports = g
        }
    }), this.require.define({
        "workspaces/ticket_workspace_builder": function (e, t, n) {
            var r = t("workspaces/workspace_builder"),
                i = t("models/organization").create(),
                s = Zd.User.create({
                    organization: i
                }),
                o = Zd.Ticket.create({
                    id: -1,
                    requester: s
                }),
                u = t("workspaces/ticket_workspace"),
                a = r.extend({
                    emptyContext: o,
                    activateWorkspaceSectionViews: function (e) {
                        e.set("userController.everActivated", !0), Em.run.next(function () {
                            e.set("organizationController.everActivated", !0)
                        })
                    },
                    workspaceViewFactory: function () {
                        return t("views/tickets/ticket_workspace_view").create({
                            workspace: null,
                            ticket: null
                        })
                    },
                    resetWorkspace: function (e) {
                        if (!e) return;
                        e.resetForTicket(), e.reset()
                    },
                    constructWorkspaceForContext: function (e) {
                        return u.create({
                            context: e,
                            manager: this.get("wsManager")
                        })
                    }
                });
            n.exports = a
        }
    }), this.require.define({
        "workspaces/user_workspace_builder": function (e, t, n) {
            var r = t("workspaces/workspace_builder"),
                i = t("workspaces/user_workspace"),
                s = t("models/organization").create(),
                o = Zd.User.create({
                    id: -1,
                    organization: s
                }),
                u = r.extend({
                    emptyContext: o,
                    activateWorkspaceSectionViews: function (e) {
                        e.set("userController.everActivated", !0), e.set("organizationController.everActivated", !0)
                    },
                    workspaceViewFactory: function () {
                        return t("views/users/user_workspace_view").create({
                            workspace: null
                        })
                    },
                    resetWorkspace: function (e) {
                        if (!e) return;
                        e.resetForUser(), e.reset()
                    },
                    constructWorkspaceForContext: function (e) {
                        return i.create({
                            context: e,
                            manager: this.get("wsManager")
                        })
                    }
                });
            n.exports = u
        }
    }),
function () {
    var e = require("lib/tracking"),
        t = require("controllers/tab_controller"),
        n = require("workspaces/ticket_workspace_builder"),
        r = require("workspaces/user_workspace_builder"),
        i = require("workspaces/organization_workspace_builder"),
        s = require("workspaces/ticket_workspace"),
        o = ["created", "activated", "deactivated", "destroyed", "fetched"],
        u = function (e, t, n) {
            n = Array.prototype.slice.call(n, 2), t.apply(e, n)
        };
    Zd.WorkspaceManager = Em.StateManager.extend({
        nextTicketController: Em.computed.singleton("controllers/next_ticket_controller"),
        features: require("lib/features").features,
        content: Em.computed.emptyArray(),
        init: function () {
            this._super();
            var e = {
                ticketWorkspace: n.create({
                    wsManager: this
                }),
                userWorkspace: r.create({
                    wsManager: this
                }),
                organizationWorkspace: i.create({
                    wsManager: this
                })
            };
            this.set("builders", e), this.set("tabController", t.create({
                wsManager: this,
                content: []
            })), this.set("originResolver", require("workspaces/origin_resolver").create())
        },
        getBuilderForWorkspace: function (e) {
            return this.get("builders." + e.get("type"))
        },
        getBuilderForContext: function (e) {
            switch (Em.get(e, "resourceName")) {
            case "Ticket":
                return this.get("builders.ticketWorkspace");
            case "User":
                return this.get("builders.userWorkspace");
            case "Organization":
                return this.get("builders.organizationWorkspace")
            }
        },
        tabbedWorkspaces: function () {
            return this.get("content").filterProperty("tabbed", !0)
        }.property("content.@each"),
        activateWorkspaceByHref: function (e) {
            Zd.Routes.goToHash(e.get("href"))
        },
        activateWorkspace: function (t, n, r, i) {
            var s = this.findByContextHref(t);
            return s ? s.get("context") !== t && s.set("context", t) : (e("New Tab", "Lotus-general"), s = this.buildWorkspaceForContext(t), r = r || this.resolveOriginForWorkspace(s), s.set("origin", r), Em.sendEvent(this, "created", s, r), s.didCreate()), s.set("startState", n), i || (this.set("current", s), Em.sendEvent(this, "activated", s)), s
        },
        buildWorkspaceForContext: function (e) {
            if (!e) return;
            var t = this.getBuilderForContext(e),
                n = t.fetchWorkspace();
            return n.get("context") === e ? n.propertyDidChange("context") : n.set("context", e), this.addWorkspace(n), n
        },
        closeWorkspace: function (e, t, n, r) {
            if (!this.hasWorkspace(e)) return;
            var i = function () {
                t && t(), !r && this.activateNextTabbedWorkspace(e), this.removeWorkspace(e)
            }.bind(this);
            e.close(i, n)
        },
        activateNextTabbedWorkspace: function (e) {
            if (!e.get("active")) return;
            var t = this.get("tabbedWorkspaces"),
                n = t.indexOf(e),
                r;
            n === -1 ? r = 0 : r = t[n + 1] ? n + 1 : n - 1;
            var i = t[r];
            i && i.get("href") ? this.activateWorkspaceByHref(i) : Zd.Routes.goToHash(this.defaultNextUrlForWorkspace(e))
        },
        defaultNextUrlForWorkspace: function (e) {
            var t = e.get("origin.url");
            return t ? t : this.get("features.hasUserViews") ? e.get("type") === "userWorkspace" ? "#/user_filters" : "#/filters" : "#/filters"
        },
        addWorkspace: function (e) {
            this.hasWorkspace(e) || (e.get("tabbed") && this.get("tabController").addTabForWorkspace(e), this.get("content").pushObject(e))
        },
        removeCurrentWorkspace: function () {
            var e = this.get("current");
            e && this.removeWorkspace(e)
        },
        removeWorkspace: function (e) {
            if (!this.hasWorkspace(e)) return;
            this.get("content").removeObject(e), e.get("tabbed") && this.get("tabController").removeTabForWorkspace(e);
            var t = this.getBuilderForWorkspace(e);
            t.putWorkspaceBackInPool(e)
        },
        enter: function () {
            this._super()
        },
        exit: function () {
            var e = this.get("current");
            e && this.set("current", null), this._super()
        },
        addWorkspaceListener: function (e, t, n, r) {
            Em.assert("Invalid workspace event: %@".fmt(e), o.contains(e)), Em.addListener(this, e, t, n, r || u)
        },
        current: function (e, t) {
            return arguments.length == 2 && (this.hasWorkspace(t) || t === null ? (this.get("content").setEach("active", !1), t !== null && t.set("active", !0)) : Em.assert("Workspace does not exist", !1)), t
        }.property(),
        ticketWorkspaces: function () {
            return this.get("content").filterProperty("isTicketWorkspace", !0)
        }.property("content.@each").volatile(),
        hasWorkspace: function (e) {
            return this.get("content").contains(e)
        },
        forEachTicketWorkspace: function (e, t) {
            if (typeof e != "function") return;
            this.get("content").forEach(function (n) {
                if (!(n instanceof s)) return;
                e.apply(t, arguments)
            }, t)
        },
        findByContext: function (e) {
            return this.get("content").findProperty("context", e)
        },
        findByContextHref: function (e) {
            return this.get("content").find(function (t) {
                return t.get("context.href") === e.get("href")
            })
        },
        findByContextProperty: function (e, t, n) {
            var r = arguments.length === 2 ? "ticketWorkspace" : e + "Workspace",
                i = "context." + t;
            return this.get("content").filterProperty("type", r).find(function (e) {
                return e.get(i) === n
            })
        },

        findByTicket: function (e) {
            return this.get("ticketWorkspaces").findProperty("ticket", e)
        },
        fetchedData: function (e) {
            Em.sendEvent(this, "fetched", e)
        },
        warmCache: function () {
            this.get("builders.ticketWorkspace").warmCache()
        },
        resolveOriginForWorkspace: function (e) {
            return this.get("originResolver").resolveForWorkspace(e)
        },
        navigateAfterTicketUpdate: function (e) {
            if (!e) return;
            if (e.get("origin.nextUponSubmit")) {
                this.get("nextTicketController").nextTicket();
                return
            }
            var t = e.get("origin.url"),
                n = typeof t == "string",
                r = function () {
                    n && Zd.Routes.goToHash(t)
                };
            this.closeWorkspace(e, r, !0, n)
        },
        browserCloseWarning: function () {
            var e = this.get("ticketWorkspaces").filter(function (e) {
                return e.get("ticket.dirty")
            });
            return e.length > 0 ? I18n.t("txt.browser.on_close.warn_if_dirty") : null
        }.property("ticketWorkspaces.@each.ticket.dirty").volatile()
    }), Zd.set("workspaces", Zd.WorkspaceManager.create({
        content: []
    }))
}(),
function () {
    function a(e, t, n) {
        return $.isArray(n) || (n = [n]), e[t].apply(e, n)
    }

    function f(e, t, n, r, i) {
        r = r || Em.K, Zendesk.Routes.get(e, function () {
            var e = r.call(undefined, this.params),
                s = t();
            i ? i.then(function () {
                a(s, n, e)
            }) : a(s, n, e)
        })
    }

    function l(e, n, r) {
        f(e, function () {
            return t
        }, n, r)
    }

    function c(e) {
        return e === "new" ? Zendesk.get("newTicket") : Zendesk.Ticket.create({
            id: e
        })
    }

    function C(e) {
        return e.get("href")
    }

    function k(e) {
        return e.get("classicHREF")
    }

    function L(e) {
        return "#/" + e
    }
    var e = require("lib/routing/redirect"),
        t = require("states/main").instance(),
        n = require("models/filter"),
        r = require("models/forums/forum"),
        i = require("models/forums/topic"),
        s = require("models/attachment"),
        o = require("models/organization"),
        u = require("lib/profile_tracker");
    l("#/tickets/new", "goToTicket", function (e) {
        var t = Zendesk.Ticket.newTicket();
        return e.requester_id && t.set("requester", Zendesk.User.create({
            id: e.requester_id
        })), t
    }), l("#/tickets/new/:id", "goToTicket", function (e) {
        var t = Zendesk.Ticket.newTicket(e.id);
        return e.requester_id && t.set("requester", Zendesk.User.create({
            id: e.requester_id
        })), t
    }), l("#/tickets/new/:id/requester/:section", "goToNewTicket", function (e) {
        return [e.id, "requester.%@".fmt(e.section)]
    }), l("#/tickets/new/:id/organization/:section", "goToNewTicket", function (e) {
        return [e.id, "organization.%@".fmt(e.section)]
    }), l("#/tickets/:id", "goToTicket", function (e) {
        return [Zendesk.Ticket.create({
            id: e.id
        }), !1]
    }), l("#/tickets/:id/events", "goToTicket", function (e) {
        return [Zendesk.Ticket.create({
            id: e.id
        }), !0]
    }), l("#/tickets/:id/incidents", "goToIncidents", function (e) {
        return [Zendesk.Ticket.create({
            id: e.id
        })]
    }), Zd.Routes.get("#/tickets/:id/requester/:section", function () {
        var e = c(this.params.id);
        Zd.workspaces.activateWorkspace(e.get("forEditing"), "requester.%@".fmt(this.params.section)), u.init("user_profile", "from_ticket"), t.goToState("workspaces")
    }), Zd.Routes.get("#/tickets/:id/organization/:section", function () {
        var e = c(this.params.id);
        Zd.workspaces.activateWorkspace(e.get("forEditing"), "organization.%@".fmt(this.params.section)), u.init("organization_profile", "from_ticket"), t.goToState("workspaces")
    }), l("#/tickets/:id/chat", "goToChat", function (e) {
        return Zendesk.Ticket.create({
            id: e.id
        })
    }), l("#/tickets/new/:id/chat", "goToChat", function (e) {
        return Zendesk.Ticket.newTicket(e.id)
    });
    var h = require("controllers/user_validator");
    Zd.Routes.activateWorkspaceForActiveUser = function (e, t) {
        h.validateUser(e) && t && t()
    }, Zd.Routes.get("#/users/:id/organization/:section", function () {
        var e = Zendesk.User.create({
            id: this.params.id
        });
        Zd.Routes.activateWorkspaceForActiveUser(e, function () {
            Zd.workspaces.activateWorkspace(e, "organization.%@".fmt(this.params.section)), u.init("organization_profile", "from_user"), t.goToState("workspaces")
        }.bind(this))
    }), e("#/users/:id/organization", function (e) {
        return "#/users/%@/organization/tickets".fmt(e.id)
    }), Zd.Routes.get("#/users/new", function () {
        Zendesk.newUserController.newUser({
            previousRoute: g
        })
    });
    var p = $.extend({
        replaceLocation: function (e) {
            /^([^#\/]|$)/.test(e) && (this.has_history ? e = "/" + e : e = "#!/" + e);
            if (e != this.getLocation()) {
                if (!this.has_history) return window.location.replace(e);
                history.replaceState({
                    path: e
                }, window.title, e), this.app.trigger("location-changed")
            }
        }
    }, new Sammy.DefaultLocationProxy(Zendesk.Routes));
    Zendesk.Routes.setLocationProxy(p), Zendesk.Routes.helpers({
        replaceLocation: function (e) {
            this.app._location_proxy.replaceLocation(e)
        }
    });
    var d = "#/dashboard",
        v = "#/launchpad",
        m = "#/search",
        g = "#/admin/people",
        y = "#/admin/apps",
        b = "/home",
        w = "/access/logout",
        E = "https://support.zendesk.com/forums/20677323-agent-guide",
        S = "#/reporting",
        x = "#/filters",
        T = "#/user_filters";
    Zendesk.Routes.staticPaths = Em.Object.create({
        dashboardURL: d,
        launchpadURL: v,
        searchURL: m,
        adminURL: g,
        manageAppsURL: y,
        classicURL: b,
        signoutURL: w,
        helpURL: E,
        reportingURL: S,
        filterURL: x,
        userFilterURL: T
    }), Zendesk.Routes.goToHash = function (e) {
        Em.run.next(function () {
            Zendesk.Routes.goToHashNow(e)
        })
    }, Zendesk.Routes.goToHashNow = function (e) {
        window.location.hash = window.location.hash, e = e || "", /^#/.test(e) || (e = "#" + e), window.location.hash = e
    }, l("#/recent", "goToRecent"), l("#/bookmarks", "goToBookmarks"), l("#/reporting", "goToReporting"), l(/#\/reporting(\/.*)/, "goToReporting");
    var N = {
        facebook_auth: "#/admin/facebook/facebook_auth",
        salesforce_auth: "#/admin/extensions/salesforce_auth",
        twitter_auth: "#/admin/twitter/twitter_auth",
        twitter_reauth: "#/admin/twitter/twitter_reauth"
    };
    Zendesk.Routes.mapExternalAuthentication = function (e, t) {
        e.replaceLocation(N[t] || d)
    }, Zendesk.Routes.get("#/", function () {
        Zendesk.Routes.mapExternalAuthentication(this, $.queryParameters().redirect)
    }), Zendesk.Routes.get("#_=_", function () {
        Zendesk.Routes.mapExternalAuthentication(this, $.queryParameters().redirect)
    });
    var A = {};
    A[n] = C, A[Zendesk.Ticket] = C, A[Zendesk.IncidentTicket] = C, A[Zendesk.User] = C, A[o] = C, A[s] = function (e) {
        return e.get("contentUrl")
    }, A[r] = k, A[i] = k, Zendesk.Helpers.linkTo.urlFor = function (e) {
        if (Em.typeOf(e) === "string") return e;
        var t = A[e.constructor] || L;
        return t(e)
    }
}(),
function (e) {
    var t = e.Contra = {}, n = 65,
        r = 66,
        i = 37,
        s = 38,
        o = 39,
        u = 40,
        a = [],
        f = [s, s, u, u, i, o, i, o, r, n],
        l = 0;
    t.check = function (e) {
        f[l] === e.keyCode ? l++ : l = 0, l === f.length && (t.win(), l = 0)
    }, t.win = function () {
        var e = document.getElementsByTagName("body")[0];
        e.className = e.className + " contra";
        for (var t = 0, n = a.length; t < n; t++) a[t].call()
    }, t.initialize = function () {
        document.addEventListener && document.addEventListener("keyup", t.check)
    }, t.addHandler = function (e) {
        a.push(e)
    }, t.initialize()
}(this),
function () {
    function require(e, t) {
        var n = require.resolve(e),
            r = require.modules[n];
        if (!r) throw new Error('failed to require "' + e + '" from ' + t);
        return r.exports || (r.exports = {}, r.call(r.exports, r, r.exports, require.relative(n), global)), r.exports
    }
    var global = this;
    require.modules = {}, require.resolve = function (e) {
        var t = e,
            n = e + ".js",
            r = e + "/index.js";
        return require.modules[n] && n || require.modules[r] && r || t
    }, require.relative = function (e) {
        return function (t) {
            if ("debug" == t) return debug;
            if ("." != t.charAt(0)) return require(t);
            var n = e.split("/"),
                r = t.split("/");
            n.pop();
            for (var i = 0; i < r.length; i++) {
                var s = r[i];
                ".." == s ? n.pop() : "." != s && n.push(s)
            }
            return require(n.join("/"), e)
        }
    }, require.modules.jquery = {
        exports: window.jQuery
    }, require.modules["jquery.env"] = {
        exports: window.jQuery
    }, require.modules.ember = {
        exports: window.Ember
    }, require.modules.window = {
        exports: window
    }, require.modules.zd = {
        exports: window.Zd
    }, require.modules.underscore = {
        exports: window._
    }, require.modules.i18n = {
        exports: window.I18n
    }, require.modules.handlebars = {
        exports: window.Handlebars
    }, require.modules["ext/extends.js"] = function (e, t, n, r) {
        var i = {}.hasOwnProperty,
            s = function (e, t) {
                function r() {
                    this.constructor = e
                }
                for (var n in t) i.call(t, n) && (e[n] = t[n]);
                return r.prototype = t.prototype, e.prototype = new r, e.__super__ = t.prototype, e
            };
        e.exports = s
    }, require.modules["index.js"] = function (e, t, n, r) {
        function f() {
            u.Views = {
                App: n("./views/app")
            }, u.router = a.global, a.root("reporting"), u.freeze(), u.settings = i.Object.create({
                hasReporting: !1,
                hasCSV: !1,
                hasAnalytics: !1,
                hasForumAnalytics: !1,
                hasSearchAnalytics: !1
            }), u.router.on("ready", function (e) {
                u.settings.set("hasReporting", !0)
            }), u.router.on("reportingFull", function () {
                u.settings.set("hasCSV", !0)
            }), u.router.on("hasAnalytics", function () {
                u.settings.set("hasAnalytics", !0)
            }), u.router.on("hasForumAnalytics", function () {
                u.settings.set("hasForumAnalytics", !0)
            }), u.router.on("hasSearchAnalytics", function () {
                u.settings.set("hasSearchAnalytics", !0)
            })
        }

        function l() {
            delete u.Views, delete u.router, delete u.settings
        }
        var i = n("ember"),
            s = n("window"),
            o = n("zd"),
            u = {}, a = n("./lib/router");
        n("./vendor/jquery.numberformatter"), u.initialize = f, u.deinitialize = l;
        var c = null;
        u.freeze = function (e) {
            if (c) return;
            if (e) c = e;
            else {
                var t = (new Date).valueOf();
                c = parseInt(t / 1e3, 10)
            }
        }, u.time = function () {
            return c
        }, u.reset = function () {
            c = null
        }, typeof process != "undefined" && process && process.env && process.env.REPORTING_SPEC && (u.require = n, u.preload = function () {
            n("./views/overview"), n("./views/leaderboard"), n("./views/forum"), n("./views/search"), n("./views/reporting/reporting")
        }), e.exports = u
    }, require.modules["lib/average.js"] = function (e, t, n, r) {
        var i = n("./latest"),
            s = n("../ext/extends"),
            o = n("../index");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype._headerKey = "X-Average-Path", t.prototype._actionName = "average", t.prototype._defaultOptions = function () {
                var e = {
                    start: this._start(),
                    end: o.time()
                };
                return e
            }, t.prototype.total = function () {
                if (!this.cache || this.cache.length === 0) return;
                var e = this.cache[0],
                    t = e.value.value,
                    n = this._valueObject();
                return new n(t)
            }, t
        }(i)
    }, require.modules["lib/average_graph_data.js"] = function (e, t, n, r) {
        var i = n("./graph_data"),
            s = n("../ext/extends");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype._header = function () {
                return {
                    "X-AverageGraphData-Path": this.options.path
                }
            }, t.prototype._convertToSeriesData = function (e) {
                if (!e.data) return [];
                var t = e.counts,
                    n = [],
                    r = this._valueObject();
                return e.data.forEach(function (e, i) {
                    var s = t[i],
                        o = e[0],
                        u = e[1];
                    if (u === undefined || u === null) u = 0;
                    u = new r(u), n.push({
                        x: o,
                        y: u.y(),
                        value: u
                    })
                }), n
            }, t.prototype.total = function () {
                if (!this.cache || this.cache.length <= 1) return;
                var e = this.cache.map(function (e) {
                    return e.value.value
                }),
                    t = 0;
                e.forEach(function (e) {
                    t += e
                });
                var n = this._valueObject();
                return new n(t / e.length)
            }, t
        }(i)
    }, require.modules["lib/csv_url_builder.js"] = function (e, t, n, r) {
        var i = n("./query"),
            s = n("../ext/extends");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype.url = function () {
                return "/csv_exports/search_stats?" + this._query()
            }, t
        }(i)
    }, require.modules["lib/graph_data.js"] = function (e, t, n, r) {
        var i = n("jquery.env"),
            s = n("./integer"),
            o = n("./query"),
            u = n("../ext/extends");
        e.exports = function (e) {
            function t(e, n) {
                return this.name = e, t.__super__.constructor.apply(this, [n])
            }
            return u(t, e), t.prototype._header = function () {
                return {
                    "X-GraphData-Path": this.options.path
                }
            }, t.prototype.fetch = function () {
                var e = i.Deferred(),
                    t = this;
                return this.cache !== undefined ? e.resolve(this.cache) : i.ajax({
                    url: "/api/v1/stats/" + this._action() + "/" + this._objectType() + "/" + this._objectId() + "/" + this._assocName() + "/" + this.name + "?" + this._query(),
                    dataType: "json",
                    headers: this._header()
                }).done(function (n) {
                    var r = this._convertToSeriesData(n);
                    this.options.raw && (r = n), t.cache = r, e.resolve(r, this.name, n)
                }.bind(this)).fail(function () {
                    e.reject()
                }), this.callback && e.done(this.callback), e.promise()
            }, t.prototype.callback = function (e) {
                this.callback = e
            }, t.prototype.setOptions = function (e) {
                i.extend(this.options, e), e.start || (this.options.start = null), e.end || (this.options.end = null)
            }, t.prototype.refetch = function () {
                return this.cache = undefined, this.fetch(this.callback)
            }, t.prototype._action = function () {
                return this.options && this.options.action || "graph_data"
            }, t.prototype._objectType = function () {
                return this.options && this.options.objectType || "account"
            }, t.prototype._objectId = function () {
                return this.options && this.options.objectId || "0"
            }, t.prototype._assocName = function () {
                return this.options && this.options.assocName || "ticket_stats_by_account"
            }, t.prototype._valueObject = function () {
                return this.options && this.options.value || s
            }, t.prototype._convertToSeriesData = function (e) {
                if (this.options && this.options.raw) return e;
                if (!e.data) return [];
                var t = [],
                    n = null;
                this.options.end && (n = new Date(this.options.end * 1e3));
                var r = this._valueObject();
                return e.data.forEach(function (e) {
                    var i = e[0],
                        s = e[1];
                    if (s === undefined || s === null) s = 0;
                    if (!n || new Date(i) <= n) s = new r(
                        s), t.push({
                        x: i,
                        y: s.y(),
                        value: s
                    })
                }), t
            }, t.prototype.lastValue = function () {
                if (!this.cache || this.cache.length <= 1) return;
                var e = this.cache[this.cache.length - 1],
                    t = e[1];
                return t
            }, t.prototype.total = function () {
                if (!this.cache || this.cache.length <= 1) return;
                if (this.cache.value) return this.cache.value;
                var e = this.cache.map(function (e) {
                    return e.value.value
                }),
                    t = 0;
                e.forEach(function (e) {
                    t += e
                });
                var n = this._valueObject();
                return new n(t)
            }, t
        }(o)
    }, require.modules["lib/hours.js"] = function (e, t, n, r) {
        function u(e) {
            this.value = e, this.hours = Math.round(e / 3600 * 10) / 10
        }
        var i = n("jquery.env"),
            s = n("zd"),
            o = n("i18n");
        e.exports = u, u.prototype.y = function () {
            return this.hours
        }, u.prototype.localize = function () {
            return o.t("txt.views.reporting.x_hrs_plain", {
                hours: i.localizeNumber(this.hours, "average")
            })
        }
    }, require.modules["lib/integer.js"] = function (e, t, n, r) {
        function s(e) {
            this.value = e
        }
        var i = n("jquery.env");
        e.exports = s, s.prototype.y = function () {
            return this.value
        }, s.prototype.localize = function () {
            return i.localizeNumber(this.value, "total")
        }
    }, require.modules["lib/latest.js"] = function (e, t, n, r) {
        var i = n("./graph_data"),
            s = n("../ext/extends");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype._headerKey = "X-Latest-Path", t.prototype._actionName = "latest", t.prototype._header = function () {
                var e = {};
                return e[this._headerKey] = this.options.path, e
            }, t.prototype._action = function () {
                return this._actionName
            }, t.prototype._convertToSeriesData = function (e) {
                if (this.options && this.options.raw) return e;
                var t = this._valueObject();
                return t ? [{
                    y: e,
                    value: new t(e)
                }] : [e]
            }, t
        }(i)
    }, require.modules["lib/packager.js"] = function (e, t, n, r) {
        function h() {}
        var i = n("ember"),
            s = n("jquery.env"),
            o = n("zd"),
            u = n("../vendor/miniee"),
            a = n("window").require,
            f = n("./router"),
            l = function (e) {
                var t = a("lib/current_account"),
                    n = t.get("planType"),
                    r = o.currentUser,
                    i = r && r.get("role");
                if (!n || !i) return;
                var s = [
                    function (n) {
                        n({
                            hasReporting: t.getPath("settings.lotus_reporting"),
                            hasAdvancedAnalytics: t.getPath("settings.gooddata_advanced_analytics")
                        })
                    },
                    function (t) {
                        (n === "Free" || n === "Duo") && t({
                            hasReporting: !1
                        })
                    },
                    function (t) {
                        i === "admin" && t({
                            reportingFull: !0,
                            hasAdvancedAnalytics: !0
                        }), i === "agent" && (o.currentUser.getPath("custom_role.configuration.ticket_access") === "all" || o.currentUser.getPath("custom_role.configuration.report_access") !== "none") && t({
                            hasAdvancedAnalytics: !0
                        })
                    },
                    function (t) {
                        if (n === "ExtraLarge") {
                            var r = o.currentUser.getPath("custom_role.configuration.report_access");
                            if (!r) return;
                            var i = r === "full",
                                s = r === "readonly" || r === "full";
                            t({
                                hasReporting: s,
                                reportingFull: i
                            })
                        }
                    },
                    function (t) {
                        if (n === "ExtraLarge") return;
                        if (!r) return;
                        var i = r.ticket_restriction,
                            s = !i || i === "all";
                        t({
                            hasReporting: s,
                            reportingFull: s
                        })
                    },
                    function (n) {
                        n({
                            hasForumAnalytics: t.getPath("settings.forum_statistics"),
                            hasSearchAnalytics: t.getPath("settings.search_statistics")
                        })
                    },
                    function (n) {
                        n({
                            hasWebPortalEnabled: t.getPath("helpCenterSettings.webPortalEnabled")
                        })
                    }
                ],
                    u = {}, f = function (e) {
                        for (var t in e) u[t] !== undefined ? u[t] = u[t] && e[t] : u[t] = e[t]
                    };
                for (var l = 0; l < s.length; l++) {
                    var c = s[l];
                    c(f)
                }
                e(u)
            }, c = 0;
        h.prototype.sync = function () {
            if (c === 1) return;
            c = 1;
            var e = this,
                t = function (t) {
                    c = 2, e.emit(t)
                };
            l(function (e) {
                e.hasReporting && t("hasReporting"), e.hasForumAnalytics && e.hasWebPortalEnabled && (t("hasForumAnalytics"), f.global.emit("hasForumAnalytics")), e.hasSearchAnalytics && (t("hasAnalytics"), f.global.emit("hasAnalytics"), e.hasWebPortalEnabled && (t("hasSearchAnalytics"), f.global.emit("hasSearchAnalytics"))), e.hasAdvancedAnalytics && (t("hasAdvancedAnalytics"), f.global.emit("hasAdvancedAnalytics")), e.reportingFull && f.global.emit("reportingFull")
            })
        }, u.mixin(h);
        var p;
        h.instance = function () {
            return p || (p = new h), p
        }, e.exports = h
    }, require.modules["lib/percentage.js"] = function (e, t, n, r) {
        function s(e) {
            this.value = e
        }
        var i = n("jquery.env");
        e.exports = s, s.prototype.y = function () {
            return this.value * 100
        }, s.prototype.localize = function () {
            var e = i.localizeNumber(this.value, "percent");
            return e === "%" && (e = "0%"), e
        }
    }, require.modules["lib/query.js"] = function (e, t, n, r) {
        var i = n("jquery.env"),
            s = n("../index");
        e.exports = function () {
            function e(e) {
                this.options = e || {}
            }
            return e.prototype._dateRange = function () {
                var e = {}, t = this.options.start,
                    n = this.options.end;
                return t !== undefined && t !== null && (e.start = parseInt(t, 10)), n !== undefined && n !== null && (e.end = parseInt(n, 10)), e
            }, e.prototype._start = function () {
                if (this.options.start == null) {
                    var e = this._now();
                    return e - this._interval() * this._intervals()
                }
                return this.options.start
            }, e.prototype._now = function () {
                return s.time()
            }, e.prototype._intervals = function () {
                return this.options && this.options.intervals || 30
            }, e.prototype._interval = function () {
                return this.options && this.options.interval || 86400
            }, e.prototype._defaultOptions = function () {
                var e = {
                    start: this._start(),
                    interval: this._interval()
                };
                return this.options.end && (e.end = this.options.end), e
            }, e.prototype._query = function () {
                var e = this.options && this.options.rollup,
                    t = this.options && this.options.query || {}, n = this._dateRange();
                if (t) {
                    i.extend(t, this._defaultOptions(), n);
                    if (e) {
                        var r = this._now();
                        t.interval = this._interval() * this._intervals(), t.start = r - t.interval
                    }
                }
                return i.param(t)
            }, e
        }()
    }, require.modules["lib/refresh.js"] = function (e, t, n, r) {
        var i = n("underscore"),
            s = n("jquery.env"),
            o = n("window");
        e.exports = i.throttle(function () {
            s(o).trigger("resize")
        }, 500)
    }, require.modules["lib/router.js"] = function (e, t, n, r) {
        var i = n("jquery.env"),
            s = n("../vendor/miniee"),
            o = n("zd"),
            u = function () {};
        s.mixin(u);
        var r = new u,
            a, f = function () {
                function e(e, t) {
                    this.params = e.params.bind(e), this.emit = e.emit.bind(e), this.update = function () {
                        var n = Array.prototype.slice.apply(arguments);
                        n.unshift(t), e.update.apply(e, n)
                    }, this.sync = e.sync.bind(e), this.toHash = e.toHash.bind(e), this.on = function (n, r) {
                        return e.on(n, function (n) {
                            if (t === n) return;
                            r.apply(e, arguments)
                        }), e
                    }, this.ready = function (t) {
                        var n = !1;
                        e.ready ? (t.call(e), n = !0) : e.on("ready", function () {
                            if (n) return;
                            t.call(e), n = !0
                        })
                    }
                }
                return e
            }(),
            l = function () {
                function e(t) {
                    this.root = t, this.ready = !1;
                    var n = {
                        period: 0
                    }, s = this,
                        u = function (e) {
                            var o = e.params.splat[0],
                                u = o.split("/"),
                                a = {};
                            for (var f = 0; f < u.length; f++) {
                                var l = u[f];
                                if (l.length > 0) {
                                    l = l.split(":");
                                    var c = l[0],
                                        h = l[1];
                                    h.indexOf(",") > -1 ? a[c] = h.split(",") : a[c] = h
                                }
                            }
                            i.extend(n, a), r.emit("change", t), s.emit("ready"), s.ready = !0, s.update(t, n)
                        };
                    this.base = function () {
                        var e;
                        return a ? e = "/%@/%@".fmt(a, t) : e = "/%@".fmt(t), e
                    }, a && o.Routes.get("#/%@$".fmt(a), function (t) {
                        var n = e.forPath("overview");
                        t.redirect("#%@".fmt(n.toHash()))
                    }), o.Routes.get("#%@$".fmt(this.base()), function (e) {
                        s.update(t, n), e.redirect("#%@".fmt(s.toHash()))
                    }), o.Routes.get("#%@/(.*)".fmt(this.base()), u);
                    var f = function (e) {
                        var t = typeof e;
                        return t === "string" ? e : JSON.stringify(e)
                    }, l = function (e) {
                            var t = [];
                            for (var r in e) {
                                var i = f(n[r]),
                                    s = f(e[r]);
                                i != s && t.push(r)
                            }
                            return t
                        };
                    this.update = function (e, t, r) {
                        var s = l(t);
                        if (s.length === 0) return;
                        i.extend(n, t), this.emit("change", e, r, s)
                    }, this.sync = function () {
                        o.Routes.goToHash(this.toHash())
                    }, this.toHash = function () {
                        var e = [];
                        for (var t in n) e.push("%@:%@".fmt(t, n[t]));
                        return this.base() + "/" + e.join("/")
                    }, this.params = function () {
                        return i.extend({}, n)
                    }
                }
                return e
            }();
        s.mixin(l);
        var c = {};
        l.register = function (e) {
            return c[e] = new l(e), c[e]
        }, l.rootFor = function (e) {
            return e.split(".")[0]
        }, l.forPath = function (e) {
            var t = l.rootFor(e),
                n = c[t];
            return new f(n, e)
        }, l.root = function (e) {
            a = e
        }, l.global = r, r.sync = function () {
            if (window.location.hash.match("^#/reporting/?$")) {
                var e = l.forPath("overview");
                e.sync()
            }
        }, e.exports = l
    }, require.modules["lib/small_percentage.js"] = function (e, t, n, r) {
        function s(e) {
            this.value = e
        }
        var i = n("jquery.env");
        e.exports = s, s.prototype.y = function () {
            return this.value * 100
        }, s.prototype.localize = function () {
            return i.localizeNumber(this.value, "small-percent")
        }
    }, require.modules["lib/stats_forum_entry.js"] = function (e, t, n, r) {
        var i = n("window").require,
            s = i("lib/computed").oneWay,
            o = n("ember"),
            u = n("zd"),
            a = n("i18n");
        u.StatsForumEntry = o.Object.extend({
            id: null,
            statsValue: null,
            title: s("forumEntry.title"),
            submitter: s("forumEntry.submitter"),
            createdAt: s("forumEntry.created_at_formatted"),
            postsCount: s("forumEntry.posts_count"),
            forumTitle: s("forumEntry.forum.title"),
            link: function () {
                return "/entries/" + this.get("id")
            }.property("id"),
            forumEntry: function () {
                return u.ForumEntry.create({
                    id: this.get("id")
                })
            }.property("id"),
            createdAtFormatted: function () {
                var e = this.getPath("forumEntry.created_at");
                return a.strftime(e, a.t("time.formats.default"))
            }.property("forumEntry.created_at")
        }), e.exports = u.StatsForumEntry
    }, require.modules["lib/stats_search.js"] = function (e, t, n, r) {
        var i = n("jquery.env"),
            s = function () {
                function e(e, t) {
                    this.name = e, this.options = t
                }
                return e.prototype.fetch = function (e) {
                    var t = i.Deferred(),
                        n = this;
                    return this.cache !== undefined ? t.resolve(this.cache) : i.ajax({
                        url: "/api/v1/stats/search/account/" + this.name + "?" + this._query(),
                        dataType: "json",
                        headers: {
                            "X-StatsSearch-Path": this.options.path
                        }
                    }).done(function (e) {
                        n.cache = e, t.resolve(e, this.name)
                    }.bind(this)).fail(function () {
                        t.reject()
                    }), e = e || this.callback, e && (this.callback = e, t.done(e)), t.promise()
                }, e.prototype.callback = function (e) {
                    this.callback = e
                }, e.prototype.setOptions = function (e) {
                    i.extend(this.options, e)
                }, e.prototype.refetch = function () {
                    return this.cache = undefined, this.fetch(this.callback)
                }, e.prototype._query = function () {
                    var e = {
                        per_page: this._perPage(),
                        duration: this._duration(),
                        start: this._start(),
                        end: this._end()
                    }, t = this.options && this.options.query;
                    return t && i.extend(t, e), i.param(t)
                }, e.prototype.filter = function (e) {

                    e && (this.filterCallback = e)
                }, e.prototype._start = function () {
                    return this.options.start
                }, e.prototype._end = function () {
                    return this.options.end
                }, e.prototype._perPage = function () {
                    return this.options && this.options.perPage || 10
                }, e.prototype._duration = function () {
                    return this._intervals() * this._interval()
                }, e.prototype._intervals = function () {
                    return this.options && this.options.intervals || 30
                }, e.prototype._interval = function () {
                    return this.options && this.options.interval || 86400
                }, e
            }();
        e.exports = s
    }, require.modules["lib/summation.js"] = function (e, t, n, r) {
        var i = n("./latest"),
            s = n("../ext/extends");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype._headerKey = "X-Summation-Path", t.prototype._actionName = "summation", t.prototype.total = function () {
                if (!this.cache || this.cache.length === 0) return;
                var e = this.cache[0],
                    t = e.value.value,
                    n = this._valueObject();
                return new n(t)
            }, t
        }(i)
    }, require.modules["lib/survey_response.js"] = function (e, t, n, r) {
        var i = n("zd"),
            s = n("jquery.env"),
            o = n("../vendor/miniee"),
            u = n("./router"),
            a = function () {
                function o() {}
                var e = [],
                    t = {}, n = [],
                    r;
                o.prototype.ready = function (i) {
                    if (r === "fetched") return i(t, n.length);
                    r !== "fetching" ? (e.push(i), this.fetch()) : e.push(i)
                };
                var u = function (t, n) {
                    for (var i = 0; i < e.length; i++) {
                        var s = e[i];
                        s(t, n)
                    }
                    e = [], r = "fetched"
                }, a = 1,
                    f = function () {
                        if (a < 3) {
                            a++;
                            return
                        }
                        u(t, n.length)
                    }, l = function (e, r) {
                        r ? s.ajax({
                            url: "/api/v1/stats/benchmarking/%@/%@".fmt(e, r),
                            dataType: "json"
                        }).done(function (n) {
                            t[e] = n, f()
                        }) : n.push(e)
                    }, c = function () {
                        if (n.length < 1) return;
                        s.ajax({
                            url: "/api/v1/stats/benchmarking/industry/overall",
                            dataType: "json"
                        }).done(function (e) {
                            for (var r = 0; r < n.length; r++) {
                                var i = n[r];
                                t[i] = e, f()
                            }
                        })
                    };
                return o.prototype.fetch = function () {
                    r = "fetching";
                    var e = i.AccountSurveyResponse.create();
                    e.fetch().done(function () {
                        e = e.toJSON(), e.survey_response && (e = e.survey_response), l("industry", e.industry), l("target_audience", e.target_audience), l("employee_count", e.employee_count), c()
                    })
                }, o
            }();
        e.exports = a
    }, require.modules["lib/templates.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../index");
        e.exports = {
            require: function (e) {
                return typeof process == "undefined" ? n("../templates/%@".fmt(e)) : typeof process != "undefined" && process && process.env && process.env.REPORTING_SPEC_BROWSER ? s.require("./templates/%@".fmt(e)) : i.Handlebars.precompile("unsupported")
            }
        }
    }, require.modules["lib/toggle_child.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.Mixin.create({
                isVisibleBinding: "isActivated",
                isActivated: function () {
                    return this.getPath("parentView.activeName") == this.get("name")
                }.property("parentView.activeName"),
                whenActivated: function () {},
                _didToggle: function () {
                    this.get("isActivated") && this.whenActivated()
                }.observes("isActivated")
            });
        e.exports = s
    }, require.modules["lib/toggle_parent.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.Mixin.create({
                setActiveClass: function (e) {
                    var t = e.get("name"),
                        n = e.get("content");
                    n && (this.set("group", n.id), this.set("group_name", n.name));
                    if (e.get("sort")) {
                        this.setSort(e);
                        return
                    }
                    t == this.get("activeName") ? this.setStatusQuo() : this.set("statusQuo", !1), this.set("activeName", t), this.activeNameDidChange && this.activeNameDidChange.call(this, t)
                },
                setSort: function (e) {
                    this.get("sort") == e.name ? this.set("desc", !this.get("desc")) : (this.set("sort", e.name), this.set("desc", !0))
                },
                setStatusQuo: function () {
                    this.get("statusQuo") ? this.set("statusQuo", this.get("statusQuo") + 1) : this.set("statusQuo", 1)
                }
            });
        e.exports = s
    }, require.modules["lib/toggle_parent_routing.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("./router"),
            o = i.Mixin.create({
                defaultTopic: function () {
                    for (var e in this.get("topicText")) return e
                },
                init: function () {
                    this._super(), this.set("routerChanged", 0);
                    var e = s.forPath(this.get("path")),
                        t = this;
                    e.ready(function () {
                        var n = e.params(),
                            r = n && n.selected || t.defaultTopic();
                        r && r.constructor === String && r.length > 0 && t.set("activeName", r), e.on("change", function (n) {
                            t.set("routerChanged", t.get("routerChanged") + 1), i.run.next(t, function () {
                                var n = e.params(),
                                    r = n && n.selected;
                                r && r.constructor === String && r.length > 0 ? t.set("activeName", r) : t.set("activeName", null)
                            })
                        })
                    })
                }
            });
        e.exports = o
    }, require.modules["lib/top_n.js"] = function (e, t, n, r) {
        var i = n("./graph_data"),
            s = n("../ext/extends"),
            o = n("../index");
        e.exports = function (e) {
            function t() {
                return t.__super__.constructor.apply(this, arguments)
            }
            return s(t, e), t.prototype._header = function () {
                return {
                    "X-TopN-Path": this.options.path
                }
            }, t.prototype._defaultOptions = function () {
                var e = {
                    start: this._start(),
                    end: o.time()
                };
                return e
            }, t.prototype._action = function () {
                return "top_n"
            }, t
        }(i)
    }, require.modules["lib/via_types.js"] = function (e, t, n, r) {
        var i = n("i18n"),
            s = {
                0: "web_form",
                1: "mail",
                2: "phone",
                3: "walk_in",
                4: "mail",
                5: "web_service",
                6: "forum",
                7: "instant_messenger",
                8: "rule",
                9: "linked_problem",
                10: "group_deletion",
                11: "user_change",
                12: "user_deletion",
                13: "group_change",
                14: "resource_push",
                15: "iphone",
                16: "get_satisfaction",
                17: "dropbox",
                18: "jira_widget",
                19: "merge",
                20: "batch",
                21: "recovered_from_suspended_tickets",
                22: "automatic_solution_suggestions",
                23: "twitter_favorite",
                24: "topic",
                25: "user_merge",
                26: "twitter_dm",
                27: "closed_ticket",
                28: "logmein_rescue",
                29: "chat",
                30: "twitter",
                31: "ticket_sharing",
                32: "macro_reference",
                33: "voicemail",
                34: "phone_call_inbound",
                35: "phone_call_outbound",
                36: "blog",
                37: "text_message",
                38: "facebook_post",
                39: "import",
                40: "github",
                41: "facebook_message",
                42: "lotus",
                43: "monitor_event"
            };
        e.exports = {
            translate: function (e) {
                var t = e.match(/created_count_via_([0-9]+)/);
                if (t) {
                    var n = parseInt(t[1], 10);
                    return i.t("txt.via_types.%@".fmt(s[n]))
                }
                return e === "other" ? i.t("txt.views.reporting.overview_pane.tickets_by_channel_widget.other") : "Missing translation: " + e
            }
        }
    }, require.modules["mixins/button_support.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.Mixin.create(i.TargetActionSupport, {
                tagName: "button",
                attributeBindings: ["type", "disabled", "href", "tabindex"],
                disabled: !1,
                propagateEvents: !1,
                type: function (e, t) {
                    var n = this.get("tagName");
                    t !== undefined && (this._type = t);
                    if (this._type !== undefined) return this._type;
                    if (n === "input" || n === "button") return "button"
                }.property("tagName"),
                href: function () {
                    return this.get("tagName") === "a" ? "#" : null
                }.property("tagName"),
                mouseDown: function () {
                    return this.get("disabled") || (this.set("isActive", !0), this._mouseDown = !0, this._mouseEntered = !0), this.get("propagateEvents")
                },
                mouseLeave: function () {
                    this._mouseDown && (this.set("isActive", !1), this._mouseEntered = !1)
                },
                mouseEnter: function () {
                    this._mouseDown && (this.set("isActive", !0), this._mouseEntered = !0)
                },
                mouseUp: function () {
                    return this.get("isActive") && (this.triggerAction(), this.set("isActive", !1)), this._mouseDown = !1, this._mouseEntered = !1, this.get("propagateEvents")
                },
                keyDown: function (e) {
                    (e.keyCode === 13 || e.keyCode === 32) && this.mouseDown()
                },
                keyUp: function (e) {
                    (e.keyCode === 13 || e.keyCode === 32) && this.mouseUp()
                }
            });
        e.exports = s
    }, require.modules["vendor/highcharts.js"] = function (e, t, n, r) {
        function i() {
            (function () {
                function Et(e, t) {
                    var n;
                    e || (e = {});
                    for (n in t) e[n] = t[n];
                    return e
                }

                function St() {
                    var e = 0,
                        t = arguments,
                        n = t.length,
                        r = {};
                    for (; e < n; e++) r[t[e++]] = t[e];
                    return r
                }

                function xt(e, t) {
                    return parseInt(e, t || 10)
                }

                function Tt(e) {
                    return typeof e == "string"
                }

                function Nt(e) {
                    return typeof e == "object"
                }

                function Ct(e) {
                    return Object.prototype.toString.call(e) === "[object Array]"
                }

                function kt(e) {
                    return typeof e == "number"
                }

                function Lt(e) {
                    return r.log(e) / r.LN10
                }

                function At(e) {
                    return r.pow(10, e)
                }

                function Ot(e, t) {
                    var n = e.length;
                    while (n--)
                        if (e[n] === t) {
                            e.splice(n, 1);
                            break
                        }
                }

                function Mt(t) {
                    return t !== e && t !== null
                }

                function _t(e, t, n) {
                    var r, i = "setAttribute",
                        s;
                    if (Tt(t)) Mt(n) ? e[i](t, n) : e && e.getAttribute && (s = e.getAttribute(t));
                    else if (Mt(t) && Nt(t))
                        for (r in t) e[i](r, t[r]);
                    return s
                }

                function Dt(e) {
                    return Ct(e) ? e : [e]
                }

                function Pt() {
                    var e = arguments,
                        t, n, r = e.length;
                    for (t = 0; t < r; t++) {
                        n = e[t];
                        if (typeof n != "undefined" && n !== null) return n
                    }
                }

                function Ht(t, n) {
                    m && n && n.opacity !== e && (n.filter = "alpha(opacity=" + n.opacity * 100 + ")"), Et(t.style, n)
                }

                function Bt(e, n, r, i, s) {
                    var o = t.createElement(e);
                    return n && Et(o, n), s && Ht(o, {
                        padding: 0,
                        border: U,
                        margin: 0
                    }), r && Ht(o, r), i && i.appendChild(o), o
                }

                function jt(e, t) {
                    var n = function () {};
                    return n.prototype = new e, Et(n.prototype, t), n
                }

                function Ft(e) {
                    return e = (e || 0).toString(), e.indexOf(".") > -1 ? e.split(".")[1].length : 0
                }

                function It(e, t, n, r) {
                    var i = A.lang,
                        s = e,
                        o = t === -1 ? Ft(e) : isNaN(t = f(t)) ? 2 : t,
                        u = n === undefined ? i.decimalPoint : n,
                        a = r === undefined ? i.thousandsSep : r,
                        l = s < 0 ? "-" : "",
                        c = String(xt(s = f(+s || 0).toFixed(o))),
                        h = c.length > 3 ? c.length % 3 : 0;
                    return l + (h ? c.substr(0, h) + a : "") + c.substr(h).replace(/(\d{3})(?=\d)/g, "$1" + a) + (o ? u + f(s - c).toFixed(o).slice(2) : "")
                }

                function qt(e, t) {
                    return (new Array((t || 2) + 1 - String(e).length)).join(0) + e
                }

                function Rt(e, t, n) {
                    var r = e[t];
                    e[t] = function () {
                        var e = Array.prototype.slice.call(arguments);
                        return e.unshift(r), n.apply(this, e)
                    }
                }

                function Ut(e, t, n, r) {
                    var i, s;
                    n = Pt(n, 1), i = e / n, t || (t = [1, 2, 2.5, 5, 10], r && r.allowDecimals === !1 && (n === 1 ? t = [1, 2, 5, 10] : n <= .1 && (t = [1 / n])));
                    for (s = 0; s < t.length; s++) {
                        e = t[s];
                        if (i <= (t[s] + (t[s + 1] || t[s])) / 2) break
                    }
                    return e *= n, e
                }

                function zt(e, t) {
                    var n = t || [
                        [K, [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],
                        [Q, [1, 2, 5, 10, 15, 30]],
                        [G, [1, 2, 5, 10, 15, 30]],
                        [Y, [1, 2, 3, 4, 6, 8, 12]],
                        [Z, [1, 2]],
                        [et, [1, 2]],
                        [tt, [1, 2, 3, 4, 6]],
                        [nt, null]
                    ],
                        r = n[n.length - 1],
                        i = D[r[0]],
                        s = r[1],
                        o, u;
                    for (u = 0; u < n.length; u++) {
                        r = n[u], i = D[r[0]], s = r[1];
                        if (n[u + 1]) {
                            var a = (i * s[s.length - 1] + D[n[u + 1][0]]) / 2;
                            if (e <= a) break
                        }
                    }
                    return i === D[nt] && e < 5 * i && (s = [1, 2, 5]), i === D[nt] && e < 5 * i && (s = [1, 2, 5]), o = Ut(e / i, s), {
                        unitRange: i,
                        count: o,
                        unitName: r[0]
                    }
                }

                function Wt(e, t, n, r) {
                    var i = [],
                        o, u = {}, a = A.global.useUTC,
                        f, l = new Date(t),
                        c = e.unitRange,
                        h = e.count;
                    c >= D[Q] && (l.setMilliseconds(0), l.setSeconds(c >= D[G] ? 0 : h * s(l.getSeconds() / h))), c >= D[G] && l[vt](c >= D[Y] ? 0 : h * s(l[ft]() / h)), c >= D[Y] && l[mt](c >= D[Z] ? 0 : h * s(l[lt]() / h)), c >= D[Z] && l[gt](c >= D[tt] ? 1 : h * s(l[ht]() / h)), c >= D[tt] && (l[yt](c >= D[nt] ? 0 : h * s(l[pt]() / h)), f = l[dt]()), c >= D[nt] && (f -= f % h, l[bt](f)), c === D[et] && l[gt](l[ht]() - l[ct]() + Pt(r, 1)), o = 1, f = l[dt]();
                    var p = l.getTime(),
                        d = l[pt](),
                        v = l[ht](),
                        m = a ? 0 : (864e5 + l.getTimezoneOffset() * 60 * 1e3) % 864e5;
                    while (p < n) i.push(p), c === D[nt] ? p = at(f + o * h, 0) : c === D[tt] ? p = at(f, d + o * h) : !! a || c !== D[Z] && c !== D[et] ? (p += c * h, c <= D[Y] && p % D[Z] === m && (u[p] = Z)) : p = at(f, d, v + o * h * (c === D[Z] ? 1 : 7)), o++;
                    return i.push(p), i.info = Et(e, {
                        higherRanks: u,
                        totalRange: c * h
                    }), i
                }

                function Xt() {
                    this.color = 0, this.symbol = 0
                }

                function Vt(e, t) {
                    var n = e.length,
                        r, i;
                    for (i = 0; i < n; i++) e[i].ss_i = i;
                    e.sort(function (e, n) {
                        return r = t(e, n), r === 0 ? e.ss_i - n.ss_i : r
                    });
                    for (i = 0; i < n; i++) delete e[i].ss_i
                }

                function $t(e) {
                    var t = e.length,
                        n = e[0];
                    while (t--) e[t] < n && (n = e[t]);
                    return n
                }

                function Jt(e) {
                    var t = e.length,
                        n = e[0];
                    while (t--) e[t] > n && (n = e[t]);
                    return n
                }

                function Kt(e, t) {
                    var n;
                    for (n in e) e[n] && e[n] !== t && e[n].destroy && e[n].destroy(), delete e[n]
                }

                function Qt(e) {
                    L || (L = Bt(H)), e && L.appendChild(e), L.innerHTML = ""
                }

                function Gt(e, t) {
                    var r = "Highcharts error #" + e + ": www.highcharts.com/errors/" + e;
                    if (t) throw r;
                    n.console && console.log(r)
                }

                function Yt(e) {
                    return parseFloat(e.toPrecision(14))
                }

                function Zt(e, t) {
                    M = Pt(e, t.animation)
                }

                function wn() {
                    var e = A.global.useUTC,
                        t = e ? "getUTC" : "get",
                        n = e ? "setUTC" : "set";
                    at = e ? Date.UTC : function (e, t, n, r, i, s) {
                        return (new Date(e, t, Pt(n, 1), Pt(r, 0), Pt(i, 0), Pt(s, 0))).getTime()
                    }, ft = t + "Minutes", lt = t + "Hours", ct = t + "Day", ht = t + "Date", pt = t + "Month", dt = t + "FullYear", vt = n + "Minutes", mt = n + "Hours", gt = n + "Date", yt = n + "Month", bt = n + "FullYear"
                }

                function En(e) {
                    return A = ln(A, e), wn(), A
                }

                function Sn() {
                    return A
                }

                function Tn() {}

                function Mn(e, t, n) {
                    this.axis = e, this.pos = t, this.type = n || "", this.isNew = !0, n || this.addLabel()
                }

                function _n(e, t) {
                    return this.axis = e, t && (this.options = t, this.id = t.id), this
                }

                function Dn(e, t, n, r, i) {
                    var s = e.chart.inverted;
                    this.axis = e, this.isNegative = n, this.options = t, this.x = r, this.stack = i, this.alignOptions = {
                        align: t.align || (s ? n ? "left" : "right" : "center"),
                        verticalAlign: t.verticalAlign || (s ? "middle" : n ? "bottom" : "top"),
                        y: Pt(t.y, s ? 4 : n ? 14 : -6),
                        x: Pt(t.x, s ? n ? -6 : 6 : 0)
                    }, this.textAlign = t.textAlign || (s ? n ? "right" : "left" : "center")
                }

                function Pn() {
                    this.init.apply(this, arguments)
                }

                function Hn(e, t) {
                    var n = t.borderWidth,
                        r = t.style,
                        i = xt(r.padding);
                    this.chart = e, this.options = t, this.crosshairs = [], this.now = {
                        x: 0,
                        y: 0
                    }, this.isHidden = !0, this.label = e.renderer.label("", 0, 0, t.shape, null, null, t.useHTML, null, "tooltip").attr({
                        padding: i,
                        fill: t.backgroundColor,
                        "stroke-width": n,
                        r: t.borderRadius,
                        zIndex: 8
                    }).css(r).css({
                        padding: 0
                    }).hide().add(), x || this.label.shadow(t.shadow), this.shared = t.shared
                }

                function Bn(e, t) {
                    var n = x ? "" : t.chart.zoomType;
                    this.zoomX = /x/.test(n), this.zoomY = /y/.test(n), this.options = t, this.chart = e, this.init(e, t.tooltip)
                }

                function jn(e) {
                    this.init(e)
                }

                function Fn(e, t) {
                    var n, r = e.series;
                    e.series = null, n = ln(A, e), n.series = e.series = r;
                    var i = n.chart,
                        s = i.margin,
                        o = Nt(s) ? s : [s, s, s, s];
                    this.optionsMarginTop = Pt(i.marginTop, o[0]), this.optionsMarginRight = Pt(i.marginRight, o[1]), this.optionsMarginBottom = Pt(i.marginBottom, o[2]), this.optionsMarginLeft = Pt(i.marginLeft, o[3]);
                    var u = i.events;
                    this.runChartClick = u && !! u.click, this.callback = t, this.isResizing = 0, this.options = n, this.axes = [], this.series = [], this.hasCartesianSeries = i.showAxes, this.init(u)
                }
                var e, t = document,
                    n = window,
                    r = Math,
                    i = r.round,
                    s = r.floor,
                    o = r.ceil,
                    u = r.max,
                    a = r.min,
                    f = r.abs,
                    l = r.cos,
                    c = r.sin,
                    h = r.PI,
                    p = h * 2 / 360,
                    d = navigator.userAgent,
                    v = n.opera,
                    m = /msie/i.test(d) && !v,
                    g = t.documentMode === 8,
                    y = /AppleWebKit/.test(d),
                    b = /Firefox/.test(d),
                    w = "http://www.w3.org/2000/svg",
                    E = !! t.createElementNS && !! t.createElementNS(w, "svg").createSVGRect,
                    S = b && parseInt(d.split("Firefox/")[1], 10) < 4,
                    x = !E && !m && !! t.createElement("canvas").getContext,
                    T, N = t.documentElement.ontouchstart !== e,
                    C = {}, k = 0,
                    L, A, O, M, _, D, P = function () {}, H = "div",
                    B = "absolute",
                    j = "relative",
                    F = "hidden",
                    I = "highcharts-",
                    q = "visible",
                    R = "px",
                    U = "none",
                    z = "M",
                    W = "L",
                    X = "rgba(192,192,192," + (E ? 1e-6 : .002) + ")",
                    V = "",
                    $ = "hover",
                    J = "select",
                    K = "millisecond",
                    Q = "second",
                    G = "minute",
                    Y = "hour",
                    Z = "day",
                    et = "week",
                    tt = "month",
                    nt = "year",
                    rt = "fill",
                    it = "linearGradient",
                    st = "stops",
                    ot = "stroke",
                    ut = "stroke-width",
                    at, ft, lt, ct, ht, pt, dt, vt, mt, gt, yt, bt, wt = {};
                n.Highcharts = {}, O = function (e, t, n) {
                    if (!Mt(t) || isNaN(t)) return "Invalid date";
                    e = Pt(e, "%Y-%m-%d %H:%M:%S");
                    var r = new Date(t),
                        s, o = r[lt](),
                        u = r[ct](),
                        a = r[ht](),
                        f = r[pt](),
                        l = r[dt](),
                        c = A.lang,
                        h = c.weekdays,
                        p = {
                            a: h[u].substr(0, 3),
                            A: h[u],
                            d: qt(a),
                            e: a,
                            b: c.shortMonths[f],
                            B: c.months[f],
                            m: qt(f + 1),
                            y: l.toString().substr(2, 2),
                            Y: l,
                            H: qt(o),
                            I: qt(o % 12 || 12),
                            l: o % 12 || 12,
                            M: qt(r[ft]()),
                            p: o < 12 ? "AM" : "PM",
                            P: o < 12 ? "am" : "pm",
                            S: qt(r.getSeconds()),
                            L: qt(i(t % 1e3), 3)
                        };
                    for (s in p) e = e.replace("%" + s, p[s]);
                    return n ? e.substr(0, 1).toUpperCase() + e.substr(1) : e
                }, Xt.prototype = {
                    wrapColor: function (e) {
                        this.color >= e && (this.color = 0)
                    },
                    wrapSymbol: function (e) {
                        this.symbol >= e && (this.symbol = 0)
                    }
                }, D = St(K, 1, Q, 1e3, G, 6e4, Y, 36e5, Z, 864e5, et, 6048e5, tt, 2592e6, nt, 31556952e3), _ = {
                    init: function (e, t, n) {
                        t = t || "";
                        var r = e.shift,
                            i = t.indexOf("C") > -1,
                            s = i ? 7 : 3,
                            o, u, a, f = t.split(" "),
                            l = [].concat(n),
                            c, h, p = function (e) {
                                a = e.length;
                                while (a--) e[a] === z && e.splice(a + 1, 0, e[a + 1], e[a + 2], e[a + 1], e[a + 2])
                            };
                        i && (p(f), p(l)), e.isArea && (c = f.splice(f.length - 6, 6), h = l.splice(l.length - 6, 6));
                        if (r <= l.length / s)
                            while (r--) l = [].concat(l).splice(0, s).concat(l);
                        e.shift = 0;
                        if (f.length) {
                            o = l.length;
                            while (f.length < o) u = [].concat(f).splice(f.length - s, s), i && (u[s - 6] = u[s - 2], u[s - 5] = u[s - 1]), f = f.concat(u)
                        }
                        return c && (f = f.concat(c), l = l.concat(h)), [f, l]
                    },
                    step: function (e, t, n, r) {
                        var i = [],
                            s = e.length,
                            o;
                        if (n === 1) i = r;
                        else if (s === t.length && n < 1)
                            while (s--) o = parseFloat(e[s]), i[s] = isNaN(o) ? e[s] : n * parseFloat(t[s] - o) + o;
                        else i = t;
                        return i
                    }
                },
                function (r) {
                    n.HighchartsAdapter = n.HighchartsAdapter || r && {
                        init: function (t) {
                            var n = r.fx,
                                i = n.step,
                                s, o = r.Tween,
                                u = o && o.propHooks;
                            r.extend(r.easing, {
                                easeOutQuad: function (e, t, n, r, i) {
                                    return -r * (t /= i) * (t - 2) + n
                                }
                            }), r.each(["cur", "_default", "width", "height"], function (t, r) {
                                var s = i,
                                    a, f;
                                r === "cur" ? s = n.prototype : r === "_default" && o && (s = u[r], r = "set"), a = s[r], a && (s[r] = function (n) {
                                    return n = t ? n : this, f = n.elem, f.attr ? f.attr(n.prop, r === "cur" ? e : n.now) : a.apply(this, arguments)
                                })
                            }), s = function (e) {
                                var n = e.elem,
                                    r;
                                e.started || (r = t.init(n, n.d, n.toD), e.start = r[0], e.end = r[1], e.started = !0), n.attr("d", t.step(e.start, e.end, e.pos, n.toD))
                            }, o ? u.d = {
                                set: s
                            } : i.d = s, this.each = Array.prototype.forEach ? function (e, t) {
                                return Array.prototype.forEach.call(e, t)
                            } : function (e, t) {
                                var n = 0,
                                    r = e.length;
                                for (; n < r; n++)
                                    if (t.call(e[n], e[n], n, e) === !1) return n
                            }
                        },
                        getScript: r.getScript,
                        inArray: r.inArray,
                        adapterRun: function (e, t) {
                            return r(e)[t]()
                        },
                        grep: r.grep,
                        map: function (e, t) {
                            var n = [],
                                r = 0,
                                i = e.length;
                            for (; r < i; r++) n[r] = t.call(e[r], e[r], r, e);
                            return n
                        },
                        merge: function () {
                            var e = arguments;
                            return r.extend(!0, null, e[0], e[1], e[2], e[3])
                        },
                        offset: function (e) {
                            return r(e).offset()
                        },
                        addEvent: function (e, t, n) {
                            r(e).bind(t, n)
                        },
                        removeEvent: function (e, n, i) {
                            var s = t.removeEventListener ? "removeEventListener" : "detachEvent";
                            t[s] && !e[s] && (e[s] = function () {}), r(e).unbind(n, i)
                        },
                        fireEvent: function (e, t, n, i) {
                            var s = r.Event(t),
                                o = "detached" + t,
                                u;
                            !m && n && (delete n.layerX, delete n.layerY), Et(s, n), e[t] && (e[o] = e[t], e[t] = null), r.each(["preventDefault", "stopPropagation"], function (e, t) {
                                var n = s[t];
                                s[t] = function () {
                                    try {
                                        n.call(s)
                                    } catch (e) {
                                        t === "preventDefault" && (u = !0)
                                    }
                                }
                            }), r(e).trigger(s), e[o] && (e[t] = e[o], e[o] = null), i && !s.isDefaultPrevented() && !u && i(s)
                        },
                        washMouseEvent: function (e) {
                            var t = e.originalEvent || e;
                            return t.pageX = e.pageX, t.pageY = e.pageY, t
                        },
                        animate: function (e, t, n) {
                            var i = r(e);
                            t.d && (e.toD = t.d, t.d = 1), i.stop(), i.animate(t, n)
                        },
                        stop: function (e) {
                            r(e).stop()
                        }
                    }
                }(n.jQuery);
                var en = n.HighchartsAdapter,
                    tn = en || {};
                en && en.init.call(en, _);
                var nn = tn.adapterRun,
                    rn = tn.getScript,
                    sn = tn.inArray,
                    on = tn.each,
                    un = tn.grep,
                    an = tn.offset,
                    fn = tn.map,
                    ln = tn.merge,
                    cn = tn.addEvent,
                    hn = tn.removeEvent,
                    pn = tn.fireEvent,
                    dn = tn.washMouseEvent,
                    vn = tn.animate,
                    mn = tn.stop,
                    gn = {
                        enabled: !0,
                        align: "center",
                        x: 0,
                        y: 15,
                        style: {
                            color: "#666",
                            fontSize: "11px",
                            lineHeight: "14px"
                        }
                    };
                A = {
                    colors: ["#4572A7", "#AA4643", "#89A54E", "#80699B", "#3D96AE", "#DB843D", "#92A8CD", "#A47D7C", "#B5CA92"],
                    symbols: ["circle", "diamond", "square", "triangle", "triangle-down"],
                    lang: {
                        loading: "Loading...",
                        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                        weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        decimalPoint: ".",
                        numericSymbols: ["k", "M", "G", "T", "P", "E"],
                        resetZoom: "Reset zoom",
                        resetZoomTitle: "Reset zoom level 1:1",
                        thousandsSep: ","
                    },
                    global: {
                        useUTC: !0,
                        canvasToolsURL: "http://code.highcharts.com/2.3.2/modules/canvas-tools.js",
                        VMLRadialGradientURL: "http://code.highcharts.com/2.3.2/gfx/vml-radial-gradient.png"
                    },
                    chart: {
                        borderColor: "#4572A7",
                        borderRadius: 5,
                        defaultSeriesType: "line",
                        ignoreHiddenSeries: !0,
                        spacingTop: 10,
                        spacingRight: 10,
                        spacingBottom: 15,
                        spacingLeft: 10,
                        style: {
                            fontFamily: '"Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif',
                            fontSize: "12px"
                        },
                        backgroundColor: "#FFFFFF",
                        plotBorderColor: "#C0C0C0",
                        resetZoomButton: {
                            theme: {
                                zIndex: 20
                            },
                            position: {
                                align: "right",
                                x: -10,
                                y: 10
                            }
                        }
                    },
                    title: {
                        text: "Chart title",
                        align: "center",
                        y: 15,
                        style: {
                            color: "#3E576F",
                            fontSize: "16px"
                        }
                    },
                    subtitle: {
                        text: "",
                        align: "center",
                        y: 30,
                        style: {
                            color: "#6D869F"
                        }
                    },
                    plotOptions: {
                        line: {
                            allowPointSelect: !1,
                            showCheckbox: !1,
                            animation: {
                                duration: 1e3
                            },
                            events: {},
                            lineWidth: 2,
                            shadow: !0,
                            marker: {
                                enabled: !0,
                                lineWidth: 0,
                                radius: 4,
                                lineColor: "#FFFFFF",
                                states: {
                                    hover: {
                                        enabled: !0
                                    },
                                    select: {
                                        fillColor: "#FFFFFF",
                                        lineColor: "#000000",
                                        lineWidth: 2
                                    }
                                }
                            },
                            point: {
                                events: {}
                            },
                            dataLabels: ln(gn, {
                                enabled: !1,
                                y: -6,
                                formatter: function () {
                                    return this.y
                                }
                            }),
                            cropThreshold: 300,
                            pointRange: 0,
                            showInLegend: !0,
                            states: {
                                hover: {
                                    marker: {}
                                },
                                select: {
                                    marker: {}
                                }
                            },
                            stickyTracking: !0
                        }
                    },
                    labels: {
                        style: {
                            position: B,
                            color: "#3E576F"
                        }
                    },
                    legend: {
                        enabled: !0,
                        align: "center",
                        layout: "horizontal",
                        labelFormatter: function () {
                            return this.name
                        },
                        borderWidth: 1,
                        borderColor: "#909090",
                        borderRadius: 5,
                        navigation: {
                            activeColor: "#3E576F",
                            inactiveColor: "#CCC"
                        },
                        shadow: !1,
                        itemStyle: {
                            cursor: "pointer",
                            color: "#3E576F",
                            fontSize: "12px"
                        },
                        itemHoverStyle: {
                            color: "#000"
                        },
                        itemHiddenStyle: {
                            color: "#CCC"
                        },
                        itemCheckboxStyle: {
                            position: B,
                            width: "13px",
                            height: "13px"
                        },
                        symbolWidth: 16,
                        symbolPadding: 5,
                        verticalAlign: "bottom",
                        x: 0,
                        y: 0
                    },
                    loading: {
                        labelStyle: {
                            fontWeight: "bold",
                            position: j,
                            top: "1em"
                        },
                        style: {
                            position: B,
                            backgroundColor: "white",
                            opacity: .5,
                            textAlign: "center"
                        }
                    },
                    tooltip: {
                        enabled: !0,
                        backgroundColor: "rgba(255, 255, 255, .85)",
                        borderWidth: 2,
                        borderRadius: 5,
                        dateTimeLabelFormats: {
                            millisecond: "%A, %b %e, %H:%M:%S.%L",
                            second: "%A, %b %e, %H:%M:%S",
                            minute: "%A, %b %e, %H:%M",
                            hour: "%A, %b %e, %H:%M",
                            day: "%A, %b %e, %Y",
                            week: "Week from %A, %b %e, %Y",
                            month: "%B %Y",
                            year: "%Y"
                        },
                        headerFormat: '<span style="font-size: 10px">{point.key}</span><br/>',
                        pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b><br/>',
                        shadow: !0,
                        shared: x,
                        snap: N ? 25 : 10,
                        style: {
                            color: "#333333",
                            fontSize: "12px",
                            padding: "5px",
                            whiteSpace: "nowrap"
                        }
                    },
                    credits: {
                        enabled: !0,
                        text: "Highcharts.com",
                        href: "http://www.highcharts.com",
                        position: {
                            align: "right",
                            x: -10,
                            verticalAlign: "bottom",
                            y: -5
                        },
                        style: {
                            cursor: "pointer",
                            color: "#909090",
                            fontSize: "10px"
                        }
                    }
                };
                var yn = A.plotOptions,
                    bn = yn.line;
                wn();
                var xn = function (e) {
                    function r(e) {
                        n = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]?(?:\.[0-9]+)?)\s*\)/.exec(e), n ? t = [xt(n[1]), xt(n[2]), xt(n[3]), parseFloat(n[4], 10)] : (n = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(e), n && (t = [xt(n[1], 16), xt(n[2], 16), xt(n[3], 16), 1]))
                    }

                    function i(n) {
                        var r;
                        return t && !isNaN(t[0]) ? n === "rgb" ? r = "rgb(" + t[0] + "," + t[1] + "," + t[2] + ")" : n === "a" ? r = t[3] : r = "rgba(" + t.join(",") + ")" : r = e, r
                    }

                    function s(e) {
                        if (kt(e) && e !== 0) {
                            var n;
                            for (n = 0; n < 3; n++) t[n] += xt(e * 255), t[n] < 0 && (t[n] = 0), t[n] > 255 && (t[n] = 255)
                        }
                        return this
                    }

                    function o(e) {
                        return t[3] = e, this
                    }
                    var t = [],
                        n;
                    return r(e), {
                        get: i,
                        brighten: s,
                        setOpacity: o
                    }
                };
                Tn.prototype = {
                    init: function (e, n) {
                        var r = this;
                        r.element = n === "span" ? Bt(n) : t.createElementNS(w, n), r.renderer = e, r.attrSetters = {}
                    },
                    animate: function (e, t, n) {
                        var r = Pt(t, M, !0);
                        mn(this), r ? (r = ln(r), n && (r.complete = n), vn(this, e, r)) : (this.attr(e), n && n())
                    },
                    attr: function (n, r) {
                        var i = this,
                            s, o, a, f, l, c = i.element,
                            h = c.nodeName,
                            p = i.renderer,
                            d, v, m = i.attrSetters,
                            g = i.shadows,
                            b, E, S = i;
                        Tt(n) && Mt(r) && (s = n, n = {}, n[s] = r);
                        if (Tt(n)) s = n, h === "circle" ? s = {
                            x: "cx",
                            y: "cy"
                        }[s] || s : s === "strokeWidth" && (s = "stroke-width"), S = _t(c, s) || i[s] || 0, s !== "d" && s !== "visibility" && (S = parseFloat(S));
                        else
                            for (s in n) {
                                d = !1, o = n[s], a = m[s] && m[s].call(i, o, s);
                                if (a !== !1) {
                                    a !== e && (o = a);
                                    if (s === "d") o && o.join && (o = o.join(" ")), /(NaN| {2}|^$)/.test(o) && (o = "M 0 0");
                                    else if (s === "x" && h === "text") {
                                        for (f = 0; f < c.childNodes.length; f++) l = c.childNodes[f], _t(l, "x") === _t(c, "x") && _t(l, "x", o);
                                        i.rotation && _t(c, "transform", "rotate(" + i.rotation + " " + o + " " + xt(n.y || _t(c, "y")) + ")")
                                    } else if (s === "fill") o = p.color(o, c, s);
                                    else if (h !== "circle" || s !== "x" && s !== "y")
                                        if (h === "rect" && s === "r") _t(c, {
                                            rx: o,
                                            ry: o
                                        }), d = !0;
                                        else if (s === "translateX" || s === "translateY" || s === "rotation" || s === "verticalAlign") E = !0, d = !0;
                                    else if (s === "stroke") o = p.color(o, c, s);
                                    else if (s === "dashstyle") {
                                        s = "stroke-dasharray", o = o && o.toLowerCase();
                                        if (o === "solid") o = U;
                                        else if (o) {
                                            o = o.replace("shortdashdotdot", "3,1,1,1,1,1,").replace("shortdashdot", "3,1,1,1").replace("shortdot", "1,1,").replace("shortdash", "3,1,").replace("longdash", "8,3,").replace(/dot/g, "1,3,").replace("dash", "4,3,").replace(/,$/, "").split(","), f = o.length;
                                            while (f--) o[f] = xt(o[f]) * n["stroke-width"];
                                            o = o.join(",")
                                        }
                                    } else s === "isTracker" ? i[s] = o : s === "width" ? o = xt(o) : s === "align" ? (s = "text-anchor", o = {
                                        left: "start",
                                        center: "middle",
                                        right: "end"
                                    }[o]) : s === "title" && (v = c.getElementsByTagName("title")[0], v || (v = t.createElementNS(w, "title"), c.appendChild(v)), v.textContent = o);
                                    else s = {
                                        x: "cx",
                                        y: "cy"
                                    }[s] || s;
                                    s === "strokeWidth" && (s = "stroke-width"), y && s === "stroke-width" && o === 0 && (o = 1e-6), i.symbolName && /^(x|y|width|height|r|start|end|innerR|anchorX|anchorY)/.test(s) && (b || (i.symbolAttr(n), b = !0), d = !0);
                                    if (g && /^(width|height|visibility|x|y|d|transform)$/.test(s)) {
                                        f = g.length;
                                        while (f--) _t(g[f], s, s === "height" ? u(o - (g[f].cutHeight || 0), 0) : o)
                                    }(s === "width" || s === "height") && h === "rect" && o < 0 && (o = 0), i[s] = o, E && i.updateTransform(), s === "text" ? (o !== i.textStr && delete i.bBox, i.textStr = o, i.added && p.buildText(i)) : d || _t(c, s, o)
                                }
                            }
                        return S
                    },
                    symbolAttr: function (e) {
                        var t = this;
                        on(["x", "y", "r", "start", "end", "width", "height", "innerR", "anchorX", "anchorY"], function (n) {
                            t[
                                n] = Pt(e[n], t[n])
                        }), t.attr({
                            d: t.renderer.symbols[t.symbolName](t.x, t.y, t.width, t.height, t)
                        })
                    },
                    clip: function (e) {
                        return this.attr("clip-path", e ? "url(" + this.renderer.url + "#" + e.id + ")" : U)
                    },
                    crisp: function (e, t, n, r, o) {
                        var u = this,
                            a, f = {}, l = {}, c;
                        e = e || u.strokeWidth || u.attr && u.attr("stroke-width") || 0, c = i(e) % 2 / 2, l.x = s(t || u.x || 0) + c, l.y = s(n || u.y || 0) + c, l.width = s((r || u.width || 0) - 2 * c), l.height = s((o || u.height || 0) - 2 * c), l.strokeWidth = e;
                        for (a in l) u[a] !== l[a] && (u[a] = f[a] = l[a]);
                        return f
                    },
                    css: function (e) {
                        var t = this,
                            n = t.element,
                            r = e && e.width && n.nodeName === "text",
                            i, s = "",
                            o = function (e, t) {
                                return "-" + t.toLowerCase()
                            };
                        e && e.color && (e.fill = e.color), e = Et(t.styles, e), t.styles = e;
                        if (m && !E) r && delete e.width, Ht(t.element, e);
                        else {
                            for (i in e) s += i.replace(/([A-Z])/g, o) + ":" + e[i] + ";";
                            t.attr({
                                style: s
                            })
                        }
                        return r && t.added && t.renderer.buildText(t), t
                    },
                    on: function (e, t) {
                        var n = t;
                        return N && e === "click" && (e = "touchstart", n = function (e) {
                            e.preventDefault(), t()
                        }), this.element["on" + e] = n, this
                    },
                    setRadialReference: function (e) {
                        return this.element.radialReference = e, this
                    },
                    translate: function (e, t) {
                        return this.attr({
                            translateX: e,
                            translateY: t
                        })
                    },
                    invert: function () {
                        var e = this;
                        return e.inverted = !0, e.updateTransform(), e
                    },
                    htmlCss: function (e) {
                        var t = this,
                            n = t.element,
                            r = e && n.tagName === "SPAN" && e.width;
                        return r && (delete e.width, t.textWidth = r, t.updateTransform()), t.styles = Et(t.styles, e), Ht(t.element, e), t
                    },
                    htmlGetBBox: function () {
                        var e = this,
                            t = e.element,
                            n = e.bBox;
                        return n || (t.nodeName === "text" && (t.style.position = B), n = e.bBox = {
                            x: t.offsetLeft,
                            y: t.offsetTop,
                            width: t.offsetWidth,
                            height: t.offsetHeight
                        }), n
                    },
                    htmlUpdateTransform: function () {
                        if (!this.added) {
                            this.alignOnAdd = !0;
                            return
                        }
                        var e = this,
                            t = e.renderer,
                            n = e.element,
                            r = e.translateX || 0,
                            i = e.translateY || 0,
                            s = e.x || 0,
                            o = e.y || 0,
                            u = e.textAlign || "left",
                            a = {
                                left: 0,
                                center: .5,
                                right: 1
                            }[u],
                            f = u && u !== "left",
                            h = e.shadows;
                        if (r || i) Ht(n, {
                            marginLeft: r,
                            marginTop: i
                        }), h && on(h, function (e) {
                            Ht(e, {
                                marginLeft: r + 1,
                                marginTop: i + 1
                            })
                        });
                        e.inverted && on(n.childNodes, function (e) {
                            t.invertChild(e, n)
                        });
                        if (n.tagName === "SPAN") {
                            var d, g, w = e.rotation,
                                E, S = 0,
                                x = 1,
                                T = 0,
                                N, C = xt(e.textWidth),
                                k = e.xCorr || 0,
                                L = e.yCorr || 0,
                                A = [w, u, n.innerHTML, e.textWidth].join(","),
                                O = {}, M;
                            A !== e.cTT && (Mt(w) && (t.isSVG ? (M = m ? "-ms" : y ? "-webkit" : b ? "-moz" : v ? "-o" : "", O[M + "-transform"] = O.transform = "rotate(" + w + "deg)") : (S = w * p, x = l(S), T = c(S), O.filter = w ? ["progid:DXImageTransform.Microsoft.Matrix(M11=", x, ", M12=", -T, ", M21=", T, ", M22=", x, ", sizingMethod='auto expand')"].join("") : U), Ht(n, O)), d = Pt(e.elemWidth, n.offsetWidth), g = Pt(e.elemHeight, n.offsetHeight), d > C && /[ \-]/.test(n.innerText) && (Ht(n, {
                                width: C + R,
                                display: "block",
                                whiteSpace: "normal"
                            }), d = C), E = t.fontMetrics(n.style.fontSize).b, k = x < 0 && -d, L = T < 0 && -g, N = x * T < 0, k += T * E * (N ? 1 - a : a), L -= x * E * (w ? N ? a : 1 - a : 1), f && (k -= d * a * (x < 0 ? -1 : 1), w && (L -= g * a * (T < 0 ? -1 : 1)), Ht(n, {
                                textAlign: u
                            })), e.xCorr = k, e.yCorr = L), Ht(n, {
                                left: s + k + R,
                                top: o + L + R
                            }), e.cTT = A
                        }
                    },
                    updateTransform: function () {
                        var e = this,
                            t = e.translateX || 0,
                            n = e.translateY || 0,
                            r = e.inverted,
                            i = e.rotation,
                            s = [];
                        r && (t += e.attr("width"), n += e.attr("height")), (t || n) && s.push("translate(" + t + "," + n + ")"), r ? s.push("rotate(90) scale(-1,1)") : i && s.push("rotate(" + i + " " + (e.x || 0) + " " + (e.y || 0) + ")"), s.length && _t(e.element, "transform", s.join(" "))
                    },
                    toFront: function () {
                        var e = this.element;
                        return e.parentNode.appendChild(e), this
                    },
                    align: function (e, t, n) {
                        var r = this;
                        e ? (r.alignOptions = e, r.alignByTranslate = t, n || r.renderer.alignedObjects.push(r)) : (e = r.alignOptions, t = r.alignByTranslate), n = Pt(n, r.renderer);
                        var s = e.align,
                            o = e.verticalAlign,
                            u = (n.x || 0) + (e.x || 0),
                            a = (n.y || 0) + (e.y || 0),
                            f = {};
                        return /^(right|center)$/.test(s) && (u += (n.width - (e.width || 0)) / {
                            right: 1,
                            center: 2
                        }[s]), f[t ? "translateX" : "x"] = i(u), /^(bottom|middle)$/.test(o) && (a += (n.height - (e.height || 0)) / ({
                            bottom: 1,
                            middle: 2
                        }[o] || 1)), f[t ? "translateY" : "y"] = i(a), r[r.placed ? "animate" : "attr"](f), r.placed = !0, r.alignAttr = f, r
                    },
                    getBBox: function () {
                        var e = this,
                            t = e.bBox,
                            n = e.renderer,
                            r, i, s = e.rotation,
                            o = e.element,
                            u = s * p;
                        if (!t) {
                            if (o.namespaceURI === w || n.forExport) {
                                try {
                                    t = o.getBBox ? Et({}, o.getBBox()) : {
                                        width: o.offsetWidth,
                                        height: o.offsetHeight
                                    }
                                } catch (a) {}
                                if (!t || t.width < 0) t = {
                                    width: 0,
                                    height: 0
                                }
                            } else t = e.htmlGetBBox();
                            n.isSVG && (r = t.width, i = t.height, s && (t.width = f(i * c(u)) + f(r * l(u)), t.height = f(i * l(u)) + f(r * c(u)))), e.bBox = t
                        }
                        return t
                    },
                    show: function () {
                        return this.attr({
                            visibility: q
                        })
                    },
                    hide: function () {
                        return this.attr({
                            visibility: F
                        })
                    },
                    add: function (e) {
                        var t = this.renderer,
                            n = e || t,
                            r = n.element || t.box,
                            i = r.childNodes,
                            s = this.element,
                            o = _t(s, "zIndex"),
                            u, a, f, l;
                        e && (this.parentGroup = e), this.parentInverted = e && e.inverted, this.textStr !== undefined && t.buildText(this), o && (n.handleZ = !0, o = xt(o));
                        if (n.handleZ)
                            for (f = 0; f < i.length; f++) {
                                u = i[f], a = _t(u, "zIndex");
                                if (u !== s && (xt(a) > o || !Mt(o) && Mt(a))) {
                                    r.insertBefore(s, u), l = !0;
                                    break
                                }
                            }
                        return l || r.appendChild(s), this.added = !0, pn(this, "add"), this
                    },
                    safeRemoveChild: function (e) {
                        var t = e.parentNode;
                        t && t.removeChild(e)
                    },
                    destroy: function () {
                        var e = this,
                            t = e.element || {}, n = e.shadows,
                            r = e.box,
                            i, s;
                        t.onclick = t.onmouseout = t.onmouseover = t.onmousemove = null, mn(e), e.clipPath && (e.clipPath = e.clipPath.destroy());
                        if (e.stops) {
                            for (s = 0; s < e.stops.length; s++) e.stops[s] = e.stops[s].destroy();
                            e.stops = null
                        }
                        e.safeRemoveChild(t), n && on(n, function (t) {
                            e.safeRemoveChild(t)
                        }), r && r.destroy(), Ot(e.renderer.alignedObjects, e);
                        for (i in e) delete e[i];
                        return null
                    },
                    empty: function () {
                        var e = this.element,
                            t = e.childNodes,
                            n = t.length;
                        while (n--) e.removeChild(t[n])
                    },
                    shadow: function (e, t, n) {
                        var r = [],
                            i, s, o = this.element,
                            a, f, l, c;
                        if (e) {
                            f = Pt(e.width, 3), l = (e.opacity || .15) / f, c = this.parentInverted ? "(-1,-1)" : "(" + (e.offsetX || 1) + ", " + (e.offsetY || 1) + ")";
                            for (i = 1; i <= f; i++) s = o.cloneNode(0), a = f * 2 + 1 - 2 * i, _t(s, {
                                isShadow: "true",
                                stroke: e.color || "black",
                                "stroke-opacity": l * i,
                                "stroke-width": a,
                                transform: "translate" + c,
                                fill: U
                            }), n && (_t(s, "height", u(_t(s, "height") - a, 0)), s.cutHeight = a), t ? t.element.appendChild(s) : o.parentNode.insertBefore(s, o), r.push(s);
                            this.shadows = r
                        }
                        return this
                    }
                };
                var Nn = function () {
                    this.init.apply(this, arguments)
                };
                Nn.prototype = {
                    Element: Tn,
                    init: function (e, r, i, s) {
                        var u = this,
                            a = location,
                            f;
                        f = u.createElement("svg").attr({
                            xmlns: w,
                            version: "1.1"
                        }), e.appendChild(f.element), u.isSVG = !0, u.box = f.element, u.boxWrapper = f, u.alignedObjects = [], u.url = (b || y) && t.getElementsByTagName("base").length ? a.href.replace(/#.*?$/, "").replace(/([\('\)])/g, "\\$1").replace(/ /g, "%20") : "", u.defs = this.createElement("defs").add(), u.forExport = s, u.gradients = {}, u.setSize(r, i, !1);
                        var l, c;
                        b && e.getBoundingClientRect && (u.subPixelFix = l = function () {
                            Ht(e, {
                                left: 0,
                                top: 0
                            }), c = e.getBoundingClientRect(), Ht(e, {
                                left: o(c.left) - c.left + R,
                                top: o(c.top) - c.top + R
                            })
                        }, l(), cn(n, "resize", l))
                    },
                    isHidden: function () {
                        return !this.boxWrapper.getBBox().width
                    },
                    destroy: function () {
                        var e = this,
                            t = e.defs;
                        return e.box = null, e.boxWrapper = e.boxWrapper.destroy(), Kt(e.gradients || {}), e.gradients = null, t && (e.defs = t.destroy()), e.subPixelFix && hn(n, "resize", e.subPixelFix), e.alignedObjects = null, null
                    },
                    createElement: function (e) {
                        var t = new this.Element;
                        return t.init(this, e), t
                    },
                    draw: function () {},
                    buildText: function (e) {
                        function g(t) {
                            return m[t] = r.getBBox ? r.getBBox().height : e.renderer.fontMetrics(r.style.fontSize).h, i(m[t] - (m[t - 1] || 0))
                        }
                        var r = e.element,
                            s = Pt(e.textStr, "").toString().replace(/<(b|strong)>/g, '<span style="font-weight:bold">').replace(/<(i|em)>/g, '<span style="font-style:italic">').replace(/<a/g, "<span").replace(/<\/(b|strong|i|em|a)>/g, "</span>").split(/<br.*?>/g),
                            o = r.childNodes,
                            u = /style="([^"]+)"/,
                            a = /href="([^"]+)"/,
                            f = _t(r, "x"),
                            l = e.styles,
                            c = l && xt(l.width),
                            h = l && l.lineHeight,
                            p, d = "getComputedStyle",
                            v = o.length,
                            m = [];
                        while (v--) r.removeChild(o[v]);
                        c && !e.added && this.box.appendChild(r), s[s.length - 1] === "" && s.pop(), on(s, function (i, s) {
                            var o, l = 0,
                                v;
                            i = i.replace(/<span/g, "|||<span").replace(/<\/span>/g, "</span>|||"), o = i.split("|||"), on(o, function (i) {
                                if (i !== "" || o.length === 1) {
                                    var m = {}, y = t.createElementNS(w, "tspan");
                                    u.test(i) && _t(y, "style", i.match(u)[1].replace(/(;| |^)color([ :])/, "$1fill$2")), a.test(i) && (_t(y, "onclick", 'location.href="' + i.match(a)[1] + '"'), Ht(y, {
                                        cursor: "pointer"
                                    })), i = (i.replace(/<(.|\n)*?>/g, "") || " ").replace(/&lt;/g, "<").replace(/&gt;/g, ">"), y.appendChild(t.createTextNode(i)), l ? m.dx = 3 : m.x = f;
                                    if (!l) {
                                        if (s) {
                                            !E && e.renderer.forExport && Ht(y, {
                                                display: "block"
                                            }), v = n[d] && xt(n[d](p, null).getPropertyValue("line-height"));
                                            if (!v || isNaN(v)) v = h || p.offsetHeight || g(s) || 18;
                                            _t(y, "dy", v)
                                        }
                                        p = y
                                    }
                                    _t(y, m), r.appendChild(y), l++;
                                    if (c) {
                                        var b = i.replace(/-/g, "- ").split(" "),
                                            S, x, T = [];
                                        while (b.length || T.length) delete e.bBox, x = e.getBBox().width, S = x > c, !S || b.length === 1 ? (b = T, T = [], b.length && (y = t.createElementNS(w, "tspan"), _t(y, {
                                            dy: h || 16,
                                            x: f
                                        }), r.appendChild(y), x > c && (c = x))) : (y.removeChild(y.firstChild), T.unshift(b.pop())), b.length && y.appendChild(t.createTextNode(b.join(" ").replace(/- /g, "-")))
                                    }
                                }
                            })
                        })
                    },
                    button: function (e, t, n, r, i, s, o) {
                        var u = this.label(e, t, n),
                            a = 0,
                            f, l, c, h, p, d = "style",
                            v = {
                                x1: 0,
                                y1: 0,
                                x2: 0,
                                y2: 1
                            };
                        return i = ln(St(ut, 1, ot, "#999", rt, St(it, v, st, [
                            [0, "#FFF"],
                            [1, "#DDD"]
                        ]), "r", 3, "padding", 3, d, St("color", "black")), i), c = i[d], delete i[d], s = ln(i, St(ot, "#68A", rt, St(it, v, st, [
                            [0, "#FFF"],
                            [1, "#ACF"]
                        ])), s), h = s[d], delete s[d], o = ln(i, St(ot, "#68A", rt, St(it, v, st, [
                            [0, "#9BD"],
                            [1, "#CDF"]
                        ])), o), p = o[d], delete o[d], cn(u.element, "mouseenter", function () {
                            u.attr(s).css(h)
                        }), cn(u.element, "mouseleave", function () {
                            f = [i, s, o][a], l = [c, h, p][a], u.attr(f).css(l)
                        }), u.setState = function (e) {
                            a = e, e ? e === 2 && u.attr(o).css(p) : u.attr(i).css(c)
                        }, u.on("click", function () {
                            r.call(u)
                        }).attr(i).css(Et({
                            cursor: "default"
                        }, c))
                    },
                    crispLine: function (e, t) {
                        return e[1] === e[4] && (e[1] = e[4] = i(e[1]) - t % 2 / 2), e[2] === e[5] && (e[2] = e[5] = i(e[2]) + t % 2 / 2), e
                    },
                    path: function (e) {
                        var t = {
                            fill: U
                        };
                        return Ct(e) ? t.d = e : Nt(e) && Et(t, e), this.createElement("path").attr(t)
                    },
                    circle: function (e, t, n) {
                        var r = Nt(e) ? e : {
                            x: e,
                            y: t,
                            r: n
                        };
                        return this.createElement("circle").attr(r)
                    },
                    arc: function (e, t, n, r, i, s) {
                        return Nt(e) && (t = e.y, n = e.r, r = e.innerR, i = e.start, s = e.end, e = e.x), this.symbol("arc", e || 0, t || 0, n || 0, n || 0, {
                            innerR: r || 0,
                            start: i || 0,
                            end: s || 0
                        })
                    },
                    rect: function (e, t, n, r, i, s) {
                        i = Nt(e) ? e.r : i;
                        var o = this.createElement("rect").attr({
                            rx: i,
                            ry: i,
                            fill: U
                        });
                        return o.attr(Nt(e) ? e : o.crisp(s, e, t, u(n, 0), u(r, 0)))
                    },
                    setSize: function (e, t, n) {
                        var r = this,
                            i = r.alignedObjects,
                            s = i.length;
                        r.width = e, r.height = t, r.boxWrapper[Pt(n, !0) ? "animate" : "attr"]({
                            width: e,
                            height: t
                        });
                        while (s--) i[s].align()
                    },
                    g: function (e) {
                        var t = this.createElement("g");
                        return Mt(e) ? t.attr({
                            "class": I + e
                        }) : t
                    },
                    image: function (e, t, n, r, i) {
                        var s = {
                            preserveAspectRatio: U
                        }, o;
                        return arguments.length > 1 && Et(s, {
                            x: t,
                            y: n,
                            width: r,
                            height: i
                        }), o = this.createElement("image").attr(s), o.element.setAttributeNS ? o.element.setAttributeNS("http://www.w3.org/1999/xlink", "href", e) : o.element.setAttribute("hc-svg-href", e), o
                    },
                    symbol: function (e, t, n, r, s, o) {
                        var u, a = this.symbols[e],
                            f = a && a(i(t), i(n), r, s, o),
                            l = /^url\((.*?)\)$/,
                            c, h, p;
                        return f ? (u = this.path(f), Et(u, {
                            symbolName: e,
                            x: t,
                            y: n,
                            width: r,
                            height: s
                        }), o && Et(u, o)) : l.test(e) && (p = function (e, t) {
                            e.attr({
                                width: t[0],
                                height: t[1]
                            }), e.alignByTranslate || e.translate(-i(t[0] / 2), -i(t[1] / 2))
                        }, c = e.match(l)[1], h = C[c], u = this.image(c).attr({
                            x: t,
                            y: n
                        }), h ? p(u, h) : (u.attr({
                            width: 0,
                            height: 0
                        }), Bt("img", {
                            onload: function () {
                                var e = this;
                                p(u, C[c] = [e.width, e.height])
                            },
                            src: c
                        }))), u
                    },
                    symbols: {
                        circle: function (e, t, n, r) {
                            var i = .166 * n;
                            return [z, e + n / 2, t, "C", e + n + i, t, e + n + i, t + r, e + n / 2, t + r, "C", e - i, t + r, e - i, t, e + n / 2, t, "Z"]
                        },
                        square: function (e, t, n, r) {
                            return [z, e, t, W, e + n, t, e + n, t + r, e, t + r, "Z"]
                        },
                        triangle: function (e, t, n, r) {
                            return [z, e + n / 2, t, W, e + n, t + r, e, t + r, "Z"]
                        },
                        "triangle-down": function (e, t, n, r) {
                            return [z, e, t, W, e + n, t, e + n / 2, t + r, "Z"]
                        },
                        diamond: function (e, t, n, r) {
                            return [z, e + n / 2, t, W, e + n, t + r / 2, e + n / 2, t + r, e, t + r / 2, "Z"]
                        },
                        arc: function (e, t, n, r, i) {
                            var s = i.start,
                                o = i.r || n || r,
                                u = i.end - 1e-6,
                                a = i.innerR,
                                f = i.open,
                                p = l(s),
                                d = c(s),
                                v = l(u),
                                m = c(u),
                                g = i.end - s < h ? 0 : 1;
                            return [z, e + o * p, t + o * d, "A", o, o, 0, g, 1, e + o * v, t + o * m, f ? z : W, e + a * v, t + a * m, "A", a, a, 0, g, 0, e + a * p, t + a * d, f ? "" : "Z"]
                        }
                    },
                    clipRect: function (e, t, n, r) {
                        var i, s = I + k++,
                            o = this.createElement("clipPath").attr({
                                id: s
                            }).add(this.defs);
                        return i = this.rect(e, t, n, r, 0).add(o), i.id = s, i.clipPath = o, i
                    },
                    color: function (e, t, n) {
                        var r = this,
                            i, s = /^rgba/,
                            o;
                        e && e.linearGradient ? o = "linearGradient" : e && e.radialGradient && (o = "radialGradient");
                        if (o) {
                            var u = e[o],
                                a = r.gradients,
                                f, l, c, h = t.radialReference;

                            if (!u.id || !a[u.id]) Ct(u) && (e[o] = u = {
                                x1: u[0],
                                y1: u[1],
                                x2: u[2],
                                y2: u[3],
                                gradientUnits: "userSpaceOnUse"
                            }), o === "radialGradient" && h && !Mt(u.gradientUnits) && Et(u, {
                                cx: h[0] - h[2] / 2 + u.cx * h[2],
                                cy: h[1] - h[2] / 2 + u.cy * h[2],
                                r: u.r * h[2],
                                gradientUnits: "userSpaceOnUse"
                            }), u.id = I + k++, a[u.id] = f = r.createElement(o).attr(u).add(r.defs), f.stops = [], on(e.stops, function (e) {
                                var t;
                                s.test(e[1]) ? (i = xn(e[1]), l = i.get("rgb"), c = i.get("a")) : (l = e[1], c = 1), t = r.createElement("stop").attr({
                                    offset: e[0],
                                    "stop-color": l,
                                    "stop-opacity": c
                                }).add(f), f.stops.push(t)
                            });
                            return "url(" + r.url + "#" + u.id + ")"
                        }
                        return s.test(e) ? (i = xn(e), _t(t, n + "-opacity", i.get("a")), i.get("rgb")) : (t.removeAttribute(n + "-opacity"), e)
                    },
                    text: function (e, t, n, r) {
                        var s = this,
                            o = A.chart.style,
                            u;
                        return r && !s.forExport ? s.html(e, t, n) : (t = i(Pt(t, 0)), n = i(Pt(n, 0)), u = s.createElement("text").attr({
                            x: t,
                            y: n,
                            text: e
                        }).css({
                            fontFamily: o.fontFamily,
                            fontSize: o.fontSize
                        }), !E && s.forExport && u.css({
                            position: B
                        }), u.x = t, u.y = n, u)
                    },
                    html: function (e, t, n) {
                        var r = A.chart.style,
                            s = this.createElement("span"),
                            o = s.attrSetters,
                            u = s.element,
                            a = s.renderer;
                        return o.text = function (e) {
                            return e !== u.innerHTML && delete this.bBox, u.innerHTML = e, !1
                        }, o.x = o.y = o.align = function (e, t) {
                            return t === "align" && (t = "textAlign"), s[t] = e, s.htmlUpdateTransform(), !1
                        }, s.attr({
                            text: e,
                            x: i(t),
                            y: i(n)
                        }).css({
                            position: B,
                            whiteSpace: "nowrap",
                            fontFamily: r.fontFamily,
                            fontSize: r.fontSize
                        }), s.css = s.htmlCss, a.isSVG && (s.add = function (e) {
                            var t, n = a.box.parentNode,
                                r, i = [];
                            if (e) {
                                t = e.div;
                                if (!t) {
                                    r = e;
                                    while (r) i.push(r), r = r.parentGroup;
                                    on(i.reverse(), function (e) {
                                        var r;
                                        t = e.div = e.div || Bt(H, {
                                            className: _t(e.element, "class")
                                        }, {
                                            position: B,
                                            left: (e.translateX || 0) + R,
                                            top: (e.translateY || 0) + R
                                        }, t || n), r = t.style, Et(e.attrSetters, {
                                            translateX: function (e) {
                                                r.left = e + R
                                            },
                                            translateY: function (e) {
                                                r.top = e + R
                                            },
                                            visibility: function (e, t) {
                                                r[t] = e
                                            }
                                        })
                                    })
                                }
                            } else t = n;
                            return t.appendChild(u), s.added = !0, s.alignOnAdd && s.htmlUpdateTransform(), s
                        }), s
                    },
                    fontMetrics: function (e) {
                        e = xt(e || 11);
                        var t = e < 24 ? e + 4 : i(e * 1.2),
                            n = i(t * .8);
                        return {
                            h: t,
                            b: n
                        }
                    },
                    label: function (t, n, r, s, o, u, a, f, l) {
                        function C() {
                            var e, t = p.element.style;
                            v = (y === undefined || b === undefined || h.styles.textAlign) && p.getBBox(), h.width = (y || v.width || 0) + 2 * g, h.height = (b || v.height || 0) + 2 * g, T = g + c.fontMetrics(t && t.fontSize).b, d || (e = f ? -T : 0, h.box = d = s ? c.symbol(s, -m * g, e, h.width, h.height) : c.rect(-m * g, e, h.width, h.height, 0, x[ut]), d.add(h)), d.attr(ln({
                                width: h.width,
                                height: h.height
                            }, x)), x = null
                        }

                        function k() {
                            var e = h.styles,
                                t = e && e.textAlign,
                                n = g * (1 - m),
                                r;
                            r = f ? 0 : T, Mt(y) && (t === "center" || t === "right") && (n += {
                                center: .5,
                                right: 1
                            }[t] * (y - v.width)), (n !== p.x || r !== p.y) && p.attr({
                                x: n,
                                y: r
                            }), p.x = n, p.y = r
                        }

                        function L(e, t) {
                            d ? d.attr(e, t) : x[e] = t
                        }

                        function A() {
                            p.add(h), h.attr({
                                text: t,
                                x: n,
                                y: r
                            }), Mt(o) && h.attr({
                                anchorX: o,
                                anchorY: u
                            })
                        }
                        var c = this,
                            h = c.g(l),
                            p = c.text("", 0, 0, a).attr({
                                zIndex: 1
                            }),
                            d, v, m = 0,
                            g = 3,
                            y, b, w, E, S = 0,
                            x = {}, T, N = h.attrSetters;
                        cn(h, "add", A), N.width = function (e) {
                            return y = e, !1
                        }, N.height = function (e) {
                            return b = e, !1
                        }, N.padding = function (e) {
                            return Mt(e) && e !== g && (g = e, k()), !1
                        }, N.align = function (e) {
                            return m = {
                                left: 0,
                                center: .5,
                                right: 1
                            }[e], !1
                        }, N.text = function (e, t) {
                            return p.attr(t, e), C(), k(), !1
                        }, N[ut] = function (e, t) {
                            return S = e % 2 / 2, L(t, e), !1
                        }, N.stroke = N.fill = N.r = function (e, t) {
                            return L(t, e), !1
                        }, N.anchorX = function (e, t) {
                            return o = e, L(t, e + S - w), !1
                        }, N.anchorY = function (e, t) {
                            return u = e, L(t, e - E), !1
                        }, N.x = function (e) {
                            return h.x = e, e -= m * ((y || v.width) + g), w = i(e), h.attr("translateX", w), !1
                        }, N.y = function (e) {
                            return E = h.y = i(e), h.attr("translateY", e), !1
                        };
                        var O = h.css;
                        return Et(h, {
                            css: function (t) {
                                if (t) {
                                    var n = {};
                                    t = ln({}, t), on(["fontSize", "fontWeight", "fontFamily", "color", "lineHeight", "width"], function (r) {
                                        t[r] !== e && (n[r] = t[r], delete t[r])
                                    }), p.css(n)
                                }
                                return O.call(h, t)
                            },
                            getBBox: function () {
                                return d.getBBox()
                            },
                            shadow: function (e) {
                                return d.shadow(e), h
                            },
                            destroy: function () {
                                hn(h, "add", A), hn(h.element, "mouseenter"), hn(h.element, "mouseleave"), p && (p = p.destroy()), Tn.prototype.destroy.call(h)
                            }
                        })
                    }
                }, T = Nn;
                var Cn;
                if (!E && !x) {
                    var kn = {
                        init: function (e, t) {
                            var n = this,
                                r = ["<", t, ' filled="f" stroked="f"'],
                                i = ["position: ", B, ";"];
                            (t === "shape" || t === H) && i.push("left:0;top:0;width:1px;height:1px;"), g && i.push("visibility: ", t === H ? F : q), r.push(' style="', i.join(""), '"/>'), t && (r = t === H || t === "span" || t === "img" ? r.join("") : e.prepVML(r), n.element = Bt(r)), n.renderer = e, n.attrSetters = {}
                        },
                        add: function (e) {
                            var t = this,
                                n = t.renderer,
                                r = t.element,
                                i = n.box,
                                s = e && e.inverted,
                                o = e ? e.element || e : i;
                            return s && n.invertChild(r, o), o.appendChild(r), t.added = !0, t.alignOnAdd && !t.deferUpdateTransform && t.updateTransform(), pn(t, "add"), t
                        },
                        updateTransform: Tn.prototype.htmlUpdateTransform,
                        attr: function (t, n) {
                            var r = this,
                                s, o, a, f, h = r.element || {}, d = h.style,
                                v = h.nodeName,
                                m = r.renderer,
                                y = r.symbolName,
                                b, w = r.shadows,
                                E, S = r.attrSetters,
                                x = r;
                            Tt(t) && Mt(n) && (s = t, t = {}, t[s] = n);
                            if (Tt(t)) s = t, s === "strokeWidth" || s === "stroke-width" ? x = r.strokeweight : x = r[s];
                            else
                                for (s in t) {
                                    o = t[s], E = !1, f = S[s] && S[s].call(r, o, s);
                                    if (f !== !1 && o !== null) {
                                        f !== e && (o = f);
                                        if (y && /^(x|y|r|start|end|width|height|innerR|anchorX|anchorY)/.test(s)) b || (r.symbolAttr(t), b = !0), E = !0;
                                        else if (s === "d") {
                                            o = o || [], r.d = o.join(" "), a = o.length;
                                            var T = [];
                                            while (a--) kt(o[a]) ? T[a] = i(o[a] * 10) - 5 : o[a] === "Z" ? T[a] = "x" : T[a] = o[a];
                                            o = T.join(" ") || "x", h.path = o;
                                            if (w) {
                                                a = w.length;
                                                while (a--) w[a].path = w[a].cutOff ? this.cutOffPath(o, w[a].cutOff) : o
                                            }
                                            E = !0
                                        } else if (s === "visibility") {
                                            if (w) {
                                                a = w.length;
                                                while (a--) w[a].style[s] = o
                                            }
                                            v === "DIV" && (o = o === F ? "-999em" : 0, s = "top"), d[s] = o, E = !0
                                        } else if (s === "zIndex") o && (d[s] = o), E = !0;
                                        else if (s === "width" || s === "height") o = u(0, o), this[s] = o, r.updateClipping ? (r[s] = o, r.updateClipping()) : d[s] = o, E = !0;
                                        else if (s === "x" || s === "y") r[s] = o, d[{
                                            x: "left",
                                            y: "top"
                                        }[s]] = o;
                                        else if (s === "class") h.className = o;
                                        else if (s === "stroke") o = m.color(o, h, s), s = "strokecolor";
                                        else if (s === "stroke-width" || s === "strokeWidth") h.stroked = o ? !0 : !1, s = "strokeweight", r[s] = o, kt(o) && (o += R);
                                        else if (s === "dashstyle") {
                                            var N = h.getElementsByTagName("stroke")[0] || Bt(m.prepVML(["<stroke/>"]), null, null, h);
                                            N[s] = o || "solid", r.dashstyle = o, E = !0
                                        } else s === "fill" ? v === "SPAN" ? d.color = o : (h.filled = o !== U ? !0 : !1, o = m.color(o, h, s, r), s = "fillcolor") : v === "shape" && s === "rotation" ? (r[s] = o, h.style.left = -i(c(o * p) + 1) + R, h.style.top = i(l(o * p)) + R) : s === "translateX" || s === "translateY" || s === "rotation" ? (r[s] = o, r.updateTransform(), E = !0) : s === "text" && (this.bBox = null, h.innerHTML = o, E = !0);
                                        E || (g ? h[s] = o : _t(h, s, o))
                                    }
                                }
                            return x
                        },
                        clip: function (e) {
                            var t = this,
                                n, r = t.element,
                                i = r.parentNode,
                                s;
                            return e ? (n = e.members, n.push(t), t.destroyClip = function () {
                                Ot(n, t)
                            }, i && i.className === "highcharts-tracker" && !g && Ht(r, {
                                visibility: F
                            }), s = e.getCSS(t)) : (t.destroyClip && t.destroyClip(), s = {
                                clip: g ? "inherit" : "rect(auto)"
                            }), t.css(s)
                        },
                        css: Tn.prototype.htmlCss,
                        safeRemoveChild: function (e) {
                            e.parentNode && Qt(e)
                        },
                        destroy: function () {
                            return this.destroyClip && this.destroyClip(), Tn.prototype.destroy.apply(this)
                        },
                        empty: function () {
                            var e = this.element,
                                t = e.childNodes,
                                n = t.length,
                                r;
                            while (n--) r = t[n], r.parentNode.removeChild(r)
                        },
                        on: function (e, t) {
                            return this.element["on" + e] = function () {
                                var e = n.event;
                                e.target = e.srcElement, t(e)
                            }, this
                        },
                        cutOffPath: function (e, t) {
                            var n;
                            e = e.split(/[ ,]/), n = e.length;
                            if (n === 9 || n === 11) e[n - 4] = e[n - 2] = xt(e[n - 2]) - 10 * t;
                            return e.join(" ")
                        },
                        shadow: function (e, t, n) {
                            var r = [],
                                i, s = this.element,
                                o = this.renderer,
                                u, a = s.style,
                                f, l = s.path,
                                c, h, p, d;
                            l && typeof l.value != "string" && (l = "x"), h = l;
                            if (e) {
                                p = Pt(e.width, 3), d = (e.opacity || .15) / p;
                                for (i = 1; i <= 3; i++) c = p * 2 + 1 - 2 * i, n && (h = this.cutOffPath(l.value, c + .5)), f = ['<shape isShadow="true" strokeweight="', c, '" filled="false" path="', h, '" coordsize="10 10" style="', s.style.cssText, '" />'], u = Bt(o.prepVML(f), null, {
                                    left: xt(a.left) + (e.offsetX || 1),
                                    top: xt(a.top) + (e.offsetY || 1)
                                }), n && (u.cutOff = c + 1), f = ['<stroke color="', e.color || "black", '" opacity="', d * i, '"/>'], Bt(o.prepVML(f), null, null, u), t ? t.element.appendChild(u) : s.parentNode.insertBefore(u, s), r.push(u);
                                this.shadows = r
                            }
                            return this
                        }
                    };
                    kn = jt(Tn, kn);
                    var Ln = {
                        Element: kn,
                        isIE8: d.indexOf("MSIE 8.0") > -1,
                        init: function (e, n, r) {
                            var i = this,
                                s, o;
                            i.alignedObjects = [], s = i.createElement(H), o = s.element, o.style.position = j, e.appendChild(s.element), i.box = o, i.boxWrapper = s, i.setSize(n, r, !1), t.namespaces.hcv || (t.namespaces.add("hcv", "urn:schemas-microsoft-com:vml"), t.createStyleSheet().cssText = "hcv\\:fill, hcv\\:path, hcv\\:shape, hcv\\:stroke{ behavior:url(#default#VML); display: inline-block; } ")
                        },
                        isHidden: function () {
                            return !this.box.offsetWidth
                        },
                        clipRect: function (e, t, n, r) {
                            var s = this.createElement(),
                                o = Nt(e);
                            return Et(s, {
                                members: [],
                                left: o ? e.x : e,
                                top: o ? e.y : t,
                                width: o ? e.width : n,
                                height: o ? e.height : r,
                                getCSS: function (e) {
                                    var t = e.inverted,
                                        n = this,
                                        r = n.top,
                                        s = n.left,
                                        o = s + n.width,
                                        u = r + n.height,
                                        a = {
                                            clip: "rect(" + i(t ? s : r) + "px," + i(t ? u : o) + "px," + i(t ? o : u) + "px," + i(t ? r : s) + "px)"
                                        };
                                    return !t && g && e.element.nodeName !== "IMG" && Et(a, {
                                        width: o + R,
                                        height: u + R
                                    }), a
                                },
                                updateClipping: function () {
                                    on(s.members, function (e) {
                                        e.css(s.getCSS(e))
                                    })
                                }
                            })
                        },
                        color: function (e, t, n, i) {
                            var s = this,
                                o, u = /^rgba/,
                                a, f, l = U;
                            e && e.linearGradient ? f = "gradient" : e && e.radialGradient && (f = "pattern");
                            if (f) {
                                var c, p, d = e.linearGradient || e.radialGradient,
                                    v, m, g, y, b, w, E, S, x = "",
                                    T = e.stops,
                                    N, C, k = [],
                                    L = function () {
                                        a = ['<fill colors="' + k.join(",") + '" opacity="', w, '" o:opacity2="', b, '" type="', f, '" ', x, 'focus="100%" method="any" />'], Bt(s.prepVML(a), null, null, t)
                                    };
                                N = T[0], C = T[T.length - 1], N[0] > 0 && T.unshift([0, N[1]]), C[0] < 1 && T.push([1, C[1]]), on(T, function (e, t) {
                                    u.test(e[1]) ? (o = xn(e[1]), c = o.get("rgb"), p = o.get("a")) : (c = e[1], p = 1), k.push(e[0] * 100 + "% " + c), t ? (w = p, E = c) : (b = p, S = c)
                                });
                                if (n === "fill")
                                    if (f === "gradient") v = d.x1 || d[0] || 0, m = d.y1 || d[1] || 0, g = d.x2 || d[2] || 0, y = d.y2 || d[3] || 0, x = 'angle="' + (90 - r.atan((y - m) / (g - v)) * 180 / h) + '"', L();
                                    else {
                                        var O = d.r,
                                            M = O * 2,
                                            _ = O * 2,
                                            D = d.cx,
                                            P = d.cy,
                                            H = t.radialReference,
                                            B, j = function () {
                                                H && (B = i.getBBox(), D += (H[0] - B.x) / B.width - .5, P += (H[1] - B.y) / B.height - .5, M *= H[2] / B.width, _ *= H[2] / B.height), x = 'src="' + A.global.VMLRadialGradientURL + '" ' + 'size="' + M + "," + _ + '" ' + 'origin="0.5,0.5" ' + 'position="' + D + "," + P + '" ' + 'color2="' + S + '" ', L()
                                            };
                                        i.added ? j() : cn(i, "add", j), l = E
                                    } else l = c
                            } else if (u.test(e) && t.tagName !== "IMG") o = xn(e), a = ["<", n, ' opacity="', o.get("a"), '"/>'], Bt(this.prepVML(a), null, null, t), l = o.get("rgb");
                            else {
                                var F = t.getElementsByTagName(n);
                                F.length && (F[0].opacity = 1), l = e
                            }
                            return l
                        },
                        prepVML: function (e) {
                            var t = "display:inline-block;behavior:url(#default#VML);",
                                n = this.isIE8;
                            return e = e.join(""), n ? (e = e.replace("/>", ' xmlns="urn:schemas-microsoft-com:vml" />'), e.indexOf('style="') === -1 ? e = e.replace("/>", ' style="' + t + '" />') : e = e.replace('style="', 'style="' + t)) : e = e.replace("<", "<hcv:"), e
                        },
                        text: Nn.prototype.html,
                        path: function (e) {
                            var t = {
                                coordsize: "10 10"
                            };
                            return Ct(e) ? t.d = e : Nt(e) && Et(t, e), this.createElement("shape").attr(t)
                        },
                        circle: function (e, t, n) {
                            return this.symbol("circle").attr({
                                x: e - n,
                                y: t - n,
                                width: 2 * n,
                                height: 2 * n
                            })
                        },
                        g: function (e) {
                            var t, n;
                            return e && (n = {
                                className: I + e,
                                "class": I + e
                            }), t = this.createElement(H).attr(n), t
                        },
                        image: function (e, t, n, r, i) {
                            var s = this.createElement("img").attr({
                                src: e
                            });
                            return arguments.length > 1 && s.css({
                                left: t,
                                top: n,
                                width: r,
                                height: i
                            }), s
                        },
                        rect: function (e, t, n, r, i, s) {
                            Nt(e) && (t = e.y, n = e.width, r = e.height, s = e.strokeWidth, e = e.x);
                            var o = this.symbol("rect");
                            return o.r = i, o.attr(o.crisp(s, e, t, u(n, 0), u(r, 0)))
                        },
                        invertChild: function (e, t) {
                            var n = t.style;
                            Ht(e, {
                                flip: "x",
                                left: xt(n.width) - 1,
                                top: xt(n.height) - 1,
                                rotation: -90
                            })
                        },
                        symbols: {
                            arc: function (e, t, n, r, i) {
                                var s = i.start,
                                    o = i.end,
                                    u = i.r || n || r,
                                    a = l(s),
                                    f = c(s),
                                    p = l(o),
                                    d = c(o),
                                    v = i.innerR,
                                    m = .08 / u,
                                    g = v && .1 / v || 0,
                                    y;
                                return o - s === 0 ? ["x"] : (2 * h - o + s < m ? p = -m : o - s < g && (p = l(s + g)), y = ["wa", e - u, t - u, e + u, t + u, e + u * a, t + u * f, e + u * p, t + u * d], i.open && !v && y.push("e", z, e, t), y.push("at", e - v, t - v, e + v, t + v, e + v * p, t + v * d, e + v * a, t + v * f, "x", "e"), y)
                            },
                            circle: function (e, t, n, r) {
                                return ["wa", e, t, e + n, t + r, e + n, t + r / 2, e + n, t + r / 2, "e"]
                            },
                            rect: function (e, t, n, r, i) {
                                var s = e + n,
                                    o = t + r,
                                    u, f;
                                return !Mt(i) || !i.r ? u = Nn.prototype.symbols.square.apply(0, arguments) : (f = a(i.r, n, r), u = [z, e + f, t, W, s - f, t, "wa", s - 2 * f, t, s, t + 2 * f, s - f, t, s, t + f, W, s, o - f, "wa", s - 2 * f, o - 2 * f, s, o, s, o - f, s - f, o, W, e + f, o, "wa", e, o - 2 * f, e + 2 * f, o, e + f, o, e, o - f, W, e, t + f, "wa", e, t, e + 2 * f, t + 2 * f, e, t + f, e + f, t, "x", "e"]), u
                            }
                        }
                    };
                    Cn = function () {
                        this.init.apply(this, arguments)
                    }, Cn.prototype = ln(Nn.prototype, Ln), T = Cn
                }
                var An, On;
                x && (An = function () {}, An.prototype.symbols = {}, On = function () {
                    function t() {
                        var t = e.length,
                            n;
                        for (n = 0; n < t; n++) e[n]();
                        e = []
                    }
                    var e = [];
                    return {
                        push: function (n, r) {
                            e.length === 0 && rn(r, t), e.push(n)
                        }
                    }
                }()), T = Cn || An || Nn, Mn.prototype = {
                    addLabel: function () {
                        var e = this,
                            t = e.axis,
                            n = t.options,
                            r = t.chart,
                            s = t.horiz,
                            o = t.categories,
                            a = e.pos,
                            f = n.labels,
                            l, c = t.tickPositions,
                            h = o && s && o.length && !f.step && !f.staggerLines && !f.rotation && r.plotWidth / c.length || !s && r.plotWidth / 2,
                            p = a === c[0],
                            d = a === c[c.length - 1],
                            v, m, g = o && Mt(o[a]) ? o[a] : a,
                            y = e.label,
                            b = c.info,
                            w;
                        t.isDatetimeAxis && b && (w = n.dateTimeLabelFormats[b.higherRanks[a] || b.unitName]), e.isFirst = p, e.isLast = d, l = t.labelFormatter.call({
                            axis: t,
                            chart: r,
                            isFirst: p,
                            isLast: d,
                            dateTimeLabelFormat: w,
                            value: t.isLog ? Yt(At(g)) : g
                        }), v = h && {
                            width: u(1, i(h - 2 * (f.padding || 10))) + R
                        }, v = Et(v, f.style), Mt(y) ? y && y.attr({
                            text: l
                        }).css(v) : (m = {
                            align: f.align
                        }, kt(f.rotation) && (m.rotation = f.rotation), e.label = Mt(l) && f.enabled ? r.renderer.text(l, 0, 0, f.useHTML).attr(m).css(v).add(t.labelGroup) : null)
                    },
                    getLabelSize: function () {
                        var e = this.label,
                            t = this.axis;
                        return e ? (this.labelBBox = e.getBBox())[t.horiz ? "height" : "width"] : 0
                    },
                    getLabelSides: function () {
                        var e = this.labelBBox,
                            t = this.axis,
                            n = t.options,
                            r = n.labels,
                            i = e.width,
                            s = i * {
                                left: 0,
                                center: .5,
                                right: 1
                            }[r.align] - r.x;
                        return [-s, i - s]
                    },
                    handleOverflow: function (e, t) {
                        var n = !0,
                            r = this.axis,
                            i = r.chart,
                            s = this.isFirst,
                            o = this.isLast,
                            u = t.x,
                            a = r.reversed,
                            f = r.tickPositions;
                        if (s || o) {
                            var l = this.getLabelSides(),
                                c = l[0],
                                h = l[1],
                                p = i.plotLeft,
                                d = p + r.len,
                                v = r.ticks[f[e + (s ? 1 : -1)]],
                                m = v && v.label.xy && v.label.xy.x + v.getLabelSides()[s ? 0 : 1];
                            s && !a || o && a ? u + c < p && (u = p - c, v && u + h > m && (n = !1)) : u + h > d && (u = d - h, v && u + c < m && (n = !1)), t.x = u
                        }
                        return n
                    },
                    getPosition: function (e, t, n, r) {
                        var i = this.axis,
                            s = i.chart,
                            o = r && s.oldChartHeight || s.chartHeight;
                        return {
                            x: e ? i.translate(t + n, null, null, r) + i.transB : i.left + i.offset + (i.opposite ? (r && s.oldChartWidth || s.chartWidth) - i.right - i.left : 0),
                            y: e ? o - i.bottom + i.offset - (i.opposite ? i.height : 0) : o - i.translate(t + n, null, null, r) - i.transB
                        }
                    },
                    getLabelPosition: function (e, t, n, r, i, s, o, u) {
                        var a = this.axis,
                            f = a.transA,
                            l = a.reversed,
                            c = a.staggerLines;
                        return e = e + i.x - (s && r ? s * f * (l ? -1 : 1) : 0), t = t + i.y - (s && !r ? s * f * (l ? 1 : -1) : 0), Mt(i.y) || (t += xt(n.styles.lineHeight) * .9 - n.getBBox().height / 2), c && (t += o / (u || 1) % c * 16), {
                            x: e,
                            y: t
                        }
                    },
                    getMarkPath: function (e, t, n, r, i, s) {
                        return s.crispLine([z, e, t, W, e + (i ? 0 : -n), t + (i ? n : 0)], r)
                    },
                    render: function (t, n) {
                        var r = this,
                            i = r.axis,
                            s = i.options,
                            o = i.chart,
                            u = o.renderer,
                            a = i.horiz,
                            f = r.type,
                            l = r.label,
                            c = r.pos,
                            h = s.labels,
                            p = r.gridLine,
                            d = f ? f + "Grid" : "grid",
                            v = f ? f + "Tick" : "tick",
                            m = s[d + "LineWidth"],
                            g = s[d + "LineColor"],
                            y = s[d + "LineDashStyle"],
                            b = s[v + "Length"],
                            w = s[v + "Width"] || 0,
                            E = s[v + "Color"],
                            S = s[v + "Position"],
                            x, T = r.mark,
                            N, C = h.step,
                            k, L = !0,
                            A = i.tickmarkOffset,
                            O = r.getPosition(a, c, A, n),
                            M = O.x,
                            _ = O.y,
                            D = i.staggerLines;
                        m && (x = i.getPlotLinePath(c + A, m, n), p === e && (k = {
                            stroke: g,
                            "stroke-width": m
                        }, y && (k.dashstyle = y), f || (k.zIndex = 1), r.gridLine = p = m ? u.path(x).attr(k).add(i.gridGroup) : null), !n && p && x && p[r.isNew ? "attr" : "animate"]({
                            d: x
                        })), w && b && (S === "inside" && (b = -b), i.opposite && (b = -b), N = r.getMarkPath(M, _, b, w, a, u), T ? T.animate({
                            d: N
                        }) : r.mark = u.path(N).attr({
                            stroke: E,
                            "stroke-width": w
                        }).add(i.axisGroup)), l && !isNaN(M) && (l.xy = O = r.getLabelPosition(M, _, l, a, h, A, t, C), r.isFirst && !Pt(s.showFirstLabel, 1) || r.isLast && !Pt(s.showLastLabel, 1) ? L = !1 : !D && a && h.overflow === "justify" && !r.handleOverflow(t, O) && (L = !1), C && t % C && (L = !1), L ? (l[r.isNew ? "attr" : "animate"](O), l.show(), r.isNew = !1) : l.hide())
                    },
                    destroy: function () {
                        Kt(this, this.axis)
                    }
                }, _n.prototype = {
                    render: function () {
                        var e = this,
                            t = e.axis,
                            n = t.horiz,
                            r = (t.pointRange || 0) / 2,
                            i = e.options,
                            s = i.label,
                            o = e.label,
                            f = i.width,
                            l = i.to,
                            c = i.from,
                            h = Mt(c) && Mt(l),
                            p = i.value,
                            d = i.dashStyle,
                            v = e.svgElem,
                            m = [],
                            g, y, b, w, E, S, x = i.color,
                            T = i.zIndex,
                            N = i.events,
                            C, k = t.chart.renderer;
                        t.isLog && (c = Lt(c), l = Lt(l), p = Lt(p));
                        if (f) m = t.getPlotLinePath(p, f), C = {
                            stroke: x,
                            "stroke-width": f
                        }, d && (C.dashstyle = d);
                        else {
                            if (!h) return;
                            c = u(c, t.min - r), l = a(l, t.max + r), m = t.getPlotBandPath(c, l, i), C = {
                                fill: x
                            }, i.borderWidth && (C.stroke = i.borderColor, C["stroke-width"] = i.borderWidth)
                        }
                        Mt(T) && (C.zIndex = T);
                        if (v) m ? v.animate({
                            d: m
                        }, null, v.onGetPath) : (v.hide(), v.onGetPath = function () {
                            v.show()
                        });
                        else if (m && m.length) {
                            e.svgElem = v = k.path(m).attr(C).add();
                            if (N) {
                                g = function (t) {
                                    v.on(t, function (n) {
                                        N[t].apply(e, [n])
                                    })
                                };
                                for (y in N) g(y)
                            }
                        }
                        return s && Mt(s.text) && m && m.length && t.width > 0 && t.height > 0 ? (s = ln({
                            align: n && h && "center",
                            x: n ? !h && 4 : 10,
                            verticalAlign: !n && h && "middle",
                            y: n ? h ? 16 : 10 : h ? 6 : -4,
                            rotation: n && !h && 90
                        }, s), o || (e.label = o = k.text(s.text, 0, 0).attr({
                            align: s.textAlign || s.align,
                            rotation: s.rotation,
                            zIndex: T
                        }).css(s.style).add()), b = [m[1], m[4], Pt(m[6], m[1])], w = [m[2], m[5], Pt(m[7], m[2])], E = $t(b), S = $t(w), o.align(s, !1, {
                            x: E,
                            y: S,
                            width: Jt(b) - E,
                            height: Jt(w) - S
                        }), o.show()) : o && o.hide(), e
                    },
                    destroy: function () {
                        var e = this,
                            t = e.axis;
                        Ot(t.plotLinesAndBands, e), Kt(e, this.axis)
                    }
                }, Dn.prototype = {
                    destroy: function () {
                        Kt(this, this.axis)
                    },
                    setTotal: function (e) {
                        this.total = e, this.cum = e
                    },
                    render: function (e) {
                        var t = this.options.formatter.call(this);
                        this.label ? this.label.attr({
                            text: t,
                            visibility: F
                        }) : this.label = this.axis.chart.renderer.text(t, 0, 0).css(this.options.style).attr({
                            align: this.textAlign,
                            rotation: this.options.rotation,
                            visibility: F
                        }).add(e)
                    },
                    setOffset: function (e, t) {
                        var n = this,
                            r = n.axis,
                            i = r.chart,
                            s = i.inverted,
                            o = this.isNegative,
                            u = r.translate(this.total, 0, 0, 0, 1),
                            a = r.translate(0),
                            l = f(u - a),
                            c = i.xAxis[0].translate(this.x) + e,
                            h = i.plotHeight,
                            p = {
                                x: s ? o ? u : u - l : c,
                                y: s ? h - c - t : o ? h - u - l : h - u,
                                width: s ? l : t,
                                height: s ? t : l
                            };
                        this.label && this.label.align(this.alignOptions, null, p).attr({
                            visibility: q
                        })
                    }
                }, Pn.prototype = {
                    defaultOptions: {
                        dateTimeLabelFormats: {
                            millisecond: "%H:%M:%S.%L",
                            second: "%H:%M:%S",
                            minute: "%H:%M",
                            hour: "%H:%M",
                            day: "%e. %b",
                            week: "%e. %b",
                            month: "%b '%y",
                            year: "%Y"
                        },
                        endOnTick: !1,
                        gridLineColor: "#C0C0C0",
                        labels: gn,
                        lineColor: "#C0D0E0",
                        lineWidth: 1,
                        minPadding: .01,
                        maxPadding: .01,
                        minorGridLineColor: "#E0E0E0",
                        minorGridLineWidth: 1,
                        minorTickColor: "#A0A0A0",
                        minorTickLength: 2,
                        minorTickPosition: "outside",
                        startOfWeek: 1,
                        startOnTick: !1,
                        tickColor: "#C0D0E0",
                        tickLength: 5,
                        tickmarkPlacement: "between",
                        tickPixelInterval: 100,
                        tickPosition: "outside",
                        tickWidth: 1,
                        title: {
                            align: "middle",
                            style: {
                                color: "#6D869F",
                                fontWeight: "bold"
                            }
                        },
                        type: "linear"
                    },
                    defaultYAxisOptions: {
                        endOnTick: !0,
                        gridLineWidth: 1,
                        tickPixelInterval: 72,
                        showLastLabel: !0,
                        labels: {
                            align: "right",
                            x: -8,
                            y: 3
                        },
                        lineWidth: 0,
                        maxPadding: .05,
                        minPadding: .05,
                        startOnTick: !0,
                        tickWidth: 0,
                        title: {
                            rotation: 270,
                            text: "Y-values"
                        },
                        stackLabels: {
                            enabled: !1,
                            formatter: function () {
                                return this.total
                            },
                            style: gn.style
                        }
                    },
                    defaultLeftAxisOptions: {
                        labels: {
                            align: "right",
                            x: -8,
                            y: null
                        },
                        title: {
                            rotation: 270
                        }
                    },
                    defaultRightAxisOptions: {
                        labels: {
                            align: "left",
                            x: 8,
                            y: null
                        },
                        title: {
                            rotation: 90
                        }
                    },
                    defaultBottomAxisOptions: {
                        labels: {
                            align: "center",
                            x: 0,
                            y: 14
                        },
                        title: {
                            rotation: 0
                        }
                    },
                    defaultTopAxisOptions: {
                        labels: {
                            align: "center",
                            x: 0,
                            y: -5
                        },
                        title: {
                            rotation: 0
                        }
                    },
                    init: function (t, n) {
                        var r = n.isX,
                            i = this;
                        i.horiz = t.inverted ? !r : r, i.isXAxis = r, i.xOrY = r ? "x" : "y", i.opposite = n.opposite, i.side = i.horiz ? i.opposite ? 0 : 2 : i.opposite ? 1 : 3, i.setOptions(n);
                        var s = this.options,
                            o = s.type,
                            u = o === "datetime";
                        i.labelFormatter = s.labels.formatter || i.defaultLabelFormatter, i.staggerLines = i.horiz && s.labels.staggerLines, i.userOptions = n, i.minPixelPadding = 0, i.chart = t, i.reversed = s.reversed, i.categories = s.categories, i.isLog = o === "logarithmic", i.isLinked = Mt(s.linkedTo), i.isDatetimeAxis = u, i.tickmarkOffset = s.categories && s.tickmarkPlacement === "between" ? .5 : 0, i.ticks = {}, i.minorTicks = {}, i.plotLinesAndBands = [], i.alternateBands = {}, i.len = 0, i.minRange = i.userMinRange = s.minRange || s.maxZoom, i.range = s.range, i.offset = s.offset || 0, i.stacks = {}, i.max = null, i.min = null;
                        var a, f = i.options.events;
                        t.axes.push(i), t[r ? "xAxis" : "yAxis"].push(i), i.series = [], t.inverted && r && i.reversed === e && (i.reversed = !0), i.removePlotBand = i.removePlotBandOrLine, i.removePlotLine = i.removePlotBandOrLine, i.addPlotBand = i.addPlotBandOrLine, i.addPlotLine = i.addPlotBandOrLine;
                        for (a in f) cn(i, a, f[a]);
                        i.isLog && (i.val2lin = Lt, i.lin2val = At)
                    },
                    setOptions: function (e) {
                        this.options = ln(this.defaultOptions, this.isXAxis ? {} : this.defaultYAxisOptions, [this.defaultTopAxisOptions, this.defaultRightAxisOptions, this.defaultBottomAxisOptions, this.defaultLeftAxisOptions][this.side], ln(A[this.isXAxis ? "xAxis" : "yAxis"], e))
                    },
                    defaultLabelFormatter: function () {
                        var t = this.axis,
                            n = this.value,
                            r = t.categories,
                            i = this.dateTimeLabelFormat,
                            s = A.lang.numericSymbols,
                            o = s && s.length,
                            u, a, f = t.isLog ? n : t.tickInterval;
                        if (r) a = n;
                        else if (i) a = O(i, n);
                        else if (o && f >= 1e3)
                            while (o-- && a === e) u = Math.pow(1e3, o + 1), f >= u && s[o] !== null && (a = It(n / u, -1) + s[o]);
                        return a === e && (n >= 1e3 ? a = It(n, 0) : a = It(n, -1)), a
                    },
                    getSeriesExtremes: function () {
                        var t = this,
                            n = t.chart,
                            r = t.stacks,
                            i = [],
                            s = [],
                            o;
                        t.hasVisibleSeries = !1, t.dataMin = t.dataMax = null, on(t.series, function (f) {
                            if (f.visible || !n.options.chart.ignoreHiddenSeries) {
                                var l = f.options,
                                    c, h, p, d, v, m, g, y, b, w, E = l.threshold,
                                    S, x = [],
                                    T = 0;
                                t.hasVisibleSeries = !0, t.isLog && E <= 0 && (E = l.threshold = null);
                                if (t.isXAxis) g = f.xData, g.length && (t.dataMin = a(Pt(t.dataMin, g[0]), $t(g)), t.dataMax = u(Pt(t.dataMax, g[0]), Jt(g)));
                                else {
                                    var N, C, k, L = f.cropped,
                                        A = f.xAxis.getExtremes(),
                                        O, M = !! f.modifyValue;
                                    c = l.stacking, t.usePercentage = c === "percent", c && (v = l.stack, d = f.type + Pt(v, ""), m = "-" + d, f.stackKey = d, h = i[d] || [], i[d] = h, p = s[m] || [], s[m] = p), t.usePercentage && (t.dataMin = 0, t.dataMax = 99), g = f.processedXData, y = f.processedYData, S = y.length;
                                    for (o = 0; o < S; o++) {
                                        b = g[o], w = y[o];
                                        if (w !== null && w !== e) {
                                            c ? (N = w < E, C = N ? p : h, k = N ? m : d, w = C[b] = Mt(C[b]) ? C[b] + w : w, r[k] || (r[k] = {}), r[k][b] || (r[k][b] = new Dn(t, t.options.stackLabels, N, b, v)), r[k][b].setTotal(w)) : M && (w = f.modifyValue(w));
                                            if (L || (g[o + 1] || b) >= A.min && (g[o - 1] || b) <=
                                                A.max) {
                                                O = w.length;
                                                if (O)
                                                    while (O--) w[O] !== null && (x[T++] = w[O]);
                                                else x[T++] = w
                                            }
                                        }
                                    }!t.usePercentage && x.length && (t.dataMin = a(Pt(t.dataMin, x[0]), $t(x)), t.dataMax = u(Pt(t.dataMax, x[0]), Jt(x))), Mt(E) && (t.dataMin >= E ? (t.dataMin = E, t.ignoreMinPadding = !0) : t.dataMax < E && (t.dataMax = E, t.ignoreMaxPadding = !0))
                                }
                            }
                        })
                    },
                    translate: function (e, t, n, r, i, s) {
                        var o = this,
                            u = o.len,
                            a = 1,
                            f = 0,
                            l = r ? o.oldTransA : o.transA,
                            c = r ? o.oldMin : o.min,
                            h, p = o.options.ordinal || o.isLog && i;
                        return l || (l = o.transA), n && (a *= -1, f = u), o.reversed && (a *= -1, f -= a * u), t ? (o.reversed && (e = u - e), h = e / l + c, p && (h = o.lin2val(h))) : (p && (e = o.val2lin(e)), h = a * (e - c) * l + f + a * o.minPixelPadding + (s ? l * o.pointRange / 2 : 0)), h
                    },
                    getPlotLinePath: function (e, t, n) {
                        var r = this,
                            s = r.chart,
                            o = r.left,
                            u = r.top,
                            a, f, l, c, h = r.translate(e, null, null, n),
                            p = n && s.oldChartHeight || s.chartHeight,
                            d = n && s.oldChartWidth || s.chartWidth,
                            v, m = r.transB;
                        a = l = i(h + m), f = c = i(p - h - m);
                        if (isNaN(h)) v = !0;
                        else if (r.horiz) {
                            f = u, c = p - r.bottom;
                            if (a < o || a > o + r.width) v = !0
                        } else {
                            a = o, l = d - r.right;
                            if (f < u || f > u + r.height) v = !0
                        }
                        return v ? null : s.renderer.crispLine([z, a, f, W, l, c], t || 0)
                    },
                    getPlotBandPath: function (e, t) {
                        var n = this.getPlotLinePath(t),
                            r = this.getPlotLinePath(e);
                        return r && n ? r.push(n[4], n[5], n[1], n[2]) : r = null, r
                    },
                    getLinearTickPositions: function (e, t, n) {
                        var r, i, u = Yt(s(t / e) * e),
                            a = Yt(o(n / e) * e),
                            f = [];
                        r = u;
                        while (r <= a) {
                            f.push(r), r = Yt(r + e);
                            if (r === i) break;
                            i = r
                        }
                        return f
                    },
                    getLogTickPositions: function (e, t, n, o) {
                        var u = this,
                            a = u.options,
                            f = u.len,
                            l = [];
                        o || (u._minorAutoInterval = null);
                        if (e >= .5) e = i(e), l = u.getLinearTickPositions(e, t, n);
                        else if (e >= .08) {
                            var c = s(t),
                                h, p, d, v, m, g, y;
                            e > .3 ? h = [1, 2, 4] : e > .15 ? h = [1, 2, 4, 6, 8] : h = [1, 2, 3, 4, 5, 6, 7, 8, 9];
                            for (p = c; p < n + 1 && !y; p++) {
                                v = h.length;
                                for (d = 0; d < v && !y; d++) m = Lt(At(p) * h[d]), m > t && l.push(g), g > n && (y = !0), g = m
                            }
                        } else {
                            var b = At(t),
                                w = At(n),
                                E = a[o ? "minorTickInterval" : "tickInterval"],
                                S = E === "auto" ? null : E,
                                x = a.tickPixelInterval / (o ? 5 : 1),
                                T = o ? f / u.tickPositions.length : f;
                            e = Pt(S, u._minorAutoInterval, (w - b) * x / (T || 1)), e = Ut(e, null, r.pow(10, s(r.log(e) / r.LN10))), l = fn(u.getLinearTickPositions(e, b, w), Lt), o || (u._minorAutoInterval = e / 5)
                        }
                        return o || (u.tickInterval = e), l
                    },
                    getMinorTickPositions: function () {
                        var e = this,
                            t = e.tickPositions,
                            n = e.minorTickInterval,
                            r = [],
                            i, s, o;
                        if (e.isLog) {
                            o = t.length;
                            for (s = 1; s < o; s++) r = r.concat(e.getLogTickPositions(n, t[s - 1], t[s], !0))
                        } else
                            for (i = e.min + (t[0] - e.min) % n; i <= e.max; i += n) r.push(i);
                        return r
                    },
                    adjustForMinRange: function () {
                        var t = this,
                            n = t.options,
                            r = t.min,
                            i = t.max,
                            s, o = t.dataMax - t.dataMin >= t.minRange,
                            u, f, l, c, h, p, d;
                        t.isXAxis && t.minRange === e && !t.isLog && (Mt(n.min) || Mt(n.max) ? t.minRange = null : (on(t.series, function (t) {
                            c = t.xData, h = t.xIncrement ? 1 : c.length - 1;
                            for (f = h; f > 0; f--) {
                                l = c[f] - c[f - 1];
                                if (u === e || l < u) u = l
                            }
                        }), t.minRange = a(u * 5, t.dataMax - t.dataMin)));
                        if (i - r < t.minRange) {
                            var v = t.minRange;
                            s = (v - i + r) / 2, p = [r - s, Pt(n.min, r - s)], o && (p[2] = t.dataMin), r = Jt(p), d = [r + v, Pt(n.max, r + v)], o && (d[2] = t.dataMax), i = $t(d), i - r < v && (p[0] = i - v, p[1] = Pt(n.min, i - v), r = Jt(p))
                        }
                        t.min = r, t.max = i
                    },
                    setAxisTranslation: function () {
                        var e = this,
                            t = e.max - e.min,
                            n = 0,
                            r, i = 0,
                            s = 0,
                            o = e.transA;
                        e.isXAxis && (e.isLinked ? i = e.linkedParent.minPointOffset : on(e.series, function (e) {
                            var t = e.pointRange,
                                o = e.options.pointPlacement,
                                f = e.closestPointRange;
                            n = u(n, t), i = u(i, o ? 0 : t / 2), s = u(s, o === "on" ? 0 : t), !e.noSharedTooltip && Mt(f) && (r = Mt(r) ? a(r, f) : f)
                        }), e.minPointOffset = i, e.pointRange = n, e.closestPointRange = r), e.oldTransA = o, e.translationSlope = e.transA = o = e.len / (t + s || 1), e.transB = e.horiz ? e.left : e.bottom, e.minPixelPadding = o * i
                    },
                    setTickPositions: function (e) {
                        var t = this,
                            n = t.chart,
                            i = t.options,
                            o = t.isLog,
                            f = t.isDatetimeAxis,
                            l = t.isXAxis,
                            c = t.isLinked,
                            h = t.options.tickPositioner,
                            p, d = i.maxPadding,
                            v = i.minPadding,
                            m, g, y = i.tickInterval,
                            b = i.minTickInterval,
                            w = i.tickPixelInterval,
                            E, S = t.categories;
                        c ? (t.linkedParent = n[l ? "xAxis" : "yAxis"][i.linkedTo], g = t.linkedParent.getExtremes(), t.min = Pt(g.min, g.dataMin), t.max = Pt(g.max, g.dataMax), i.type !== t.linkedParent.options.type && Gt(11, 1)) : (t.min = Pt(t.userMin, i.min, t.dataMin), t.max = Pt(t.userMax, i.max, t.dataMax)), o && (!e && a(t.min, Pt(t.dataMin, t.min)) <= 0 && Gt(10, 1), t.min = Yt(Lt(t.min)), t.max = Yt(Lt(t.max))), t.range && (t.userMin = t.min = u(t.min, t.max - t.range), t.userMax = t.max, e && (t.range = null)), t.adjustForMinRange(), !S && !t.usePercentage && !c && Mt(t.min) && Mt(t.max) && (m = t.max - t.min || 1, !Mt(i.min) && !Mt(t.userMin) && v && (t.dataMin < 0 || !t.ignoreMinPadding) && (t.min -= m * v), !Mt(i.max) && !Mt(t.userMax) && d && (t.dataMax > 0 || !t.ignoreMaxPadding) && (t.max += m * d)), t.min === t.max || t.min === undefined || t.max === undefined ? t.tickInterval = 1 : c && !y && w === t.linkedParent.options.tickPixelInterval ? t.tickInterval = t.linkedParent.tickInterval : t.tickInterval = Pt(y, S ? 1 : (t.max - t.min) * w / (t.len || 1)), l && !e && on(t.series, function (e) {
                            e.processData(t.min !== t.oldMin || t.max !== t.oldMax)
                        }), t.setAxisTranslation(e), t.beforeSetTickPositions && t.beforeSetTickPositions(), t.postProcessTickInterval && (t.tickInterval = t.postProcessTickInterval(t.tickInterval)), !y && t.tickInterval < b && (t.tickInterval = b), !f && !o && (p = r.pow(10, s(r.log(t.tickInterval) / r.LN10)), y || (t.tickInterval = Ut(t.tickInterval, null, p, i))), t.minorTickInterval = i.minorTickInterval === "auto" && t.tickInterval ? t.tickInterval / 5 : i.minorTickInterval, t.tickPositions = E = i.tickPositions || h && h.apply(t, [t.min, t.max]), E || (f ? E = (t.getNonLinearTimeTicks || Wt)(zt(t.tickInterval, i.units), t.min, t.max, i.startOfWeek, t.ordinalPositions, t.closestPointRange, !0) : o ? E = t.getLogTickPositions(t.tickInterval, t.min, t.max) : E = t.getLinearTickPositions(t.tickInterval, t.min, t.max), t.tickPositions = E);
                        if (!c) {
                            var x = E[0],
                                T = E[E.length - 1],
                                N = t.minPointOffset || 0;
                            i.startOnTick ? t.min = x : t.min - N > x && E.shift(), i.endOnTick ? t.max = T : t.max + N < T && E.pop()
                        }
                    },
                    setMaxTicks: function () {
                        var e = this.chart,
                            t = e.maxTicks,
                            n = this.tickPositions,
                            r = this.xOrY;
                        t || (t = {
                            x: 0,
                            y: 0
                        }), !this.isLinked && !this.isDatetimeAxis && n.length > t[r] && this.options.alignTicks !== !1 && (t[r] = n.length), e.maxTicks = t
                    },
                    adjustTickAmount: function () {
                        var e = this,
                            t = e.chart,
                            n = e.xOrY,
                            r = e.tickPositions,
                            i = t.maxTicks;
                        if (i && i[n] && !e.isDatetimeAxis && !e.categories && !e.isLinked && e.options.alignTicks !== !1) {
                            var s = e.tickAmount,
                                o = r.length,
                                u;
                            e.tickAmount = u = i[n];
                            if (o < u) {
                                while (r.length < u) r.push(Yt(r[r.length - 1] + e.tickInterval));
                                e.transA *= (o - 1) / (u - 1), e.max = r[r.length - 1]
                            }

                            Mt(s) && u !== s && (e.isDirty = !0)
                        }
                    },
                    setScale: function () {
                        var e = this,
                            t = e.stacks,
                            n, r, i, s;
                        e.oldMin = e.min, e.oldMax = e.max, e.oldAxisLength = e.len, e.setAxisSize(), s = e.len !== e.oldAxisLength, on(e.series, function (e) {
                            if (e.isDirtyData || e.isDirty || e.xAxis.isDirty) i = !0
                        });
                        if (s || i || e.isLinked || e.userMin !== e.oldUserMin || e.userMax !== e.oldUserMax) e.getSeriesExtremes(), e.setTickPositions(), e.oldUserMin = e.userMin, e.oldUserMax = e.userMax, e.isDirty || (e.isDirty = s || e.min !== e.oldMin || e.max !== e.oldMax);
                        if (!e.isXAxis)
                            for (n in t)
                                for (r in t[n]) t[n][r].cum = t[n][r].total;
                        e.setMaxTicks()
                    },
                    setExtremes: function (e, t, n, r, i) {
                        var s = this,
                            o = s.chart;
                        n = Pt(n, !0), i = Et(i, {
                            min: e,
                            max: t
                        }), pn(s, "setExtremes", i, function () {
                            s.userMin = e, s.userMax = t, s.isDirtyExtremes = !0, n && o.redraw(r)
                        })
                    },
                    zoom: function (t, n) {
                        return this.setExtremes(t, n, !1, e, {
                            trigger: "zoom"
                        }), !0
                    },
                    setAxisSize: function () {
                        var e = this,
                            t = e.chart,
                            n = e.options,
                            r = n.offsetLeft || 0,
                            i = n.offsetRight || 0;
                        e.left = Pt(n.left, t.plotLeft + r), e.top = Pt(n.top, t.plotTop), e.width = Pt(n.width, t.plotWidth - r + i), e.height = Pt(n.height, t.plotHeight), e.bottom = t.chartHeight - e.height - e.top, e.right = t.chartWidth - e.width - e.left, e.len = u(e.horiz ? e.width : e.height, 0)
                    },
                    getExtremes: function () {
                        var e = this,
                            t = e.isLog;
                        return {
                            min: t ? Yt(At(e.min)) : e.min,
                            max: t ? Yt(At(e.max)) : e.max,
                            dataMin: e.dataMin,
                            dataMax: e.dataMax,
                            userMin: e.userMin,
                            userMax: e.userMax
                        }
                    },
                    getThreshold: function (e) {
                        var t = this,
                            n = t.isLog,
                            r = n ? At(t.min) : t.min,
                            i = n ? At(t.max) : t.max;
                        return r > e || e === null ? e = r : i < e && (e = i), t.translate(e, 0, 1, 0, 1)
                    },
                    addPlotBandOrLine: function (e) {
                        var t = (new _n(this, e)).render();
                        return this.plotLinesAndBands.push(t), t
                    },
                    getOffset: function () {
                        var e = this,
                            t = e.chart,
                            n = t.renderer,
                            r = e.options,
                            i = e.tickPositions,
                            s = e.ticks,
                            o = e.horiz,
                            a = e.side,
                            f, l, c = 0,
                            h, p = 0,
                            d = r.title,
                            v = r.labels,
                            m = 0,
                            g = t.axisOffset,
                            y = [-1, 1, 1, -1][a],
                            b;
                        e.hasData = f = e.hasVisibleSeries || Mt(e.min) && Mt(e.max) && !! i, e.showAxis = l = f || Pt(r.showEmpty, !0), e.axisGroup || (e.gridGroup = n.g("grid").attr({
                            zIndex: r.gridZIndex || 1
                        }).add(), e.axisGroup = n.g("axis").attr({
                            zIndex: r.zIndex || 2
                        }).add(), e.labelGroup = n.g("axis-labels").attr({
                            zIndex: v.zIndex || 7
                        }).add());
                        if (f || e.isLinked) on(i, function (t) {
                            s[t] ? s[t].addLabel() : s[t] = new Mn(e, t)
                        }), on(i, function (e) {
                            if (a === 0 || a === 2 || {
                                1: "left",
                                3: "right"
                            }[a] === v.align) m = u(s[e].getLabelSize(), m)
                        }), e.staggerLines && (m += (e.staggerLines - 1) * 16);
                        else
                            for (b in s) s[b].destroy(), delete s[b];
                        d && d.text && (e.axisTitle || (e.axisTitle = n.text(d.text, 0, 0, d.useHTML).attr({
                            zIndex: 7,
                            rotation: d.rotation || 0,
                            align: d.textAlign || {
                                low: "left",
                                middle: "center",
                                high: "right"
                            }[d.align]
                        }).css(d.style).add(e.axisGroup), e.axisTitle.isNew = !0), l && (c = e.axisTitle.getBBox()[o ? "height" : "width"], p = Pt(d.margin, o ? 5 : 10), h = d.offset), e.axisTitle[l ? "show" : "hide"]()), e.offset = y * Pt(r.offset, g[a]), e.axisTitleMargin = Pt(h, m + p + (a !== 2 && m && y * r.labels[o ? "y" : "x"])), g[a] = u(g[a], e.axisTitleMargin + c + y * e.offset)
                    },
                    getLinePath: function (e) {
                        var t = this.chart,
                            n = this.opposite,
                            r = this.offset,
                            i = this.horiz,
                            s = this.left + (n ? this.width : 0) + r,
                            o = t.chartHeight - this.bottom - (n ? this.height : 0) + r;
                        return this.lineTop = o, t.renderer.crispLine([z, i ? this.left : s, i ? o : this.top, W, i ? t.chartWidth - this.right : s, i ? o : t.chartHeight - this.bottom], e)
                    },
                    getTitlePosition: function () {
                        var e = this.horiz,
                            t = this.left,
                            n = this.top,
                            r = this.len,
                            i = this.options.title,
                            s = e ? t : n,
                            o = this.opposite,
                            u = this.offset,
                            a = xt(i.style.fontSize || 12),
                            f = {
                                low: s + (e ? 0 : r),
                                middle: s + r / 2,
                                high: s + (e ? r : 0)
                            }[i.align],
                            l = (e ? n + this.height : t) + (e ? 1 : -1) * (o ? -1 : 1) * this.axisTitleMargin + (this.side === 2 ? a : 0);
                        return {
                            x: e ? f : l + (o ? this.width : 0) + u + (i.x || 0),
                            y: e ? l - (o ? this.height : 0) + u : f + (i.y || 0)
                        }
                    },
                    render: function () {
                        var t = this,
                            n = t.chart,
                            r = n.renderer,
                            i = t.options,
                            s = t.isLog,
                            o = t.isLinked,
                            u = t.tickPositions,
                            a = t.axisTitle,
                            f = t.stacks,
                            l = t.ticks,
                            c = t.minorTicks,
                            h = t.alternateBands,
                            p = i.stackLabels,
                            d = i.alternateGridColor,
                            v = t.tickmarkOffset,
                            m = i.lineWidth,
                            g, y = n.hasRendered,
                            b = y && Mt(t.oldMin) && !isNaN(t.oldMin),
                            w = t.hasData,
                            E = t.showAxis,
                            S, x;
                        if (w || o) t.minorTickInterval && !t.categories && on(t.getMinorTickPositions(), function (e) {
                            c[e] || (c[e] = new Mn(t, e, "minor")), b && c[e].isNew && c[e].render(null, !0), c[e].isActive = !0, c[e].render()
                        }), on(u.slice(1).concat([u[0]]), function (e, n) {
                            n = n === u.length - 1 ? 0 : n + 1;
                            if (!o || e >= t.min && e <= t.max) l[e] || (l[e] = new Mn(t, e)), b && l[e].isNew && l[e].render(n, !0), l[e].isActive = !0, l[e].render(n)
                        }), d && on(u, function (n, r) {
                            r % 2 === 0 && n < t.max && (h[n] || (h[n] = new _n(t)), S = n + v, x = u[r + 1] !== e ? u[r + 1] + v : t.max, h[n].options = {
                                from: s ? At(S) : S,
                                to: s ? At(x) : x,
                                color: d
                            }, h[n].render(), h[n].isActive = !0)
                        }), t._addedPlotLB || (on((i.plotLines || []).concat(i.plotBands || []), function (e) {
                            t.addPlotBandOrLine(e)
                        }), t._addedPlotLB = !0);
                        on([l, c, h], function (e) {
                            var t;
                            for (t in e) e[t].isActive ? e[t].isActive = !1 : (e[t].destroy(), delete e[t])
                        }), m && (g = t.getLinePath(m), t.axisLine ? t.axisLine.animate({
                            d: g
                        }) : t.axisLine = r.path(g).attr({
                            stroke: i.lineColor,
                            "stroke-width": m,
                            zIndex: 7
                        }).add(t.axisGroup), t.axisLine[E ? "show" : "hide"]()), a && E && (a[a.isNew ? "attr" : "animate"](t.getTitlePosition()), a.isNew = !1);
                        if (p && p.enabled) {
                            var T, N, C, k = t.stackTotalGroup;
                            k || (t.stackTotalGroup = k = r.g("stack-labels").attr({
                                visibility: q,
                                zIndex: 6
                            }).add()), k.translate(n.plotLeft, n.plotTop);
                            for (T in f) {
                                N = f[T];
                                for (C in N) N[C].render(k)
                            }
                        }
                        t.isDirty = !1
                    },
                    removePlotBandOrLine: function (e) {
                        var t = this.plotLinesAndBands,
                            n = t.length;
                        while (n--) t[n].id === e && t[n].destroy()
                    },
                    setTitle: function (e, t) {
                        var n = this.chart,
                            r = this.options,
                            i = this.axisTitle;
                        r.title = ln(r.title, e), this.axisTitle = i && i.destroy(), this.isDirty = !0, Pt(t, !0) && n.redraw()
                    },
                    redraw: function () {
                        var e = this,
                            t = e.chart;
                        t.tracker.resetTracker && t.tracker.resetTracker(!0), e.render(), on(e.plotLinesAndBands, function (e) {
                            e.render()
                        }), on(e.series, function (e) {
                            e.isDirty = !0
                        })
                    },
                    setCategories: function (e, t) {
                        var n = this,
                            r = n.chart;
                        n.categories = n.userOptions.categories = e, on(n.series, function (e) {
                            e.translate(), e.setTooltipPoints(!0)
                        }), n.isDirty = !0, Pt(t, !0) && r.redraw()
                    },
                    destroy: function () {
                        var e = this,
                            t = e.stacks,
                            n;
                        hn(e);
                        for (n in t) Kt(t[n]), t[n] = null;
                        on([e.ticks, e.minorTicks, e.alternateBands, e.plotLinesAndBands], function (e) {
                            Kt(e)
                        }), on(["stackTotalGroup", "axisLine", "axisGroup", "gridGroup", "labelGroup", "axisTitle"], function (t) {
                            e[t] && (e[t] = e[t].destroy())
                        })
                    }
                }, Hn.prototype = {
                    destroy: function () {
                        on(this.crosshairs, function (e) {
                            e && e.destroy()
                        }), this.label && (this.label = this.label.destroy())
                    },
                    move: function (e, t, n, r) {
                        var i = this,
                            s = i.now,
                            o = i.options.animation !== !1 && !i.isHidden;
                        Et(s, {
                            x: o ? (2 * s.x + e) / 3 : e,
                            y: o ? (s.y + t) / 2 : t,
                            anchorX: o ? (2 * s.anchorX + n) / 3 : n,
                            anchorY: o ? (s.anchorY + r) / 2 : r
                        }), i.label.attr(s), o && (f(e - s.x) > 1 || f(t - s.y) > 1) ? i.tooltipTick = function () {
                            i.move(e, t, n, r)
                        } : i.tooltipTick = null
                    },
                    hide: function () {
                        if (!this.isHidden) {
                            var e = this.chart.hoverPoints;
                            this.label.hide(), e && on(e, function (e) {
                                e.setState()
                            }), this.chart.hoverPoints = null, this.isHidden = !0
                        }
                    },
                    hideCrosshairs: function () {
                        on(this.crosshairs, function (e) {
                            e && e.hide()
                        })
                    },
                    getAnchor: function (e, t) {
                        var n, r = this.chart,
                            s = r.inverted,
                            o = 0,
                            u = 0,
                            a;
                        return e = Dt(e), n = e[0].tooltipPos, n || (on(e, function (e) {
                            a = e.series.yAxis, o += e.plotX, u += (e.plotLow ? (e.plotLow + e.plotHigh) / 2 : e.plotY) + (!s && a ? a.top - r.plotTop : 0)
                        }), o /= e.length, u /= e.length, n = [s ? r.plotWidth - u : o, this.shared && !s && e.length > 1 && t ? t.chartY - r.plotTop : s ? r.plotHeight - o : u]), fn(n, i)
                    },
                    getPosition: function (e, t, n) {
                        var r = this.chart,
                            i = r.plotLeft,
                            s = r.plotTop,
                            o = r.plotWidth,
                            a = r.plotHeight,
                            f = Pt(this.options.distance, 12),
                            l = n.plotX,
                            c = n.plotY,
                            h = l + i + (r.inverted ? f : -e - f),
                            p = c - t + s + 15,
                            d;
                        return h < 7 && (h = i + l + f), h + e > i + o && (h -= h + e - (i + o), p = c - t + s - f, d = !0), p < s + 5 && (p = s + 5, d && c >= p && c <= p + t && (p = c + s + f)), p + t > s + a && (p = u(s, s + a - t - f)), {
                            x: h,
                            y: p
                        }
                    },
                    refresh: function (e, t) {
                        function u() {
                            var e = this,
                                t = e.points || Dt(e),
                                n = t[0].series,
                                r;
                            return r = [n.tooltipHeaderFormatter(t[0].key)], on(t, function (e) {
                                n = e.series, r.push(n.tooltipFormatter && n.tooltipFormatter(e) || e.point.tooltipFormatter(n.tooltipOptions.pointFormat))
                            }), r.push(o.footerFormat || ""), r.join("")
                        }
                        var n = this,
                            r = n.chart,
                            s = n.label,
                            o = n.options,
                            a, f, l, c, h = {}, p, d = [],
                            v = o.formatter || u,
                            m = r.hoverPoints,
                            g, y, b = o.crosshairs,
                            w = n.shared,
                            E;
                        c = n.getAnchor(e, t), a = c[0], f = c[1], w && (!e.series || !e.series.noSharedTooltip) ? (r.hoverPoints = e, m && on(m, function (e) {
                            e.setState()
                        }), on(e, function (e) {
                            e.setState($), d.push(e.getLabelConfig())
                        }), h = {
                            x: e[0].category,
                            y: e[0].y
                        }, h.points = d, e = e[0]) : h = e.getLabelConfig(), p = v.call(h), E = e.series, l = w || !E.isCartesian || E.tooltipOutsidePlot || r.isInsidePlot(a, f), p === !1 || !l ? this.hide() : (n.isHidden && s.show(), s.attr({
                            text: p
                        }), y = o.borderColor || e.color || E.color || "#606060", s.attr({
                            stroke: y
                        }), g = (o.positioner || n.getPosition).call(n, s.width, s.height, {
                            plotX: a,
                            plotY: f
                        }), n.move(i(g.x), i(g.y), a + r.plotLeft, f + r.plotTop), n.isHidden = !1);
                        if (b) {
                            b = Dt(b);
                            var S, x = b.length,
                                T, N;
                            while (x--) N = e.series[x ? "yAxis" : "xAxis"], b[x] && N && (S = N.getPlotLinePath(x ? Pt(e.stackY, e.y) : e.x, 1), n.crosshairs[x] ? n.crosshairs[x].attr({
                                d: S,
                                visibility: q
                            }) : (T = {
                                "stroke-width": b[x].width || 1,
                                stroke: b[x].color || "#C0C0C0",
                                zIndex: b[x].zIndex || 2
                            }, b[x].dashStyle && (T.dashstyle = b[x].dashStyle), n.crosshairs[x] = r.renderer.path(S).attr(T).add()))
                        }
                        pn(r, "tooltipRefresh", {
                            text: p,
                            x: a + r.plotLeft,
                            y: f + r.plotTop,
                            borderColor: y
                        })
                    },
                    tick: function () {
                        this.tooltipTick && this.tooltipTick()
                    }
                }, Bn.prototype = {
                    normalizeMouseEvent: function (t) {
                        var r, s, o, u;
                        return t = t || n.event, t.target || (t.target = t.srcElement), t = dn(t), u = t.touches ? t.touches.item(0) : t, this.chartPosition = r = an(this.chart.container), u.pageX === e ? (s = t.x, o = t.y) : (s = u.pageX - r.left, o = u.pageY - r.top), Et(t, {
                            chartX: i(s),
                            chartY: i(o)
                        })
                    },
                    getMouseCoordinates: function (e) {
                        var t = {
                            xAxis: [],
                            yAxis: []
                        }, n = this.chart;
                        return on(n.axes, function (r) {
                            var i = r.isXAxis,
                                s = n.inverted ? !i : i;
                            t[i ? "xAxis" : "yAxis"].push({
                                axis: r,
                                value: r.translate((s ? e.chartX - n.plotLeft : r.top + r.len - e.chartY) - r.minPixelPadding, !0)
                            })
                        }), t
                    },
                    getIndex: function (e) {
                        var t = this.chart;
                        return t.inverted ? t.plotHeight + t.plotTop - e.chartY : e.chartX - t.plotLeft
                    },
                    onmousemove: function (e) {
                        var t = this,
                            n = t.chart,
                            r = n.series,
                            i = n.tooltip,
                            s, o, u = n.hoverPoint,
                            l = n.hoverSeries,
                            c, h, p = n.chartWidth,
                            d = t.getIndex(e);
                        if (i && t.options.tooltip.shared && (!l || !l.noSharedTooltip)) {
                            o = [], c = r.length;
                            for (h = 0; h < c; h++) r[h].visible && r[h].options.enableMouseTracking !== !1 && !r[h].noSharedTooltip && r[h].tooltipPoints.length && (s = r[h].tooltipPoints[d], s._dist = f(d - s[r[h].xAxis.tooltipPosName || "plotX"]), p = a(p, s._dist), o.push(s));
                            c = o.length;
                            while (c--) o[c]._dist > p && o.splice(c, 1);
                            o.length && o[0].plotX !== t.hoverX && (i.refresh(o, e), t.hoverX = o[0].plotX)
                        }
                        l && l.tracker && (s = l.tooltipPoints[d], s && s !== u && s.onMouseOver())
                    },
                    resetTracker: function (t) {
                        var n = this,
                            r = n.chart,
                            i = r.hoverSeries,
                            s = r.hoverPoint,
                            o = r.tooltip,
                            u = o && o.shared ? r.hoverPoints : s;
                        t = t && o && u, t && Dt(u)[0].plotX === e && (t = !1), t ? o.refresh(u) : (s && s.onMouseOut(), i && i.onMouseOut(), o && (o.hide(), o.hideCrosshairs()), n.hoverX = null)
                    },
                    setDOMEvents: function () {
                        function c() {
                            if (n.selectionMarker) {
                                var e = {
                                    xAxis: [],
                                    yAxis: []
                                }, o = n.selectionMarker.getBBox(),
                                    f = o.x - r.plotLeft,
                                    l = o.y - r.plotTop,
                                    h;
                                s && (on(r.axes, function (t) {
                                    if (t.options.zoomEnabled !== !1) {
                                        var n = t.isXAxis,
                                            i = r.inverted ? !n : n,
                                            s = t.translate(i ? f : r.plotHeight - l - o.height, !0, 0, 0, 1),
                                            c = t.translate((i ? f + o.width : r.plotHeight - l) - 2 * t.minPixelPadding, !0, 0, 0, 1);
                                        !isNaN(s) && !isNaN(c) && (e[n ? "xAxis" : "yAxis"].push({
                                            axis: t,
                                            min: a(s, c),
                                            max: u(s, c)
                                        }), h = !0)
                                    }
                                }), h && pn(r, "selection", e, function (e) {
                                    r.zoom(e)
                                })), n.selectionMarker = n.selectionMarker.destroy()
                            }
                            r && (Ht(i, {
                                cursor: "auto"
                            }), r.cancelClick = s, r.mouseIsDown = s = !1), hn(t, N ? "touchend" : "mouseup", c)
                        }
                        var e = !0,
                            n = this,
                            r = n.chart,
                            i = r.container,
                            s, o = n.zoomX && !r.inverted || n.zoomY && r.inverted,
                            l = n.zoomY && !r.inverted || n.zoomX && r.inverted;
                        n.hideTooltipOnMouseMove = function (e) {
                            e = dn(e), n.chartPosition && r.hoverSeries && r.hoverSeries.isCartesian && !r.isInsidePlot(e.pageX - n.chartPosition.left - r.plotLeft, e.pageY - n.chartPosition.top - r.plotTop) && n.resetTracker()
                        }, n.hideTooltipOnMouseLeave = function () {
                            n.resetTracker(), n.chartPosition = null
                        }, i.onmousedown = function (e) {
                            e = n.normalizeMouseEvent(e), !N && e.preventDefault && e.preventDefault(), r.mouseIsDown = !0, r.cancelClick = !1, r.mouseDownX = n.mouseDownX = e.chartX, n.mouseDownY = e.chartY, cn(t, N ? "touchend" : "mouseup", c)
                        };
                        var h = function (t) {
                            if (t && t.touches && t.touches.length > 1) return;
                            t = n.normalizeMouseEvent(t), N || (t.returnValue = !1);
                            var i = t.chartX,
                                u = t.chartY,
                                a = !r.isInsidePlot(i - r.plotLeft, u - r.plotTop);
                            N && t.type === "touchstart" && (_t(t.target, "isTracker") ? r.runTrackerClick || t.preventDefault() : !r.runChartClick && !a && t.preventDefault()), a && (i < r.plotLeft ? i = r.plotLeft : i > r.plotLeft + r.plotWidth && (i = r.plotLeft + r.plotWidth), u < r.plotTop ? u = r.plotTop : u > r.plotTop + r.plotHeight && (u = r.plotTop + r.plotHeight));
                            if (r.mouseIsDown && t.type !== "touchstart") {
                                s = Math.sqrt(Math.pow(n.mouseDownX - i, 2) + Math.pow(n.mouseDownY - u, 2));
                                if (s > 10) {
                                    var c = r.isInsidePlot(n.mouseDownX - r.plotLeft, n.mouseDownY - r.plotTop);
                                    r.hasCartesianSeries && (n.zoomX || n.zoomY) && c && (n.selectionMarker || (n.selectionMarker = r.renderer.rect(r.plotLeft, r.plotTop, o ? 1 : r.plotWidth, l ? 1 : r.plotHeight, 0).attr({
                                        fill: n.options.chart.selectionMarkerFill || "rgba(69,114,167,0.25)",
                                        zIndex: 7
                                    }).add()));
                                    if (n.selectionMarker && o) {
                                        var h = i - n.mouseDownX;
                                        n.selectionMarker.attr({
                                            width: f(h),
                                            x: (h > 0 ? 0 : h) + n.mouseDownX
                                        })
                                    }
                                    if (n.selectionMarker && l) {
                                        var p = u - n.mouseDownY;
                                        n.selectionMarker.attr({
                                            height: f(p),
                                            y: (p > 0 ? 0 : p) + n.mouseDownY
                                        })
                                    }
                                    c && !n.selectionMarker && n.options.chart.panning && r.pan(i)
                                }
                            }
                            return a || n.onmousemove(t), e = a, a || !r.hasCartesianSeries
                        };
                        i.onmousemove = h, cn(i, "mouseleave", n.hideTooltipOnMouseLeave), cn(t, "mousemove", n.hideTooltipOnMouseMove), i.ontouchstart = function (e) {
                            (n.zoomX || n.zoomY) && i.onmousedown(e), h(e)
                        }, i.ontouchmove = h, i.ontouchend = function () {
                            s && n.resetTracker()
                        }, i.onclick = function (e) {
                            var t = r.hoverPoint,
                                i, s;
                            e = n.normalizeMouseEvent(e), e.cancelBubble = !0, r.cancelClick || (t && (_t(e.target, "isTracker") || _t(e.target.parentNode, "isTracker")) ? (i = t.plotX, s = t.plotY, Et(t, {
                                pageX: n.chartPosition.left + r.plotLeft + (r.inverted ? r.plotWidth - s : i),
                                pageY: n.chartPosition.top + r.plotTop + (r.inverted ? r.plotHeight - i : s)
                            }), pn(t.series, "click", Et(e, {
                                point: t
                            })), t.firePointEvent("click", e)) : (Et(e, n.getMouseCoordinates(e)), r.isInsidePlot(e.chartX - r.plotLeft, e.chartY - r.plotTop) && pn(r, "click", e)))
                        }
                    },
                    destroy: function () {
                        var e = this,
                            n = e.chart,
                            r = n.container;
                        n.trackerGroup && (n.trackerGroup = n.trackerGroup.destroy()), hn(r, "mouseleave", e.hideTooltipOnMouseLeave), hn(t, "mousemove", e.hideTooltipOnMouseMove), r.onclick = r.onmousedown = r.onmousemove = r.ontouchstart = r.ontouchend = r.ontouchmove = null, clearInterval(this.tooltipInterval)
                    },
                    init: function (e, t) {
                        e.trackerGroup || (e.trackerGroup = e.renderer.g("tracker").attr({
                            zIndex: 9
                        }).add()), t.enabled && (e.tooltip = new Hn(e, t), this.tooltipInterval = setInterval(function () {
                            e && e.tooltip && e.tooltip.tick()
                        }, 32)), this.setDOMEvents()
                    }
                }, jn.prototype = {
                    init: function (e) {
                        var t = this,
                            n = t.options = e.options.legend;
                        if (!n.enabled) return;
                        var r = n.itemStyle,
                            i = Pt(n.padding, 8),
                            s = n.itemMarginTop || 0;
                        t.baseline = xt(r.fontSize) + 3 + s, t.itemStyle = r, t.itemHiddenStyle = ln(r, n.itemHiddenStyle), t.itemMarginTop = s, t.padding = i, t.initialItemX = i, t.initialItemY = i - 5, t.maxItemWidth = 0, t.chart = e, t.itemHeight = 0, t.lastLineHeight = 0, t.render(), cn(t.chart, "endResize", function () {
                            t.positionCheckboxes()
                        })
                    },
                    colorizeItem: function (e, t) {
                        var n = this,
                            r = n.options,
                            i = e.legendItem,
                            s = e.legendLine,
                            o = e.legendSymbol,
                            u = n.itemHiddenStyle.color,
                            a = t ? r.itemStyle.color : u,
                            f = t ? e.color : u;
                        i && i.css({
                            fill: a

                        }), s && s.attr({
                            stroke: f
                        }), o && o.attr({
                            stroke: f,
                            fill: f
                        })
                    },
                    positionItem: function (e) {
                        var t = this,
                            n = t.options,
                            r = n.symbolPadding,
                            i = !n.rtl,
                            s = e._legendItemPos,
                            o = s[0],
                            u = s[1],
                            a = e.checkbox;
                        e.legendGroup && e.legendGroup.translate(i ? o : t.legendWidth - o - 2 * r - 4, u), a && (a.x = o, a.y = u)
                    },
                    destroyItem: function (e) {
                        var t = e.checkbox;
                        on(["legendItem", "legendLine", "legendSymbol", "legendGroup"], function (t) {
                            e[t] && e[t].destroy()
                        }), t && Qt(e.checkbox)
                    },
                    destroy: function () {
                        var e = this,
                            t = e.group,
                            n = e.box;
                        n && (e.box = n.destroy()), t && (e.group = t.destroy())
                    },
                    positionCheckboxes: function () {
                        var e = this;
                        on(e.allItems, function (t) {
                            var n = t.checkbox,
                                r = e.group.alignAttr;
                            n && Ht(n, {
                                left: r.translateX + t.legendItemWidth + n.x - 20 + R,
                                top: r.translateY + n.y + 3 + R
                            })
                        })
                    },
                    renderItem: function (e) {
                        var t = this,
                            n = t.chart,
                            r = n.renderer,
                            i = t.options,
                            s = i.layout === "horizontal",
                            o = i.symbolWidth,
                            a = i.symbolPadding,
                            f = t.itemStyle,
                            l = t.itemHiddenStyle,
                            c = t.padding,
                            h = !i.rtl,
                            p, d = i.width,
                            v = i.itemMarginBottom || 0,
                            m = t.itemMarginTop,
                            g = t.initialItemX,
                            y, b, w = e.legendItem,
                            E = e.series || e,
                            S = E.options,
                            x = S.showCheckbox;
                        w || (e.legendGroup = r.g("legend-item").attr({
                            zIndex: 1
                        }).add(t.scrollGroup), E.drawLegendSymbol(t, e), e.legendItem = w = r.text(i.labelFormatter.call(e), h ? o + a : -a, t.baseline, i.useHTML).css(ln(e.visible ? f : l)).attr({
                            align: h ? "left" : "right",
                            zIndex: 2
                        }).add(e.legendGroup), e.legendGroup.on("mouseover", function () {
                            e.setState($), w.css(t.options.itemHoverStyle)
                        }).on("mouseout", function () {
                            w.css(e.visible ? f : l), e.setState()
                        }).on("click", function (t) {
                            var n = "legendItemClick",
                                r = function () {
                                    e.setVisible()
                                };
                            t = {
                                browserEvent: t
                            }, e.firePointEvent ? e.firePointEvent(n, t, r) : pn(e, n, t, r)
                        }), t.colorizeItem(e, e.visible), S && x && (e.checkbox = Bt("input", {
                            type: "checkbox",
                            checked: e.selected,
                            defaultChecked: e.selected
                        }, i.itemCheckboxStyle, n.container), cn(e.checkbox, "click", function (t) {
                            var n = t.target;
                            pn(e, "checkboxClick", {
                                checked: n.checked
                            }, function () {
                                e.select()
                            })
                        }))), y = w.getBBox(), b = e.legendItemWidth = i.itemWidth || o + a + y.width + c + (x ? 20 : 0), t.itemHeight = p = y.height, s && t.itemX - g + b > (d || n.chartWidth - 2 * c - g) && (t.itemX = g, t.itemY += m + t.lastLineHeight + v, t.lastLineHeight = 0), t.maxItemWidth = u(t.maxItemWidth, b), t.lastItemY = m + t.itemY + v, t.lastLineHeight = u(p, t.lastLineHeight), e._legendItemPos = [t.itemX, t.itemY], s ? t.itemX += b : (t.itemY += m + p + v, t.lastLineHeight = p), t.offsetWidth = d || u(s ? t.itemX - g : b, t.offsetWidth)
                    },
                    render: function () {
                        var e = this,
                            t = e.chart,
                            n = t.renderer,
                            r = e.group,
                            i, s, o, u, a = e.box,
                            f = e.options,
                            l = e.padding,
                            c = f.borderWidth,
                            h = f.backgroundColor;
                        e.itemX = e.initialItemX, e.itemY = e.initialItemY, e.offsetWidth = 0, e.lastItemY = 0, r || (e.group = r = n.g("legend").attr({
                            zIndex: 7
                        }).add(), e.contentGroup = n.g().attr({
                            zIndex: 1
                        }).add(r), e.scrollGroup = n.g().add(e.contentGroup), e.clipRect = n.clipRect(0, 0, 9999, t.chartHeight), e.contentGroup.clip(e.clipRect)), i = [], on(t.series, function (e) {
                            var t = e.options;
                            if (!t.showInLegend) return;
                            i = i.concat(e.legendItems || (t.legendType === "point" ? e.data : e))
                        }), Vt(i, function (e, t) {
                            return (e.options && e.options.legendIndex || 0) - (t.options && t.options.legendIndex || 0)
                        }), f.reversed && i.reverse(), e.allItems = i, e.display = s = !! i.length, on(i, function (t) {
                            e.renderItem(t)
                        }), o = f.width || e.offsetWidth, u = e.lastItemY + e.lastLineHeight, u = e.handleOverflow(u);
                        if (c || h) o += l, u += l, a ? o > 0 && u > 0 && (a[a.isNew ? "attr" : "animate"](a.crisp(null, null, null, o, u)), a.isNew = !1) : (e.box = a = n.rect(0, 0, o, u, f.borderRadius, c || 0).attr({
                            stroke: f.borderColor,
                            "stroke-width": c || 0,
                            fill: h || U
                        }).add(r).shadow(f.shadow), a.isNew = !0), a[s ? "show" : "hide"]();
                        e.legendWidth = o, e.legendHeight = u, on(i, function (t) {
                            e.positionItem(t)
                        }), s && r.align(Et({
                            width: o,
                            height: u
                        }, f), !0, t.spacingBox), t.isResizing || this.positionCheckboxes()
                    },
                    handleOverflow: function (e) {
                        var t = this,
                            n = this.chart,
                            r = n.renderer,
                            i, s = this.options,
                            u = s.y,
                            f = s.verticalAlign === "top",
                            l = n.spacingBox.height + (f ? -u : u) - this.padding,
                            c = s.maxHeight,
                            h, p = this.clipRect,
                            d = s.navigation,
                            v = Pt(d.animation, !0),
                            m = d.arrowSize || 12,
                            g = this.nav;
                        return s.layout === "horizontal" && (l /= 2), c && (l = a(l, c)), e > l ? (this.clipHeight = h = l - 20, this.pageCount = i = o(e / h), this.currentPage = Pt(this.currentPage, 1), this.fullHeight = e, p.attr({
                            height: h
                        }), g || (this.nav = g = r.g().attr({
                            zIndex: 1
                        }).add(this.group), this.up = r.symbol("triangle", 0, 0, m, m).on("click", function () {
                            t.scroll(-1, v)
                        }).add(g), this.pager = r.text("", 15, 10).css(d.style).add(g), this.down = r.symbol("triangle-down", 0, 0, m, m).on("click", function () {
                            t.scroll(1, v)
                        }).add(g)), t.scroll(0), e = l) : g && (p.attr({
                            height: n.chartHeight
                        }), g.hide(), this.scrollGroup.attr({
                            translateY: 1
                        })), e
                    },
                    scroll: function (t, n) {
                        var r = this.pageCount,
                            i = this.currentPage + t,
                            s = this.clipHeight,
                            o = this.options.navigation,
                            u = o.activeColor,
                            f = o.inactiveColor,
                            l = this.pager,
                            c = this.padding;
                        i > r && (i = r), i > 0 && (n !== e && Zt(n, this.chart), this.nav.attr({
                            translateX: c,
                            translateY: s + 7,
                            visibility: q
                        }), this.up.attr({
                            fill: i === 1 ? f : u
                        }).css({
                            cursor: i === 1 ? "default" : "pointer"
                        }), l.attr({
                            text: i + "/" + this.pageCount
                        }), this.down.attr({
                            x: 18 + this.pager.getBBox().width,
                            fill: i === r ? f : u
                        }).css({
                            cursor: i === r ? "default" : "pointer"
                        }), this.scrollGroup.animate({
                            translateY: -a(s * (i - 1), this.fullHeight - s + c) + 1
                        }), l.attr({
                            text: i + "/" + r
                        }), this.currentPage = i)
                    }
                }, Fn.prototype = {
                    initSeries: function (e) {
                        var t = this,
                            n = t.options.chart,
                            r = e.type || n.type || n.defaultSeriesType,
                            i = new wt[r];
                        return i.init(this, e), i
                    },
                    addSeries: function (e, t, n) {
                        var r, i = this;
                        return e && (Zt(n, i), t = Pt(t, !0), pn(i, "addSeries", {
                            options: e
                        }, function () {
                            r = i.initSeries(e), i.isDirtyLegend = !0, t && i.redraw()
                        })), r
                    },
                    isInsidePlot: function (e, t, n) {
                        var r = n ? t : e,
                            i = n ? e : t;
                        return r >= 0 && r <= this.plotWidth && i >= 0 && i <= this.plotHeight
                    },
                    adjustTickAmounts: function () {
                        this.options.chart.alignTicks !== !1 && on(this.axes, function (e) {
                            e.adjustTickAmount()
                        }), this.maxTicks = null
                    },
                    redraw: function (e) {
                        var t = this,
                            n = t.axes,
                            r = t.series,
                            i = t.tracker,
                            s = t.legend,
                            o = t.isDirtyLegend,
                            u, a = t.isDirtyBox,
                            f = r.length,
                            l = f,
                            c, h = t.renderer,
                            p = h.isHidden();
                        Zt(e, t), p && t.cloneRenderTo();
                        while (l--) {
                            c = r[l];
                            if (c.isDirty && c.options.stacking) {
                                u = !0;
                                break
                            }
                        }
                        if (u) {
                            l = f;
                            while (l--) c = r[l], c.options.stacking && (c.isDirty = !0)
                        }
                        on(r, function (e) {
                            e.isDirty && e.options.legendType === "point" && (o = !0)
                        }), o && s.options.enabled && (s.render(), t.isDirtyLegend = !1), t.hasCartesianSeries && (t.isResizing || (t.maxTicks = null, on(n, function (e) {
                            e.setScale()
                        })), t.adjustTickAmounts(), t.getMargins(), on(n, function (e) {
                            e.isDirtyExtremes && (e.isDirtyExtremes = !1, pn(e, "afterSetExtremes", e.getExtremes()));
                            if (e.isDirty || a || u) e.redraw(), a = !0
                        })), a && t.drawChartBox(), on(r, function (e) {
                            e.isDirty && e.visible && (!e.isCartesian || e.xAxis) && e.redraw()
                        }), i && i.resetTracker && i.resetTracker(!0), h.draw(), pn(t, "redraw"), p && t.cloneRenderTo(!0)
                    },
                    showLoading: function (e) {
                        var t = this,
                            n = t.options,
                            r = t.loadingDiv,
                            i = n.loading;
                        r || (t.loadingDiv = r = Bt(H, {
                            className: I + "loading"
                        }, Et(i.style, {
                            left: t.plotLeft + R,
                            top: t.plotTop + R,
                            width: t.plotWidth + R,
                            height: t.plotHeight + R,
                            zIndex: 10,
                            display: U
                        }), t.container), t.loadingSpan = Bt("span", null, i.labelStyle, r)), t.loadingSpan.innerHTML = e || n.lang.loading, t.loadingShown || (Ht(r, {
                            opacity: 0,
                            display: ""
                        }), vn(r, {
                            opacity: i.style.opacity
                        }, {
                            duration: i.showDuration || 0
                        }), t.loadingShown = !0)
                    },
                    hideLoading: function () {
                        var e = this.options,
                            t = this.loadingDiv;
                        t && vn(t, {
                            opacity: 0
                        }, {
                            duration: e.loading.hideDuration || 100,
                            complete: function () {
                                Ht(t, {
                                    display: U
                                })
                            }
                        }), this.loadingShown = !1
                    },
                    get: function (e) {
                        var t = this,
                            n = t.axes,
                            r = t.series,
                            i, s, o;
                        for (i = 0; i < n.length; i++)
                            if (n[i].options.id === e) return n[i];
                        for (i = 0; i < r.length; i++)
                            if (r[i].options.id === e) return r[i];
                        for (i = 0; i < r.length; i++) {
                            o = r[i].points || [];
                            for (s = 0; s < o.length; s++)
                                if (o[s].id === e) return o[s]
                        }
                        return null
                    },
                    getAxes: function () {
                        var e = this,
                            t = this.options,
                            n = t.xAxis || {}, r = t.yAxis || {}, i, s;
                        n = Dt(n), on(n, function (e, t) {
                            e.index = t, e.isX = !0
                        }), r = Dt(r), on(r, function (e, t) {
                            e.index = t
                        }), i = n.concat(r), on(i, function (t) {
                            s = new Pn(e, t)
                        }), e.adjustTickAmounts()
                    },
                    getSelectedPoints: function () {
                        var e = [];
                        return on(this.series, function (t) {
                            e = e.concat(un(t.points, function (e) {
                                return e.selected
                            }))
                        }), e
                    },
                    getSelectedSeries: function () {
                        return un(this.series, function (e) {
                            return e.selected
                        })
                    },
                    showResetZoom: function () {
                        var e = this,
                            t = A.lang,
                            n = e.options.chart.resetZoomButton,
                            r = n.theme,
                            i = r.states,
                            s = n.relativeTo === "chart" ? null : "plotBox";
                        this.resetZoomButton = e.renderer.button(t.resetZoom, null, null, function () {
                            e.zoomOut()
                        }, r, i && i.hover).attr({
                            align: n.position.align,
                            title: t.resetZoomTitle
                        }).add().align(n.position, !1, e[s]), this.resetZoomButton.alignTo = s
                    },
                    zoomOut: function () {
                        var e = this,
                            t = e.resetZoomButton;
                        pn(e, "selection", {
                            resetSelection: !0
                        }, function () {
                            e.zoom()
                        }), t && (e.resetZoomButton = t.destroy())
                    },
                    zoom: function (e) {
                        var t = this,
                            n;
                        !e || e.resetSelection ? on(t.axes, function (e) {
                            n = e.zoom()
                        }) : on(e.xAxis.concat(e.yAxis), function (e) {
                            var r = e.axis;
                            t.tracker[r.isXAxis ? "zoomX" : "zoomY"] && (n = r.zoom(e.min, e.max))
                        }), t.resetZoomButton || t.showResetZoom(), n && t.redraw(Pt(t.options.chart.animation, t.pointCount < 100))
                    },
                    pan: function (e) {
                        var t = this,
                            n = t.xAxis[0],
                            r = t.mouseDownX,
                            i = n.pointRange / 2,
                            s = n.getExtremes(),
                            o = n.translate(r - e, !0) + i,
                            f = n.translate(r + t.plotWidth - e, !0) - i,
                            l = t.hoverPoints;
                        l && on(l, function (e) {
                            e.setState()
                        }), n.series.length && o > a(s.dataMin, s.min) && f < u(s.dataMax, s.max) && n.setExtremes(o, f, !0, !1, {
                            trigger: "pan"
                        }), t.mouseDownX = e, Ht(t.container, {
                            cursor: "move"
                        })
                    },
                    setTitle: function (e, t) {
                        var n = this,
                            r = n.options,
                            i, s;
                        n.chartTitleOptions = i = ln(r.title, e), n.chartSubtitleOptions = s = ln(r.subtitle, t), on([
                            ["title", e, i],
                            ["subtitle", t, s]
                        ], function (e) {
                            var t = e[0],
                                r = n[t],
                                i = e[1],
                                s = e[2];
                            r && i && (n[t] = r = r.destroy()), s && s.text && !r && (n[t] = n.renderer.text(s.text, 0, 0, s.useHTML).attr({
                                align: s.align,
                                "class": I + t,
                                zIndex: s.zIndex || 4
                            }).css(s.style).add().align(s, !1, n.spacingBox))
                        })
                    },
                    getChartSize: function () {
                        var e = this,
                            t = e.options.chart,
                            n = e.renderToClone || e.renderTo;
                        e.containerWidth = nn(n, "width"), e.containerHeight = nn(n, "height"), e.chartWidth = t.width || e.containerWidth || 600, e.chartHeight = t.height || (e.containerHeight > 19 ? e.containerHeight : 400)
                    },
                    cloneRenderTo: function (e) {
                        var n = this.renderToClone,
                            r = this.container;
                        e ? n && (this.renderTo.appendChild(r), Qt(n), delete this.renderToClone) : (r && this.renderTo.removeChild(r), this.renderToClone = n = this.renderTo.cloneNode(0), Ht(n, {
                            position: B,
                            top: "-9999px",
                            display: "block"
                        }), t.body.appendChild(n), r && n.appendChild(r))
                    },
                    getContainer: function () {
                        var e = this,
                            n, r = e.options.chart,
                            i, s, o, u;
                        e.renderTo = o = r.renderTo, u = I + k++, Tt(o) && (e.renderTo = o = t.getElementById(o)), o || Gt(13, !0), o.innerHTML = "", o.offsetWidth || e.cloneRenderTo(), e.getChartSize(), i = e.chartWidth, s = e.chartHeight, e.container = n = Bt(H, {
                            className: I + "container" + (r.className ? " " + r.className : ""),
                            id: u
                        }, Et({
                            position: j,
                            overflow: F,
                            width: i + R,
                            height: s + R,
                            textAlign: "left",
                            lineHeight: "normal",
                            zIndex: 0
                        }, r.style), e.renderToClone || o), e.renderer = r.forExport ? new Nn(n, i, s, !0) : new T(n, i, s), x && e.renderer.create(e, n, i, s)
                    },
                    getMargins: function () {
                        var e = this,
                            t = e.options.chart,
                            n = t.spacingTop,
                            r = t.spacingRight,
                            i = t.spacingBottom,
                            s = t.spacingLeft,
                            o, a = e.legend,
                            f = e.optionsMarginTop,
                            l = e.optionsMarginLeft,
                            c = e.optionsMarginRight,
                            h = e.optionsMarginBottom,
                            p = e.chartTitleOptions,
                            d = e.chartSubtitleOptions,
                            v = e.options.legend,
                            m = Pt(v.margin, 10),
                            g = v.x,
                            y = v.y,
                            b = v.align,
                            w = v.verticalAlign,
                            E;
                        e.resetMargins(), o = e.axisOffset, (e.title || e.subtitle) && !Mt(e.optionsMarginTop) && (E = u(e.title && !p.floating && !p.verticalAlign && p.y || 0, e.subtitle && !d.floating && !d.verticalAlign && d.y || 0), E && (e.plotTop = u(e.plotTop, E + Pt(p.margin, 15) + n))), a.display && !v.floating && (b === "right" ? Mt(c) || (e.marginRight = u(e.marginRight, a.legendWidth - g + m + r)) : b === "left" ? Mt(l) || (e.plotLeft = u(e.plotLeft, a.legendWidth + g + m + s)) : w === "top" ? Mt(f) || (e.plotTop = u(e.plotTop, a.legendHeight + y + m + n)) : w === "bottom" && (Mt(h) || (e.marginBottom = u(e.marginBottom, a.legendHeight - y + m + i)))), e.extraBottomMargin && (e.marginBottom += e.extraBottomMargin), e.extraTopMargin && (e.plotTop += e.extraTopMargin), e.hasCartesianSeries && on(e.axes, function (e) {
                            e.getOffset()
                        }), Mt(l) || (e.plotLeft += o[3]), Mt(f) || (e.plotTop += o[0]), Mt(h) || (e.marginBottom += o[2]), Mt(c) || (e.marginRight += o[1]), e.setChartSize()
                    },
                    initReflow: function () {
                        function o(o) {
                            var u = r.width || nn(i, "width"),
                                a = r.height || nn(i, "height"),
                                f = o ? o.target : n;
                            if (u && a && (f === n || f === t)) {
                                if (u !== e.containerWidth || a !== e.containerHeight) clearTimeout(s), s = setTimeout(function () {
                                    e.resize(u, a, !1)
                                }, 100);
                                e.containerWidth = u, e.containerHeight = a
                            }
                        }
                        var e = this,
                            r = e.options.chart,
                            i = e.renderTo,
                            s;
                        cn(n, "resize", o), cn(e, "destroy", function () {
                            hn(n, "resize", o)
                        })
                    },
                    resize: function (e, t, n) {
                        var r = this,
                            s, o, u, a = r.resetZoomButton,
                            f = r.title,
                            l = r.subtitle,
                            c;
                        r.isResizing += 1, c = function () {
                            r && pn(r, "endResize", null, function () {
                                r.isResizing -= 1
                            })
                        }, Zt(n, r), r.oldChartHeight = r.chartHeight, r.oldChartWidth = r.chartWidth, Mt(e) && (r.chartWidth = s = i(e)), Mt(t) && (r.chartHeight = o = i(t)), Ht(r.container, {
                            width: s + R,
                            height: o + R
                        }), r.renderer.setSize(s, o, n), r.plotWidth = s - r.plotLeft - r.marginRight, r.plotHeight = o - r.plotTop - r.marginBottom, r.maxTicks = null, on(r.axes, function (e) {
                            e.isDirty = !0, e.setScale()
                        }), on(r.series, function (e) {
                            e.isDirty = !0
                        }), r.isDirtyLegend = !0, r.isDirtyBox = !0, r.getMargins(), u = r.spacingBox, f && f.align(null, null, u), l && l.align(null, null, u), a && a.align(null, null, r[a.alignTo]), r.redraw(n), r.oldChartHeight = null, pn(r, "resize"), M === !1 ? c() : setTimeout(c, M && M.duration || 500)
                    },
                    setChartSize: function () {
                        var e = this,
                            t = e.inverted,
                            n = e.chartWidth,
                            r = e.chartHeight,
                            s = e.options.chart,
                            o = s.spacingTop,
                            u = s.spacingRight,
                            a = s.spacingBottom,
                            f = s.spacingLeft,
                            l, c, h, p, d;
                        e.plotLeft = l = i(e.plotLeft), e.plotTop = c = i(e.plotTop), e.plotWidth = h = i(n - l - e.marginRight), e.plotHeight = p = i(r - c - e.marginBottom), e.plotSizeX = t ? p : h, e.plotSizeY = t ? h : p, e.plotBorderWidth = d = s.plotBorderWidth || 0, e.spacingBox = {
                            x: f,
                            y: o,
                            width: n - f - u,
                            height: r - o - a
                        }, e.plotBox = {
                            x: l,
                            y: c,
                            width: h,
                            height: p
                        }, e.clipBox = {
                            x: d / 2,
                            y: d / 2,
                            width: e.plotSizeX - d,
                            height: e.plotSizeY - d
                        }, on(e.axes, function (e) {
                            e.setAxisSize(), e.setAxisTranslation()
                        })
                    },
                    resetMargins: function () {
                        var e = this,
                            t = e.options.chart,
                            n = t.spacingTop,
                            r = t.spacingRight,
                            i = t.spacingBottom,
                            s = t.spacingLeft;
                        e.plotTop = Pt(e.optionsMarginTop, n), e.marginRight = Pt(e.optionsMarginRight, r), e.marginBottom = Pt(e.optionsMarginBottom, i), e.plotLeft = Pt(e.optionsMarginLeft, s), e.axisOffset = [0, 0, 0, 0]
                    },
                    drawChartBox: function () {
                        var e = this,
                            t = e.options.chart,
                            n = e.renderer,
                            r = e.chartWidth,
                            i = e.chartHeight,
                            s = e.chartBackground,
                            o = e.plotBackground,
                            u = e.plotBorder,
                            a = e.plotBGImage,
                            f = t.borderWidth || 0,
                            l = t.backgroundColor,
                            c = t.plotBackgroundColor,
                            h = t.plotBackgroundImage,
                            p = t.plotBorderWidth || 0,
                            d, v, m = e.plotLeft,
                            g = e.plotTop,
                            y = e.plotWidth,
                            b = e.plotHeight,
                            w = e.plotBox,
                            E = e.clipRect,
                            S = e.clipBox;
                        d = f + (t.shadow ? 8 : 0);
                        if (f || l) s ? s.animate(s.crisp(null, null, null, r - d, i - d)) : (v = {
                            fill: l || U
                        }, f && (v.stroke = t.borderColor, v["stroke-width"] = f), e.chartBackground = n.rect(d / 2, d / 2, r - d, i - d, t.borderRadius, f).attr(v).add().shadow(t.shadow));
                        c && (o ? o.animate(w) : e.plotBackground = n.rect(m, g, y, b, 0).attr({
                            fill: c
                        }).add().shadow(t.plotShadow)), h && (a ? a.animate(w) : e.plotBGImage = n.image(h, m, g, y, b).add()), E ? E.animate({
                            width: S.width,
                            height: S.height
                        }) : e.clipRect = n.clipRect(S), p && (u ? u.animate(u.crisp(null, m, g, y, b)) : e.plotBorder = n.rect(m, g, y, b, 0, p).attr({
                            stroke: t.plotBorderColor,
                            "stroke-width": p,
                            zIndex: 1
                        }).add()), e.isDirtyBox = !1
                    },
                    propFromSeries: function () {
                        var e = this,
                            t = e.options.chart,
                            n, r = e.options.series,
                            i, s;
                        on(["inverted", "angular", "polar"], function (o) {
                            n = wt[t.type || t.defaultSeriesType], s = e[o] || t[o] || n && n.prototype[o], i = r && r.length;
                            while (!s && i--) n = wt[r[i].type], n && n.prototype[o] && (s = !0);
                            e[o] = s
                        })
                    },
                    render: function () {
                        var e = this,
                            t = e.axes,
                            n = e.renderer,
                            r = e.options,
                            i = r.labels,
                            s = r.credits,
                            o;
                        e.setTitle(), e.legend = new jn(e), on(t, function (e) {
                            e.setScale()
                        }), e.getMargins(), e.maxTicks = null, on(t, function (e) {
                            e.setTickPositions(!0), e.setMaxTicks()
                        }), e.adjustTickAmounts(), e.getMargins(), e.drawChartBox(), e.hasCartesianSeries && on(t, function (e) {
                            e.render()
                        }), e.seriesGroup || (e.seriesGroup = n.g("series-group").attr({
                            zIndex: 3
                        }).add()), on(e.series, function (e) {
                            e.translate(), e.setTooltipPoints(), e.render()
                        }), i.items && on(i.items, function (t) {
                            var r = Et(i.style, t.style),
                                s = xt(r.left) + e.plotLeft,
                                o = xt(r.top) + e.plotTop + 12;
                            delete r.left, delete r.top, n.text(t.html, s, o).attr({
                                zIndex: 2
                            }).css(r).add()
                        }), s.enabled && !e.credits && (o = s.href, e.credits = n.text(s.text, 0, 0).on("click", function () {
                            o && (location.href = o)
                        }).attr({
                            align: s.position.align,
                            zIndex: 8
                        }).css(s.style).add().align(s.position)), e.hasRendered = !0
                    },
                    destroy: function () {
                        var e = this,
                            t = e.axes,
                            n = e.series,
                            r = e.container,
                            i, s = r && r.parentNode;
                        if (e === null) return;
                        pn(e, "destroy"), hn(e), i = t.length;
                        while (i--) t[i] = t[i].destroy();
                        i = n.length;
                        while (i--) n[i] = n[i].destroy();
                        on(["title", "subtitle", "chartBackground", "plotBackground", "plotBGImage", "plotBorder", "seriesGroup", "clipRect", "credits", "tracker", "scroller", "rangeSelector", "legend", "resetZoomButton", "tooltip", "renderer"], function (t) {
                            var n = e[t];
                            n && (e[t] = n.destroy())
                        }), r && (r.innerHTML = "", hn(r), s && Qt(r), r = null);
                        for (i in e) delete e[i];
                        e.options = null, e = null
                    },
                    firstRender: function () {
                        var e = this,
                            r = e.options,
                            i = e.callback,
                            s = "onreadystatechange",
                            o = "complete";
                        if (!E && n == n.top && t.readyState !== o || x && !n.canvg) {
                            x ? On.push(function () {
                                e.firstRender()
                            }, r.global.canvasToolsURL) : t.attachEvent(s, function () {
                                t.detachEvent(s, e.firstRender), t.readyState === o && e.firstRender()
                            });
                            return
                        }
                        e.getContainer(), pn(e, "init"), Highcharts.RangeSelector && r.rangeSelector.enabled && (e.rangeSelector = new Highcharts.RangeSelector(e)), e.resetMargins(), e.setChartSize(), e.propFromSeries(), e.getAxes(), on(r.series || [], function (t) {
                            e.initSeries(t)
                        }), Highcharts.Scroller && (r.navigator.enabled || r.scrollbar.enabled) && (e.scroller = new Highcharts.Scroller(e)), e.tracker = new Bn(e, r), e.render(), e.renderer.draw(), i && i.apply(e, [e]), on(e.callbacks, function (t) {
                            t.apply(e, [e])
                        }), e.cloneRenderTo(!0), pn(e, "load")
                    },
                    init: function (e) {
                        var t = this,
                            n = t.options.chart,
                            r;
                        n.reflow !== !1 && cn(t, "load", t.initReflow);
                        if (e)
                            for (r in e) cn(t, r, e[r]);
                        t.xAxis = [], t.yAxis = [], t.animation = x ? !1 : Pt(n.animation, !0), t.setSize = t.resize, t.pointCount = 0, t.counters = new Xt, t.firstRender()
                    }
                }, Fn.prototype.callbacks = [];
                var In = function () {};
                In.prototype = {
                    init: function (e, t, n) {
                        var r = this,
                            i = e.chart.counters,
                            s;
                        return r.series = e, r.applyOptions(t, n), r.pointAttr = {}, e.options.colorByPoint && (s = e.chart.options.colors, r.color = r.color || s[i.color++], i.wrapColor(s.length)), e.chart.pointCount++, r
                    },
                    applyOptions: function (t, n) {
                        var r = this,
                            i = r.series,
                            s = typeof t;
                        r.config = t, s === "number" || t === null ? r.y = t : typeof t[0] == "number" ? (r.x = t[0], r.y = t[1]) : s === "object" && typeof t.length != "number" ? (Et(r, t), r.options = t, t.dataLabels && (i._hasPointLabels = !0), t.marker && (i._hasPointMarkers = !0)) : typeof t[0] == "string" && (r.name = t[0], r.y = t[1]), r.x === e && (r.x = n === e ? i.autoIncrement() : n)
                    },
                    destroy: function () {
                        var e = this,
                            t = e.series,
                            n = t.chart,
                            r = n.hoverPoints,
                            i;
                        n.pointCount--, r && (e.setState(), Ot(r, e), r.length || (n.hoverPoints = null)), e === n.hoverPoint && e.onMouseOut();
                        if (e.graphic || e.dataLabel) hn(e), e.destroyElements();
                        e.legendItem && n.legend.destroyItem(e);
                        for (i in e) e[i] = null
                    },
                    destroyElements: function () {
                        var e = this,
                            t = ["graphic", "tracker", "dataLabel", "group", "connector", "shadowGroup"],
                            n, r = 6;
                        while (r--) n = t[r], e[n] && (e[n] = e[n].destroy())
                    },
                    getLabelConfig: function () {
                        var e = this;
                        return {
                            x: e.category,
                            y: e.y,
                            key: e.name || e.category,
                            series: e.series,
                            point: e,
                            percentage: e.percentage,
                            total: e.total || e.stackTotal
                        }
                    },
                    select: function (e, t) {
                        var n = this,
                            r = n.series,
                            i = r.chart;
                        e = Pt(e, !n.selected), n.firePointEvent(e ? "select" : "unselect", {
                            accumulate: t
                        }, function () {
                            n.selected = e, n.setState(e && J), t || on(i.getSelectedPoints(), function (e) {
                                e.selected && e !== n && (e.selected = !1, e.setState(V), e.firePointEvent("unselect"))
                            })
                        })
                    },
                    onMouseOver: function () {
                        var e = this,
                            t = e.series,
                            n = t.chart,
                            r = n.tooltip,
                            i = n.hoverPoint;
                        i && i !== e && i.onMouseOut(), e.firePointEvent("mouseOver"), r && (!r.shared || t.noSharedTooltip) && r.refresh(e), e.setState($), n.hoverPoint = e
                    },
                    onMouseOut: function () {
                        var e = this.series.chart,
                            t = e.hoverPoints;
                        if (!t || sn(this, t) === -1) this.firePointEvent("mouseOut"), this.setState(), e.hoverPoint = null
                    },
                    tooltipFormatter: function (e) {
                        var t = this,
                            n = t.series,
                            r = n.tooltipOptions,
                            i = e.match(/\{(series|point)\.[a-zA-Z]+\}/g),
                            s = /[{\.}]/,
                            o, u, a, f, l, c, h, p = {
                                y: 0,
                                open: 0,
                                high: 0,
                                low: 0,
                                close: 0,
                                percentage: 1,
                                total: 1
                            };
                        r.valuePrefix = r.valuePrefix || r.yPrefix, r.valueDecimals = r.valueDecimals || r.yDecimals, r.valueSuffix = r.valueSuffix || r.ySuffix;
                        for (h in i) u = i[h], Tt(u) && u !== e && (l = (" " + u).split(s), o = {
                            point: t,
                            series: n
                        }[l[1]], c = l[2], o === t && p.hasOwnProperty(c) ? (f = p[c] ? c : "value", a = (r[f + "Prefix"] || "") + It(t[c], Pt(r[f + "Decimals"], -1)) + (r[f + "Suffix"] || "")) : a = o[c], e = e.replace(u, a));
                        return e
                    },
                    update: function (e, t, n) {
                        var r = this,
                            i = r.series,
                            s = r.graphic,
                            o, u = i.data,
                            a = u.length,
                            f = i.chart;
                        t = Pt(t, !0), r.firePointEvent("update", {
                            options: e
                        }, function () {
                            r.applyOptions(e), Nt(e) && (i.getAttribs(), s && s.attr(r.pointAttr[i.state]));
                            for (o = 0; o < a; o++)
                                if (u[o] === r) {
                                    i.xData[o] = r.x, i.yData[o] = r.y, i.options.data[o] = e;
                                    break
                                }
                            i.isDirty = !0, i.isDirtyData = !0, t && f.redraw(n)
                        })
                    },
                    remove: function (e, t) {
                        var n = this,
                            r = n.series,
                            i = r.chart,
                            s, o = r.data,
                            u = o.length;
                        Zt(t, i), e = Pt(e, !0), n.firePointEvent("remove", null, function () {
                            for (s = 0; s < u; s++)
                                if (o[s] === n) {
                                    o.splice(s, 1), r.options.data.splice(s, 1), r.xData.splice(s, 1), r.yData.splice(s, 1);
                                    break
                                }
                            n.destroy(), r.isDirty = !0, r.isDirtyData = !0, e && i.redraw()
                        })
                    },
                    firePointEvent: function (e, t, n) {
                        var r = this,
                            i = this.series,
                            s = i.options;
                        (s.point.events[e] || r.options && r.options.events && r.options.events[e]) && this.importEvents(), e === "click" && s.allowPointSelect && (n = function (e) {
                                r.select(null, e.ctrlKey || e.metaKey || e.shiftKey)
                            }), pn(this, e, t, n)
                    },
                    importEvents: function () {
                        if (!this.hasImportedEvents) {
                            var e = this,
                                t = ln(e.series.options.point, e.options),
                                n = t.events,
                                r;
                            e.events = n;
                            for (r in n) cn(e, r, n[r]);
                            this.hasImportedEvents = !0
                        }
                    },
                    setState: function (e) {
                        var t = this,
                            n = t.plotX,
                            r = t.plotY,
                            i = t.series,
                            s = i.options.states,
                            o = yn[i.type].marker && i.options.marker,
                            u = o && !o.enabled,
                            a = o && o.states[e],
                            f = a && a.enabled === !1,
                            l = i.stateMarkerGraphic,
                            c = i.chart,
                            h, p = t.pointAttr;
                        e = e || V;
                        if (e === t.state || t.selected && e !== J || s[e] && s[e].enabled === !1 || e && (f || u && !a.enabled)) return;
                        t.graphic ? (h = o && t.graphic.symbolName && p[e].r, t.graphic.attr(ln(p[e], h ? {
                            x: n - h,
                            y: r - h,
                            width: 2 * h,
                            height: 2 * h
                        } : {}))) : (e && a && (h = a.radius, l ? l.attr({
                            x: n - h,
                            y: r - h
                        }) : i.stateMarkerGraphic = l = c.renderer.symbol(i.symbol, n - h, r - h, 2 * h, 2 * h).attr(p[e]).add(i.markerGroup)), l && l[e && c.isInsidePlot(n, r) ? "show" : "hide"]()), t.state = e
                    }
                };
                var qn = function () {};
                qn.prototype = {
                    isCartesian: !0,
                    type: "line",
                    pointClass: In,
                    sorted: !0,
                    pointAttrToOptions: {
                        stroke: "lineColor",
                        "stroke-width": "lineWidth",
                        fill: "fillColor",
                        r: "radius"
                    },
                    init: function (e, t) {
                        var n = this,
                            r, i;
                        n.chart = e, n.options = t = n.setOptions(t), n.bindAxes(), Et(n, {
                            name: t.name,
                            state: V,
                            pointAttr: {},
                            visible: t.visible !== !1,
                            selected: t.selected === !0
                        }), x && (t.animation = !1), i = t.events;
                        for (r in i) cn(n, r, i[r]);
                        if (i && i.click || t.point && t.point.events && t.point.events.click || t.allowPointSelect) e.runTrackerClick = !0;
                        n.getColor(), n.getSymbol(), n.setData(t.data, !1), n.isCartesian && (e.hasCartesianSeries = !0), e.series.push(n), Vt(e.series, function (e, t) {
                            return (e.options.index || 0) - (t.options.index || 0)
                        }), on(e.series, function (e, t) {
                            e.index = t, e.name = e.name || "Series " + (t + 1)
                        })
                    },
                    bindAxes: function () {
                        var t = this,
                            n = t.options,
                            r = t.chart,
                            i;
                        t.isCartesian && on(["xAxis", "yAxis"], function (s) {
                            on(r[s], function (r) {
                                i = r.options;
                                if (n[s] === i.index || n[s] === e && i.index === 0) r.series.push(t), t[s] = r, r.isDirty = !0
                            })
                        })
                    },
                    autoIncrement: function () {
                        var e = this,
                            t = e.options,
                            n = e.xIncrement;
                        return n = Pt(n, t.pointStart, 0), e.pointInterval = Pt(e.pointInterval, t.pointInterval, 1), e.xIncrement = n + e.pointInterval, n
                    },
                    getSegments: function () {
                        var e = this,
                            t = -1,
                            n = [],
                            r, i = e.points,
                            s = i.length;
                        if (s)
                            if (e.options.connectNulls) {
                                r = s;
                                while (r--) i[r].y === null && i.splice(r, 1);
                                i.length && (n = [i])
                            } else on(i, function (e, r) {
                                e.y === null ? (r > t + 1 && n.push(i.slice(t + 1, r)), t = r) : r === s - 1 && n.push(i.slice(t + 1, r + 1))
                            });
                        e.segments = n
                    },
                    setOptions: function (e) {
                        var t = this.chart,
                            n = t.options,
                            r = n.plotOptions,
                            i = r[this.type],
                            s = e.data,
                            o;
                        return e.data = null, o = ln(i, r.series, e), o.data = e.data = s, this.tooltipOptions = ln(n.tooltip, o.tooltip), i.marker === null && delete o.marker, o
                    },
                    getColor: function () {
                        var e = this.options,
                            t = this.chart.options.colors,
                            n = this.chart.counters;
                        this.color = e.color || !e.colorByPoint && t[n.color++] || "gray", n.wrapColor(t.length)
                    },
                    getSymbol: function () {
                        var e = this,
                            t = e.options.marker,
                            n = e.chart,
                            r = n.options.symbols,
                            i = n.counters;
                        e.symbol = t.symbol || r[i.symbol++], /^url/.test(e.symbol) && (t.radius = 0), i.wrapSymbol(r.length)
                    },
                    drawLegendSymbol: function (e) {
                        var t = this.options,
                            n = t.marker,
                            r, i = e.options,
                            s, o = i.symbolWidth,
                            u = this.chart.renderer,
                            a = this.legendGroup,
                            f = e.baseline,
                            l;
                        t.lineWidth && (l = {
                            "stroke-width": t.lineWidth
                        }, t.dashStyle && (l.dashstyle = t.dashStyle), this.legendLine = u.path([z, 0, f - 4, W, o, f - 4]).attr(l).add(a)), n && n.enabled && (r = n.radius, this.legendSymbol = s = u.symbol(this.symbol, o / 2 - r, f - 4 - r, 2 * r, 2 * r).attr(this.pointAttr[V]).add(a))
                    },
                    addPoint: function (e, t, n, r) {
                        var i = this,
                            s = i.data,
                            o = i.graph,
                            u = i.area,
                            a = i.chart,
                            f = i.xData,
                            l = i.yData,
                            c = o && o.shift || 0,
                            h = i.options.data,
                            p, d = i.pointClass.prototype;
                        Zt(r, a), o && n && (o.shift = c + 1), u && (n && (u.shift = c + 1), u.isArea = !0), t = Pt(t, !0), p = {
                            series: i
                        }, d.applyOptions.apply(p, [e]), f.push(p.x), l.push(d.toYData ? d.toYData.call(p) : p.y), h.push(e), n && (s[0] && s[0].remove ? s[0].remove(!1) : (s.shift(), f.shift(), l.shift(), h.shift())), i.getAttribs(), i.isDirty = !0, i.isDirtyData = !0, t && a.redraw()
                    },
                    setData: function (e, t) {
                        var n = this,
                            r = n.points,
                            i = n.options,
                            s = n.initialColor,
                            o = n.chart,
                            u = null,
                            a = n.xAxis,
                            f, l = n.pointClass.prototype;
                        n.xIncrement = null, n.pointRange = a && a.categories ? 1 : i.pointRange, Mt(s) && (o.counters.color = s);
                        var c = [],
                            h = [],
                            p = e ? e.length : [],
                            d = i.turboThreshold || 1e3,
                            v, m = n.pointArrayMap,
                            g = m && m.length;
                        if (p > d) {
                            f = 0;
                            while (u === null && f < p) u = e[f], f++;
                            if (kt(u)) {
                                var y = Pt(i.pointStart, 0),
                                    b = Pt(i.pointInterval, 1);
                                for (f = 0; f < p; f++) c[f] = y, h[f] = e[f], y += b;
                                n.xIncrement = y
                            } else if (Ct(u))
                                if (g)
                                    for (f = 0; f < p; f++) v = e[f], c[f] = v[0], h[f] = v.slice(1, g + 1);
                                else
                                    for (f = 0; f < p; f++) v = e[f], c[f] = v[0], h[f] = v[1]
                        } else
                            for (f = 0; f < p; f++) v = {
                                series: n
                            }, l.applyOptions.apply(v, [e[f]]), c[f] = v.x, h[f] = l.toYData ? l.toYData.call(v) : v.y;
                        Tt(h[0]) && Gt(14, !0), n.data = [], n.options.data = e, n.xData = c, n.yData = h, f = r && r.length || 0;
                        while (f--) r[f] && r[f].destroy && r[f].destroy();
                        a && (a.minRange = a.userMinRange), n.isDirty = n.isDirtyData = o.isDirtyBox = !0, Pt(t, !0) && o.redraw(!1)
                    },
                    remove: function (e, t) {
                        var n = this,
                            r = n.chart;
                        e = Pt(e, !0), n.isRemoving || (n.isRemoving = !0, pn(n, "remove", null, function () {
                            n.destroy(), r.isDirtyLegend = r.isDirtyBox = !0, e && r.redraw(t)
                        })), n.isRemoving = !1
                    },
                    processData: function (t) {
                        var n = this,
                            r = n.xData,
                            i = n.yData,
                            s = r.length,
                            o = 0,
                            a = s,
                            f, l, c, h = n.xAxis,
                            p, d = n.options,
                            v = d.cropThreshold,
                            m = n.isCartesian;
                        if (m && !n.isDirty && !h.isDirty && !n.yAxis.isDirty && !t) return !1;
                        if (m && n.sorted && (!v || s > v || n.forceCrop)) {
                            var g = h.getExtremes(),
                                y = g.min,
                                b = g.max;
                            if (r[s - 1] < y || r[0] > b) r = [], i = [];
                            else if (r[0] < y || r[s - 1] > b) {
                                for (p = 0; p < s; p++)
                                    if (r[p] >= y) {
                                        o = u(0, p - 1);
                                        break
                                    }
                                for (; p < s; p++)
                                    if (r[p] > b) {
                                        a = p + 1;
                                        break
                                    }
                                r = r.slice(o, a), i = i.slice(o, a), f = !0
                            }
                        }
                        for (p = r.length - 1; p > 0; p--) l = r[p] - r[p - 1], l > 0 && (c === e || l < c) && (c = l);
                        n.cropped = f, n.cropStart = o, n.processedXData = r, n.processedYData = i, d.pointRange === null && (n.pointRange = c || 1), n.closestPointRange = c
                    },
                    generatePoints: function () {
                        var t = this,
                            n = t.options,
                            r = n.data,
                            i = t.data,
                            s, o = t.processedXData,
                            u = t.processedYData,
                            a = t.pointClass,
                            f = o.length,
                            l = t.cropStart || 0,
                            c, h = t.hasGroupedData,
                            p, d = [],
                            v;
                        if (!i && !h) {
                            var m = [];
                            m.length = r.length, i = t.data = m
                        }
                        for (v = 0; v < f; v++) c = l + v, h ? d[v] = (new a).init(t, [o[v]].concat(Dt(u[v]))) : (i[c] ? p = i[c] : r[c] !== e && (i[c] = p = (new a).init(t, r[c], o[v])), d[v] = p);
                        if (i && (f !== (s = i.length) || h))
                            for (v = 0; v < s; v++) v === l && !h && (v += f), i[v] && (i[v].destroyElements(), i[v].plotX = e);
                        t.data = i, t.points = d
                    },
                    translate: function () {
                        this.processedXData || this.processData(), this.generatePoints();
                        var t = this,
                            n = t.chart,
                            r = t.options,
                            s = r.stacking,
                            o = t.xAxis,
                            u = o.categories,
                            a = t.yAxis,
                            f = t.points,
                            l = f.length,
                            c = !! t.modifyValue,
                            h, p = a.series,
                            d = p.length,
                            v = r.pointPlacement === "between";
                        while (d--)
                            if (p[d].visible) {
                                p[d] === t && (h = !0);
                                break
                            }
                        for (d = 0; d < l; d++) {
                            var m = f[d],
                                g = m.x,
                                y = m.y,
                                b = m.low,
                                w = a.stacks[(y < r.threshold ? "-" : "") + t.stackKey],
                                E, S;
                            m.plotX = o.translate(g, 0, 0, 0, 1, v), s && t.visible && w && w[g] && (E = w[g], S = E.total, E.cum = b = E.cum - y, y = b + y, h && (b = Pt(r.threshold, a.isLog ? null : a.min)), s === "percent" && (b = S ? b * 100 / S : 0, y = S ? y * 100 / S : 0), m.percentage = S ? m.y * 100 / S : 0, m.total = m.stackTotal = S, m.stackY = y), m.yBottom = Mt(b) ? a.translate(b, 0, 1, 0, 1) : null, c && (y = t.modifyValue(y, m)), m.plotY = typeof y == "number" ? i(a.translate(y, 0, 1, 0, 1) * 10) / 10 : e, m.clientX = n.inverted ? n.plotHeight - m.plotX : m.plotX, m.category = u && u[m.x] !== e ? u[m.x] : m.x
                        }
                        t.getSegments()
                    },
                    setTooltipPoints: function (e) {
                        var t = this,
                            n = [],
                            r, i, o, a = t.xAxis,
                            f = a ? a.tooltipLen || a.len : t.chart.plotSizeX,
                            l = a && a.tooltipPosName || "plotX",
                            c, h, p = [];
                        if (t.options.enableMouseTracking === !1) return;
                        e && (t.tooltipPoints = null), on(t.segments || t.points, function (e) {
                            n = n.concat(e)
                        }), a && a.reversed && (n = n.reverse()), r = n.length;
                        for (h = 0; h < r; h++) {
                            c = n[h], i = n[h - 1] ? o + 1 : 0, o = n[h + 1] ? u(0, s((c[l] + (n[h + 1] ? n[h + 1][l] : f)) / 2)) : f;
                            while (i >= 0 && i <= o) p[i++] = c
                        }
                        t.tooltipPoints = p
                    },
                    tooltipHeaderFormatter: function (e) {
                        var t = this,
                            n = t.tooltipOptions,
                            r = n.xDateFormat,
                            i = t.xAxis,
                            s = i && i.options.type === "datetime",
                            o;
                        if (s && !r)
                            for (o in D)
                                if (D[o] >= i.closestPointRange) {
                                    r = n.dateTimeLabelFormats[o];
                                    break
                                }
                        return n.headerFormat.replace("{point.key}", s ? O(r, e) : e).replace("{series.name}", t.name).replace("{series.color}", t.color)
                    },
                    onMouseOver: function () {
                        var e = this,
                            t = e.chart,
                            n = t.hoverSeries;
                        n && n !== e && n.onMouseOut(), e.options.events.mouseOver && pn(e, "mouseOver"), e.setState($), t.hoverSeries = e
                    },
                    onMouseOut: function () {
                        var e = this,
                            t = e.options,
                            n = e.chart,
                            r = n.tooltip,
                            i = n.hoverPoint;
                        i && i.onMouseOut(), e && t.events.mouseOut && pn(e, "mouseOut"), r && !t.stickyTracking && !r.shared && r.hide(), e.setState(), n.hoverSeries = null
                    },
                    animate: function (e) {
                        var t = this,
                            n = t.chart,
                            r = n.renderer,
                            i, s, o = t.options.animation,
                            u = n.clipBox,
                            a = n.inverted,
                            f;
                        o && !Nt(o) && (o = yn[t.type].animation), f = "_sharedClip" + o.duration + o.easing, e ? (i = n[f], s = n[f + "m"], i || (n[f] = i = r.clipRect(Et(u, {
                            width: 0
                        })), n[f + "m"] = s = r.clipRect(-99, a ? -n.plotLeft : -n.plotTop, 99, a ? n.chartWidth : n.chartHeight)), t.group.clip(i), t.markerGroup.clip(s), t.sharedClipKey = f) : (i = n[f], i && (i.animate({
                            width: n.plotSizeX
                        }, o), n[f + "m"].animate({
                            width: n.plotSizeX + 99
                        }, o)), t.animate = null, t.animationTimeout = setTimeout(function () {
                            t.afterAnimate()
                        }, o.duration))
                    },
                    afterAnimate: function () {
                        var e = this.chart,
                            t = this.sharedClipKey,
                            n = this.group;
                        n && this.options.clip !== !1 && (n.clip(e.clipRect), this.markerGroup.clip()), setTimeout(function () {
                            t && e[t] && (e[t] = e[t].destroy(), e[t + "m"] = e[t + "m"].destroy())
                        }, 100)
                    },
                    drawPoints: function () {
                        var t = this,
                            n, r = t.points,
                            i = t.chart,
                            s, o, u, a, f, l, c, h, p = t.options,
                            d = p.marker,
                            v, m, g, y = t.markerGroup;
                        if (d.enabled || t._hasPointMarkers) {
                            u = r.length;
                            while (u--) a = r[u], s = a.plotX, o = a.plotY, h = a.graphic, v = a.marker || {}, m = d.enabled && v.enabled === e || v.enabled, g = i.isInsidePlot(s, o, i.inverted), m && o !== e && !isNaN(o) && (n = a.pointAttr[a.selected ? J : V], f = n.r, l = Pt(v.symbol, t.symbol), c = l.indexOf("url") === 0, h ? h.attr({
                                visibility: g ? E ? "inherit" : q : F
                            }).animate(Et({
                                x: s - f,
                                y: o - f
                            }, h.symbolName ? {
                                width: 2 * f,
                                height: 2 * f
                            } : {})) : g && (f > 0 || c) && (a.graphic = h = i.renderer.symbol(l, s - f, o - f, 2 * f, 2 * f).attr(n).add(y)))
                        }
                    },
                    convertAttribs: function (e, t, n, r) {
                        var i = this.pointAttrToOptions,
                            s, o, u = {};
                        e = e || {}, t = t || {}, n = n || {}, r = r || {};
                        for (s in i) o = i[s], u[s] = Pt(e[o], t[s], n[s], r[s]);
                        return u
                    },
                    getAttribs: function () {
                        var e = this,
                            t = yn[e.type].marker ? e.options.marker : e.options,
                            n = t.states,
                            r = n[$],
                            i, s = e.color,
                            o = {
                                stroke: s,
                                fill: s
                            }, u = e.points || [],
                            a, f, l = [],
                            c, h = e.pointAttrToOptions,
                            p, d;
                        e.options.marker ? (r.radius = r.radius || t.radius + 2, r.lineWidth = r.lineWidth || t.lineWidth + 1) : r.color = r.color || xn(r.color || s).brighten(r.brightness).get(), l[V] = e.convertAttribs(t, o), on([$, J], function (t) {
                            l[t] = e.convertAttribs(n[t], l[V])
                        }), e.pointAttr = l, a = u.length;
                        while (a--) {
                            f = u[a], t = f.options && f.options.marker || f.options, t && t.enabled === !1 && (t.radius = 0), p = e.options.colorByPoint;
                            if (f.options)
                                for (d in h) Mt(t[h[d]]) && (p = !0);
                            p ? (t = t || {}, c = [], n = t.states || {}, i = n[$] = n[$] || {}, e.options.marker || (i.color = xn(i.color || f.color).brighten(i.brightness || r.brightness).get()), c[V] = e.convertAttribs(Et({
                                color: f.color
                            }, t), l[V]), c[$] = e.convertAttribs(n[$], l[$], c[V]), c[J] = e.convertAttribs(n[J], l[J], c[V])) : c = l, f.pointAttr = c
                        }
                    },
                    destroy: function () {
                        var e = this,
                            t = e.chart,
                            n = /AppleWebKit\/533/.test(d),
                            r, i, s = e.data || [],
                            o, u, a;
                        pn(e, "destroy"), hn(e), on(["xAxis", "yAxis"], function (t) {
                            a = e[t], a && (Ot(a.series, e), a.isDirty = !0)
                        }), e.legendItem && e.chart.legend.destroyItem(e), i = s.length;
                        while (i--) o = s[i], o && o.destroy && o.destroy();
                        e.points = null, clearTimeout(e.animationTimeout), on(["area", "graph", "dataLabelsGroup", "group", "markerGroup", "tracker", "trackerGroup"], function (t) {
                            e[t] && (r = n && t === "group" ? "hide" : "destroy", e[t][r]())
                        }), t.hoverSeries === e && (t.hoverSeries = null), Ot(t.series, e);
                        for (u in e) delete e[u]
                    },
                    drawDataLabels: function () {
                        var t = this,
                            n = t.options,
                            r = n.dataLabels;
                        if (r.enabled || t._hasPointLabels) {
                            var s, o, u = t.points,
                                a, f, l, c, h = t.chart,
                                p = h.renderer,
                                d = h.inverted,
                                v = t.type,
                                m = n.stacking,
                                g = v === "column" || v === "bar",
                                y = r.verticalAlign === null,
                                b = r.y === null,
                                w = p.fontMetrics(r.style.fontSize),
                                E = w.h,
                                S = w.b;
                            if (g) {
                                var x = {
                                    top: S,
                                    middle: S - E / 2,
                                    bottom: -E + S
                                };
                                m ? (y && (r = ln(r, {
                                    verticalAlign: "middle"
                                })), b && (r = ln(r, {
                                    y: x[r.verticalAlign]
                                }))) : y ? r = ln(r, {
                                    verticalAlign: "top"
                                }) : b && (r = ln(r, {
                                    y: x[r.verticalAlign]
                                }))
                            }
                            c = t.plotGroup("dataLabelsGroup", "data-labels", t.visible ? q : F, 6), f = r, on(u, function (u) {
                                var y, b, w, x, T = u.dataLabel;
                                r = f, a = u.options, a && a.dataLabels && (r = ln(r, a.dataLabels)), x = r.enabled, x && (y = u.barX && u.barX + u.barW / 2 || Pt(u.plotX, -999), b = Pt(u.plotY, -999), w = r.y === null ? u.y >= n.threshold ? -E + S : S : r.y, s = (d ? h.plotWidth - b : y) + r.x, o = i((d ? h.plotHeight - y : b) + w)), t.isCartesian && !h.isInsidePlot(s - r.x, o) && (x = !1);
                                if (T && !x) u.dataLabel = T.destroy();
                                else if (x) {
                                    var N = r.align,
                                        C, k;
                                    l = r.formatter.call(u.getLabelConfig(), r), v === "column" && (s += {
                                        left: -1,
                                        right: 1
                                    }[N] * u.barW / 2 || 0), !m && d && u.y < 0 && (N = "right", s -= 10), r.style.color = Pt(r.color, r.style.color, t.color, "black");
                                    if (T) T.attr({
                                        text: l
                                    }).animate({
                                        x: s,
                                        y: o
                                    });
                                    else if (Mt(l)) {
                                        C = {
                                            align: N,
                                            fill: r.backgroundColor,
                                            stroke: r.borderColor,
                                            "stroke-width": r.borderWidth,
                                            r: r.borderRadius || 0,
                                            rotation: r.rotation,
                                            padding: r.padding,
                                            zIndex: 1
                                        };
                                        for (k in C) C[k] === e && delete C[k];
                                        T = u.dataLabel = p[r.rotation ? "text" : "label"](l, s, o, null, null, null, r.useHTML, !0).attr(C).css(r.style).add(c).shadow(r.shadow)
                                    }
                                    if (g && n.stacking && T) {
                                        var L = u.barX,
                                            A = u.barY,
                                            O = u.barW,
                                            M = u.barH;
                                        T.align(r, null, {
                                            x: d ? h.plotWidth - A - M : L,
                                            y: d ? h.plotHeight - L - O : A,
                                            width: d ? M : O,
                                            height: d ? O : M
                                        })
                                    }
                                }
                            })
                        }
                    },
                    getSegmentPath: function (e) {
                        var t = this,
                            n = [];
                        return on(e, function (r, i) {
                            if (t.getPointSpline) n.push.apply(n, t.getPointSpline(e, r, i));
                            else {
                                n.push(i ? W : z);
                                if (i && t.options.step) {
                                    var s = e[i - 1];
                                    n.push(r.plotX, s.plotY)
                                }
                                n.push(r.plotX, r.plotY)
                            }
                        }), n
                    },
                    getGraphPath: function () {
                        var e = this,
                            t = [],
                            n, r = [];
                        return on(e.segments, function (i) {
                            n = e.getSegmentPath(i), i.length > 1 ? t = t.concat(n) : r.push(i[0])
                        }), e.singlePoints = r, e.graphPath = t, t
                    },
                    drawGraph: function () {
                        var e = this.options,
                            t = this.graph,
                            n = this.group,
                            r = e.lineColor || this.color,
                            i = e.lineWidth,
                            s = e.dashStyle,
                            o, u = this.getGraphPath();
                        t ? (mn(t), t.animate({
                            d: u
                        })) : i && (o = {
                            stroke: r,
                            "stroke-width": i,
                            zIndex: 1
                        }, s && (o.dashstyle = s), this.graph = this.chart.renderer.path(u).attr(o).add(n).shadow(e.shadow))
                    },
                    invertGroups: function () {
                        function n() {
                            var t = {
                                width: e.yAxis.len,
                                height: e.xAxis.len
                            };
                            on(["group", "trackerGroup", "markerGroup"], function (n) {
                                e[n] && e[n].attr(t).invert()
                            })
                        }
                        var e = this,
                            t = e.chart;
                        cn(t, "resize", n), cn(e, "destroy", function () {
                            hn(t, "resize", n)
                        }), n(), e.invertGroups = n
                    },
                    plotGroup: function (e, t, n, r, i) {
                        var s = this[e],
                            o = this.chart,
                            u = this.xAxis,
                            a = this.yAxis;
                        return s || (this[e] = s = o.renderer.g(t).attr({
                            visibility: n,
                            zIndex: r || .1
                        }).add(i)), s.translate(u ? u.left : o.plotLeft, a ? a.top : o.plotTop), s
                    },
                    render: function () {
                        var e = this,
                            t = e.chart,
                            n, r = e.options,
                            i = r.animation,
                            s = i && !! e.animate,
                            o = e.visible ? q : F,
                            u = r.zIndex,
                            a = e.hasRendered,
                            f = t.seriesGroup;
                        n = e.plotGroup("group", "series", o, u, f), e.markerGroup = e.plotGroup("markerGroup", "markers", o, u, f), e.drawDataLabels(), s && e.animate(!0), e.getAttribs(), n.inverted = t.inverted, e.drawGraph && e.drawGraph(), e.drawPoints(), e.options.enableMouseTracking !== !1 && e.drawTracker(), t.inverted && e.invertGroups(), r.clip !== !1 && !e.sharedClipKey && !a && (n.clip(t.clipRect), this.trackerGroup && this.trackerGroup.clip(t.clipRect)), s ? e.animate() : a || e.afterAnimate(), e.isDirty = e.isDirtyData = !1, e.hasRendered = !0
                    },
                    redraw: function () {
                        var e = this,
                            t = e.chart,
                            n = e.isDirtyData,
                            r = e.group;
                        r && (t.inverted && r.attr({
                            width: t.plotWidth,
                            height: t.plotHeight
                        }), r.animate({
                            translateX: e.xAxis.left,
                            translateY: e.yAxis.top
                        })), e.translate(), e.setTooltipPoints(!0), e.render(), n && pn(e, "updatedData")
                    },
                    setState: function (e) {
                        var t = this,
                            n = t.options,
                            r = t.graph,
                            i = n.states,
                            s = n.lineWidth;
                        e = e || V;
                        if (t.state !== e) {
                            t.state = e;
                            if (i[e] && i[e].enabled === !1) return;
                            e && (s = i[e].lineWidth || s + 1), r && !r.dashstyle && r.attr({
                                "stroke-width": s
                            }, e ? 0 : 500)
                        }
                    },
                    setVisible: function (t, n) {
                        var r = this,
                            i = r.chart,
                            s = r.legendItem,
                            o = r.group,
                            u = r.tracker,
                            a = r.dataLabelsGroup,
                            f = r.markerGroup,
                            l, c, h = r.points,
                            p, d = i.options.chart.ignoreHiddenSeries,
                            v = r.visible;
                        r.visible = t = t === e ? !v : t, l = t ? "show" : "hide", o && o[l](), f && f[l]();
                        if (u) u[l]();
                        else if (h) {
                            c = h.length;
                            while (c--) p = h[c], p.tracker && p.tracker[l]()
                        }
                        a && a[l](), s && i.legend.colorizeItem(r, t), r.isDirty = !0, r.options.stacking && on(i.series, function (e) {
                            e.options.stacking && e.visible && (e.isDirty = !0)
                        }), d && (i.isDirtyBox = !0), n !== !1 && i.redraw(), pn(r, l)
                    },
                    show: function () {
                        this.setVisible(!0)
                    },
                    hide: function () {
                        this.setVisible(!1)
                    },
                    select: function (t) {
                        var n = this;
                        n.selected = t = t === e ? !n.selected : t, n.checkbox && (n.checkbox.checked = t), pn(n, t ? "select" : "unselect")
                    },
                    drawTracker: function () {
                        var e = this,
                            t = e.options,
                            n = t.trackByArea,
                            r = [].concat(n ? e.areaPath : e.graphPath),
                            i = r.length,
                            s = e.chart,
                            o = s.renderer,
                            u = s.options.tooltip.snap,
                            a = e.tracker,
                            f = t.cursor,
                            l = f && {
                                cursor: f
                            }, c = e.singlePoints,
                            h = this.isCartesian && this.plotGroup("trackerGroup", null, q, t.zIndex || 1, s.trackerGroup),
                            p, d;
                        if (i && !n) {
                            d = i + 1;
                            while (d--) r[d] === z && r.splice(d + 1, 0, r[d + 1] - u, r[d + 2], W), (d && r[d] === z || d === i) && r.splice(d, 0, W, r[d - 2] + u, r[d - 1])
                        }
                        for (d = 0; d < c.length; d++) p = c[d], r.push(z, p.plotX - u, p.plotY, W, p.plotX + u, p.plotY);
                        a ? a.attr({
                            d: r
                        }) : e.tracker = o.path(r).attr({
                            isTracker: !0,
                            "stroke-linejoin": "bevel",
                            visibility: e.visible ? q : F,
                            stroke: X,
                            fill: n ? X : U,
                            "stroke-width": t.lineWidth + (n ? 0 : 2 * u)
                        }).on(N ? "touchstart" : "mouseover", function () {
                            s.hoverSeries !== e && e.onMouseOver()
                        }).on("mouseout", function () {
                            t.stickyTracking || e.onMouseOut()
                        }).css(l).add(h)
                    }
                };
                var Rn = jt(qn);
                wt.line = Rn, yn.area = ln(bn, {
                    threshold: 0
                });
                var Un = jt(qn, {
                    type: "area",
                    getSegmentPath: function (e) {
                        var t = qn.prototype.getSegmentPath.call(this, e),
                            n = [].concat(t),
                            r, i = this.options,
                            s = t.length;
                        s === 3 && n.push(W, t[1], t[2]);
                        if (i.stacking && !this.closedStacks)
                            for (r = e.length - 1; r >= 0; r--) r < e.length - 1 && i.step && n.push(e[r + 1].plotX, e[r].yBottom), n.push(e[r].plotX, e[r].yBottom);
                        else this.closeSegment(n, e);
                        return this.areaPath = this.areaPath.concat(n), t
                    },
                    closeSegment: function (e, t) {
                        var n = this.yAxis.getThreshold(this.options.threshold);
                        e.push(W, t[t.length - 1].plotX, n, W, t[0].plotX, n)
                    },
                    drawGraph: function () {
                        this.areaPath = [], qn.prototype.drawGraph.apply(this);
                        var e = this.areaPath,
                            t = this.options,
                            n = this.area;
                        n ? n.animate({
                            d: e
                        }) : this.area = this.chart.renderer.path(e).attr({
                            fill: Pt(t.fillColor, xn(this.color).setOpacity(t.fillOpacity || .75).get()),
                            zIndex: 0
                        }).add(this.group)
                    },
                    drawLegendSymbol: function (e, t) {
                        t.legendSymbol = this.chart.renderer.rect(0, e.baseline - 11, e.options.symbolWidth, 12, 2).attr({
                            zIndex: 3
                        }).add(t.legendGroup)
                    }
                });
                wt.area = Un, yn.spline = ln(bn);
                var zn = jt(qn, {
                    type: "spline",
                    getPointSpline: function (e, t, n) {
                        var r = 1.5,
                            i = r + 1,
                            s = t.plotX,
                            o = t.plotY,
                            f = e[n - 1],
                            l = e[n + 1],
                            c, h, p, d, v;
                        if (f && l) {
                            var m = f.plotX,
                                g = f.plotY,
                                y = l.plotX,
                                b = l.plotY,
                                w;
                            c = (r * s + m) / i, h = (r * o + g) / i, p = (r * s + y) / i, d = (r * o + b) / i, w = (d - h) * (p - s) / (p - c) + o - d, h += w, d += w, h > g && h > o ? (h = u(g, o), d = 2 * o - h) : h < g && h < o && (h = a(g, o), d = 2 * o - h), d > b && d > o ? (d = u(b, o), h = 2 * o - d) : d < b && d < o && (d = a(b, o), h = 2 * o - d), t.rightContX = p, t.rightContY = d
                        }
                        return n ? (v = ["C", f.rightContX || f.plotX, f.rightContY || f.plotY, c || s, h || o, s, o], f.rightContX = f.rightContY = null) : v = [z, s, o], v
                    }
                });
                wt.spline = zn, yn.areaspline = ln(yn.area);
                var Wn = Un.prototype,
                    Xn = jt(zn, {
                        type: "areaspline",
                        closedStacks: !0,
                        getSegmentPath: Wn.getSegmentPath,
                        closeSegment: Wn.closeSegment,
                        drawGraph: Wn.drawGraph
                    });
                wt.areaspline = Xn, yn.column = ln(bn, {
                    borderColor: "#FFFFFF",
                    borderWidth: 1,
                    borderRadius: 0,
                    groupPadding: .2,
                    marker: null,
                    pointPadding: .1,
                    minPointLength: 0,
                    cropThreshold: 50,
                    pointRange: null,
                    states: {
                        hover: {
                            brightness: .1,
                            shadow: !1
                        },
                        select: {
                            color: "#C0C0C0",
                            borderColor: "#000000",
                            shadow: !1
                        }
                    },
                    dataLabels: {
                        y: null,
                        verticalAlign: null
                    },
                    threshold: 0
                });
                var Vn = jt(qn, {
                    type: "column",
                    tooltipOutsidePlot: !0,
                    pointAttrToOptions: {
                        stroke: "borderColor",
                        "stroke-width": "borderWidth",
                        fill: "color",
                        r: "borderRadius"
                    },
                    init: function () {
                        qn.prototype.init.apply(this, arguments);
                        var e = this,
                            t = e.chart;
                        t.hasRendered && on(t.series, function (t) {
                            t.type === e.type && (t.isDirty = !0)
                        })
                    },
                    translate: function () {
                        var t = this,
                            n = t.chart,
                            r = t.options,
                            i = r.stacking,
                            s = r.borderWidth,
                            l = 0,
                            c = t.xAxis,
                            h = c.reversed,
                            p = {}, d, v;
                        qn.prototype.translate.apply(t), r.grouping === !1 ? l = 1 : on(n.series, function (n) {
                            var r = n.options;
                            n.type === t.type && n.visible && t.options.group === r.group && (r.stacking ? (d = n.stackKey, p[d] === e && (p[d] = l++), v = p[d]) : r.grouping !== !1 && (v = l++), n.columnIndex = v)
                        });
                        var m = t.points,
                            g = f(c.transA) * (c.ordinalSlope || r.pointRange || c.closestPointRange || 1),
                            y = g * r.groupPadding,
                            b = g - 2 * y,
                            w = b / l,
                            E = r.pointWidth,
                            S = Mt(E) ? (w - E) / 2 : w * r.pointPadding,
                            x = Pt(E, w - 2 * S),
                            T = o(u(x, 1 + 2 * s)),
                            N = (h ? l - t.columnIndex : t.columnIndex) || 0,
                            C = S + (y + N * w - g / 2) * (h ? -1 : 1),
                            k = r.threshold,
                            L = t.yAxis.getThreshold(k),
                            A = Pt(r.minPointLength, 5);
                        on(m, function (e) {
                            var r = e.plotY,
                                l = Pt(e.yBottom, L),
                                c = e.plotX + C,
                                h = o(a(r, l)),
                                p = o(u(r, l) - h),
                                d = t.yAxis.stacks[(e.y < 0 ? "-" : "") + t.stackKey],
                                v;
                            i && t.visible && d && d[e.x] && d[e.x].setOffset(C, T), f(p) < A && A && (p = A, h = f(h - L) > A ? l - A : L - (r <= L ? A : 0)), Et(e, {
                                barX: c,
                                barY: h,
                                barW: T,
                                barH: p,
                                pointWidth: x
                            }), e.shapeType = "rect", e.shapeArgs = v = n.renderer.Element.prototype.crisp.call(0, s, c, h, T, p), s % 2 && (v.y -= 1, v.height += 1), e.trackerArgs = f(p) < 3 && ln(e.shapeArgs, {
                                height: 6,
                                y: h - 3
                            })
                        })
                    },
                    getSymbol: P,
                    drawLegendSymbol: Un.prototype.drawLegendSymbol,
                    drawGraph: P,
                    drawPoints: function () {
                        var t = this,
                            n = t.options,
                            r = t.chart.renderer,
                            i, s;
                        on(t.points, function (o) {
                            var u = o.plotY;
                            u !== e && !isNaN(u) && o.y !== null && (i = o.graphic, s = o.shapeArgs, i ? (mn(i), i.animate(ln(s))) : o.graphic = i = r[o.shapeType](s).attr(o.pointAttr[o.selected ? J : V]).add(t.group).shadow(n.shadow, null, n.stacking && !n.borderRadius))
                        })
                    },
                    drawTracker: function () {
                        var t = this,
                            n = t.chart,
                            r = n.renderer,
                            i, s, o = +(new Date),
                            u = t.options,
                            a = u.cursor,
                            f = a && {
                                cursor: a
                            }, l = t.isCartesian && t.plotGroup("trackerGroup", null, q, u.zIndex || 1, n.trackerGroup),
                            c, h, p;
                        on(t.points, function (a) {
                            s = a.tracker, i = a.trackerArgs || a.shapeArgs, h = a.plotY, p = !t.isCartesian || h !== e && !isNaN(h), delete i.strokeWidth, a.y !== null && p && (s ? s.attr(i) : a.tracker = r[a.shapeType](i).attr({
                                isTracker: o,
                                fill: X,
                                visibility: t.visible ? q : F
                            }).on(N ? "touchstart" : "mouseover", function (e) {
                                c = e.relatedTarget || e.fromElement, n.hoverSeries !== t && _t(c, "isTracker") !== o && t.onMouseOver(), a.onMouseOver()
                            }).on("mouseout", function (e) {
                                u.stickyTracking || (c = e.relatedTarget || e.toElement, _t(c, "isTracker") !== o && t.onMouseOut())
                            }).css(f).add(a.group || l))
                        })
                    },
                    animate: function (e) {
                        var t = this,
                            n = t.points,
                            r = t.options;
                        e || (on(n, function (e) {
                            var n = e.graphic,
                                i = e.shapeArgs,
                                s = t.yAxis,
                                o = r.threshold;
                            n && (n.attr({
                                height: 0,
                                y: Mt(o) ? s.getThreshold(o) : s.translate(s.getExtremes().min, 0, 1, 0, 1)
                            }), n.animate({
                                height: i.height,
                                y: i.y
                            }, r.animation))
                        }), t.animate = null)
                    },
                    remove: function () {
                        var e = this,
                            t = e.chart;
                        t.hasRendered && on(t.series, function (t) {
                            t.type === e.type && (t.isDirty = !0)
                        }), qn.prototype.remove.apply(e, arguments)
                    }
                });
                wt.column = Vn, yn.bar = ln(yn.column, {
                    dataLabels: {
                        align: "left",
                        x: 5,
                        y: null,
                        verticalAlign: "middle"
                    }
                });
                var $n = jt(Vn, {
                    type: "bar",
                    inverted: !0
                });
                wt.bar = $n, yn.scatter = ln(bn, {
                    lineWidth: 0,
                    states: {
                        hover: {
                            lineWidth: 0
                        }
                    },
                    tooltip: {
                        headerFormat: '<span style="font-size: 10px; color:{series.color}">{series.name}</span><br/>',
                        pointFormat: "x: <b>{point.x}</b><br/>y: <b>{point.y}</b><br/>"
                    }
                });
                var Jn = jt(qn, {
                    type: "scatter",
                    sorted: !1,
                    translate: function () {
                        var e = this;
                        qn.prototype.translate.apply(e), on(e.points, function (t) {
                            t.shapeType = "circle", t.shapeArgs = {
                                x: t.plotX,
                                y: t.plotY,
                                r: e.chart.options.tooltip.snap
                            }
                        })
                    },
                    drawTracker: function () {
                        var t = this,
                            n = t.options.cursor,
                            r = n && {
                                cursor: n
                            }, i = t.points,
                            s = i.length,
                            o;
                        while (s--) o = i[s].graphic, o && (o.element._i = s);
                        t._hasTracking ? t._hasTracking = !0 : t.markerGroup.attr({
                            isTracker: !0
                        }).on(N ? "touchstart" : "mouseover", function (n) {
                            t.onMouseOver(), n.target._i !== e && i[n.target._i].onMouseOver()
                        }).on("mouseout", function () {
                            t.options.stickyTracking || t.onMouseOut()
                        }).css(r)
                    }
                });
                wt.scatter = Jn, yn.pie = ln(bn, {
                    borderColor: "#FFFFFF",
                    borderWidth: 1,
                    center: ["50%", "50%"],
                    colorByPoint: !0,
                    dataLabels: {
                        distance: 30,
                        enabled: !0,
                        formatter: function () {
                            return this.point.name
                        },
                        y: 5
                    },
                    legendType: "point",
                    marker: null,
                    size: "75%",
                    showInLegend: !1,
                    slicedOffset: 10,
                    states: {
                        hover: {
                            brightness: .1,
                            shadow: !1
                        }
                    }
                });
                var Kn = jt(In, {
                    init: function () {
                        In.prototype.init.apply(this, arguments);
                        var e = this,
                            t;
                        return Et(e, {
                            visible: e.visible !== !1,
                            name: Pt(e.name, "Slice")
                        }), t = function () {
                            e.slice()
                        }, cn(e, "select", t), cn(e, "unselect", t), e
                    },
                    setVisible: function (t) {
                        var n = this,
                            r = n.series,
                            i = r.chart,
                            s = n.tracker,
                            o = n.dataLabel,
                            u = n.connector,
                            a = n.shadowGroup,
                            f;
                        n.visible = t = t === e ? !n.visible : t, f = t ? "show" : "hide", n.group[f](), s && s[f](), o && o[f](), u && u[f](), a && a[f](), n.legendItem && i.legend.colorizeItem(n, t), !r.isDirty && r.options.ignoreHiddenPoint && (r.isDirty = !0, i.redraw())
                    },
                    slice: function (e, t, n) {
                        var r = this,
                            i = r.series,
                            s = i.chart,
                            o = r.slicedTranslation,
                            u;
                        Zt(n, s), t = Pt(t, !0), e = r.sliced = Mt(e) ? e : !r.sliced, u = {
                            translateX: e ? o[0] : s.plotLeft,
                            translateY: e ? o[1] : s.plotTop
                        }, r.group.animate(u), r.shadowGroup && r.shadowGroup.animate(u)
                    }
                }),
                    Qn = {
                        type: "pie",
                        isCartesian: !1,
                        pointClass: Kn,
                        pointAttrToOptions: {
                            stroke: "borderColor",
                            "stroke-width": "borderWidth",
                            fill: "color"
                        },
                        getColor: function () {
                            this.initialColor = this.chart.counters.color
                        },
                        animate: function () {
                            var e = this,
                                t = e.points;
                            on(t, function (t) {
                                var n = t.graphic,
                                    r = t.shapeArgs,
                                    i = -h / 2;
                                n && (n.attr({
                                    r: 0,
                                    start: i,
                                    end: i
                                }), n.animate({
                                    r: r.r,
                                    start: r.start,
                                    end: r.end
                                }, e.options.animation))
                            }), e.animate = null
                        },
                        setData: function (e, t) {
                            qn.prototype.setData.call(this, e, !1), this.processData(), this.generatePoints(), Pt(t, !0) && this.chart.redraw()
                        },
                        getCenter: function () {
                            var e = this.options,
                                t = this.chart,
                                n = t.plotWidth,
                                r = t.plotHeight,
                                i = e.center.concat([e.size, e.innerSize || 0]),
                                s = a(n, r),
                                o;
                            return fn(i, function (e, t) {
                                return o = /%$/.test(e), o ? [n, r, s, s][t] * xt(e) / 100 : e
                            })
                        },
                        translate: function () {
                            this.generatePoints();
                            var e = 0,
                                t = this,
                                n = -0.25,
                                s = 1e3,
                                o = t.options,
                                u = o.slicedOffset,
                                a = u + o.borderWidth,
                                f, p = t.chart,
                                d, v, m, g = t.points,
                                y = 2 * h,
                                b, w, E, S = o.dataLabels.distance,
                                x = o.ignoreHiddenPoint;
                            t.center = f = t.getCenter(), t.getX = function (e, t) {
                                return m = r.asin((e - f[1]) / (f[2] / 2 + S)), f[0] + (t ? -1 : 1) * l(m) * (f[2] / 2 + S)
                            }, on(g, function (t) {
                                e += x && !t.visible ? 0 : t.y
                            }), on(g, function (t) {
                                b = e ? t.y / e : 0, d = i(n * y * s) / s;
                                if (!x || t.visible) n += b;
                                v = i(n * y * s) / s, t.shapeType = "arc", t.shapeArgs = {
                                    x: f[0],
                                    y: f[1],
                                    r: f[2] / 2,
                                    innerR: f[3] / 2,
                                    start: d,
                                    end: v
                                }, m = (v + d) / 2, t.slicedTranslation = fn([l(m) * u + p.plotLeft, c(m) * u + p.plotTop], i), w = l(m) * f[2] / 2, E = c(m) * f[2] / 2, t.tooltipPos = [f[0] + w * .7, f[1] + E * .7], t.labelPos = [f[0] + w + l(m) * S, f[1] + E + c(m) * S, f[0] + w + l(m) * a, f[1] + E + c(m) * a, f[0] + w, f[1] + E, S < 0 ? "center" : m < y / 4 ? "left" : "right", m], t.percentage = b * 100, t.total = e
                            }), this.setTooltipPoints()
                        },
                        render: function () {
                            var e = this;
                            e.getAttribs(), this.drawPoints(), e.options.enableMouseTracking !== !1 && e.drawTracker(), this.drawDataLabels(), e.options.animation && e.animate && e.animate(), e.isDirty = !1
                        },
                        drawPoints: function () {
                            var e = this,
                                t = e.chart,
                                n = t.renderer,
                                r, i, s, o = e.options.shadow,
                                u, a;
                            on(e.points, function (f) {
                                i = f.graphic, a = f.shapeArgs, s = f.group, u = f.shadowGroup, o && !u && (u = f.shadowGroup = n.g("shadow").attr({
                                    zIndex: 4
                                }).add()), s || (s = f.group = n.g("point").attr({
                                    zIndex: 5
                                }).add()), r = f.sliced ? f.slicedTranslation : [t.plotLeft, t.plotTop], s.translate(r[0], r[1]), u && u.translate(r[0], r[1]), i ? i.animate(a) : f.graphic = i = n.arc(a).setRadialReference(e.center).attr(Et(f.pointAttr[V], {
                                    "stroke-linejoin": "round"
                                })).add(f.group).shadow(o, u), f.visible === !1 && f.setVisible(!1)
                            })
                        },
                        drawDataLabels: function () {
                            var e = this,
                                t = e.data,
                                n, r = e.chart,
                                i = e.options.dataLabels,
                                s = Pt(i.connectorPadding, 10),
                                o = Pt(i.connectorWidth, 1),
                                u, a, l = Pt(i.softConnector, !0),
                                c = i.distance,
                                p = e.center,
                                d = p[2] / 2,
                                v = p[1],
                                m = c > 0,
                                g, y, b, w = [
                                    [],
                                    []
                                ],
                                E, S, x, T, N, C = 2,
                                k;
                            if (!i.enabled && !e._hasPointLabels) return;
                            qn.prototype.drawDataLabels.apply(e), on(t, function (e) {
                                e.dataLabel && w[e.labelPos[7] < h / 2 ? 0 : 1].push(e)
                            }), w[1].reverse(), N = function (e, t) {
                                return t.y - e.y
                            }, b = w[0][0] && w[0][0].dataLabel && (w[0][0].dataLabel.getBBox().height || 21);
                            while (C--) {
                                var L = [],
                                    A, O = [],
                                    M = w[C],
                                    _, D = M.length,
                                    P;
                                if (c > 0) {
                                    for (_ = v - d - c; _ <= v + d + c; _ += b) L.push(_);
                                    A = L.length;
                                    if (D > A) {
                                        T = [].concat(M), T.sort(N), k = D;
                                        while (k--) T[k].rank = k;
                                        k = D;
                                        while (k--) M[k].rank >= A && M.splice(k, 1);
                                        D = M.length
                                    }
                                    for (k = 0; k < D; k++) {
                                        n = M[k], y = n.labelPos;
                                        var H = 9999,
                                            B, j;
                                        for (j = 0; j < A; j++) B = f(L[j] - y[1]), B < H && (H = B, P = j);
                                        if (P < k && L[k] !== null) P = k;
                                        else if (A < D - k + P && L[k] !== null) {
                                            P = A - D + k;
                                            while (L[P] === null) P++
                                        } else
                                            while (L[P] === null) P++;
                                        O.push({
                                            i: P,
                                            y: L[P]
                                        }), L[P] = null
                                    }
                                    O.sort(N)
                                }
                                for (k = 0; k < D; k++) {
                                    var I, R;
                                    n = M[k], y = n.labelPos, g = n.dataLabel, x = n.visible === !1 ? F : q, R = y[1];
                                    if (c > 0) {
                                        I = O.pop(), P = I.i, S = I.y;
                                        if (R > S && L[P + 1] !== null || R < S && L[P - 1] !== null) S = R
                                    } else S = R;
                                    E = i.justify ? p[0] + (C ? -1 : 1) * (d + c) : e.getX(P === 0 || P === L.length - 1 ? R : S, C), g.attr({
                                        visibility: x,
                                        align: y[6]
                                    })[g.moved ? "animate" : "attr"]({
                                        x: E + i.x + ({
                                            left: s,
                                            right: -s
                                        }[y[6]] || 0),
                                        y: S + i.y
                                    }), g.moved = !0, m && o && (u = n.connector, a = l ? [z, E + (y[6] === "left" ? 5 : -5), S, "C", E, S, 2 * y[2] - y[4], 2 * y[3] - y[5], y[2], y[3], W, y[4], y[5]] : [z, E + (y[6] === "left" ? 5 : -5), S, W, y[2], S, W, y[4], y[5]], u ? (u.animate({
                                        d: a
                                    }), u.attr("visibility", x)) : n.connector = u = e.chart.renderer.path(a).attr({
                                        "stroke-width": o,
                                        stroke: i.connectorColor || n.color || "#606060",
                                        visibility: x,
                                        zIndex: 3
                                    }).translate(r.plotLeft, r.plotTop).add())
                                }
                            }
                        },
                        drawTracker: Vn.prototype.drawTracker,
                        drawLegendSymbol: Un.prototype.drawLegendSymbol,
                        getSymbol: function () {}
                    };
                Qn = jt(qn, Qn), wt.pie = Qn, Et(Highcharts, {
                    Axis: Pn,
                    CanVGRenderer: An,
                    Chart: Fn,
                    Color: xn,
                    Legend: jn,
                    MouseTracker: Bn,
                    Point: In,
                    Tick: Mn,
                    Tooltip: Hn,
                    Renderer: T,
                    Series: qn,
                    SVGRenderer: Nn,
                    VMLRenderer: Cn,
                    dateFormat: O,
                    pathAnim: _,
                    getOptions: Sn,
                    hasBidiBug: S,
                    numberFormat: It,
                    seriesTypes: wt,
                    setOptions: En,
                    addEvent: cn,
                    removeEvent: hn,
                    createElement: Bt,
                    discardElement: Qt,
                    css: Ht,
                    each: on,
                    extend: Et,
                    map: fn,
                    merge: ln,
                    pick: Pt,
                    splat: Dt,
                    extendClass: jt,
                    pInt: xt,
                    wrap: Rt,
                    svg: E,
                    canvas: x,
                    vml: !E && !x,
                    product: "Highcharts",
                    version: "2.3.2"
                })
            })()
        }
        typeof process == "undefined" ? (i(), e.exports = Highcharts) : e.exports = {
            path: "vendor/highcharts.js",
            Color: function () {}
        }
    }, require.modules["vendor/jquery.numberformatter.js"] = function (e, t, n, r) {
        var i = n("jquery.env"),
            s = n("zd");
        (function (e) {
            function l(e, t, n) {
                this.dec = e, this.group = t, this.neg = n
            }

            function c() {
                for (var e = 0; e < f.length; e++) {
                    var t = f[e];
                    for (var r = 0; r < t.length; r++) n.put(t[r], e)
                }
                d()
            }

            function h(e, t) {
                n.size() == 0 && c();
                var r = ".",
                    i = ",",
                    s = "-";
                e = p(e), t == 0 && (e.indexOf("_") != -1 ? e = e.split("_")[1].toLowerCase() : e.indexOf("-") != -1 && (e = e.split("-")[1].toLowerCase()));
                var o = n.get(e);
                if (o) {
                    var u = a[o];
                    u && (r = u[0], i = u[1])
                }
                return new l(r, i, s)
            }

            function p(e) {
                var t;
                t = r.get(e);
                if (t === "" || t === null) t = "us";
                return t
            }

            function d() {
                r.put("af", ""), r.put("ar", "ae"), r.put("be", ""), r.put("bs", ""), r.put("bg", ""), r.put("ca", ""), r.put("ce", ""), r.put("zh-cn", "cn"), r.put("zh-tw", "tw"), r.put("hr", ""), r.put("cs", "cz"), r.put("da", "dk"), r.put("nl", "nl"), r.put("en", "us"), r.put("en-au", "au"), r.put("en-gb", "gb"), r.put("et", ""), r.put("fo", ""), r.put("fj", ""), r.put("fil", ""), r.put("fi", "fi"), r.put("fr", "fr"), r.put("fr-ca", "ca"), r.put("de", "de"), r.put("el", "gr"), r.put("he", "eg"), r.put("hi", "in"), r.put("hu", ""), r.put("is", ""), r.put("id", ""), r.put("ga", ""), r.put("it", "it"), r.put("ja", "jp"), r.put("ko", "kr"), r.put("lv", ""), r.put("lt", ""), r.put("lb", ""), r.put("mk", ""), r.put("ms", ""), r.put("no", ""), r.put("fa", ""), r.put("pl", ""), r.put("pt", "br"), r.put("pt-br", "br"), r.put("ru", "ru"), r.put("ro", ""), r.put("gd", ""), r.put("sr", ""), r.put("sk", ""), r.put("sl", ""), r.put("es", "es"), r.put("sv", "se"), r.put("th", "th"), r.put("tr", ""), r.put("uk", ""), r.put("vi", ""), r.put("cy", "")
            }
            var t = function () {
                function n(t) {
                    var r;
                    if (typeof t == "string") return t;
                    if (typeof t.hashCode == e) return r = t.hashCode(), typeof r == "string" ? r : n(r);
                    if (typeof t.toString == e) return t.toString();
                    try {
                        return String(t)
                    } catch (i) {
                        return Object.prototype.toString.call(t)
                    }
                }

                function r(e, t) {
                    return e.equals(t)
                }

                function i(t, n) {
                    return typeof n.equals == e ? n.equals(t) : t === n
                }

                function s(e) {
                    return function (t) {
                        if (t === null) throw new Error("null is not a valid " + e);
                        if (typeof t == "undefined") throw new Error(e + " must not be undefined")
                    }
                }

                function a(e, t, n, r) {
                    this[0] = e, this.entries = [], this.addEntry(t, n), r !== null && (this.getEqualityFunction = function () {
                        return r
                    })
                }

                function h(e) {
                    return function (t) {
                        var n = this.entries.length,
                            r, i = this.getEqualityFunction(t);
                        while (n--) {
                            r = this.entries[n];
                            if (i(t, r[0])) switch (e) {
                            case f:
                                return !0;
                            case l:
                                return r;
                            case c:
                                return [n, r[1]]
                            }
                        }
                        return !1
                    }
                }

                function p(e) {
                    return function (t) {
                        var n = t.length;
                        for (var r = 0, i = this.entries.length; r < i; ++r) t[n + r] = this.entries[r][e]
                    }
                }

                function d(e, t) {
                    var n = e.length,
                        r;
                    while (n--) {
                        r = e[n];
                        if (t === r[0]) return n
                    }
                    return null
                }

                function v(e, t) {
                    var n = e[t];
                    return n && n instanceof a ? n : null
                }

                function m(r, i) {
                    var s = this,
                        f = [],
                        l = {}, c = typeof r == e ? r : n,
                        h = typeof i == e ? i : null;
                    this.put = function (e, t) {
                        o(e), u(t);
                        var n = c(e),
                            r, i, s = null;
                        return r = v(l, n), r ? (i = r.getEntryForKey(e), i ? (s = i[1], i[1] = t) : r.addEntry(e, t)) : (r = new a(n, e, t, h), f[f.length] = r, l[n] = r), s
                    }, this.get = function (e) {
                        o(e);
                        var t = c(e),
                            n = v(l, t);
                        if (n) {
                            var r = n.getEntryForKey(e);
                            if (r) return r[1]
                        }
                        return null
                    }, this.containsKey = function (e) {
                        o(e);
                        var t = c(e),
                            n = v(l, t);
                        return n ? n.containsKey(e) : !1
                    }, this.containsValue = function (e) {
                        u(e);
                        var t = f.length;
                        while (t--)
                            if (f[t].containsValue(e)) return !0;
                        return !1
                    }, this.clear = function () {
                        f.length = 0, l = {}
                    }, this.isEmpty = function () {
                        return !f.length
                    };
                    var p = function (e) {
                        return function () {
                            var t = [],
                                n = f.length;
                            while (n--) f[n][e](t);
                            return t
                        }
                    };
                    this.keys = p("keys"), this.values = p("values"), this.entries = p("getEntries"), this.remove = function (e) {
                        o(e);
                        var n = c(e),
                            r, i = null,
                            s = v(l, n);
                        return s && (i = s.removeEntryForKey(e), i !== null && (s.entries.length || (r = d(f, n), t(f, r), delete l[n]))), i
                    }, this.size = function () {
                        var e = 0,
                            t = f.length;
                        while (t--) e += f[t].entries.length;
                        return e
                    }, this.each = function (e) {
                        var t = s.entries(),
                            n = t.length,
                            r;
                        while (n--) r = t[n], e(r[0], r[1])
                    }, this.putAll = function (t, n) {
                        var r = t.entries(),
                            i, o, u, a, f = r.length,
                            l = typeof n == e;
                        while (f--) i = r[f], o = i[0], u = i[1], l && (a = s.get(o)) && (u = n(o, a, u)), s.put(o, u)
                    }, this.clone = function () {
                        var e = new m(r, i);
                        return e.putAll(s), e
                    }
                }
                var e = "function",
                    t = typeof Array.prototype.splice == e ? function (e, t) {
                        e.splice(t, 1)
                    } : function (e, t) {
                        var n, r, i;
                        if (t === e.length - 1) e.length = t;
                        else {
                            n = e.slice(t + 1), e.length = t;
                            for (r = 0, i = n.length; r < i; ++r) e[t + r] = n[r]
                        }
                    }, o = s("key"),
                    u = s("value"),
                    f = 0,
                    l = 1,
                    c = 2;
                return a.prototype = {
                    getEqualityFunction: function (t) {
                        return typeof t.equals == e ? r : i
                    },
                    getEntryForKey: h(l),
                    getEntryAndIndexForKey: h(c),
                    removeEntryForKey: function (e) {
                        var n = this.getEntryAndIndexForKey(e);
                        return n ? (t(this.entries, n[0]), n[1]) : null
                    },
                    addEntry: function (e, t) {
                        this.entries[this.entries.length] = [e, t]
                    },
                    keys: p(0),
                    values: p(1),
                    getEntries: function (e) {
                        var t = e.length;
                        for (var n = 0, r = this.entries.length; n < r; ++n) e[t + n] = this.entries[n].slice(0)
                    },
                    containsKey: h(f),
                    containsValue: function (e) {
                        var t = this.entries.length;
                        while (t--)
                            if (e === this.entries[t][1]) return !0;
                        return !1
                    }
                }, m
            }(),
                n = new t,
                r = new t,
                i = ["ae", "au", "ca", "cn", "eg", "gb", "hk", "il", "in", "jp", "sk", "th", "tw", "us"],
                s = ["at", "br", "de", "dk", "es", "gr", "it", "nl", "pt", "tr", "vn", "it", "nl"],
                o = ["cz", "fi", "fr", "ru", "se", "pl"],
                u = ["ch"],
                a = [
                    [".", ","],
                    [",", "."],
                    [",", " "],
                    [".", "'"]
                ],
                f = [i, s, o, u];
            e.fn.formatNumber = function (t, n, r) {
                return this.each(function () {
                    n == null && (n = !0), r == null && (r = !0);
                    var i;
                    e(this).is(":input") ? i = new String(e(this).val()) : i = new String(e(this).text());
                    var s = e.formatNumber(i, t);
                    n && (e(this).is(":input") ? e(this).val(s) : e(this).text(s));
                    if (r) return s
                })
            }, e.localizeNumber = function (t, n) {
                var r, i, s;
                if (n == "average") r = "###,###.00";
                else if (n == "percent" || n == "csr") r = "###%";
                else if (t % 1 === 0 || n == "total" || n == "backlog") t = Math.round(t), r = "###,##0";
                else {
                    if (n != "small-percent") return t;
                    r = "##0.#%"
                }
                return i = parseFloat(t), s = "en", e.formatNumber(i, {
                    format: r,
                    locale: s
                })
            }, e.formatNumber = function (t, n) {
                var n = e.extend({}, e.fn.formatNumber.defaults, n),
                    r = h(n.locale.toLowerCase(), n.isFullLocale),
                    i = r.dec,
                    s = r.group,
                    o = r.neg,
                    u = "0#-,.",
                    a = "",
                    f = !1;
                for (var l = 0; l < n.format.length; l++) {
                    if (u.indexOf(n.format.charAt(l)) != -1) {
                        if (l == 0 && n.format.charAt(l) == "-") {
                            f = !0;
                            continue
                        }
                        break
                    }
                    a += n.format.charAt(l)
                }
                var c = "";
                for (var l = n.format.length - 1; l >= 0; l--) {
                    if (u.indexOf(n.format.charAt(l)) != -1) break;
                    c = n.format.charAt(l) + c
                }
                n.format = n.format.substring(a.length), n.format = n.format.substring(0, n.format.length - c.length);
                var p = new Number(t);
                return e._formatNumber(p, n, c, a, f)
            }, e._formatNumber = function (t, n, r, i, s) {
                var n = e.extend({}, e.fn.formatNumber.defaults, n),
                    o = h(n.locale.toLowerCase(), n.isFullLocale),
                    u = o.dec,
                    a = o.group,
                    f = o.neg,
                    l = !1;
                if (isNaN(t)) {
                    if (n.nanForceZero != 1) return null;
                    t = 0, l = !0
                }
                r == "%" && (t *= 100);
                var c = "";
                if (n.format.indexOf(".") > -1) {
                    var p = u,
                        d = n.format.substring(n.format.lastIndexOf(".") + 1);
                    if (n.round == 1) t = new Number(t.toFixed(d.length));
                    else {
                        var v = t.toString();
                        v = v.substring(0, v.lastIndexOf(".") + d.length + 1), t = new Number(v)
                    }
                    var m = t % 1,
                        g = new String(m.toFixed(d.length));
                    g = g.substring(g.lastIndexOf(".") + 1);
                    for (var y = 0; y < d.length; y++) {
                        if (d.charAt(y) == "#" && g.charAt(y) != "0") {
                            p += g.charAt(y);
                            continue
                        }
                        if (d.charAt(y) == "#" && g.charAt(y) == "0") {
                            var b = g.substring(y);
                            if (b.match("[1-9]")) {
                                p += g.charAt(y);
                                continue
                            }
                            break
                        }
                        d.charAt(y) == "0" && (p += g.charAt(y))
                    }
                    c += p
                } else t = Math.round(t);
                var w = Math.floor(t);
                t < 0 && (w = Math.ceil(t));
                var E = "";
                n.format.indexOf(".") == -1 ? E = n.format : E = n.format.substring(0, n.format.indexOf("."));
                var S = "";
                if (w != 0 || E.substr(E.length - 1) != "#" || l) {
                    var x = new String(Math.abs(w)),
                        T = 9999;
                    E.lastIndexOf(",") != -1 && (T = E.length - E.lastIndexOf(",") - 1);
                    var N = 0;
                    for (var y = x.length - 1; y > -1; y--) S = x.charAt(y) + S, N++, N == T && y != 0 && (S = a + S, N = 0);
                    if (E.length > S.length) {
                        var C = E.indexOf("0");
                        if (C != -1) {
                            var k = E.length - C,
                                L = E.length - S.length - 1;
                            while (S.length < k) {
                                var A = E.charAt(L);
                                A == "," && (A = a), S = A + S, L--
                            }
                        }
                    }
                }
                return !S && E.indexOf("0", E.length - 1) !== -1 && (S = "0"), c = S + c, t < 0 && s && i.length > 0 ? i = f + i : t < 0 && (c = f + c), n.decimalSeparatorAlwaysShown || c.lastIndexOf(u) == c.length - 1 && (c = c.substring(0, c.length - 1)), c = i + c + r, c
            }, e.fn.parseNumber = function (t, n, r) {
                n == null && (n = !0), r == null && (r = !0);
                var i;
                e(this).is(":input") ? i = new String(e(this).val()) : i = new String(e(this).text());
                var s = e.parseNumber(i, t);
                if (s) {
                    n && (e(this).is(":input") ? e(this).val(s.toString()) : e(this).text(s.toString()));
                    if (r) return s
                }
            }, e.parseNumber = function (t, n) {
                var n = e.extend({}, e.fn.parseNumber.defaults, n),
                    r = h(n.locale.toLowerCase(), n.isFullLocale),
                    i = r.dec,
                    s = r.group,
                    o = r.neg,
                    u = "1234567890.-";
                while (t.indexOf(s) > -1) t = t.replace(s, "");
                t = t.replace(i, ".").replace(o, "-");
                var a = "",
                    f = !1;
                if (t.charAt(t.length - 1) == "%" || n.isPercentage == 1) f = !0;
                for (var l = 0; l < t.length; l++) u.indexOf(t.charAt(l)) > -1 && (a += t.charAt(l));
                var c = new Number(a);
                if (f) {
                    c /= 100;
                    var p = a.indexOf(".");
                    if (p != -1) {
                        var d = a.length - p - 1;
                        c = c.toFixed(d + 2)
                    } else c = c.toFixed(a.length - 1)
                }
                return c
            }, e.fn.parseNumber.defaults = {
                locale: "us",
                decimalSeparatorAlwaysShown: !1,
                isPercentage: !1,
                isFullLocale: !1
            }, e.fn.formatNumber.defaults = {
                format: "#,###.00",
                locale: "us",
                decimalSeparatorAlwaysShown: !1,
                nanForceZero: !0,
                round: !0,
                isFullLocale: !1
            }, Number.prototype.toFixed = function (t) {
                return e._roundNumber(this, t)
            }, e._roundNumber = function (e, t) {
                var n = Math.pow(10, t || 0),
                    r = String(Math.round(e * n) / n);
                if (t > 0) {
                    var i = r.indexOf(".");
                    i == -1 ? (r += ".", i = 0) : i = r.length - (i + 1);
                    while (i < t) r += "0", i++
                }
                return r
            }
        })(i)
    }, require.modules["vendor/jquery.sparkline.js"] = function (e, t, n, r) {
        var i = function () {
            (function (e) {
                var t = {
                    common: {
                        type: "line",
                        lineColor: "#00f",
                        fillColor: "#cdf",
                        defaultPixelsPerValue: 3,
                        width: "auto",
                        height: "auto",
                        composite: !1,
                        tagValuesAttribute: "values",
                        tagOptionsPrefix: "spark",
                        enableTagOptions: !1
                    },
                    line: {
                        spotColor: "#f80",
                        spotRadius: 1.5,
                        minSpotColor: "#f80",
                        maxSpotColor: "#f80",
                        lineWidth: 1,
                        normalRangeMin: undefined,
                        normalRangeMax: undefined,
                        normalRangeColor: "#ccc",
                        drawNormalOnTop: !1,
                        chartRangeMin: undefined,
                        chartRangeMax: undefined,
                        chartRangeMinX: undefined,
                        chartRangeMaxX: undefined
                    },
                    bar: {
                        barColor: "#00f",
                        negBarColor: "#f44",
                        zeroColor: undefined,
                        nullColor: undefined,
                        zeroAxis: undefined,
                        barWidth: 4,
                        barSpacing: 1,
                        chartRangeMax: undefined,
                        chartRangeMin: undefined,
                        chartRangeClip: !1,
                        colorMap: undefined
                    },
                    tristate: {
                        barWidth: 4,
                        barSpacing: 1,
                        posBarColor: "#6f6",
                        negBarColor: "#f44",
                        zeroBarColor: "#999",
                        colorMap: {}
                    },
                    discrete: {
                        lineHeight: "auto",
                        thresholdColor: undefined,
                        thresholdValue: 0,
                        chartRangeMax: undefined,
                        chartRangeMin: undefined,
                        chartRangeClip: !1
                    },
                    bullet: {
                        targetColor: "red",
                        targetWidth: 3,
                        performanceColor: "blue",
                        rangeColors: ["#D3DAFE", "#A8B6FF", "#7F94FF"],
                        base: undefined
                    },
                    pie: {
                        sliceColors: ["#f00", "#0f0", "#00f"]
                    },
                    box: {
                        raw: !1,
                        boxLineColor: "black",
                        boxFillColor: "#cdf",
                        whiskerColor: "black",
                        outlierLineColor: "#333",
                        outlierFillColor: "white",
                        medianColor: "red",
                        showOutliers: !0,
                        outlierIQR: 1.5,
                        spotRadius: 1.5,
                        target: undefined,
                        targetColor: "#4a2",
                        chartRangeMax: undefined,
                        chartRangeMin: undefined
                    }
                }, n, r, i;
                e.fn.simpledraw = function (t, n, s) {
                    return s && this[0].VCanvas ? this[0].VCanvas : (t === undefined && (t = e(this).innerWidth()), n === undefined && (n = e(this).innerHeight()), e.browser.hasCanvas ? new r(t, n, this) : e.browser.msie ? new i(t, n, this) : !1)
                };
                var s = [];
                e.fn.sparkline = function (t, n) {
                    return this.each(function () {
                        var r = new e.fn.sparkline.options(this, n),
                            i = function () {
                                var n, i, s;
                                if (t === "html" || t === undefined) {
                                    var o = this.getAttribute(r.get("tagValuesAttribute"));
                                    if (o === undefined || o === null) o = e(this).html();
                                    n = o.replace(/(^\s*<!--)|(-->\s*$)|\s+/g, "").split(",")
                                } else n = t;
                                i = r.get("width") == "auto" ? n.length * r.get("defaultPixelsPerValue") : r.get("width");
                                if (r.get("height") == "auto") {
                                    if (!r.get("composite") || !this.VCanvas) {
                                        var u = document.createElement("span");
                                        u.innerHTML = "a", e(this).html(u), s = e(u).innerHeight(), e(u).remove()
                                    }
                                } else s = r.get("height");
                                e.fn.sparkline[r.get("type")].call(this, n, r, i, s)
                            };
                        e(this).html() && e(this).is(":hidden") || e.fn.jquery < "1.3.0" && e(this).parents().is(":hidden") || !e(this).parents("body").length ? s.push([this, i]) : i.call(this)
                    })
                }, e.fn.sparkline.defaults = t, e.sparkline_display_visible = function () {
                    for (var t = s.length - 1; t >= 0; t--) {
                        var n = s[t][0];
                        e(n).is(":visible") && !e(n).parents().is(":hidden") && (s[t][1].call(n), s.splice(t, 1))
                    }
                };
                var o = {}, u = function (e) {
                        switch (e) {
                        case "undefined":
                            e = undefined;
                            break;
                        case "null":
                            e = null;
                            break;
                        case "true":
                            e = !0;
                            break;
                        case "false":
                            e = !1;
                            break;
                        default:
                            var t = parseFloat(e);
                            e == t && (e = t)
                        }
                        return e
                    };
                e.fn.sparkline.options = function (t, n) {
                    var r;
                    this.userOptions = n = n || {}, this.tag = t, this.tagValCache = {};
                    var i = e.fn.sparkline.defaults,
                        s = i.common;
                    this.tagOptionsPrefix = n.enableTagOptions && (n.tagOptionsPrefix || s.tagOptionsPrefix);
                    var u = this.getTagSetting("type");
                    u === o ? r = i[n.type || s.type] : r = i[u], this.mergedOptions = e.extend({}, s, r, n)
                }, e.fn.sparkline.options.prototype.getTagSetting = function (e) {
                    var t, n, r = this.tagOptionsPrefix;
                    if (r === !1 || r === undefined) return o;
                    if (this.tagValCache.hasOwnProperty(e)) t = this.tagValCache.key;
                    else {
                        t = this.tag.getAttribute(r + e);
                        if (t === undefined || t === null) t = o;
                        else if (t.substr(0, 1) == "[") {
                            t = t.substr(1, t.length - 2).split(",");
                            for (n = t.length; n--;) t[n] = u(t[n].replace(/(^\s*)|(\s*$)/g, ""))
                        } else if (t.substr(0, 1) == "{") {
                            var i = t.substr(1, t.length - 2).split(",");
                            t = {};
                            for (n = i.length; n--;) {
                                var s = i[n].split(":", 2);
                                t[s[0].replace(/(^\s*)|(\s*$)/g, "")] = u(s[1].replace(/(^\s*)|(\s*$)/g, ""))
                            }
                        } else t = u(t);
                        this.tagValCache.key = t
                    }
                    return t
                }, e.fn.sparkline.options.prototype.get = function (e) {
                    var t = this.getTagSetting(e);
                    return t !== o ? t : this.mergedOptions[e]
                }, e.fn.sparkline.line = function (t, n, r, i) {
                    var s = [],
                        o = [],
                        u = [];
                    for (var a = 0; a < t.length; a++) {
                        var f = t[a],
                            l = typeof t[a] == "string",
                            c = typeof t[a] == "object" && t[a] instanceof Array,
                            h = l && t[a].split(":");
                        l && h.length == 2 ? (s.push(Number(h[0])), o.push(Number(h[1])), u.push(Number(h[1]))) : c ? (s.push(f[0]), o.push(f[1]), u.push(f[1])) : (s.push(a), t[a] === null || t[a] == "null" ? o.push(null) : (o.push(Number(f)), u.push(Number(f))))
                    }
                    n.get("xvalues") && (s = n.get("xvalues"));
                    var p = Math.max.apply(Math, u),
                        d = p,
                        v = Math.min.apply(Math, u),
                        m = v,
                        g = Math.max.apply(Math, s),
                        y = Math.min.apply(Math, s),
                        b = n.get("normalRangeMin"),
                        w = n.get("normalRangeMax");
                    b !== undefined && (b < v && (v = b), w > p && (p = w)), n.get("chartRangeMin") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMin") < v) && (v = n.get("chartRangeMin")), n.get("chartRangeMax") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMax") > p) && (p = n.get("chartRangeMax")), n.get("chartRangeMinX") !== undefined && (n.get("chartRangeClipX") || n.get("chartRangeMinX") < y) && (y = n.get("chartRangeMinX")), n.get("chartRangeMaxX") !== undefined && (n.get("chartRangeClipX") || n.get("chartRangeMaxX") > g) && (g = n.get("chartRangeMaxX"));
                    var E = g - y === 0 ? 1 : g - y,
                        S = p - v === 0 ? 1 : p - v,
                        x = o.length - 1;
                    if (x < 1) {
                        this.innerHTML = "";
                        return
                    }
                    var T = e(this).simpledraw(r, i, n.get("composite"));
                    if (T) {
                        var N = T.pixel_width,
                            C = T.pixel_height,
                            k = 0,
                            L = 0,
                            A = n.get("spotRadius");
                        A && (N < A * 4 || C < A * 4) && (A = 0);
                        if (A) {
                            if (n.get("minSpotColor") || n.get("spotColor") && o[x] == v) C -= Math.ceil(A);
                            if (n.get("maxSpotColor") || n.get("spotColor") && o[x] == p) C -= Math.ceil(A), k += Math.ceil(A);
                            if (n.get("minSpotColor") || n.get("maxSpotColor") && (o[0] == v || o[0] == p)) L += Math.ceil(A), N -= Math.ceil(A);
                            if (n.get("spotColor") || n.get("minSpotColor") || n.get("maxSpotColor") && (o[x] == v || o[x] == p)) N -= Math.ceil(A)
                        }
                        C--;
                        var O = function () {
                            if (b !== undefined) {
                                var e = k + Math.round(C - C * ((w - v) / S)),
                                    t = Math.round(C * (w - b) / S);
                                T.drawRect(L, e, N, t, undefined, n.get("normalRangeColor"))
                            }
                        };
                        n.get("drawNormalOnTop") || O();
                        var M = [],
                            _ = [M],
                            D, P, H = o.length;
                        for (a = 0; a < H; a++) D = s[a], P = o[a], P === null ? a && o[a - 1] !== null && (M = [], _.push(M)) : (P < v && (P = v), P > p && (P = p), M.length || M.push([L + Math.round((D - y) * (N / E)), k + C]), M.push([L + Math.round((D - y) * (N / E)), k + Math.round(C - C * ((P - v) / S))]));
                        var B = [],
                            j = [],
                            F = _.length;
                        for (a = 0; a < F; a++) {
                            M = _[a];
                            if (!M.length) continue;
                            n.get("fillColor") && (M.push([M[M.length - 1][0], k + C - 1]), j.push(M.slice(0)), M.pop()), M.length > 2 && (M[0] = [M[0][0], M[1][1]]), B.push(M)
                        }
                        F = j.length;
                        for (a = 0; a < F; a++) T.drawShape(j[a], undefined, n.get("fillColor"));
                        n.get("drawNormalOnTop") && O(), F = B.length;
                        for (a = 0; a < F; a++) T.drawShape(B[a], n.get("lineColor"), undefined, n.get("lineWidth"));
                        A && n.get("spotColor") && T.drawCircle(L + Math.round(s[s.length - 1] * (N / E)), k + Math.round(C - C * ((o[x] - v) / S)), A, undefined, n.get("spotColor")), p != m && (A && n.get("minSpotColor") && (D = s[e.inArray(m, o)], T.drawCircle(L + Math.round((D - y) * (N / E)), k + Math.round(C - C * ((m - v) / S)), A, undefined, n.get("minSpotColor"))), A && n.get("maxSpotColor") && (D = s[e.inArray(d, o)], T.drawCircle(L + Math.round((D - y) * (N / E)), k + Math.round(C - C * ((d - v) / S)), A, undefined, n.get("maxSpotColor"))))
                    } else this.innerHTML = ""
                }, e.fn.sparkline.bar = function (t, n, r, i) {
                    r = t.length * n.get("barWidth") + (t.length - 1) * n.get("barSpacing");
                    var s = [];
                    for (var o = 0, u = t.length; o < u; o++) t[o] == "null" || t[o] === null ? t[o] = null : (t[o] = Number(t[o]), s.push(Number(t[o])));
                    var a = Math.max.apply(Math, s),
                        f = Math.min.apply(Math, s);
                    n.get("chartRangeMin") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMin") < f) && (f = n.get("chartRangeMin")), n.get("chartRangeMax") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMax") > a) && (a = n.get("chartRangeMax"));
                    var l = n.get("zeroAxis");
                    l === undefined && (l = f < 0);
                    var c = a - f === 0 ? 1 : a - f,
                        h, p;
                    e.isArray(n.get("colorMap")) ? (h = n.get("colorMap"), p = null) : (h = null, p = n.get("colorMap"));
                    var d = e(this).simpledraw(r, i, n.get("composite"));
                    if (d) {
                        var v, m = d.pixel_height,
                            g = f < 0 && l ? m - Math.round(m * (Math.abs(f) / c)) - 1 : m - 1;
                        for (o = t.length; o--;) {
                            var y = o * (n.get("barWidth") + n.get("barSpacing")),
                                b, w = t[o];
                            if (w === null) {
                                if (!n.get("nullColor")) continue;
                                v = n.get("nullColor"), w = l && f < 0 ? 0 : f, i = 1, b = l && f < 0 ? g : m - i
                            } else {
                                w < f && (w = f), w > a && (w = a), v = w < 0 ? n.get("negBarColor") : n.get("barColor"), l && f < 0 ? (i = Math.round(m * (Math.abs(w) / c)) + 1, b = w < 0 ? g : g - i) : (i = Math.round(m * ((w - f) / c)) + 1, b = m - i), w === 0 && n.get("zeroColor") !== undefined && (v = n.get("zeroColor")), p && p[w] ? v = p[w] : h && h.length > o && (v = h[o]);
                                if (v === null) continue
                            }
                            d.drawRect(y, b, n.get("barWidth") - 1, i - 1, v, v)
                        }
                    } else this.innerHTML = ""
                }, e.fn.sparkline.tristate = function (t, n, r, i) {
                    t = e.map(t, Number), r = t.length * n.get("barWidth") + (t.length - 1) * n.get("barSpacing");
                    var s, o;
                    e.isArray(n.get("colorMap")) ? (s = n.get("colorMap"), o = null) : (s = null, o = n.get("colorMap"));
                    var u = e(this).simpledraw(r, i, n.get("composite"));
                    if (u) {
                        var a = u.pixel_height,
                            f = Math.round(a / 2);
                        for (var l = t.length; l--;) {
                            var c = l * (n.get("barWidth") + n.get("barSpacing")),
                                h, p;
                            t[l] < 0 ? (h = f, i = f - 1, p = n.get("negBarColor")) : t[l] > 0 ? (h = 0, i = f - 1, p = n.get("posBarColor")) : (h = f - 1, i = 2, p = n.get("zeroBarColor")), o && o[t[l]] ? p = o[t[l]] : s && s.length > l && (p = s[l]);
                            if (p === null) continue;
                            u.drawRect(c, h, n.get("barWidth") - 1, i - 1, p, p)
                        }
                    } else this.innerHTML = ""
                }, e.fn.sparkline.discrete = function (t, n, r, i) {
                    t = e.map(t, Number), r = n.get("width") == "auto" ? t.length * 2 : r;
                    var s = Math.floor(r / t.length),
                        o = e(this).simpledraw(r, i, n.get("composite"));
                    if (o) {
                        var u = o.pixel_height,
                            a = n.get("lineHeight") == "auto" ? Math.round(u * .3) : n.get("lineHeight"),
                            f = u - a,
                            l = Math.min.apply(Math, t),
                            c = Math.max.apply(Math, t);
                        n.get("chartRangeMin") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMin") < l) && (l = n.get("chartRangeMin")), n.get("chartRangeMax") !== undefined && (n.get("chartRangeClip") || n.get("chartRangeMax") > c) && (c = n.get("chartRangeMax"));
                        var h = c - l;
                        for (var p = t.length; p--;) {
                            var d = t[p];
                            d < l && (d = l), d > c && (d = c);
                            var v = p * s,
                                m = Math.round(f - f * ((d - l) / h));
                            o.drawLine(v, m, v, m + a, n.get("thresholdColor") && d < n.get("thresholdValue") ? n.get("thresholdColor") : n.get("lineColor"))
                        }
                    } else this.innerHTML = ""
                }, e.fn.sparkline.bullet = function (t, n, r, i) {
                    t = e.map(t, Number), r = n.get("width") == "auto" ? "4.0em" : r;
                    var s = e(this).simpledraw(r, i, n.get("composite"));
                    if (s && t.length > 1) {
                        var o = s.pixel_width - Math.ceil(n.get("targetWidth") / 2),
                            u = s.pixel_height,
                            a = Math.min.apply(Math, t),
                            f = Math.max.apply(Math, t);
                        n.get("base") === undefined ? a = a < 0 ? a : 0 : a = n.get("base");
                        var l = f - a;
                        for (var c = 2, h = t.length; c < h; c++) {
                            var p = t[c],
                                d = Math.round(o * ((p - a) / l));
                            s.drawRect(0, 0, d - 1, u - 1, n.get("rangeColors")[c - 2], n.get("rangeColors")[c - 2])
                        }
                        var v = t[1],
                            m = Math.round(o * ((v - a) / l));
                        s.drawRect(0, Math.round(u * .3), m - 1, Math.round(u * .4) - 1, n.get("performanceColor"), n.get("performanceColor"));
                        var g = t[0],
                            y = Math.round(o * ((g - a) / l) - n.get("targetWidth") / 2),
                            b = Math.round(u * .1),
                            w = u - b * 2;
                        s.drawRect(y, b, n.get("targetWidth") - 1, w - 1, n.get("targetColor"), n.get("targetColor"))
                    } else this.innerHTML = ""
                }, e.fn.sparkline.pie = function (t, n, r, i) {
                    t = e.map(t, Number), r = n.get("width") == "auto" ? i : r;
                    var s = e(this).simpledraw(r, i, n.get("composite"));
                    if (s && t.length > 1) {
                        var o = s.pixel_width,
                            u = s.pixel_height,
                            a = Math.floor(Math.min(o, u) / 2),
                            f = 0,
                            l = 0,
                            c = 2 * Math.PI;
                        for (var h = t.length; h--;) f += t[h];
                        n.get("offset") && (l += 2 * Math.PI * (n.get("offset") / 360));
                        var p = t.length;
                        for (h = 0; h < p; h++) {
                            var d = l,
                                v = l;
                            f > 0 && (v = l + c * (t[h] / f)), s.drawPieSlice(a, a, a, d, v, undefined, n.get("sliceColors")[h % n.get("sliceColors").length]), l = v
                        }
                    }
                };
                var a = function (e, t) {
                    if (t == 2) {
                        var n = Math.floor(e.length / 2);
                        return e.length % 2 ? e[n] : (e[n] + e[n + 1]) / 2
                    }
                    var r = Math.floor(e.length / 4);
                    return e.length % 2 ? (e[r * t] + e[r * t + 1]) / 2 : e[r * t]
                };
                e.fn.sparkline.box = function (t, n, r, i) {
                    t = e.map(t, Number), r = n.get("width") == "auto" ? "4.0em" : r;
                    var s = n.get("chartRangeMin") === undefined ? Math.min.apply(Math, t) : n.get("chartRangeMin"),
                        o = n.get("chartRangeMax") === undefined ? Math.max.apply(Math, t) : n.get("chartRangeMax"),
                        u = e(this).simpledraw(r, i, n.get("composite")),
                        f = t.length,
                        l, c, h, p, d, v, m;
                    if (u && t.length > 1) {
                        var g = u.pixel_width,
                            y = u.pixel_height;
                        if (n.get("raw")) n.get("showOutliers") && t.length > 5 ? (c = t[0], l = t[1], h = t[2], p = t[3], d = t[4], v = t[5], m = t[6]) : (l = t[0], h = t[1], p = t[2], d = t[3], v = t[4]);
                        else {
                            t.sort(function (e, t) {
                                return e - t
                            }), h = a(t, 1), p = a(t, 2), d = a(t, 3);
                            var b = d - h;
                            if (n.get("showOutliers")) {
                                l = undefined, v = undefined;
                                for (var w = 0; w < f; w++) l === undefined && t[w] > h - b * n.get("outlierIQR") && (l = t[w]), t[w] < d + b * n.get("outlierIQR") && (v = t[w]);
                                c = t[0], m = t[f - 1]
                            } else l = t[0], v = t[f - 1]
                        }
                        var E = g / (o - s + 1),
                            S = 0;
                        n.get("showOutliers") && (S = Math.ceil(n.get("spotRadius")), g -= 2 * Math.ceil(n.get("spotRadius")), E = g / (o - s + 1), c < l && u.drawCircle((c - s) * E + S, y / 2, n.get("spotRadius"), n.get("outlierLineColor"), n.get("outlierFillColor")), m > v && u.drawCircle((m - s) * E + S, y / 2, n.get("spotRadius"), n.get("outlierLineColor"), n.get("outlierFillColor"))), u.drawRect(Math.round((h - s) * E + S), Math.round(y * .1), Math.round((d - h) * E), Math.round(y * .8), n.get("boxLineColor"), n.get("boxFillColor")), u.drawLine(Math.round((l - s) * E + S), Math.round(y / 2), Math.round((h - s) * E + S), Math.round(y / 2), n.get("lineColor")), u.drawLine(Math.round((l - s) * E + S), Math.round(y / 4), Math.round((l - s) * E + S), Math.round(y - y / 4), n.get("whiskerColor")), u.drawLine(Math.round((v - s) * E + S), Math.round(y / 2), Math.round((d - s) * E + S), Math.round(y / 2), n.get("lineColor")), u.drawLine(Math.round((v - s) * E + S), Math.round(y / 4), Math.round((v - s) * E + S), Math.round(y - y / 4), n.get("whiskerColor")), u.drawLine(Math.round((p - s) * E + S), Math.round(y * .1), Math.round((p - s) * E + S), Math.round(y * .9), n.get("medianColor"));
                        if (n.get("target")) {
                            var x = Math.ceil(n.get("spotRadius"));
                            u.drawLine(Math.round((n.get("target") - s) * E + S), Math.round(y / 2 - x), Math.round((n.get("target") - s) * E + S), Math.round(y / 2 + x), n.get("targetColor")), u.drawLine(Math.round((n.get("target") - s) * E + S - x), Math.round(y / 2), Math.round((n.get("target") - s) * E + S + x), Math.round(y / 2), n.get("targetColor"))
                        }
                    } else this.innerHTML = ""
                }, e.browser.msie && !document.namespaces.v && document.namespaces.add("v", "urn:schemas-microsoft-com:vml", "#default#VML");
                if (e.browser.hasCanvas === undefined) {
                    var f = document.createElement("canvas");
                    e.browser.hasCanvas = f.getContext !== undefined
                }
                n = function (e, t, n) {}, n.prototype = {
                    init: function (e, t, n) {
                        this.width = e, this.height = t, this.target = n, n[0] && (n = n[0]), n.VCanvas = this
                    },
                    drawShape: function (e, t, n, r) {
                        alert("drawShape not implemented")
                    },
                    drawLine: function (e, t, n, r, i, s) {
                        return this.drawShape([
                            [e, t],
                            [n, r]
                        ], i, s)
                    },
                    drawCircle: function (e, t, n, r, i) {
                        alert("drawCircle not implemented")
                    },
                    drawPieSlice: function (e, t, n, r, i, s, o) {
                        alert("drawPieSlice not implemented")
                    },
                    drawRect: function (e, t, n, r, i, s) {
                        alert("drawRect not implemented")
                    },
                    getElement: function () {
                        return this.canvas
                    },
                    _insert: function (t, n) {
                        e(n).html(t)
                    }
                }, r = function (e, t, n) {
                    return this.init(e, t, n)
                }, r.prototype = e.extend(new n, {
                    _super: n.prototype,
                    init: function (t, n, r) {
                        this._super.init(t, n, r), this.canvas = document.createElement("canvas"), r[0] && (r = r[0]), r.VCanvas = this, e(this.canvas).css({
                            display: "inline-block",
                            width: t,
                            height: n,
                            verticalAlign: "top"
                        }), this._insert(this.canvas, r), this.pixel_height = e(this.canvas).height(), this.pixel_width = e(this.canvas).width(), this.canvas.width = this.pixel_width, this.canvas.height = this.pixel_height, e(this.canvas).css({
                            width: this.pixel_width,
                            height: this.pixel_height
                        })
                    },
                    _getContext: function (e, t, n) {
                        var r = this.canvas.getContext("2d");
                        return e !== undefined && (r.strokeStyle = e), r.lineWidth = n === undefined ? 1 : n, t !== undefined && (r.fillStyle = t), r
                    },
                    drawShape: function (e, t, n, r) {
                        var i = this._getContext(t, n, r);
                        i.beginPath(), i.moveTo(e[0][0] + .5, e[0][1] + .5);
                        for (var s = 1, o = e.length; s < o; s++) i.lineTo(e[s][0] + .5, e[s][1] + .5);
                        t !== undefined && i.stroke(), n !== undefined && i.fill()
                    },
                    drawCircle: function (e, t, n, r, i) {
                        var s = this._getContext(r, i);
                        s.beginPath(), s.arc(e, t, n, 0, 2 * Math.PI, !1), r !== undefined && s.stroke(), i !== undefined && s.fill()
                    },
                    drawPieSlice: function (e, t, n, r, i, s, o) {
                        var u = this._getContext(s, o);
                        u.beginPath(), u.moveTo(e, t), u.arc(e, t, n, r, i, !1), u.lineTo(e, t), u.closePath(), s !== undefined && u.stroke(), o && u.fill()
                    },
                    drawRect: function (e, t, n, r, i, s) {
                        return this.drawShape([
                            [e, t],
                            [e + n, t],
                            [e + n, t + r],
                            [e, t + r],
                            [e, t]
                        ], i, s)
                    }
                }), i = function (e, t, n) {
                    return this.init(e, t, n)
                }, i.prototype = e.extend(new n, {
                    _super: n.prototype,
                    init: function (t, n, r) {
                        this._super.init(t, n, r), r[0] && (r = r[0]), r.VCanvas = this, this.canvas = document.createElement("span"), e(this.canvas).css({
                            display: "inline-block",
                            position: "relative",
                            overflow: "hidden",
                            width: t,
                            height: n,
                            margin: "0px",
                            padding: "0px",
                            verticalAlign: "top"
                        }), this._insert(this.canvas, r), this.pixel_height = e(this.canvas).height(), this.pixel_width = e(this.canvas).width(), this.canvas.width = this.pixel_width, this.canvas.height = this.pixel_height;
                        var i = '<v:group coordorigin="0 0" coordsize="' + this.pixel_width + " " + this.pixel_height + '"' + ' style="position:absolute;top:0;left:0;width:' + this.pixel_width + "px;height=" + this.pixel_height + 'px;"></v:group>';
                        this.canvas.insertAdjacentHTML("beforeEnd", i), this.group = e(this.canvas).children()[0]
                    },
                    drawShape: function (e, t, n, r) {
                        var i = [];
                        for (var s = 0, o = e.length; s < o; s++) i[s] = "" + e[s][0] + "," + e[s][1];
                        var u = i.splice(0, 1);
                        r = r === undefined ? 1 : r;
                        var a = t === undefined ? ' stroked="false" ' : ' strokeWeight="' + r + '" strokeColor="' + t + '" ',
                            f = n === undefined ? ' filled="false"' : ' fillColor="' + n + '" filled="true" ',
                            l = i[0] == i[i.length - 1] ? "x " : "",
                            c = '<v:shape coordorigin="0 0" coordsize="' + this.pixel_width + " " + this.pixel_height + '" ' + a + f + ' style="position:absolute;left:0px;top:0px;height:' + this.pixel_height + "px;width:" + this.pixel_width + 'px;padding:0px;margin:0px;" ' + ' path="m ' + u + " l " + i.join(", ") + " " + l + 'e">' + " </v:shape>";
                        this.group.insertAdjacentHTML("beforeEnd", c)
                    },
                    drawCircle: function (e, t, n, r, i) {
                        e -= n + 1, t -= n + 1;
                        var s = r === undefined ? ' stroked="false" ' : ' strokeWeight="1" strokeColor="' + r + '" ',
                            o = i === undefined ? ' filled="false"' : ' fillColor="' + i + '" filled="true" ',
                            u = "<v:oval " + s + o + ' style="position:absolute;top:' + t + "px; left:" + e + "px; width:" + n * 2 + "px; height:" + n * 2 + 'px"></v:oval>';
                        this.group.insertAdjacentHTML("beforeEnd", u)
                    },
                    drawPieSlice: function (e, t, n, r, i, s, o) {
                        if (r == i) return;
                        i - r == 2 * Math.PI && (r = 0, i = 2 * Math.PI);
                        var u = e + Math.round(Math.cos(r) * n),
                            a = t + Math.round(Math.sin(r) * n),
                            f = e + Math.round(Math.cos(i) * n),
                            l = t + Math.round(Math.sin(i) * n);
                        if (u == f && a == l && i - r < Math.PI) return;
                        var c = [e - n, t - n, e + n, t + n, u, a, f, l],
                            h = s === undefined ? ' stroked="false" ' : ' strokeWeight="1" strokeColor="' + s + '" ',
                            p = o === undefined ? ' filled="false"' : ' fillColor="' + o + '" filled="true" ',
                            d = '<v:shape coordorigin="0 0" coordsize="' + this.pixel_width + " " + this.pixel_height + '" ' + h + p + ' style="position:absolute;left:0px;top:0px;height:' + this.pixel_height + "px;width:" + this.pixel_width + 'px;padding:0px;margin:0px;" ' + ' path="m ' + e + "," + t + " wa " + c.join(", ") + ' x e">' + " </v:shape>";
                        this.group.insertAdjacentHTML("beforeEnd", d)
                    },
                    drawRect: function (e, t, n, r, i, s) {
                        return this.drawShape([
                            [e, t],
                            [e, t + r],
                            [e + n, t + r],
                            [e + n, t],
                            [e, t]
                        ], i, s)
                    }
                })
            })(jQuery)
        };
        typeof process == "undefined" ? i() : e.exports = {
            path: "vendor/jquery.sparkline.js"
        }
    }, require.modules["vendor/miniee.js"] = function (e, t, n, r) {
        var i = function () {};
        i.prototype.each = function (e, t, n) {
            var r = {};
            if (e == null) return;
            if (Array.prototype.forEach && e.forEach === Array.prototype.forEach) e.forEach(t, n);
            else if (e.length === +e.length) {
                for (var i = 0, s = e.length; i < s; i++)
                    if (i in e && t.call(n, e[i], i, e) === r) return
            } else
                for (var o in e)
                    if (_.has(e, o) && t.call(n, e[o], o, e) === r) return
        }, i.prototype.filter = function (e, t, n) {
            var r = [];
            return e == null ? r : Array.prototype.filter && e.filter === Array.prototype.filter ? e.filter(t, n) : (i.prototype.each(e, function (e, i, s) {
                t.call(n, e, i, s) && (r[r.length] = e)
            }), r)
        }, i.prototype.on = function (e, t) {
            return e instanceof RegExp ? (this._routes || (this._routes = []), this._routes.unshift([e, t])) : (this._events || (this._events = {}), this._events[e] || (this._events[e] = []), this._events[e].unshift(t)), this
        }, i.prototype.addListener = i.prototype.on, i.prototype.once = function (e, t) {
            function r() {
                n.removeListener(e, r), t.apply(this, arguments)
            }
            var n = this;
            return r.listener = t, n.on(e, r), this
        }, i.prototype.when = function (e, t) {
            function r() {
                t.apply(this, arguments) && n.removeListener(e, r)
            }
            var n = this;
            return r.listener = t, n.on(e, r), this
        }, i.prototype.removeListener = function (e, t) {
            return e instanceof RegExp && this._routes ? this._routes = i.prototype.filter(this._routes, function (n) {
                return n[0].toString() != e.toString() || !(n[1] === t || n[1].listener && n[1].listener === t)
            }) : this._events && this._events[e] && (this._events[e] = i.prototype.filter(this._events[e], function (e) {
                return !(e === t || e.listener && e.listener === t)
            })), this
        }, i.prototype.removeAllListeners = function (e) {
            if (arguments.length === 0) {
                this._events = {}, this._routes = [];
                return
            }
            return e instanceof RegExp && this._routes ? this._routes = i.prototype.filter(this._routes, function (t) {
                return t[0].toString() != e.toString()
            }) : this._events && this._events[e] && (this._events[e] = []), this
        }, i.prototype.emit = function (e) {
            var t = Array.prototype.slice.call(arguments, 1);
            if (this._events && this._events[e])
                for (var n = this._events[e].length - 1; n > -1 && this._events[e] && this._events[e][n]; n--) this._events[e][n].apply(this, t);
            if (this._routes)
                for (var n = this._routes.length - 1; n > -1; n--) this._routes[n][0].test(e) && this._routes[n][1].apply(this, t);
            return this
        }, i.mixin = function (e) {
            var t = ["on", "removeListener", "removeAllListeners", "emit", "next", "once", "when"];
            for (var n = 0; n < t.length; n++) e.prototype[t[n]] = i.prototype[t[n]]
        }, e.exports = i
    }, require.modules["views/analytics.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_child"),
            o = n("../lib/templates"),
            u = n("jquery.env"),
            a = n("underscore"),
            f = n("zd"),
            l = n("i18n"),
            c = i.View.extend(s, {
                name: "analytics",
                elementId: "analytics",
                template: o.require("advanced_analytics"),
                dashboard: n("../views/analytics/dashboards"),
                sync: n("../views/analytics/sync_time"),
                register: n("../views/analytics/register_gooddata"),
                iframe: n("../views/analytics/gooddata_iframe"),
                firstTimeLightbox: null,
                statusChecker: null,
                ready: !1,
                integrationStatus: null,
                scheduledSyncTime: null,
                dashboards: null,
                selectedDashboard: null,
                showLegacyMessage: !1,
                serverError: !1,
                planType: null,
                timeFormat: null,
                featureEnabled: null,
                hourlySync: null,
                initialized: !1,
                dashboardsConverted: function () {
                    var e = i.makeArray(),
                        t = null,
                        n = this.get("dashboards");
                    return n && n.length > 0 && n.forEach(function (n) {
                        t = {}, t.label = n.title, t.value = n.link, e.pushObject(t)
                    }), e
                }.property("dashboards"),
                isQualifyingPlan: function () {
                    return ["Large", "ExtraLarge"].contains(this.get("planType")) || this.get("featureEnabled")
                }.property("planType", "featureEnabled"),
                showRegister: function () {
                    return this.get("integrationStatus") === null || !this.get("isQualifyingPlan")
                }.property("integrationStatus", "isQualifyingPlan"),
                showProjectCreation: function () {
                    return this.get("integrationStatus") && this.get("integrationStatus") !== "complete"
                }.property("integrationStatus"),
                showIFrame: function () {
                    return this.get("integrationStatus") === "COMPLETE" && this.get("isQualifyingPlan")
                }.property("integrationStatus", "isQualifyingPlan"),
                showSyncTimeControl: function () {
                    return this.get("showIFrame") && !this.get("hourlySync")
                }.property("showIFrame"),
                whenActivated: function () {
                    this.get("initialized") || (this.checkProjectStatus(), this.getAccountInfo(), this.set("initialized", !0))
                },
                getAccountInfo: function () {
                    if (this.get("planType") === null || this.get("featureEnabled") === null || this.get("timeFormat") === null) {
                        var e = this;
                        u.getJSON("/api/v2/account.json?include=subscription,deployments", function (t) {
                            var n = t.subscription ? t.subscription.plan_type : "Small",
                                r = t.account ? t.account.time_format : 12,
                                i, s;
                            t.deployments ? (i = t.deployments.gooddata_advanced_analytics, s = t.deployments.gooddata_hourly_synchronization) : i = s = !1, e.set("planType", n), e.set("timeFormat", r), e.set("featureEnabled", i), e.set("hourlySync", s)
                        })
                    }
                },
                checkProjectStatus: function () {
                    u.ajax({
                        url: "/api/v2/gooddata_integration.json",
                        type: "GET",
                        dataType: "json"
                    }).success(u.proxy(function (e) {
                        var t = e.gooddata_integration;
                        if (t) {
                            this.set("integrationStatus", t.status), this.set("dashboards", t.dashboards), this.set("scheduledSyncTime", t.scheduled_at);
                            if (t.dashboards && t.dashboards.length > 0) {
                                var n = t.dashboards.findProperty("title", "Advanced Metrics"),
                                    r;
                                n ? r = n.link : r = t.dashboards.get("firstObject").link, this.set("selectedDashboard", r)
                            }
                            this.get("statusChecker") && this.get("integrationStatus") === "COMPLETE" && (clearInterval(this.get("statusChecker")), this.set("statusChecker", null), this.showFirstTimeLightbox())
                        }
                        this.set("ready", !0)
                    }, this)).fail(u.proxy(function (e) {
                        e.status === 404 ? this.set("integrationStatus", null) : a.range(500, 599).contains(e.status) && this.set("serverError", !0), this.set("ready", !0)
                    }, this))
                },
                keepCheckingProjectStatus: function () {
                    this.set("showRegister", !1);
                    var e = setInterval(u.proxy(function () {
                        this.checkProjectStatus()
                    }, this), 45e3);
                    this.set("statusChecker", e)
                },
                showFirstTimeLightbox: function () {
                    var e = f.DynamicModal.extend({
                        classNames: ["modal-first-time"],
                        title: l.t("txt.views.reporting.advanced_analytics_pane.dashboards_ready"),
                        bodyView: i.View.extend({
                            template: o.require("analytics/modal_firsttime_body")
                        }).reopenClass({
                            preservesContext: !1
                        }),
                        footerView: i.View.extend({
                            template: o.require("analytics/modal_firsttime_footer")
                        }).reopenClass({
                            preservesContext: !1
                        })
                    }).create({});
                    this.set("firstTimeLightbox", e)
                },
                closeFirstTimeLightbox: function () {
                    this.get("firstTimeLightbox").close(), this.set("firstTimeLightbox", null)
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = c
    }, require.modules["views/analytics/dashboards.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../../lib/templates"),
            o = i.View.extend({
                template: s.require("analytics/dashboards"),
                isVisible: function () {
                    return this.getPath("parentView.showIFrame")
                }.property("parentView.showIFrame")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = o
    }, require.modules["views/analytics/gooddata_iframe.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("window").require,
            o = s("lib/computed").oneWay,
            u = i.View.extend({
                tagName: "iframe",
                attributeBindings: "src".w(),
                src: o("parentView.selectedDashboard")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/analytics/register_gooddata.js"] = function (e, t, n, r) {
        var i = n("zd"),
            s = n("ember"),
            o = n("../../lib/templates"),
            u = n("jquery.env"),
            a = n("i18n"),
            f = s.View.extend({
                template: o.require("analytics/register_gooddata"),
                elementId: "register_gooddata",
                enableGoodDataModal: null,
                noAccessModal: null,
                needUpgrade: function () {
                    return !this.getPath("parentView.isQualifyingPlan")
                }.property("parentView.isQualifyingPlan"),
                showModal: function () {
                    var e = i.DynamicModal.extend({
                        classNames: ["modal-enable-gooddata"],
                        title: a.t("txt.views.reporting.advanced_analytics_pane.your_zendesk"),
                        bodyView: s.View.extend({
                            template: o.require("analytics/modal_register_body")
                        }).reopenClass({
                            preservesContext: !1
                        }),
                        footerView: s.View.extend({
                            template: o.require("analytics/modal_register_footer")
                        }).reopenClass({
                            preservesContext: !1
                        })
                    }).create({});
                    this.set("enableGoodDataModal", e)
                },
                enableGoodData: function () {
                    u.post("/api/v2/gooddata_integration.json", u.proxy(function (e) {
                        this.get("parentView").keepCheckingProjectStatus(), this.closeModalDialog(), this.get("parentView").set("integrationStatus", "PENDING")
                    }, this))
                },
                closeModalDialog: function () {
                    var e = this.get("enableGoodDataModal"),
                        t = this.get("noAccessModal");
                    e && (e.close(), this.set("enableGoodDataModal", null)), t && (t.close(), this.set("noAccessModal", null))
                },
                upgrade: function () {
                    if (i.currentUser.get("isAdmin")) i.Routes.goToHash("/admin/subscription");
                    else {
                        var e = i.DynamicModal.extend({
                            classNames: ["modal-no-upgrade-access"],
                            title: a.t("txt.views.reporting.advanced_analytics_pane.contact_owner"),
                            bodyView: s.View.extend({
                                template: o.require("analytics/modal_upgrade_body")
                            }).reopenClass({
                                preservesContext: !1
                            }),
                            footerView: s.View.extend({
                                template: o.require("analytics/modal_upgrade_footer")
                            }).reopenClass({
                                preservesContext: !1
                            })
                        }).create({});
                        this.set("noAccessModal", e)
                    }
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = f
    }, require.modules["views/analytics/sync_time.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../../lib/templates"),
            o = n("jquery.env"),
            u = n("i18n"),
            a = n("zd"),
            f = i.View.extend({
                template: s.require("analytics/sync_time"),
                showNextSyncTime: !1,
                timeFormatBinding: "parentView.timeFormat",
                timeSelectedBinding: "parentView.scheduledSyncTime",
                desiredSyncTime: null,
                isVisible: function () {
                    return this.getPath("parentView.showSyncTimeControl") && a.currentUser.get("isAdmin")
                }.property("parentView.showSyncTimeControl", "Zd.currentUser.isAdmin"),
                currentSyncTime: function () {
                    var e = this.getPath("parentView.scheduledSyncTime");
                    return e ? e : "12am"
                }.property("parentView.scheduledSyncTime"),
                currentSyncTimeFormatted: function () {
                    var e = this.get("currentSyncTime");
                    if (e) return this.get("timeOptions").findProperty("value", e).label
                }.property("timeOptions", "currentSyncTime"),
                timeOptions: function () {
                    return this.get("timeFormat") === 12 ? this.get("timeOptions12") : this.get("timeOptions24")
                }.property("timeFormat"),
                timeOptions12: [{
                    label: u.t("time.formats.am_hour", {
                        hour: 12
                    }),
                    value: "12am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 1
                    }),
                    value: "1am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 2
                    }),
                    value: "2am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 3
                    }),
                    value: "3am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 4
                    }),
                    value: "4am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 5
                    }),
                    value: "5am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 6
                    }),
                    value: "6am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 7
                    }),
                    value: "7am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 8
                    }),
                    value: "8am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 9
                    }),
                    value: "9am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 10
                    }),
                    value: "10am"
                }, {
                    label: u.t("time.formats.am_hour", {
                        hour: 11
                    }),
                    value: "11am"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 12
                    }),
                    value: "12pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 1
                    }),
                    value: "1pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 2
                    }),
                    value: "2pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 3
                    }),
                    value: "3pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 4
                    }),
                    value: "4pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 5
                    }),
                    value: "5pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 6
                    }),
                    value: "6pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 7
                    }),
                    value: "7pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 8
                    }),
                    value: "8pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 9
                    }),
                    value: "9pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 10
                    }),
                    value: "10pm"
                }, {
                    label: u.t("time.formats.pm_hour", {
                        hour: 11
                    }),
                    value: "11pm"
                }],
                timeOptions24: [{
                    label: "00:00",
                    value: "12am",
                    hour: 0
                }, {
                    label: "01:00",
                    value: "1am",
                    hour: 1
                }, {
                    label: "02:00",
                    value: "2am",
                    hour: 2
                }, {
                    label: "03:00",
                    value: "3am",
                    hour: 3
                }, {
                    label: "04:00",
                    value: "4am",
                    hour: 4
                }, {
                    label: "05:00",
                    value: "5am",
                    hour: 5
                }, {
                    label: "06:00",
                    value: "6am",
                    hour: 6
                }, {
                    label: "07:00",
                    value: "7am",
                    hour: 7
                }, {
                    label: "08:00",
                    value: "8am",
                    hour: 8
                }, {
                    label: "09:00",
                    value: "9am",
                    hour: 9
                }, {
                    label: "10:00",
                    value: "10am",
                    hour: 10
                }, {
                    label: "11:00",
                    value: "11am",
                    hour: 11
                }, {
                    label: "12:00",
                    value: "12pm",
                    hour: 12
                }, {
                    label: "13:00",
                    value: "1pm",
                    hour: 13
                }, {
                    label: "14:00",
                    value: "2pm",
                    hour: 14
                }, {
                    label: "15:00",
                    value: "3pm",
                    hour: 15
                }, {
                    label: "16:00",
                    value: "4pm",
                    hour: 16
                }, {
                    label: "17:00",
                    value: "5pm",
                    hour: 17
                }, {
                    label: "18:00",
                    value: "6pm",
                    hour: 18
                }, {
                    label: "19:00",
                    value: "7pm",
                    hour: 19
                }, {
                    label: "20:00",
                    value: "8pm",
                    hour: 20
                }, {
                    label: "21:00",
                    value: "9pm",
                    hour: 21
                }, {
                    label: "22:00",
                    value: "10pm",
                    hour: 22
                }, {
                    label: "23:00",
                    value: "11pm",
                    hour: 23
                }],
                convertToHour: function (e) {
                    return this.get("timeOptions24").findProperty("value", e).hour
                },
                calculateNextSyncTime: function () {
                    var e = this.convertToHour(this.get("timeSelected")),
                        t = this.convertToHour(this.get("currentSyncTime")),
                        n = new Date,
                        r = null,
                        i = null;
                    n.getHours() < t && t < e ? i = 0 : n.getHours() > t && t > e ? i = 2 : i = 1, r = new Date, r.setHours(e), r.setMinutes(0), r.setSeconds(0), r.setDate(n.getDate() + i), this.set("effectiveDateObject", r)
                },
                confirmSyncTime: function () {
                    var e = this.get("timeSelected");
                    e && e !== this.getPath("parentView.scheduledSyncTime") && (this.set("desiredSyncTime", e), this.calculateNextSyncTime(), o.ajax({
                        url: "/api/v2/gooddata_integration.json",
                        type: "PUT",
                        data: {
                            authenticity_token: i.getPath("Zd.currentUser.authenticity_token"),
                            gooddata_integration: {
                                scheduled_at: e
                            }
                        }
                    }).success(o.proxy(function (e) {
                        var t = this.get("effectiveDateObject"),
                            n = t.toLocaleDateString(),
                            r = t.toLocaleTimeString(),
                            i = this.get("timeOptions").findProperty("value", this.get("timeSelected")).label;
                        r = r.substr(0, r.lastIndexOf(":")), a.growl.notice(u.t("txt.views.reporting.advanced_analytics_pane.sync_time_msg", {
                            date: n,
                            time: i
                        }))
                    }, this)))
                }.observes("timeSelected")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = f
    }, require.modules["views/app.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_parent"),
            o = n("../lib/router"),
            u = n("../lib/packager"),
            a = n("../lib/templates"),
            f = n("window").require,
            l = i.View.extend(s, {
                template: a.require("app"),
                buttons: n("./app/buttons"),
                panes: n("./app/panes"),
                activeNameDidChange: function (e) {
                    var t = o.forPath(e);
                    t.sync()
                },
                init: function () {
                    this._super();
                    var e = this;
                    o.global.on("change", function (t) {
                        e.set("activeName", t)
                    })
                }
            }).reopenClass({
                preservesContext: !1
            }),
            c = i.ContainerView.extend({
                currentAccount: f("lib/current_account"),
                init: function () {
                    this._super();
                    if (!this.getPath("currentAccount.settings.lotus_reporting")) return;
                    var e;
                    o.global.on("change", function (t) {
                        e = t
                    });
                    var t = this,
                        n = u.instance();
                    n.once("hasReporting", function () {
                        var n = t.get("childViews");
                        n.length === 0 && (o.register("overview"), o.register("reporting"), o.register("leaderboard"), o.register("forum"), o.register("search"), o.register("analytics"), t.get("childViews").pushObject(l.create({
                            activeName: e
                        })), o.global.emit("ready"))
                    }).sync()
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = c
    }, require.modules["views/app/buttons.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("jquery.env"),
            o = n("../../lib/packager"),
            u = n("i18n"),
            a = {
                overview: u.t("txt.views.reporting.nav.overview"),
                leaderboard: u.t("txt.views.reporting.nav.leaderboard"),
                forum: u.t("txt.views.reporting.nav.forum"),
                search: u.t("txt.views.reporting.nav.search"),
                analytics: u.t("txt.views.reporting.advanced_analytics_pane.name")
            }, f = ["overview"],
            l = i.ContainerView.extend({
                activeNameBinding: "parentView.activeName",
                toggleButton: n("../toggle_button"),
                addButton: function (e) {
                    var t = this.get("childViews"),
                        n = a[e],
                        r = this.toggleButton.create({
                            target: this.get("parentView"),
                            name: e,
                            template: i.Handlebars.compile(n)
                        });
                    t.pushObject(r)
                },
                didInsertElement: function () {
                    this._super();
                    for (var e = 0; e < f.length; e++) {
                        var t = f[e];
                        this.addButton(t)
                    }
                    var n = this,
                        r = o.instance();
                    r.once("hasAnalytics", function () {
                        n.addButton("leaderboard")
                    }).once("hasForumAnalytics", function () {
                        n.addButton("forum")
                    }).once("hasSearchAnalytics", function () {
                        n.addButton("search")
                    }).once("hasAdvancedAnalytics", function () {
                        n.addButton("analytics")
                    }).sync()
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = l
    }, require.modules["views/app/panes.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("jquery.env"),
            o = n("../../lib/packager"),
            u = ["overview"],
            a = i.ContainerView.extend({
                activeNameBinding: "parentView.activeName",
                addSection: function (e) {
                    var t = this.get("childViews"),
                        r = n("views/%@".fmt(e));
                    t.pushObject(r.create())
                },
                didInsertElement: function () {
                    this._super();
                    for (var e = 0; e < u.length; e++) {
                        var t = u[e];
                        this.addSection(t)
                    }
                    var n = this,
                        r = o.instance();
                    r.once("hasAnalytics", function () {
                        n.addSection("leaderboard")
                    }).once("hasForumAnalytics", function () {
                        n.addSection("forum")
                    }).once("hasSearchAnalytics", function () {
                        n.addSection("search")
                    }).once("hasAdvancedAnalytics", function () {
                        n.addSection("analytics")
                    }).sync()
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = a
    }, require.modules["views/chart.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("./stats"),
            o = n("../lib/refresh"),
            u = i.View.extend(s, {
                didInsertElement: function () {
                    this.set("elementInserted", !0), this._super(), this.get("initializeChartWaitingForInsert") && (this.set("initializeChartWaitingForInsert", !1), this.get("chart") || this._setNewChart())
                },
                initStats: function () {
                    this._super(), this.initializeChart()
                },
                initializeChart: function () {
                    if (this.get("chart")) {
                        i.run.next(this, function () {
                            o()
                        });
                        return
                    }
                    if (!this.get("elementInserted")) {
                        this.set("initializeChartWaitingForInsert", !0);
                        return
                    }
                    this._setNewChart()
                },
                buildChart: function () {},
                registerStats: function () {},
                _setNewChart: function () {
                    i.run.next(this, function () {
                        var e = this.buildChart();
                        e && (this.set("chart", e), o())
                    })
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/chart_title.js"] = function (e, t, n, r) {
        var i = n("../lib/router"),
            s = n("underscore"),
            o = n("ember"),
            u = function () {
                function e(e, t) {
                    this.view = e, this.path = e.get("path"), this.options = t, this.parallel = this.options.parallel || 2, this.charts = [];
                    for (var n = 0; n < this.parallel; n++) this.charts.push(null);
                    this.selectedColors = ["#28ACDF", "#95BE22"]
                }
                e.prototype.setup = function () {
                    var e = this;
                    this.view.$(".stat-set").click(function () {
                        var t = $(this),
                            n = t.attr("data-attr-series"),
                            r = e.view.get("chart").get(n);
                        r ? e.deselect(n) : e.select(n)
                    });
                    var t = i.forPath(this.path);
                    t.ready(function () {
                        var n = t.params(),
                            r = n.selected || e.options && e.options.selected;
                        r = e.sanitizedSelected(r), o.run.next(e, function () {
                            e.selectAll(r)
                        }), t.on("change", function (n, r) {
                            o.run.next(e, function () {
                                var n = t.params(),
                                    r = n.selected;
                                if (r === undefined) return;
                                r = e.sanitizedSelected(r), e.selectAll(r)
                            })
                        })
                    })
                }, e.prototype.syncDom = function () {
                    this.view.$(".stat-set").removeClass("selected"), this.view.$(".stat-set .value").css("color", "inherit");
                    var e = s.without(this.charts, null);
                    e = s.without(e, "");
                    var t = this.view.get("chart").yAxis[1];
                    e.length < this.parallel ? t.destroy() : t.redraw();
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        this.view.$(".stat-set[data-attr-series=" + r + "]").addClass("selected"), this.syncColor(r)
                    }
                }, e.prototype.syncColor = function (e) {
                    var t = this.view.get("chart").get(e);
                    if (!t) return;
                    var n = this.view.$(".stat-set[data-attr-series=" + e + "]");
                    (t.index === 0 || t.index === 1) && n.find(".value").css("color", t.color)
                }, e.prototype.selectAll = function (e) {
                    for (var t = 0; t < this.charts.length; t++) this.deselect(this.charts[t]);
                    for (var n = 0; n < e.length; n++) this.select(e[n])
                }, e.prototype.select = function (e) {
                    if ($.inArray(null, this.charts) == -1)
                        for (var t = 0; t < this.charts.length; t++) this.deselect(this.charts[t]);
                    var n;
                    for (var r = 0; r < this.charts.length; r++)
                        if (this.charts[r] == null) {
                            this.charts[r] = e, n = r;
                            break
                        }
                    if (n == null) return;
                    this.syncDom(), this._selectSeries(e, n)
                }, e.prototype._selectSeries = function (e, t) {
                    var n = this;
                    if (this._selectSeriesTimeout) {
                        this._selectSeriesBacklog || (this._selectSeriesBacklog = []), this._selectSeriesBacklog.push(arguments);
                        return
                    }
                    this._selectSeriesTimeout = setTimeout(function () {
                        n._selectSeriesTimeout = null;
                        var e = n._selectSeriesBacklog && n._selectSeriesBacklog.shift();
                        e && n._selectSeries.apply(n, e)
                    }, 750);
                    var r = this.view.sourceForName(e),
                        i = this.selectedColors[t];
                    r.fetch().done(function (s) {
                        var o = n.view.get("chart").yAxis[t];
                        o && e == "csr" ? o.setExtremes(0, 100) : o.setExtremes(null, null), n.view.get("chart").addSeries({
                            name: r.options.title,
                            id: e,
                            data: s,
                            yAxis: t,
                            color: i,
                            index: t
                        }, !0, 500), n.syncDom(), n.sync()
                    })
                }, e.prototype.deselect = function (e) {
                    var t = this.view.get("chart").get(e);
                    if (!t) return;
                    t.remove();
                    var n = [];
                    for (var r = 0; r < this.charts.length; r++)
                        if (this.charts[r] == e) {
                            n.push(this.charts[r]), this.charts[r] = null;
                            break
                        }
                    this.syncDom(), this.sync()
                }, e.prototype.update = function (e) {
                    var t = e.cache[0].value.localize();
                    this.view.$(".stat-set[data-attr-series=" + e.name + "] .value").html(t)
                };
                var t = function () {
                    var e = i.forPath(this.path),
                        t = [];
                    for (var n = 0; n < this.charts.length; n++) {
                        var r = this.charts[n];
                        r && t.push(r)
                    }
                    e.update({
                        selected: t
                    }), e.sync()
                };
                return e.prototype.sync = s.debounce(t, 150), e.prototype.sanitizedSelected = function (e) {
                    return e = s.flatten([e]), s.select(e, function (e) {
                        var t = /^[\w_]+$/.test(e);
                        return t || console.warn("Browser directed to invalid stat: " + e), t
                    })
                }, e
            }();
        e.exports = u
    }, require.modules["views/forum.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_child"),
            o = n("../lib/templates"),
            u = i.View.extend(s, {
                template: o.require("forum"),
                forumStatsView: n("./forum/forum_stats"),
                period: n("./period"),
                toggleButton: n("./toggle_button"),
                name: "forum"
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/forum/forum_stats.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../sparkline_chart"),
            o = n("../../lib/graph_data"),
            u = n("../../lib/summation"),
            a = n("../../lib/toggle_parent"),
            f = n("../../lib/toggle_parent_routing"),
            l = n("../../lib/router"),
            c = n("./forum_table"),
            h = n("../../lib/templates"),
            p = n("../../lib/integer"),
            d = n("i18n"),
            v = s.extend(a, f, {
                template: h.require("forum/forum_stats_view"),
                activeName: "topics",
                table: c,
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                topicText: {
                    entry_create: d.t("txt.views.reporting.forum_pane.entry_create"),
                    entry_view: d.t("txt.views.reporting.forum_pane.entry_view"),
                    vote_create: d.t("txt.views.reporting.forum_pane.vote_create"),
                    watching_entry_create: d.t("txt.views.reporting.forum_pane.watching_entry_create"),
                    post_create: d.t("txt.views.reporting.forum_pane.post_create")
                },
                buildChart: function () {
                    var e = " ",
                        t = this.createChart(e, {
                            selected: ["entry_create"],
                            parallel: 1
                        });
                    return t
                },
                registerStats: function (e, t) {
                    var n = this.get("path"),
                        r = {
                            entry_create: "txt.views.reporting.forum_pane.topics_label",
                            entry_view: "txt.views.reporting.forum_pane.views_label",
                            vote_create: "txt.views.reporting.forum_pane.votes_label",
                            watching_entry_create: "txt.views.reporting.forum_pane.subscriptions_label",
                            post_create: "txt.views.reporting.forum_pane.comments_label"
                        };
                    $.each(r, function (r, i) {
                        var s = new o(r, {
                            title: d.t(i),
                            assocName: "forum_stats_by_account"
                        });
                        e.push(s);
                        var a = new u(r, {
                            path: n,
                            value: p,
                            assocName: "forum_stats_by_account"
                        });
                        t.push(a)
                    })
                },
                topic: function () {
                    return this.get("topicText")[this.get("activeName")]
                }.property("activeName")
            });
        e.exports = v
    }, require.modules["views/forum/forum_table.js"] = function (e, t, n, r) {
        var i = n("../../lib/stats_search"),
            s = n("../../lib/toggle_child"),
            o = n("../stats"),
            u = n("../stats_pagination_adapter"),
            a = n("../../lib/templates"),
            f = n("ember"),
            l = n("zd"),
            c = n("i18n"),
            h = n("../../lib/stats_forum_entry"),
            p = f.View.extend(s, o, u, {
                template: a.require("forum/forum_table"),
                perPage: 20,
                registerStats: function (e) {
                    var t = new i("forum_stats", {
                        query: {
                            per_page: this.get("perPage"),
                            page: this.get("currentPage"),
                            group: "entry_id",
                            stat_name: this.get("statName"),
                            order: "value",
                            desc: !0
                        }
                    }),
                        n = this;
                    t.callback(function (e) {
                        var t = [];
                        n.set("totalPages", e.total_pages), e.data.forEach(function (e) {
                            if (e.entry_id === 0) return;
                            var n = l.StatsForumEntry.create({
                                id: e.entry_id,
                                statsValue: e.value
                            });
                            n.get("forumEntry").fetch(), t.push(n)
                        }), n.set("content", t)
                    }), e.push(t)
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = p
    }, require.modules["views/helpers/percentage.js"] = function (e, t, n, r) {
        var i = n("handlebars"),
            s = n("ember");
        i.registerHelper("percentage", function (e) {
            var t = s.getPath(this, e),
                n = Math.round(t * 100 * 10) / 10;
            return new i.SafeString("%@%".fmt(n))
        })
    }, require.modules["views/leaderboard.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_child"),
            o = n("../lib/templates"),
            u = n("zd"),
            a = i.View.extend(s, {
                template: o.require("leaderboard"),
                global: n("./leaderboard/global"),
                period: n("./period"),
                name: "leaderboard",
                accessible: u.currentUser.get("isAdmin") || u.currentUser.getPath("custom_role.configuration.report_access") != "none"
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = a
    }, require.modules["views/leaderboard/agent_table.js"] = function (module, exports, require, global) {
        var ToggleChild = require("../../lib/toggle_child"),
            Stats = require("../stats"),
            PaginationAdapter = require("../stats_pagination_adapter"),
            GraphData = require("../../lib/graph_data"),
            Router = require("../../lib/router"),
            Templates = require("../../lib/templates"),
            TopN = require("../../lib/top_n"),
            Integer = require("../../lib/integer"),
            Percentage = require("../../lib/percentage"),
            Hours = require("../../lib/hours"),
            Ember = require("ember"),
            Zd = require("zd"),
            AgentTable = Ember.View.extend(ToggleChild, Stats, PaginationAdapter, {
                template: Templates.require("leaderboard/agent_table"),
                statNames: ["solve_count", "first_response_time", "touches", "csr"],
                type: "agents",
                optionSelected: function () {
                    return this.getPath("parentView.parentView.activeName") != this.type ? !1 : this.getPath("parentView.activeName") != this.get("statName") ? !1 : (this.get("parentView").$(".stat-set").removeClass("selected"), this.get("parentView").$(".stat-set." + this.get("statName")).addClass("selected"), !0)
                },
                changeActive: function () {
                    if (!this.optionSelected()) return;
                    var e = Router.forPath(this.get("path")),
                        t = parseInt(e.params().period, 10);
                    this.fetch(t)
                }.observes("parentView.activeName", "parentView.parentView.activeName"),
                fetch: function (e) {
                    this.get("content") || this.refetchStats(e)
                },
                sort: function () {
                    if (this.getPath("parentView.statusQuo")) {
                        if (!this.optionSelected()) return;
                        var e = this.get("statsSources")[0];
                        e.options.query.desc = !e.options.query.desc, this.set("statsSources", [e]), this.refetchStats()
                    }
                }.observes("parentView.statusQuo"),
                registerStats: function (e) {
                    var t = new TopN(this.get("statName"), {
                        path: this.get("path"),
                        action: "top_n",
                        assocName: "ticket_stats_by_agent",
                        query: {
                            per_page: this.get("perPage"),
                            page: this.get("currentPage"),
                            order: "value",
                            desc: this.get("statDesc") === "true"
                        },
                        raw: !0
                    });
                    this.register(e, t)
                },
                register: function (e, t) {
                    var n = this;
                    t.callback(function (e) {
                        n.setData(e)
                    }), e.push(t)
                },
                setData: function (data) {
                    var content = [],
                        i = this._startPositionForCurrentPage(),
                        self = this,
                        valueObject = eval(this.get("value"));
                    this.set("totalPages", data.total_pages), data.data.forEach(function (e) {
                        if (e.agent_id === 0) return;
                        var t = Ember.Object.create(),
                            n = self.getStats(e, t),
                            r = new valueObject(e.value),
                            s = i % 2 === 0 ? "even" : "odd";
                        content.push(Ember.Object.create({
                            user: t,
                            css: s,
                            value: r.localize(),
                            position: i + 1,
                            stats: n,
                            toggleButton: require("views/toggle_button"),
                            sparkline: require("views/sparkline")
                        })), i++
                    }), this.set("content", content)
                },
                getStats: function (e, t) {
                    var n = new GraphData(this.get("statName"), {
                        path: this.get("path"),
                        objectType: "agent",
                        objectId: e.agent_id,
                        assocName: "ticket_stats_by_agent"
                    });
                    n.setOptions(this.getPeriod());
                    var r = [];
                    return n.fetch().done(function (n, i, s) {
                        if (!s.label) {
                            var o = Zd.User.create({
                                id: e.agent_id
                            });
                            o.fetch().done(function () {
                                t.set("name", o.get("name"))
                            })
                        } else t.set("name", s.label);
                        t.set("id", e.agent_id), t.set("link", "#/users/" + e.agent_id);
                        var u = n.map(function (e) {
                            return e.value.y()
                        });
                        r.addObjects(u)
                    }).fail(function () {
                        var n = Zd.User.create({
                            id: e.agent_id
                        });
                        n.fetch().done(function () {
                            t.set("name", n.get("name"))
                        })
                    }), r
                }
            }).reopenClass({
                preservesContext: !1
            });
        module.exports = AgentTable
    }, require.modules["views/leaderboard/agent_view.js"] = function (e, t, n, r) {
        var i = n("../../lib/toggle_child"),
            s = n("../../lib/toggle_parent"),
            o = n("../../lib/templates"),
            u = n("ember"),
            a = n("window").require,
            f = u.View.extend({
                template: o.require("leaderboard/headers"),
                toggleButton: n("../toggle_button")
            }),
            l = u.View.extend(i, s, {
                currentAccount: a("lib/current_account"),
                tabs: n("./tabs"),
                template: o.require("leaderboard/agent_view"),
                table: n("./agent_table"),
                headers: f,
                activeName: "solve_count",
                users: [],
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                groupView: !1,
                agentView: !0
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = l
    }, require.modules["views/leaderboard/drilldown_table.js"] = function (e, t, n, r) {
        var i = n("./agent_table"),
            s = n("../../lib/top_n"),
            o = i.extend({
                type: "drilldown",
                optionSelected: function () {
                    if (this.getPath("parentView.parentView.activeName") != this.type) return !1;
                    if (this.getPath("parentView.activeName") != this.get("statName")) return !1;
                    var e = this.get("statsSources");
                    return e[0].options.objectId = this.getPath("parentView.parentView.group"), this.set("statsSources", e), !0
                },
                fetch: function (e) {
                    this.refetchStats(e)
                },
                registerStats: function (e) {
                    var t = new s(this.get("statName"), {
                        path: this.get("path"),
                        action: "top_n",
                        assocName: "member_ticket_stats_by_members",
                        objectType: "group",
                        objectId: this.getPath("parentView.parentView.group"),
                        query: {
                            limit: 15,
                            order: "value",
                            desc: !0
                        },
                        raw: !0
                    });
                    this.register(e, t)
                }
            });
        e.exports = o
    }, require.modules["views/leaderboard/drilldown_view.js"] = function (e, t, n, r) {
        var i = n("../../lib/templates"),
            s = n("./agent_view"),
            o = s.extend({
                template: i.require("leaderboard/drilldown_view"),
                table: n("./drilldown_table"),
                groupView: !0,
                agentView: !1
            });
        e.exports = o
    }, require.modules["views/leaderboard/global.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("../../lib/toggle_parent"),
            u = n("../../lib/templates"),
            a = i.View.extend(o, {
                template: u.require("leaderboard/global"),
                activeName: "agents",
                agentView: n("./agent_view"),
                groupView: n("./group_view"),
                drilldownView: n("./drilldown_view"),
                toggleButton: n("../toggle_button")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = a
    }, require.modules["views/leaderboard/group_table.js"] = function (e, t, n, r) {
        var i = n("./agent_table"),
            s = n("../../lib/graph_data"),
            o = n("../../lib/templates"),
            u = n("../../lib/top_n"),
            a = n("../stats_pagination_adapter"),
            f = n("../../lib/integer"),
            l = n("../../lib/percentage"),
            c = n("../../lib/hours"),
            h = i.extend(a, {
                template: o.require("leaderboard/group_table"),
                type: "groups",
                registerStats: function (e) {
                    var t = this.get("statName");
                    t == "touches" && (t = "backlog");
                    var n = new u(this.get("statName"), {
                        path: this.get("path"),
                        action: "top_n",
                        assocName: "ticket_stats_by_group",
                        query: {
                            per_page: this.get("perPage"),
                            page: this.get("currentPage"),
                            order: "value",
                            desc: !0
                        },
                        raw: !0
                    });
                    this.register(e, n)
                },
                getStats: function (e, t) {
                    if (this.get("statName") == "touches") return;
                    var n = new s(this.get("statName"), {
                        path: this.get("path"),
                        objectType: "group",
                        objectId: e.group_id,
                        assocName: "ticket_stats_by_group"
                    });
                    n.setOptions(this.getPeriod());
                    var r = [];
                    return n.fetch().done(function (n, i, s) {
                        t.set("name", s.label), t.set("id", e.group_id);
                        var o = n.map(function (e) {
                            return e.value.y()
                        });
                        r.addObjects(o)
                    }), r
                }
            });
        e.exports = h
    }, require.modules["views/leaderboard/group_view.js"] = function (e, t, n, r) {
        var i = n("../../lib/templates"),
            s = n("./agent_view"),
            o = s.extend({
                template: i.require("leaderboard/group_view"),
                table: n("./group_table"),
                groupView: !0,
                agentView: !1
            });
        e.exports = o
    }, require.modules["views/leaderboard/tabs.js"] = function (e, t, n, r) {
        var i = n("../stats"),
            s = n("../../lib/graph_data"),
            o = n("../../lib/average"),
            u = n("../../lib/integer"),
            a = n("../../lib/percentage"),
            f = n("../../lib/hours"),
            l = n("../../lib/router"),
            c = n("../../lib/templates"),
            h = n("../../lib/top_n"),
            p = n("../../lib/summation"),
            d = n("ember"),
            v = n("jquery.env"),
            m = d.View.extend(i, {
                template: c.require("leaderboard/tabs"),
                toggleButton: n("../toggle_button"),
                registerGroup: function () {
                    if (this.getPath("parentView.parentView.activeName") != "drilldown") return;
                    var e = {
                        action: "top_n",
                        assocName: "ticket_stats_by_group",
                        objectType: "group",
                        raw: !0,
                        objectId: this.getPath("parentView.parentView.group")
                    }, t = l.forPath(this.get("path")),
                        n = parseInt(t.params().period, 10);
                    e = v.extend(e, n);
                    var r = this;
                    this.get("statsSources").forEach(function (t) {
                        var n = t.name;
                        t = new h(t.name, e), t.fetch().done(function (e) {
                            e = e.data[0], r.set(e.name, e.total().localize())
                        })
                    })
                }.observes("parentView.parentView.group", "parentView.parentView.activeName"),
                refetch: function () {
                    if (this.getPath("parentView.parentView.activeName") == "drilldown") return;
                    this.statsDidFetch()
                }.observes("parentView.parentView.activeName"),
                registerStats: function (e) {
                    if (this.getPath("parentView.parentView.activeName") == "drilldown") return;
                    var t = this.get("path"),
                        n = new p("solve_count", {
                            path: t,
                            value: u
                        }),
                        r = new o("csr", {
                            path: t,
                            value: a
                        }),
                        i = new o("first_response_time", {
                            path: t,
                            value: f
                        }),
                        s = new p("touches", {
                            path: t,
                            value: u
                        });
                    e.push(n), e.push(r), e.push(i), e.push(s)
                },
                statsDidFetch: function () {
                    var e = this;
                    this.get("statsSources").forEach(function (t) {
                        e.set(t.name, t.total().localize())
                    })
                },
                statsDidRefetch: function () {
                    this.statsDidFetch()
                }
            });
        e.exports = m
    }, require.modules["views/overview.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_child"),
            o = n("../lib/templates"),
            u = i.View.extend(s, {
                template: o.require("overview"),
                ticketStatsView: n("./overview/ticket_stats"),
                ticketsByChannels: n("./overview/tickets_by_channels"),
                benchmark: n("./overview/benchmark"),
                timeToFirstReply: n("./overview/time_to_first_reply"),
                period: n("./period"),
                topSearches: n("./overview/top_searches"),
                topArticles: n("./overview/top_articles"),
                topAgents: n("./overview/top_agents"),
                toggleButton: n("./toggle_button"),
                name: "overview"
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/overview/benchmark.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("jquery.env"),
            o = n("../../lib/router"),
            u = n("../../lib/survey_response"),
            a = n("../../lib/templates"),
            f = i.View.extend({
                template: a.require("overview/benchmark"),
                classNames: ["overview-benchmark"],
                surveyResponse: new u,
                industryFilter: n("./benchmark/industry_filter"),
                satRating: n("./benchmark/sat_rating"),
                timeToFirstReply: n("./benchmark/time_to_first_reply"),
                newTickets: n("./benchmark/new_tickets"),
                didInsertElement: function () {
                    this._super();
                    var e = this;
                    this.surveyResponse.ready(function (t, n) {
                        n === 3 && e.set("global", "global")
                    })
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = f
    }, require.modules["views/overview/benchmark/comparison_chart.js"] = function (e, t, n, r) {
        var i = n("../../chart"),
            s = n("../../../lib/graph_data"),
            o = n("../../../lib/router"),
            u = n("../../../lib/survey_response"),
            a = n("../../../vendor/highcharts"),
            f = n("i18n"),
            l = i.extend({
                createChart: function (e, t) {
                    var n = this.$(".chart-placeholder")[0],
                        r = this.get("valueObject"),
                        i = new a.Chart({
                            chart: {
                                renderTo: n,
                                type: "bar",
                                height: 75,
                                spacingLeft: 20,
                                spacingTop: 10,
                                spacingBottom: 0,
                                spacingRight: 40
                            },
                            title: {
                                text: e,
                                align: "left",
                                margin: 8,
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#333333",
                                    fontSize: "11px"
                                }
                            },
                            xAxis: {
                                categories: [f.t("txt.views.reporting.overview_pane.benchmark_widget.your_help_desk"), f.t("txt.views.reporting.overview_pane.benchmark_widget.industry_average")],
                                title: {
                                    text: null
                                },
                                lineWidth: 1,
                                lineColor: "#D9D9D9",
                                tickWidth: 0,
                                labels: {
                                    style: {
                                        display: "none",
                                        fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                        color: "#333333",
                                        fontSize: "11px"
                                    },
                                    x: 15,
                                    align: "left"
                                }
                            },
                            yAxis: {
                                title: {
                                    text: null
                                },
                                gridLineWidth: 0,
                                tickWidth: 0,
                                labels: {
                                    style: {
                                        display: "none"
                                    }
                                }
                            },
                            plotOptions: {
                                bar: {
                                    dataLabels: {
                                        enabled: !0,
                                        formatter: function () {
                                            if (this.point.value) return this.point.value.localize()
                                        },
                                        style: {
                                            fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                            color: "#333333",
                                            fontSize: "11px",
                                            fontWeight: "normal"
                                        }
                                    },
                                    enableMouseTracking: !1,
                                    shadow: !1,
                                    groupPadding: 0,
                                    pointPadding: .01,
                                    borderWidth: 0
                                }
                            },
                            legend: {
                                enabled: !1
                            },
                            credits: {
                                enabled: !1
                            },
                            series: [{
                                data: [{
                                    name: f.t("txt.views.reporting.overview_pane.benchmark_widget.your_help_desk"),
                                    id: "your",
                                    color: "#A5E0F8",
                                    y: 0,
                                    value: new r(0)
                                }, {
                                    name: f.t("txt.views.reporting.overview_pane.benchmark_widget.industry_average"),
                                    id: "industry",
                                    color: "#FDF4A7",
                                    y: 0,
                                    value: new r(0)
                                }]
                            }]
                        });
                    return i
                },
                init: function () {
                    this._super();
                    var e = this;
                    o.global.on("benchmark-area", function (t) {
                        e.area = t
                    })
                },
                didInsertElement: function () {
                    this._super();
                    var e = this;
                    o.global.on("benchmark-area", function (t) {
                        e.refreshIndustryAverage(!0)
                    })
                },
                surveyResponse: new u,
                refreshIndustryAverage: function (e) {
                    var t = this,
                        n = this.get("valueObject");
                    this.surveyResponse.ready(function (r, i) {
                        var s = parseFloat(r[t.area].data[t.industryAverageSelection], 10);
                        t.industryAverageFormatter && (s = t.industryAverageFormatter.call(t, s));
                        var o = new n(s);
                        t.set("industryAverage", o), t.updateChart(e)
                    })
                },
                updateChart: function (e) {
                    var t = this.get("chart");
                    t.get("your").update({
                        y: this.get("yourValue").y(),
                        value: this.get("yourValue"),
                        color: {
                            linearGradient: [0, 0, 0, 500],
                            stops: [
                                [0, a.Color("#A5E0F8").brighten(.05).get("rgb")],
                                [1, "#A5E0F8"]
                            ]
                        }
                    }, !0, e), t.get("industry").update({
                        y: this.get("industryAverage").y(),
                        value: this.get("industryAverage"),
                        color: {
                            linearGradient: [0, 0, 0, 500],
                            stops: [
                                [0, a.Color("#FDF4A7").brighten(.05).get("rgb")],
                                [1, "#FDF4A7"]
                            ]
                        }
                    }, !0, e)
                },
                registerStats: function (e) {
                    var t = this.get("backend") || s,
                        n = new t(this.statName, {
                            path: this.get("path"),
                            value: this.get("valueObject")
                        }),
                        r = this;
                    n.callback(function (e) {
                        if (e.length < 1) return;
                        var t = e[0],
                            n = r.get("chart");
                        r.set("yourValue", t.value), r.refreshIndustryAverage(r.get("statsLoaded") || !1), r.set("statsLoaded", !0)
                    }), e.push(n)
                }
            });
        e.exports = l
    }, require.modules["views/overview/benchmark/industry_filter.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("jquery.env"),
            u = n("../../../lib/router"),
            a = n("../../../lib/survey_response"),
            f = n("i18n"),
            l = s.SelectView.extend({
                delegateType: "SelectMenu",
                classNames: ["industry-filter-view"],
                configOptions: {
                    backLinkLabel: f.t("txt.control.menu.back_link_label"),
                    defaultValue: 0,
                    defaultValueLabel: f.t("txt.launchpad.tour.benchmark.industry_label"),
                    isVisible: !1,
                    keyboardCue: !0,
                    keyboardCueAction: "focus"
                },
                surveyResponse: new a,
                router: function () {
                    var e = this.getPath("parentView.path");
                    return u.forPath(e)
                }.property("parentView.path"),
                userDidChangeValue: function () {
                    i.run.next(this, function () {
                        var e = this.getPath("parentView.path");
                        o.cookie(e, this.get("value")), this.handleChangeValue()
                    })
                },
                handleChangeValue: function () {
                    var e = this.get("value");
                    u.global.emit("benchmark-area", e)
                },
                didInsertElement: function () {
                    this._super();
                    var e = this.getPath("parentView.path"),
                        t = o.cookie(e);
                    t || (t = "industry"), this.set("value", t), this.handleChangeValue();
                    var n = this;
                    this.surveyResponse.ready(function (e, t) {
                        if (t === 3) {
                            n.set("isVisible", !1);
                            return
                        }
                        n.set("options", [{
                            value: "industry",
                            label: n.translatedIndustryLabel(e.industry.object_name)
                        }, {
                            value: "target_audience",
                            label: n.translatedTargetAudienceLabel(e.target_audience.object_name)
                        }, {
                            value: "employee_count",
                            label: n.translatedEmployeeCountLabel(e.employee_count.object_name)
                        }])
                    })
                },
                translatedIndustryLabel: function (e) {
                    return e === "overall" ? f.t("txt.views.reporting.overview_pane.benchmark_widget.industry") + f.t("txt.views.reporting.overview_pane.benchmark_widget.global_label") : f.t("txt.views.reporting.overview_pane.benchmark_widget.industry") + f.t("txt.admin.models.account.survey_response.industry_" + e)
                },
                translatedTargetAudienceLabel: function (e) {
                    return e === "overall" ? f.t("txt.views.reporting.overview_pane.benchmark_widget.target_audience") + f.t("txt.views.reporting.overview_pane.benchmark_widget.global_label") : f.t("txt.views.reporting.overview_pane.benchmark_widget.target_audience") + f.t("txt.admin.models.account.survey_response.target_audience_" + e)
                },
                translatedEmployeeCountLabel: function (e) {
                    return e === "overall" ? f.t("txt.views.reporting.overview_pane.benchmark_widget.company_size") + f.t("txt.views.reporting.overview_pane.benchmark_widget.global_label") : f.t("txt.views.reporting.overview_pane.benchmark_widget.company_size") + e
                }
            });
        e.exports = l
    }, require.modules["views/overview/benchmark/new_tickets.js"] = function (e, t, n, r) {
        var i = n("../../chart"),
            s = n("../../../lib/graph_data"),
            o = n("./comparison_chart"),
            u = n("../../../lib/router"),
            a = n("i18n"),
            f = o.extend({
                buildChart: function () {
                    var e = this.createChart(a.t("txt.views.reporting.overview_pane.new_tickets_label"));
                    return e
                },
                statName: "created_count",
                industryAverageSelection: "created_count",
                industryAverageFormatter: function (e) {
                    var t = u.forPath(this.get("path")),
                        n = parseInt(t.params().period, 10);
                    switch (n) {
                    case 1:
                        e /= 4.285714286;
                        break;
                    case 2:
                        e /= 30;
                        break;
                    case 3:
                        var r = parseInt(t.params().interval, 10);
                        e /= r
                    }
                    return e = Math.round(e), e
                },
                backend: n("../../../lib/summation"),
                valueObject: n("../../../lib/integer")
            });
        e.exports = f
    }, require.modules["views/overview/benchmark/sat_rating.js"] = function (e, t, n, r) {
        var i = n("../../chart"),
            s = n("./comparison_chart"),
            o = n("i18n"),
            u = s.extend({
                buildChart: function () {
                    var e = this.createChart(o.t("txt.views.reporting.overview_pane.benchmark_widget.satisfaction_rating"));
                    return e
                },
                statName: "csr",
                industryAverageSelection: "csr",
                backend: n("../../../lib/average"),
                valueObject: n("../../../lib/percentage")
            });
        e.exports = u
    }, require.modules["views/overview/benchmark/time_to_first_reply.js"] = function (e, t, n, r) {
        var i = n("../../chart"),
            s = n("../../../lib/graph_data"),
            o = n("./comparison_chart"),
            u = n("i18n"),
            a = o.extend({
                buildChart: function () {
                    var e = this.createChart(u.t("txt.views.reporting.overview_pane.benchmark_widget.first_reply_time"));
                    return e
                },
                statName: "first_response_time",
                industryAverageSelection: "first_response_time",
                backend: n("../../../lib/average"),
                valueObject: n("../../../lib/hours")
            });
        e.exports = a
    }, require.modules["views/overview/table_row.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.View.extend({
                classNameBindings: ["cycle"],
                cycle: function () {
                    return this.get("contentIndex") % 2 === 0 ? "even" : "odd"
                }.property("contentIndex")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = s
    }, require.modules["views/overview/table_section.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("./table_row"),
            o = i.CollectionView.extend({
                tagName: "tbody",
                itemViewClass: function () {
                    return s.extend({
                        template: n(this.get("itemViewPath"))
                    })
                }.property("itemViewPath")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = o
    }, require.modules["views/overview/ticket_stats.js"] = function (e, t, n, r) {
        var i = n("../sparkline_chart"),
            s = n("jquery.env"),
            o = n("../../vendor/highcharts"),
            u = n("../../lib/graph_data"),
            a = n("../../lib/summation"),
            f = n("../../lib/average"),
            l = n("../../lib/average_graph_data"),
            c = n("../../lib/latest"),
            h = n("../../lib/templates"),
            p = n("i18n"),
            d = n("../../lib/integer"),
            v = n("../../lib/percentage"),
            m = n("../../lib/hours"),
            g = i.extend({
                template: h.require("overview/ticket_stats_view"),
                buildChart: function () {
                    var e = this.createChart(p.t("txt.views.reporting.overview_pane.chart_header"), {
                        selected: ["created_count", "solve_count"],
                        parallel: 2
                    });
                    return e
                },
                registerStats: function (e, t) {
                    var n = this.get("path"),
                        r = new u("created_count", {
                            title: p.t("txt.views.reporting.overview_pane.new_tickets_label"),
                            path: n,
                            value: d
                        }),
                        i = new u("solve_count", {
                            title: p.t("txt.views.reporting.overview_pane.solved_tickets_label"),
                            path: n,
                            value: d
                        }),
                        s = new u("backlog", {
                            title: p.t("txt.views.reporting.overview_pane.backlog_tickets_label"),
                            path: n,
                            value: d
                        }),
                        o = new u("touches", {
                            title: p.t("txt.views.reporting.overview_pane.agent_touches_label"),
                            path: n,
                            value: d
                        }),
                        h = new l("csr", {
                            title: p.t("txt.views.reporting.overview_pane.sat_rating_label"),
                            path: n,
                            value: v
                        }),
                        g = new l("first_response_time", {
                            title: p.t("txt.views.reporting.overview_pane.time_to_first_reply_label"),
                            path: n,
                            value: m
                        });
                    e.push(r), e.push(i), e.push(s), e.push(o), e.push(h), e.push(g);
                    var y = new a("created_count", {
                        path: n,
                        value: d
                    }),
                        b = new a("solve_count", {
                            path: n,
                            value: d
                        }),
                        w = new c("backlog", {
                            path: n,
                            value: d
                        }),
                        E = new a("touches", {
                            path: n,
                            value: d
                        }),
                        S = new f("csr", {
                            path: n,
                            value: v
                        }),
                        x = new f("first_response_time", {
                            path: n,
                            value: m
                        });
                    t.push(y), t.push(b), t.push(w), t.push(E), t.push(S), t.push(x)
                }
            });
        e.exports = g
    }, require.modules["views/overview/tickets_by_channels.js"] = function (e, t, n, r) {
        var i = n("../chart"),
            s = n("../../vendor/highcharts"),
            o = n("../../lib/summation"),
            u = n("../../lib/via_types"),
            a = n("jquery.env"),
            f = n("../../lib/router"),
            l = n("../../lib/templates"),
            c = n("../../lib/small_percentage"),
            h = ["#00ACEC", "#C1D72E", "#6F5FA9", "#EE2D68", "#C1B7A3", "#FAD404"],
            p = a.map(h, function (e) {
                return {
                    radialGradient: {
                        cx: .5,
                        cy: .5,
                        r: 1
                    },
                    stops: [
                        [0, e],
                        [1, s.Color(e).brighten(-0.1).get("rgb")]
                    ]
                }
            }),
            d = i.extend({
                template: l.require("overview/tickets_by_channels"),
                buildChart: function () {
                    var e = this,
                        t = this.$(".chart-placeholder")[0],
                        n = new s.Chart({
                            chart: {
                                renderTo: t,
                                plotBackgroundColor: null,
                                plotBorderWidth: null,
                                plotShadow: !1,
                                height: 280,
                                spacingTop: 0,
                                spacingLeft: 45,
                                spacingRight: 45
                            },
                            colors: p,
                            credits: {
                                enabled: !1
                            },
                            title: {
                                style: {
                                    display: "none"
                                }
                            },
                            tooltip: {
                                useHTML: !0,
                                formatter: function () {
                                    if (this.point.id !== "other") return "%@: %@%".fmt(this.point.name, Math.round(this.percentage));
                                    var e = this.point.other.slice(0, 5),
                                        t = "%@: %@%<br/><hr/>".fmt(this.point.name, Math.round(this.percentage)),
                                        n = this.point;
                                    return e.forEach(function (e) {
                                        var r = u.translate(e.type),
                                            i = new c(e.value / n.rawTotal);
                                        t += "%@: %@<br/>".fmt(r, i.localize())
                                    }), t
                                },
                                positioner: function (e, t, r) {
                                    var i = {
                                        x: r.plotX,
                                        y: r.plotY
                                    };
                                    return r.plotX + e > n.plotWidth && (i.x = r.plotX - e / 2), r.plotY + t > n.plotHeight && (i.y = r.plotY - t / 2), i.x < 0 && (i.x = 0), i.y < 0 && (i.y = 0), i
                                },
                                backgroundColor: "white",
                                borderWidth: 1,
                                borderColor: "#AAAAAA",
                                borderRadius: 2,
                                shadow: !1,
                                style: {
                                    fontSize: "11px",
                                    lineHeight: "15px",
                                    padding: "10px"
                                }
                            },
                            plotOptions: {
                                pie: {
                                    dataLabels: {
                                        enabled: !0,
                                        distance: 20,
                                        formatter: function () {
                                            return Math.round(this.y) + "%"
                                        },
                                        overflow: "justify",
                                        justify: !0,
                                        softConnector: !1,
                                        connectorColor: "#D9D9D9"
                                    },
                                    showInLegend: !0,
                                    innerSize: 80,
                                    shadow: !1,
                                    borderWidth: 0,
                                    center: ["50%", "40%"],
                                    animation: {
                                        duration: 500
                                    },
                                    point: {
                                        events: {
                                            legendItemClick: function (t) {
                                                var n = t.target,
                                                    r = e.get("chart"),
                                                    i = r.get(n.id);
                                                if (i.visible === undefined || i.visible === null) i.visible = !0;
                                                setTimeout(function () {
                                                    i.visible || this.update({
                                                        y: 0
                                                    }), e.rebalance()
                                                }.bind(n), 0)
                                            }
                                        }
                                    }
                                }
                            },
                            legend: {
                                align: "center",
                                verticalAlign: "bottom",
                                borderWidth: 0,
                                floating: !0,
                                width: 330,
                                y: 15,
                                x: 10,
                                itemMarginBottom: 5,
                                itemWidth: 110,
                                symbolWidth: 12,
                                itemStyle: {
                                    color: "#777",
                                    fontSize: "11px",
                                    width: "80px"
                                }
                            },
                            series: [{
                                type: "pie",
                                id: "pie",
                                data: []
                            }]
                        });
                    return n
                },
                seriesData: function () {
                    var e = [];
                    for (var t in this.series) {
                        var n = this.series[t];
                        e.push(n)
                    }
                    return e
                },
                rebalance: function () {
                    var e = this.get("chart"),
                        t = e.series[0].points,
                        n = [],
                        r = 0;
                    for (var i = t.length - 1; i >= 0; i--) {
                        var s = t[i],
                            o = e.get(s.id);
                        if (o.visible === !0 || o.visible === undefined || o.visible === null) r += o.original, n.push(s)
                    }
                    for (var u = n.length - 1; u >= 0; u--) {
                        var a = n[u],
                            f = e.get(a.id),
                            l = f.original / r * 100;
                        a.update({
                            y: l,
                            rawTotal: r
                        }, !1)
                    }
                    e.redraw()
                },
                registeredRouterKeys: ["period", "interval", "start", "end"],
                registerStats: function (e) {
                    var t = this.get("path"),
                        n = f.forPath(t),
                        r = this,
                        i = new o("created_count_by_channel", {
                            path: t,
                            raw: !0
                        });
                    i.callback(function (e) {
                        if (!e) return;
                        var t = r.get("chart"),
                            n = t.get("pie"),
                            i = e.data.sort(function (e, t) {
                                return e.value > t.value ? -1 : e.value < t.value ? 1 : 0
                            });
                        n.points.length > 0 && (n.points.forEach(function (e) {
                            e.remove(!1)
                        }), setTimeout(function () {
                            t.redraw()
                        }, 200));
                        var s = 1,
                            o = [];
                        i.forEach(function (e) {
                            s < 6 ? n.addPoint({
                                name: u.translate(e.type),
                                id: e.type,
                                y: e.value,
                                original: e.value,
                                color: p[s - 1]
                            }) : o.push(e), s++
                        });
                        if (o.length > 0) {
                            var a = 0;
                            o.forEach(function (e) {
                                a += e.value
                            });
                            var f = "other";
                            n.addPoint({
                                name: u.translate(f),
                                id: f,
                                y: a,
                                original: a,
                                other: o,
                                color: p[5]
                            })
                        }
                        r.rebalance()
                    }), e.push(i)
                }
            });
        e.exports = d
    }, require.modules["views/overview/time_to_first_reply.js"] = function (e, t, n, r) {
        var i = n("../chart"),
            s = n("../../lib/average"),
            o = n("../../lib/summation"),
            u = n("../../lib/percentage"),
            a = n("../../lib/hours"),
            f = n("../../vendor/highcharts"),
            l = n("../../lib/templates"),
            c = n("i18n"),
            h = n("jquery.env"),
            p = i.extend({
                template: l.require("overview/time_to_first_reply"),
                buildChart: function () {
                    var e = this.$(".chart-placeholder")[0],
                        t = new f.Chart({
                            chart: {
                                renderTo: e,
                                type: "column",
                                height: 285,
                                spacingTop: 10,
                                spacingLeft: 0,
                                spacingRight: 0,
                                spacingBottom: 20,
                                width: 260
                            },
                            credits: {
                                enabled: !1
                            },
                            title: {
                                text: "",
                                margin: 15,
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#333333",
                                    fontSize: "16px"
                                }
                            },
                            subtitle: {
                                text: c.t("txt.views.reporting.overview_pane.time_to_first_reply_widget.average_first_reply_time"),
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#777",
                                    fontSize: "11px"
                                },
                                y: 35
                            },
                            colors: ["#B5D642"],
                            xAxis: {
                                categories: ["0-1", "1-8", "8-24", ">24"],
                                lineWidth: 0,

                                tickWidth: 0,
                                labels: {
                                    formatter: function () {
                                        return "<b>%@</b><br/>%@".fmt(this.value, c.t("txt.views.reporting.x_hrs_plain"))
                                    },
                                    y: 25,
                                    style: {
                                        fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                        color: "#777",
                                        fontSize: "11px"
                                    }
                                }
                            },
                            yAxis: {
                                min: 0,
                                title: {
                                    text: null
                                },
                                gridLineWidth: 0,
                                labels: {
                                    enabled: !1
                                }
                            },
                            legend: {
                                enabled: !1
                            },
                            tooltip: {
                                enabled: !1
                            },
                            plotOptions: {
                                column: {
                                    shadow: !1,
                                    groupPadding: .19,
                                    pointPadding: .01,
                                    dataLabels: {
                                        enabled: !0,
                                        formatter: function () {
                                            return this.point.value.localize()
                                        },
                                        y: -10,
                                        style: {
                                            fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                            color: "#333333",
                                            fontSize: "11px",
                                            fontWeight: "normal"
                                        }
                                    },
                                    color: {
                                        linearGradient: [0, 0, 0, 500],
                                        stops: [
                                            [0, "#c5e273"],
                                            [1, "#9fc920"]
                                        ]
                                    }
                                }
                            },
                            series: [{
                                name: c.t("txt.views.reporting.overview_pane.time_to_first_reply_widget.average_first_reply_time")
                            }]
                        });
                    return t
                },
                series: [],
                keys: ["first_response_0_1", "first_response_1_8", "first_response_8_24", "first_response_24_"],
                registerStats: function (e) {
                    var t = new s("first_response_time", {
                        path: this.get("path"),
                        value: a
                    }),
                        n = this;
                    t.callback(function (e) {
                        e.length > 0 && n._setChartTitle(e[0])
                    }), e.push(t), this.replyTimes = {}, this.keys.forEach(function (t) {
                        var r = n.series[t] = new o(t, {
                            path: n.get("path")
                        });
                        r.callback(n.tallySeries.bind(n)), e.push(r)
                    })
                },
                tallySeries: function (e, t) {
                    e.length > 0 && (this.replyTimes[t] = e[0].value), this.updateData()
                },
                _fetchedReplyTimesLength: function () {
                    return h.map(this.replyTimes, function (e, t) {
                        return t
                    }).length
                },
                updateData: function () {
                    if (this._fetchedReplyTimesLength() < this.keys.length) return;
                    var e = this.replyTimes,
                        t = 0;
                    for (var n in e) {
                        var r = e[n];
                        t += r.value
                    }
                    var i = this.keys.map(function (n) {
                        if (t === 0) return 0;
                        var r = e[n],
                            i = new u(r.value / t);
                        return {
                            y: i.y(),
                            value: i
                        }
                    }),
                        s = this.get("chart").series[0];
                    s.setData(i)
                },
                _setChartTitle: function (e) {
                    var t = this.get("chart");
                    t.setTitle({
                        text: e.value.localize()
                    })
                }
            });
        e.exports = p
    }, require.modules["views/overview/top_agents.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("../../lib/top_n"),
            u = n("../../lib/toggle_parent"),
            a = n("../../lib/toggle_child"),
            f = n("../stats"),
            l = n("../../lib/templates"),
            c = n("./table_section").extend(a, f, {
                registerStats: function (e) {
                    var t = new o(this.get("statName"), {
                        action: "top_n",
                        assocName: "ticket_stats_by_agent",
                        query: {
                            limit: 5
                        },
                        raw: !0,
                        path: this.get("path")
                    }),
                        n = this;
                    t.callback(function (e) {
                        var t = [];
                        e.data.forEach(function (e) {
                            var n = s.User.create({
                                id: e.agent_id
                            });
                            n.fetch(), t.push(i.Object.create({
                                user: n,
                                item: e,
                                link: "#/users/" + e.agent_id
                            }))
                        }), n.set("content", t)
                    }), e.push(t)
                }
            }),
            h = i.View.extend(u, {
                classNames: "top-agents",
                activeName: "ticketsSolved",
                template: l.require("overview/top_agents"),
                tableSection: c,
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                reporting: n("../../index")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = h
    }, require.modules["views/overview/top_articles.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("../../lib/top_n"),
            u = n("../../lib/toggle_parent"),
            a = n("../../lib/toggle_child"),
            f = n("../../lib/templates"),
            l = n("../stats"),
            c = n("./table_section").extend(a, l, {
                registerStats: function (e) {
                    var t = new o(this.get("statName"), {
                        action: "top_n",
                        assocName: "forum_stats_by_entry",
                        query: {
                            limit: 5
                        },
                        raw: !0,
                        path: this.get("path")
                    }),
                        n = this;
                    t.callback(function (e) {
                        var t = [];
                        e.data.forEach(function (e) {
                            var n = s.ForumEntry.create({
                                id: e.entry_id
                            });
                            n.set("link", "/entries/" + e.entry_id), n.fetch(), t.push(n)
                        }), n.set("content", t)
                    }), e.push(t)
                }
            }),
            h = i.View.extend(u, {
                classNames: "top-articles",
                activeName: "entry_view",
                template: f.require("overview/top_articles"),
                tableSection: c,
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                reporting: n("../../index"),
                isVisible: function () {
                    return this.getPath("reporting.settings.hasWebPortalEnabled")
                }.property("reporting.settings.hasWebPortalEnabled")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = h
    }, require.modules["views/overview/top_searches.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../../lib/stats_search"),
            o = n("../stats"),
            u = n("../../lib/toggle_parent"),
            a = n("../../lib/toggle_child"),
            f = n("../../lib/templates");
        n("../helpers/percentage");
        var l = n("./table_section").extend(a, o, {
            registerStats: function (e) {
                var t = new s("search_stats", {
                    perPage: 5,
                    query: {
                        page: 1,
                        origin: "all",
                        order: this.get("order"),
                        desc: !0
                    },
                    path: this.get("path")
                }),
                    n = this;
                t.callback(function (e) {
                    n.set("content", e.data)
                }), e.push(t)
            }
        }),
            c = i.View.extend(u, {
                template: f.require("overview/top_searches"),
                activeName: "searches",
                tableSection: l,
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                reporting: n("../../index"),
                isVisible: function () {
                    return this.getPath("reporting.settings.hasWebPortalEnabled")
                }.property("reporting.settings.hasWebPortalEnabled")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = c
    }, require.modules["views/period.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/templates"),
            o = i.View.extend({
                template: s.require("period"),
                reportingPeriod: n("./reporting_period")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = o
    }, require.modules["views/reporting/163201.js"] = function (e, t, n, r) {
        e.exports = {
            name: "Development",
            last_run_at: "2012-07-23T23:47:00.000Z",
            result: {
                data: {
                    "2012-06-05": {
                        Solved: 575,
                        Created: 467,
                        Unsolved: 3114
                    },
                    "2012-06-22": {
                        Solved: 438,
                        Created: 394,
                        Unsolved: 3062
                    },
                    "2012-07-13": {
                        Solved: 448,
                        Created: 370,
                        Unsolved: 3123
                    },
                    "2012-04-28": {
                        Solved: 73,
                        Created: 99,
                        Unsolved: 3279
                    },
                    "2012-05-15": {
                        Solved: 525,
                        Created: 491,
                        Unsolved: 3072
                    },
                    "2012-05-01": {
                        Solved: 573,
                        Created: 638,
                        Unsolved: 3096
                    },
                    "2012-05-22": {
                        Solved: 663,
                        Created: 697,
                        Unsolved: 3068
                    },
                    "2012-06-08": {
                        Solved: 415,
                        Created: 373,
                        Unsolved: 3051
                    },
                    "2012-06-29": {
                        Solved: 437,
                        Created: 391,
                        Unsolved: 3026
                    },
                    "2012-07-16": {
                        Solved: 551,
                        Created: 472,
                        Unsolved: 3107
                    },
                    "2012-05-08": {
                        Solved: 485,
                        Created: 520,
                        Unsolved: 3168
                    },
                    "2012-05-25": {
                        Solved: 337,
                        Created: 368,
                        Unsolved: 3099
                    },
                    "2012-06-15": {
                        Solved: 378,
                        Created: 389,
                        Unsolved: 3110
                    },
                    "2012-07-02": {
                        Solved: 442,
                        Created: 481,
                        Unsolved: 3076
                    },
                    "2012-07-23": {
                        Solved: 725,
                        Created: 632,
                        Unsolved: 3109
                    },
                    "2012-04-24": {
                        Solved: 442,
                        Created: 487,
                        Unsolved: 3182
                    },
                    "2012-05-11": {
                        Solved: 411,
                        Created: 389,
                        Unsolved: 3140
                    },
                    "2012-06-01": {
                        Solved: 420,
                        Created: 414,
                        Unsolved: 3214
                    },
                    "2012-06-18": {
                        Solved: 469,
                        Created: 518,
                        Unsolved: 3172
                    },
                    "2012-07-09": {
                        Solved: 417,
                        Created: 416,
                        Unsolved: 3244
                    },
                    "2012-04-27": {
                        Solved: 482,
                        Created: 430,
                        Unsolved: 3253
                    },
                    "2012-05-18": {
                        Solved: 438,
                        Created: 357,
                        Unsolved: 2928
                    },
                    "2012-06-04": {
                        Solved: 450,
                        Created: 421,
                        Unsolved: 3222
                    },
                    "2012-06-25": {
                        Solved: 569,
                        Created: 521,
                        Unsolved: 3074
                    },
                    "2012-07-12": {
                        Solved: 406,
                        Created: 408,
                        Unsolved: 3201
                    },
                    "2012-07-19": {
                        Solved: 475,
                        Created: 523,
                        Unsolved: 3204
                    },
                    "2012-05-04": {
                        Solved: 378,
                        Created: 360,
                        Unsolved: 3149
                    },
                    "2012-05-21": {
                        Solved: 444,
                        Created: 490,
                        Unsolved: 3034
                    },
                    "2012-06-11": {
                        Solved: 488,
                        Created: 456,
                        Unsolved: 3036
                    },
                    "2012-06-28": {
                        Solved: 659,
                        Created: 676,
                        Unsolved: 3072
                    },
                    "2012-06-14": {
                        Solved: 473,
                        Created: 467,
                        Unsolved: 3099
                    },
                    "2012-07-05": {
                        Solved: 442,
                        Created: 438,
                        Unsolved: 3251
                    },
                    "2012-07-22": {
                        Solved: 72,
                        Created: 118,
                        Unsolved: 3202
                    },
                    "2012-05-07": {
                        Solved: 595,
                        Created: 533,
                        Unsolved: 3133
                    },
                    "2012-05-28": {
                        Solved: 229,
                        Created: 257,
                        Unsolved: 3177
                    },
                    "2012-05-14": {
                        Solved: 501,
                        Created: 467,
                        Unsolved: 3106
                    },
                    "2012-05-31": {
                        Solved: 482,
                        Created: 558,
                        Unsolved: 3220
                    },
                    "2012-06-21": {
                        Solved: 476,
                        Created: 449,
                        Unsolved: 3106
                    },
                    "2012-07-08": {
                        Solved: 72,
                        Created: 114,
                        Unsolved: 3245
                    },
                    "2012-04-23": {
                        Solved: 496,
                        Created: 461,
                        Unsolved: 3137
                    },
                    "2012-04-30": {
                        Solved: 756,
                        Created: 490,
                        Unsolved: 3031
                    },
                    "2012-05-17": {
                        Solved: 502,
                        Created: 511,
                        Unsolved: 3009
                    },
                    "2012-06-07": {
                        Solved: 516,
                        Created: 536,
                        Unsolved: 3093
                    },
                    "2012-06-24": {
                        Solved: 71,
                        Created: 133,
                        Unsolved: 3122
                    },
                    "2012-07-15": {
                        Solved: 83,
                        Created: 121,
                        Unsolved: 3186
                    },
                    "2012-05-03": {
                        Solved: 514,
                        Created: 577,
                        Unsolved: 3167
                    },
                    "2012-05-24": {
                        Solved: 365,
                        Created: 419,
                        Unsolved: 3068
                    },
                    "2012-06-10": {
                        Solved: 82,
                        Created: 90,
                        Unsolved: 3068
                    },
                    "2012-07-01": {
                        Solved: 109,
                        Created: 103,
                        Unsolved: 3037
                    },
                    "2012-07-18": {
                        Solved: 461,
                        Created: 514,
                        Unsolved: 3156
                    },
                    "2012-05-10": {
                        Solved: 561,
                        Created: 550,
                        Unsolved: 3162
                    },
                    "2012-05-27": {
                        Solved: 79,
                        Created: 95,
                        Unsolved: 3149
                    },
                    "2012-06-17": {
                        Solved: 118,
                        Created: 109,
                        Unsolved: 3123
                    },
                    "2012-07-04": {
                        Solved: 337,
                        Created: 340,
                        Unsolved: 3255
                    },
                    "2012-04-26": {
                        Solved: 485,
                        Created: 565,
                        Unsolved: 3305
                    },
                    "2012-05-13": {
                        Solved: 103,
                        Created: 113,
                        Unsolved: 3140
                    },
                    "2012-06-03": {
                        Solved: 85,
                        Created: 112,
                        Unsolved: 3251
                    },
                    "2012-06-20": {
                        Solved: 597,
                        Created: 499,
                        Unsolved: 3133
                    },
                    "2012-07-11": {
                        Solved: 522,
                        Created: 473,
                        Unsolved: 3199
                    },
                    "2012-06-27": {
                        Solved: 784,
                        Created: 726,
                        Unsolved: 3055
                    },
                    "2012-07-14": {
                        Solved: 70,
                        Created: 95,
                        Unsolved: 3148
                    },
                    "2012-04-29": {
                        Solved: 99,
                        Created: 117,
                        Unsolved: 3297
                    },
                    "2012-05-20": {
                        Solved: 59,
                        Created: 105,
                        Unsolved: 2988
                    },
                    "2012-06-06": {
                        Solved: 606,
                        Created: 565,
                        Unsolved: 3073
                    },
                    "2012-05-06": {
                        Solved: 75,
                        Created: 128,
                        Unsolved: 3195
                    },
                    "2012-06-13": {
                        Solved: 458,
                        Created: 467,
                        Unsolved: 3105
                    },
                    "2012-05-23": {
                        Solved: 626,
                        Created: 572,
                        Unsolved: 3014
                    },
                    "2012-06-30": {
                        Solved: 85,
                        Created: 102,
                        Unsolved: 3043
                    },
                    "2012-07-21": {
                        Solved: 78,
                        Created: 92,
                        Unsolved: 3156
                    },
                    "2012-06-16": {
                        Solved: 59,
                        Created: 81,
                        Unsolved: 3132
                    },
                    "2012-05-30": {
                        Solved: 494,
                        Created: 495,
                        Unsolved: 3144
                    },
                    "2012-05-09": {
                        Solved: 485,
                        Created: 490,
                        Unsolved: 3173
                    },
                    "2012-07-07": {
                        Solved: 81,
                        Created: 84,
                        Unsolved: 3203
                    },
                    "2012-06-23": {
                        Solved: 76,
                        Created: 74,
                        Unsolved: 3060
                    },
                    "2012-06-02": {
                        Solved: 76,
                        Created: 86,
                        Unsolved: 3224
                    },
                    "2012-05-16": {
                        Solved: 622,
                        Created: 550,
                        Unsolved: 3e3
                    },
                    "2012-04-25": {
                        Solved: 579,
                        Created: 622,
                        Unsolved: 3225
                    },
                    "2012-07-10": {
                        Solved: 474,
                        Created: 478,
                        Unsolved: 3248
                    },
                    "2012-06-26": {
                        Solved: 489,
                        Created: 528,
                        Unsolved: 3113
                    },
                    "2012-06-09": {
                        Solved: 63,
                        Created: 72,
                        Unsolved: 3060
                    },
                    "2012-05-19": {
                        Solved: 41,
                        Created: 55,
                        Unsolved: 2942
                    },
                    "2012-05-02": {
                        Solved: 640,
                        Created: 648,
                        Unsolved: 3104
                    },
                    "2012-07-17": {
                        Solved: 562,
                        Created: 558,
                        Unsolved: 3103
                    },
                    "2012-06-12": {
                        Solved: 439,
                        Created: 499,
                        Unsolved: 3096
                    },
                    "2012-05-26": {
                        Solved: 52,
                        Created: 86,
                        Unsolved: 3133
                    },
                    "2012-05-05": {
                        Solved: 88,
                        Created: 81,
                        Unsolved: 3142
                    },
                    "2012-07-03": {
                        Solved: 897,
                        Created: 1073,
                        Unsolved: 3252
                    },
                    "2012-07-20": {
                        Solved: 574,
                        Created: 512,
                        Unsolved: 3142
                    },
                    "2012-06-19": {
                        Solved: 526,
                        Created: 585,
                        Unsolved: 3231
                    },
                    "2012-05-29": {
                        Solved: 538,
                        Created: 504,
                        Unsolved: 3143
                    },
                    "2012-05-12": {
                        Solved: 79,
                        Created: 69,
                        Unsolved: 3130
                    },
                    "2012-07-06": {
                        Solved: 432,
                        Created: 381,
                        Unsolved: 3200
                    }
                },
                legends: [{
                    color: "FF0D00",
                    name: "Created",
                    summable: !0
                }, {
                    color: "98C332",
                    name: "Solved",
                    summable: !0
                }, {
                    color: "96DEED",
                    name: "Unsolved",
                    summable: !1
                }]
            }
        }
    }, require.modules["views/reporting/362122.js"] = function (e, t, n, r) {
        e.exports = {
            name: "Satisfaction",
            last_run_at: "2012-07-21T23:47:00.000Z",
            result: {
                data: {
                    "2012-06-05": {
                        "Solved Tickets w/ offered rating": 295,
                        "Satisfied Tickets": 58,
                        "All resolved tix": 575
                    },
                    "2012-06-22": {
                        "Solved Tickets w/ offered rating": 229,
                        "Satisfied Tickets": 39,
                        "All resolved tix": 438
                    },
                    "2012-07-13": {
                        "Solved Tickets w/ offered rating": 229,
                        "Satisfied Tickets": 1,
                        "All resolved tix": 448
                    },
                    "2012-04-28": {
                        "Solved Tickets w/ offered rating": 16,
                        "Satisfied Tickets": 6,
                        "All resolved tix": 73
                    },
                    "2012-05-15": {
                        "Solved Tickets w/ offered rating": 167,
                        "Satisfied Tickets": 53,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 525
                    },
                    "2012-05-01": {
                        "Solved Tickets w/ offered rating": 191,
                        "Satisfied Tickets": 38,
                        "All resolved tix": 573
                    },
                    "2012-05-22": {
                        "Solved Tickets w/ offered rating": 202,
                        "Satisfied Tickets": 45,
                        "All resolved tix": 663
                    },
                    "2012-06-08": {
                        "Solved Tickets w/ offered rating": 208,
                        "Satisfied Tickets": 36,
                        "All resolved tix": 415
                    },
                    "2012-06-29": {
                        "Solved Tickets w/ offered rating": 173,
                        "Satisfied Tickets": 27,
                        "All resolved tix": 437
                    },
                    "2012-07-16": {
                        "Solved Tickets w/ offered rating": 212,
                        "Satisfied Tickets": 45,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 551
                    },
                    "2012-05-08": {
                        "Solved Tickets w/ offered rating": 161,
                        "Satisfied Tickets": 33,
                        "All resolved tix": 485
                    },
                    "2012-05-25": {
                        "Solved Tickets w/ offered rating": 155,
                        "Satisfied Tickets": 21,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 337
                    },
                    "2012-06-15": {
                        "Solved Tickets w/ offered rating": 193,
                        "Satisfied Tickets": 37,
                        "All resolved tix": 378
                    },
                    "2012-07-02": {
                        "Solved Tickets w/ offered rating": 211,
                        "Satisfied Tickets": 33,
                        "All resolved tix": 442
                    },
                    "2012-07-23": {
                        "Solved Tickets w/ offered rating": 16,
                        "Satisfied Tickets": 4,
                        "All resolved tix": 725
                    },
                    "2012-04-24": {
                        "Solved Tickets w/ offered rating": 188,
                        "Satisfied Tickets": 37,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 442
                    },
                    "2012-05-11": {
                        "Solved Tickets w/ offered rating": 198,
                        "Satisfied Tickets": 29,
                        "Unsatisfied Tickets": 1,

                        "All resolved tix": 411
                    },
                    "2012-06-01": {
                        "Solved Tickets w/ offered rating": 184,
                        "Satisfied Tickets": 25,
                        "All resolved tix": 420
                    },
                    "2012-06-18": {
                        "Solved Tickets w/ offered rating": 221,
                        "Satisfied Tickets": 45,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 469
                    },
                    "2012-07-09": {
                        "Solved Tickets w/ offered rating": 193,
                        "Satisfied Tickets": 54,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 417
                    },
                    "2012-04-27": {
                        "Solved Tickets w/ offered rating": 197,
                        "Satisfied Tickets": 22,
                        "All resolved tix": 482
                    },
                    "2012-05-18": {
                        "Solved Tickets w/ offered rating": 154,
                        "Satisfied Tickets": 27,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 438
                    },
                    "2012-06-04": {
                        "Solved Tickets w/ offered rating": 216,
                        "Satisfied Tickets": 36,
                        "All resolved tix": 450
                    },
                    "2012-06-25": {
                        "Solved Tickets w/ offered rating": 242,
                        "Satisfied Tickets": 41,
                        "Unsatisfied Tickets": 3,
                        "All resolved tix": 569
                    },
                    "2012-07-12": {
                        "Solved Tickets w/ offered rating": 194,
                        "Satisfied Tickets": 1,
                        "All resolved tix": 406
                    },
                    "2012-07-19": {
                        "Solved Tickets w/ offered rating": 219,
                        "Satisfied Tickets": 33,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 475
                    },
                    "2012-05-04": {
                        "Solved Tickets w/ offered rating": 196,
                        "Satisfied Tickets": 22,
                        "All resolved tix": 378
                    },
                    "2012-05-21": {
                        "Solved Tickets w/ offered rating": 190,
                        "Satisfied Tickets": 40,
                        "All resolved tix": 444
                    },
                    "2012-06-11": {
                        "Solved Tickets w/ offered rating": 261,
                        "Satisfied Tickets": 43,
                        "All resolved tix": 488
                    },
                    "2012-06-28": {
                        "Solved Tickets w/ offered rating": 193,
                        "Satisfied Tickets": 28,
                        "All resolved tix": 659
                    },
                    "2012-06-14": {
                        "Solved Tickets w/ offered rating": 213,
                        "Satisfied Tickets": 33,
                        "All resolved tix": 473
                    },
                    "2012-07-05": {
                        "Solved Tickets w/ offered rating": 173,
                        "Satisfied Tickets": 30,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 442
                    },
                    "2012-07-22": {
                        "Solved Tickets w/ offered rating": 7,
                        "Satisfied Tickets": 2,
                        "All resolved tix": 72
                    },
                    "2012-05-07": {
                        "Solved Tickets w/ offered rating": 279,
                        "Satisfied Tickets": 54,
                        "All resolved tix": 595
                    },
                    "2012-05-28": {
                        "Solved Tickets w/ offered rating": 91,
                        "Satisfied Tickets": 6,
                        "All resolved tix": 229
                    },
                    "2012-05-14": {
                        "Solved Tickets w/ offered rating": 253,
                        "Satisfied Tickets": 58,
                        "All resolved tix": 501
                    },
                    "2012-05-31": {
                        "Solved Tickets w/ offered rating": 223,
                        "Satisfied Tickets": 20,
                        "All resolved tix": 482
                    },
                    "2012-06-21": {
                        "Solved Tickets w/ offered rating": 215,
                        "Satisfied Tickets": 41,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 476
                    },
                    "2012-07-08": {
                        "Solved Tickets w/ offered rating": 31,
                        "Satisfied Tickets": 6,
                        "All resolved tix": 72
                    },
                    "2012-04-23": {
                        "Solved Tickets w/ offered rating": 275,
                        "Satisfied Tickets": 42,
                        "All resolved tix": 496
                    },
                    "2012-04-30": {
                        "Solved Tickets w/ offered rating": 262,
                        "Satisfied Tickets": 52,
                        "All resolved tix": 756
                    },
                    "2012-05-17": {
                        "Solved Tickets w/ offered rating": 187,
                        "Satisfied Tickets": 36,
                        "All resolved tix": 502
                    },
                    "2012-06-07": {
                        "Solved Tickets w/ offered rating": 158,
                        "Satisfied Tickets": 36,
                        "All resolved tix": 516
                    },
                    "2012-06-24": {
                        "Solved Tickets w/ offered rating": 18,
                        "Satisfied Tickets": 6,
                        "All resolved tix": 71
                    },
                    "2012-07-15": {
                        "Solved Tickets w/ offered rating": 17,
                        "Satisfied Tickets": 2,
                        "All resolved tix": 83
                    },
                    "2012-05-03": {
                        "Solved Tickets w/ offered rating": 237,
                        "Satisfied Tickets": 42,
                        "Unsatisfied Tickets": 2,
                        "All resolved tix": 514
                    },
                    "2012-05-24": {
                        "Solved Tickets w/ offered rating": 170,
                        "Satisfied Tickets": 33,
                        "All resolved tix": 365
                    },
                    "2012-06-10": {
                        "Solved Tickets w/ offered rating": 26,
                        "Satisfied Tickets": 10,
                        "All resolved tix": 82
                    },
                    "2012-07-01": {
                        "Solved Tickets w/ offered rating": 31,
                        "Satisfied Tickets": 1,
                        "Unsatisfied Tickets": 2,
                        "All resolved tix": 109
                    },
                    "2012-07-18": {
                        "Solved Tickets w/ offered rating": 201,
                        "Satisfied Tickets": 52,
                        "All resolved tix": 461
                    },
                    "2012-05-10": {
                        "Solved Tickets w/ offered rating": 187,
                        "Satisfied Tickets": 38,
                        "All resolved tix": 561
                    },
                    "2012-05-27": {
                        "Solved Tickets w/ offered rating": 25,
                        "Satisfied Tickets": 5,
                        "All resolved tix": 79
                    },
                    "2012-06-17": {
                        "Solved Tickets w/ offered rating": 29,
                        "Satisfied Tickets": 6,
                        "All resolved tix": 118
                    },
                    "2012-07-04": {
                        "Solved Tickets w/ offered rating": 178,
                        "Satisfied Tickets": 41,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 337
                    },
                    "2012-04-26": {
                        "Solved Tickets w/ offered rating": 196,
                        "Satisfied Tickets": 32,
                        "All resolved tix": 485
                    },
                    "2012-05-13": {
                        "Solved Tickets w/ offered rating": 38,
                        "Satisfied Tickets": 4,
                        "All resolved tix": 103
                    },
                    "2012-06-03": {
                        "Solved Tickets w/ offered rating": 28,
                        "Satisfied Tickets": 2,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 85
                    },
                    "2012-06-20": {
                        "Solved Tickets w/ offered rating": 227,
                        "Satisfied Tickets": 41,
                        "All resolved tix": 597
                    },
                    "2012-07-11": {
                        "Solved Tickets w/ offered rating": 276,
                        "Satisfied Tickets": 23,
                        "All resolved tix": 522
                    },
                    "2012-06-27": {
                        "Solved Tickets w/ offered rating": 214,
                        "Satisfied Tickets": 46,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 784
                    },
                    "2012-07-14": {
                        "Solved Tickets w/ offered rating": 14,
                        "All resolved tix": 70
                    },
                    "2012-04-29": {
                        "Solved Tickets w/ offered rating": 29,
                        "Satisfied Tickets": 7,
                        "All resolved tix": 99
                    },
                    "2012-05-20": {
                        "Solved Tickets w/ offered rating": 9,
                        "Satisfied Tickets": 7,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 59
                    },
                    "2012-06-06": {
                        "Solved Tickets w/ offered rating": 216,
                        "Satisfied Tickets": 38,
                        "All resolved tix": 606
                    },
                    "2012-05-06": {
                        "Solved Tickets w/ offered rating": 22,
                        "Satisfied Tickets": 7,
                        "All resolved tix": 75
                    },
                    "2012-06-13": {
                        "Solved Tickets w/ offered rating": 198,
                        "Satisfied Tickets": 37,
                        "Unsatisfied Tickets": 2,
                        "All resolved tix": 458
                    },
                    "2012-05-23": {
                        "Solved Tickets w/ offered rating": 255,
                        "Satisfied Tickets": 48,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 626
                    },
                    "2012-06-30": {
                        "Solved Tickets w/ offered rating": 20,
                        "Satisfied Tickets": 9,
                        "All resolved tix": 85
                    },
                    "2012-07-21": {
                        "Solved Tickets w/ offered rating": 38,
                        "Satisfied Tickets": 5,
                        "All resolved tix": 78
                    },
                    "2012-06-16": {
                        "Solved Tickets w/ offered rating": 18,
                        "Satisfied Tickets": 1,
                        "All resolved tix": 59
                    },
                    "2012-05-30": {
                        "Solved Tickets w/ offered rating": 266,
                        "Satisfied Tickets": 1,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 494
                    },
                    "2012-05-09": {
                        "Solved Tickets w/ offered rating": 193,
                        "Satisfied Tickets": 38,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 485
                    },
                    "2012-07-07": {
                        "Solved Tickets w/ offered rating": 41,
                        "Satisfied Tickets": 9,
                        "All resolved tix": 81
                    },
                    "2012-06-23": {
                        "Solved Tickets w/ offered rating": 28,
                        "Satisfied Tickets": 2,
                        "All resolved tix": 76
                    },
                    "2012-06-02": {
                        "Solved Tickets w/ offered rating": 22,
                        "Satisfied Tickets": 4,
                        "All resolved tix": 76
                    },
                    "2012-05-16": {
                        "Solved Tickets w/ offered rating": 247,
                        "Satisfied Tickets": 44,
                        "All resolved tix": 622
                    },
                    "2012-04-25": {
                        "Solved Tickets w/ offered rating": 219,
                        "Satisfied Tickets": 33,
                        "All resolved tix": 579
                    },
                    "2012-07-10": {
                        "Solved Tickets w/ offered rating": 211,
                        "Satisfied Tickets": 52,
                        "All resolved tix": 474
                    },
                    "2012-06-26": {
                        "Solved Tickets w/ offered rating": 201,
                        "Satisfied Tickets": 44,
                        "All resolved tix": 489
                    },
                    "2012-06-09": {
                        "Solved Tickets w/ offered rating": 25,
                        "Satisfied Tickets": 7,
                        "All resolved tix": 63
                    },
                    "2012-05-19": {
                        "Solved Tickets w/ offered rating": 10,
                        "Satisfied Tickets": 2,
                        "All resolved tix": 41
                    },
                    "2012-05-02": {
                        "Solved Tickets w/ offered rating": 280,
                        "Satisfied Tickets": 45,
                        "All resolved tix": 640
                    },
                    "2012-07-17": {
                        "Solved Tickets w/ offered rating": 213,
                        "Satisfied Tickets": 50,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 562
                    },
                    "2012-06-12": {
                        "Solved Tickets w/ offered rating": 193,
                        "Satisfied Tickets": 48,
                        "Unsatisfied Tickets": 2,
                        "All resolved tix": 439
                    },
                    "2012-05-26": {
                        "Solved Tickets w/ offered rating": 23,
                        "Satisfied Tickets": 1,
                        "All resolved tix": 52
                    },
                    "2012-05-05": {
                        "Solved Tickets w/ offered rating": 22,
                        "Satisfied Tickets": 5,
                        "All resolved tix": 88
                    },
                    "2012-07-03": {
                        "Solved Tickets w/ offered rating": 389,
                        "Satisfied Tickets": 54,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 897
                    },
                    "2012-07-20": {
                        "Solved Tickets w/ offered rating": 183,
                        "Satisfied Tickets": 28,
                        "All resolved tix": 574
                    },
                    "2012-06-19": {
                        "Solved Tickets w/ offered rating": 256,
                        "Satisfied Tickets": 56,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 526
                    },
                    "2012-05-29": {
                        "Solved Tickets w/ offered rating": 342,
                        "Satisfied Tickets": 2,
                        "All resolved tix": 538
                    },
                    "2012-05-12": {
                        "Solved Tickets w/ offered rating": 40,
                        "Satisfied Tickets": 5,
                        "All resolved tix": 79
                    },
                    "2012-07-06": {
                        "Solved Tickets w/ offered rating": 179,
                        "Satisfied Tickets": 25,
                        "Unsatisfied Tickets": 1,
                        "All resolved tix": 432
                    }
                },
                legends: [{
                    color: "FF0D00",
                    name: "All resolved tix",
                    summable: !0
                }, {
                    color: "98C332",
                    name: "Satisfied Tickets",
                    summable: !0
                }, {
                    color: "96DEED",
                    name: "Solved Tickets w/ offered rating",
                    summable: !0
                }, {
                    color: "E8B200",
                    name: "Unsatisfied Tickets",
                    summable: !0
                }]
            }
        }
    }, require.modules["views/reporting/report_display.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("i18n"),
            o = n("jquery.env"),
            u = n("../../vendor/highcharts"),
            a = n("../chart"),
            f = n("../../lib/templates"),
            l = n("handlebars"),
            c = n("window").require,
            h = c("lib/computed").oneWay,
            p = i.CollectionView.extend({}).reopenClass({
                preservesContext: !1
            }),
            d = a.extend({
                template: f.require("reporting/report_display"),
                classNames: ["report-display"],
                reportDisplayCollection: p,
                reportId: h("parentView.activeName"),
                buildChart: function () {
                    var e = this.$(".chart-placeholder")[0];
                    $(e).mouseleave(function () {
                        $(".tooltip-date").hide()
                    });
                    var t = this,
                        n = new u.Chart({
                            chart: {
                                renderTo: e,
                                type: "line",
                                height: 350,
                                marginBottom: 40,
                                spacingLeft: 0,
                                spacingRight: 0,
                                animation: {
                                    duration: 500
                                }
                            },
                            plotOptions: {
                                line: {
                                    fillOpacity: .2,
                                    marker: {
                                        enabled: !1,
                                        lineWidth: 1,
                                        symbol: "circle",
                                        states: {
                                            hover: {
                                                enabled: !0,
                                                radius: 4
                                            }
                                        }
                                    },
                                    lineWidth: 3,
                                    shadow: !1,
                                    states: {
                                        hover: {
                                            enabled: !0,
                                            lineWidth: 3
                                        }
                                    }
                                }
                            },
                            title: {
                                text: null,
                                margin: 40,
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#333333",
                                    fontSize: "12px",
                                    fontWeight: "bold"
                                }
                            },
                            xAxis: {
                                type: "datetime",
                                dateTimeLabelFormats: {
                                    day: s.t("date.formats.short")
                                },
                                lineWidth: 1,
                                lineColor: "#E4E4E4",
                                tickPosition: "inside",
                                tickColor: "#E4E4E4",
                                tickWidth: 1,
                                labels: {
                                    style: {
                                        color: "#888"
                                    }
                                }
                            },
                            colors: ["#73D7FC", "#C3EC80"],
                            tooltip: {
                                shared: !0,
                                crosshairs: {
                                    width: 1,
                                    color: "#888",
                                    dashStyle: "dash"
                                },
                                backgroundColor: "transparent",
                                borderWidth: 0,
                                borderRadius: 2,
                                shadow: !1,
                                useHTML: !0,
                                formatter: function () {
                                    var e = new Date(this.points[0].key),
                                        t = this.points[0].point,
                                        r = t.series;
                                    $(".tooltip-date").css({
                                        top: "0px",
                                        left: t.plotX + n.plotLeft - 30 + "px"
                                    }).html(u.dateFormat(s.t("date.formats.short"), e)), $(".tooltip-date").show();
                                    var i = "";
                                    return i += '<div style="background-color: white; padding: 5px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; border: 1px solid #6B6B6B;"><table>', $.each(this.points, function (e, t) {
                                        var n = t.y;
                                        i += '<tr><td style="color: ' + t.series.color + '"><b>' + t.series.name + ':</b></td><td style="text-align: right">&nbsp;' + n + "</td></tr>"
                                    }), i += "</table></div>", i
                                },
                                headerFormat: '<small style="position: fixed; top: 245px;">{point.key}</small><br/><table>',
                                pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td><td style="text-align: right"><b>{point.y}</b></td></tr>',
                                footerFormat: "</table>"
                            },
                            yAxis: [{
                                min: 0,
                                lineColor: "#6B6B6B",
                                gridLineWidth: 1,
                                gridLineColor: "#E4E4E4",
                                title: {
                                    text: "",
                                    style: {
                                        fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                        color: "#888",
                                        fontSize: "11px",
                                        fontWeight: "normal"
                                    }
                                },
                                labels: {
                                    style: {
                                        color: "#888"
                                    }
                                }
                            }, {
                                lineColor: "#6B6B6B",
                                gridLineWidth: 1,
                                gridLineColor: "#E4E4E4",
                                opposite: !0,
                                title: {
                                    text: "",
                                    style: {
                                        fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                        color: "#888",
                                        fontSize: "11px",
                                        fontWeight: "normal"
                                    }
                                },
                                labels: {
                                    style: {
                                        color: "#888"
                                    }
                                }
                            }],
                            legend: {
                                enabled: !0,
                                verticalAlign: "bottom",
                                borderWidth: 0,
                                align: "center",
                                floating: !0,
                                y: 10,
                                symbolWidth: 12,
                                itemStyle: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#333333",
                                    fontSize: "11px"
                                }
                            }
                        });
                    return n
                },
                _addSeriesForData: function (e, t, n, r) {
                    var i = [];
                    for (var s = 0; s < r.length; s++) {
                        var o = r[s],
                            u = t.data[o];
                        u = u[n.name], u === undefined && (u = 0), i.push([Date.parse(o), u])
                    }
                    e.addSeries({
                        name: n.name,
                        id: n.name,
                        data: i,
                        yAxis: 0,
                        color: "#%@".fmt(n.color)
                    }, !0, 500)
                },
                _addAllSeriesForData: function (e, t, n) {
                    for (var r = 0; r < t.legends.length; r++) {
                        var i = t.legends[r];
                        this._addSeriesForData(e, t, i, n)
                    }
                },
                _reportResultForData: function (e, t, n) {
                    var r = e.data[t],
                        s = i.Object.create(),
                        o = "<td><div>%@</div></td>".fmt(t);
                    for (var u = 0; u < e.legends.length; u++) {
                        var a = e.legends[u],
                            f = r[a.name];
                        f === undefined && (f = 0), a.summable && (n[a.name] || (n[a.name] = 0), n[a.name] += f), o += "<td><div>%@</div></td>".fmt(f)
                    }
                    return s.set("body", new l.SafeString(o)), s
                },
                _reportResultsForData: function (e, t) {
                    var n = [],
                        r = {};
                    for (var s = 0; s < t.length; s++) {
                        var o = t[s],
                            u = this._reportResultForData(e, o, r);
                        n.push(u)
                    }
                    var a = i.Object.create(),
                        f = "<td><div><b>Total</b></div></td>";
                    for (var c = 0; c < e.legends.length; c++) {
                        var h = e.legends[c],
                            p = r[h.name];
                        p || (p = "&#8212;"), f += "<td><div><b>%@</b></div></td>".fmt(p)
                    }
                    return a.set("body", new l.SafeString(f)), n.push(a), n
                },
                registerStats: function (e) {
                    var t = this,
                        r = function () {}, i = new r;
                    i.name = "report", i.fetch = function () {
                        return o.Deferred().promise()
                    }, i.setOptions = function () {}, i.refetch = function (e) {
                        if (!e) return o.Deferred().promise();
                        var r = n("views/reporting/%@".fmt(e)),
                            i = r.result,
                            s = t.get("chart");
                        while (s.series.length > 0) s.series[0].remove(!0);
                        var a = [];
                        for (var f in i.data) a.push(f);
                        a.sort(), t._addAllSeriesForData(s, i, a);
                        var l = t._reportResultsForData(i, a);
                        t.set("name", r.name);
                        var c = new Date(r.last_run_at);
                        return t.set("last_run_at", u.dateFormat("%b %e %H:%M", c)), t.set("legends", i.legends), t.set("reportResult", l), o.Deferred().promise()
                    }, e.push(i)
                },
                reportIdDidChange: function () {
                    var e = this.getPath("reportId");
                    if (!e) {
                        this.$().css("visibility", "hidden");
                        return
                    }
                    this.$().css("visibility", "visible");
                    var t = this.getPath("statsSources.firstObject");
                    t.refetch(e)
                }.observes("reportId")
            });
        e.exports = d
    }, require.modules["views/reporting/reporting.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../../lib/toggle_child"),
            o = n("../../lib/toggle_parent"),
            u = n("../../lib/templates"),
            a = i.View.extend(s, o, {
                template: u.require("reporting"),
                toggleButton: n("../toggle_button"),
                reportDisplay: n("./report_display"),
                name: "reporting",
                path: "reporting"
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = a
    }, require.modules["views/reporting_period.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("../lib/router"),
            u = n("i18n"),
            a = s.SelectView.extend({
                delegateType: "SelectMenu",
                classNames: ["reporting-period-view"],
                configOptions: {
                    backLinkLabel: "Back",
                    defaultValue: 0,
                    defaultValueLabel: u.t("txt.views.reporting.period.last_30_days"),
                    isVisible: !1,
                    keyboardCue: !0,
                    keyboardCueAction: "focus"
                },
                options: function () {
                    return a.Periods
                }.property(),
                toggleDatepicker: function () {
                    var e = this.get("parentView").$(".custom-period"),
                        t = this;
                    this.get("value") == 3 ? (e.show(), e.find(".datepicker-field").each(function (e, t) {
                        $(t).datepicker(), $(t).datepicker("option", "altField", $(t).data("field")), $(t).datepicker("option", "altFormat", "yy-mm-dd")
                    }), this.get("parentView").$("#update-custom-period").click(function () {
                        t.setCustomPeriod()
                    })) : e.hide()
                },
                router: function () {
                    var e = this.getPath("parentView.path");
                    return o.forPath(e)
                }.property("parentView.path"),
                setCustomPeriod: function () {
                    var e = 864e5,
                        t = this.get("parentView"),
                        n = new Date(t.$(".start-date-alt").val()),
                        r = new Date(t.$(".end-date-alt").val()),
                        i = this.validateDuration(n, r);
                    if (i) {
                        var s = n.valueOf() / 1e3,
                            o = (r.valueOf() + e) / 1e3,
                            u = this._adjustTimestampForStatsUsage(s),
                            a = this._adjustTimestampForStatsUsage(o),
                            f = i / e;
                        this.updateRouterWithPeriod(t, f, u, a)
                    }
                },
                updateRouterWithPeriod: function (e, t, n, r) {
                    a.GraphDataPeriods[3].intervals = t, a.GraphDataPeriods[3].start = n, a.GraphDataPeriods[3].end = r, this.get("router").update({
                        period: 3,
                        interval: a.GraphDataPeriods[3].intervals,
                        start: a.GraphDataPeriods[3].start,
                        end: a.GraphDataPeriods[3].end
                    }), this.get("router").sync()
                },
                validateDuration: function (e, t) {
                    var n = this.get("parentView").$("#custom-period-error");
                    if (isNaN(e.valueOf()) || isNaN(t.valueOf())) return n.html(u.t("txt.views.reporting.period.errors.invalid_date_entered")), !1;
                    var r = e.valueOf(),
                        i = t.valueOf() - r;
                    return i <= 0 ? (n.html(u.t("txt.views.reporting.period.errors.start_date_must_be_before_end_date")), !1) : i > 7776e6 ? (n.html(u.t("txt.views.reporting.period.errors.custom_period_3_month_maximum")), !1) : (n.html(""), i)
                },
                userDidChangeValue: function () {
                    i.run.next(this, function () {
                        this.toggleDatepicker();
                        var e = this.get("value");
                        e < 3 && this.get("router").update({
                            period: e
                        }), this.get("router").sync()
                    })
                },
                didInsertElement: function () {
                    this._super();
                    var e = this,
                        t = this.get("router");
                    t.ready(function () {
                        var n = parseInt(t.params().period, 10);
                        e.set("value", n), n === 3 && e.toggleDatepicker()
                    })
                },
                _adjustTimestampForStatsUsage: function (e) {
                    var t = s.currentUser.get("timeZone"),
                        n = Math.abs(t.offsetInMilliseconds) / 1e3,
                        r = e + n;
                    return r
                }
            });
        a.Periods = [{
            value: 0,
            label: u.t("txt.views.reporting.period.last_30_days")
        }, {
            value: 1,
            label: u.t("txt.views.reporting.period.last_7_days")
        }, {
            value: 2,
            label: u.t("txt.views.reporting.period.last_24_hours")
        }, {
            value: 3,
            label: u.t("txt.views.reporting.period.custom")
        }], a.GraphDataPeriods = [{
            intervals: 30,
            interval: 86400
        }, {
            intervals: 7,
            interval: 86400
        }, {
            intervals: 24,
            interval: 3600
        }, {
            interval: 86400
        }], e.exports = a
    }, require.modules["views/search.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/toggle_child"),
            o = n("../lib/templates"),
            u = i.View.extend(s, {
                template: o.require("search"),
                searchStatsView: n("./search/search_stats"),
                period: n("./period"),
                toggleButton: n("./toggle_button"),
                name: "search"
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/search/search_stats.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("zd"),
            o = n("../sparkline_chart"),
            u = n("../../lib/graph_data"),
            a = n("../../lib/summation"),
            f = n("../../lib/toggle_parent"),
            l = n("../../lib/toggle_parent_routing"),
            c = n("../../lib/templates"),
            h = n("../../lib/csv_url_builder"),
            p = n("i18n"),
            d = n("window").require,
            v = n("../../lib/integer"),
            m = o.extend(f, l, {
                template: c.require("search/search_stats_view"),
                activeName: "searches",
                table: n("./search_table"),
                sortToggle: n("../sort_toggle"),
                toggleButton: n("../toggle_button"),
                seeAllButton: n("../see_all_button"),
                hasCSVBinding: "Reporting.settings.hasCSV",
                feedbackTab: !1,
                topicText: {
                    searches: p.t("txt.views.reporting.search_pane.top_searches"),
                    no_results: p.t("txt.views.reporting.search_pane.no_results"),
                    no_clicks: p.t("txt.views.reporting.search_pane.no_clicks"),
                    tickets: p.t("txt.views.reporting.search_pane.tickets")
                },
                content: [i.Object.create({
                    value: 0,
                    label: p.t("txt.views.reporting.search_pane.number_of_searches")
                }), i.Object.create({
                    value: 1,
                    label: p.t("txt.views.reporting.search_pane.percentage_of_searches")
                })],
                sortable: function () {
                    return this.get("activeName") == "searches"
                }.property("activeName"),
                unsortable: function () {
                    return this.get("activeName") != "searches"
                }.property("activeName"),
                buildChart: function () {
                    var e = " ",
                        t = this.createChart(e, {
                            selected: ["searches"],
                            parallel: 1
                        });
                    return t
                },
                csv: function () {
                    var e = this.get("statsSources") && this.get("statsSources")[0].options || {};
                    return (new h(e)).url()
                }.property("routerChanged"),
                registerStats: function (e, t) {
                    var n = this.get("path"),
                        r = {
                            searches: "txt.views.reporting.search_pane.total_label",
                            no_results: "txt.views.reporting.search_pane.with_no_results_label",
                            no_clicks: "txt.views.reporting.search_pane.with_no_clicks_label",
                            tickets: "txt.views.reporting.search_pane.tickets_created_label"
                        };
                    $.each(r, function (r, i) {
                        var s = new u(r, {
                            title: p.t(i),
                            assocName: "search_account_stats"
                        });
                        e.push(s);
                        var o = new a(r, {
                            path: n,
                            value: v,
                            assocName: "search_account_stats"
                        });
                        t.push(o)
                    })
                },
                topic: function () {
                    return this.get("topicText")[this.get("activeName")]
                }.property("activeName")
            });
        e.exports = m
    }, require.modules["views/search/search_table.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../../lib/stats_search"),
            o = n("../stats"),
            u = n("../stats_pagination_adapter"),
            a = n("../../lib/toggle_child"),
            f = n("../../lib/templates"),
            l = n("jquery.env");
        n("../helpers/percentage");
        var c = i.View.extend(a, o, u, {
            template: f.require("search/search_table"),
            percentage: 0,
            feedbackTabDidChange: function () {
                if (this.get("statName") != "searches") return;
                var e = this.getPath("parentView.feedbackTab"),
                    t = this.get("statsSources")[0];
                e ? t.options.query.origin = "dropbox" : t.options.query.origin = "all", this.optionSelected() && this.refetchStats()
            }.observes("parentView.feedbackTab"),
            swapPercent: function () {
                return this.get("statName") == "searches" ? !1 : this.get("statName") != this.getPath("parentView.activeName") ? !1 : this.getPath("parentView.searches.value") == this.get("percentage") ? !1 : (this.setSource(this.getPath("parentView.searches.value")), this.set("percentage", this.getPath("parentView.searches.value")), !0)
            },
            searchesDidChange: function () {
                this.swapPercent() && this.get("parentView").chartTitle.select(this.get("statName"))
            }.observes("parentView.searches.value"),
            activeNameDidChange: function () {
                this.swapPercent()
            }.observes("parentView.activeName"),
            setSource: function (e) {
                var t = l.inArray(this.get("statName"), this.getPath("parentView.statsSources").mapProperty("name")),
                    n = e == 1 ? this.getPercentSource(t) : this.get("source");
                this.getPath("parentView.statsSources")[t] = n
            },
            getPercentSource: function (e) {
                if (!this.get("percentSource")) {
                    var t = this.getPath("parentView.statsSources")[0],
                        n = this.getPath("parentView.statsSources")[e],
                        r = l.extend(!0, {}, n);
                    this.set("source", n);
                    for (var i = 0; i < n.cache.length; i++) r.cache[i][1] = n.cache[i][1] / t.cache[i][1] * 100;
                    this.set("percentSource", r)
                }
                return this.get("percentSource")
            },
            order: function () {
                switch (this.get("statName")) {
                case "no_clicks":
                    return "ctr";
                case "no_results":
                    return "avg_results";
                default:
                    return this.get("statName")
                }
            },
            desc: function () {
                switch (this.get("statName")) {
                case "no_results":
                    return !1;
                case "no_clicks":
                    return !1;
                default:
                    return !0
                }
            },
            optionSelected: function () {
                return this.getPath("parentView.activeName") != this.get("statName") ? !1 : !0
            },
            changeActive: function () {
                if (!this.optionSelected()) return;
                this.get("content") || this.refetchStats()
            }.observes("parentView.activeName"),
            sort: function () {
                if (!this.optionSelected()) return;
                var e = this.get("statsSources")[0];
                this.getPath("parentView.sort") == e.options.query.order ? e.options.query.desc = !e.options.query.desc : e.options.query.order = this.getPath("parentView.sort"), this.set("statsSources", [e]), this.refetchStats()
            }.observes("parentView.desc"),
            registerStats: function (e) {
                var t = new s("search_stats", {
                    query: {
                        origin: "all",
                        per_page: this.get("perPage"),
                        page: this.get("currentPage"),
                        order: this.order(),
                        desc: this.desc()
                    }
                }),
                    n = this;
                t.callback(function (e) {
                    var t = e.data.mapProperty("top_entry_id");
                    l.post("/api/v1/entries/show_many", {
                        ids: t.join(","),
                        only: "title"
                    }, function (t) {
                        n.setData(e.data, t, e.total_pages)
                    }, "json")
                }), e.push(t)
            },
            setData: function (e, t, n) {
                var r = [],
                    s = 0,
                    o = this;
                this.set("totalPages", n), e.forEach(function (e) {
                    if (o.get("statName") == "no_results" && e.avg_results > 0) return;
                    if (o.get("statName") == "no_clicks" && e.ctr > 0) return;
                    e.tickets = e.tickets == null ? 0 : e.tickets, e.avg_results = Math.round(e.avg_results * 10) / 10;
                    var n = s % 2 === 0 ? "even" : "odd";
                    r.push(i.Object.create({
                        entry: t.filterProperty("id", e.top_entry_id)[0],
                        item: e,
                        css: n
                    })), s++
                }), this.set("content", r)
            }
        }).reopenClass({
            preservesContext: !1
        });
        e.exports = c
    }, require.modules["views/see_all_button.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("../lib/router"),
            o = i.View.extend(n("../mixins/button_support"), {
                tagName: "a",
                classNameBindings: ["activeClass"],
                click: function () {
                    var e = this.get("to");
                    s.global.emit("change", s.rootFor(e));
                    var t = this,
                        n = {
                            selected: this.getPath("parentView.activeName")
                        };
                    setTimeout(function () {
                        var t = s.forPath(e);
                        t.update(n), t.sync()
                    }, 0)
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = o
    }, require.modules["views/sort_toggle.js"] = function (e, t, n, r) {
        var i = n("./toggle_button"),
            s = i.extend({
                activeClass: function () {
                    if (this.getPath("parentView.activeName") == this.get("name")) return "active"
                }.property("parentView.activeName")

            });
        e.exports = s
    }, require.modules["views/sparkline.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("jquery.env"),
            o = n("../vendor/jquery.sparkline"),
            u = i.View.extend({
                tagName: "span",
                valuesDidChange: function () {
                    var e = this.$(),
                        t = this.get("arrayValues");
                    e.sparkline(t, {
                        width: 100,
                        height: 25,
                        lineColor: "#ccdaa6",
                        fillColor: "#ccdaa6",
                        spotColor: !1,
                        minSpotColor: !1,
                        maxSpotColor: !1
                    })
                }.observes("values.@each"),
                arrayValues: function () {
                    var e = this.get("values");
                    if (e.constructor === String) return e.split(" ");
                    if (e.constructor === Array) return e
                }.property("values")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = u
    }, require.modules["views/sparkline_chart.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("./chart"),
            o = n("./chart_title"),
            u = n("jquery.env"),
            a = n("../vendor/highcharts"),
            f = n("i18n"),
            l = n("../lib/refresh"),
            c = s.extend({
                series: {},
                createChart: function (e, t) {
                    this.chartTitle = new o(this, t), this.chartTitle.setup();
                    var n = this,
                        r = this.$(".chart-placeholder")[0];
                    u(r).mouseleave(function () {
                        n.$(".tooltip-date").hide()
                    }), a.setOptions({
                        lang: {
                            shortMonths: f.translations["date.abbr_month_names"].slice(1),
                            decimalPoint: f.t("number_format.decimal_point"),
                            thousandsSep: f.t("number_format.thousands_separator"),
                            numericSymbols: f.translations["number_format.numeric_symbols"]
                        }
                    });
                    var s = new a.Chart({
                        chart: {
                            renderTo: r,
                            type: "area",
                            height: 330,
                            marginBottom: 40,
                            spacingLeft: 40,
                            spacingRight: 40,
                            animation: {
                                duration: 500
                            },
                            events: {
                                load: function () {
                                    i.run.next(n, function () {
                                        l()
                                    })
                                }
                            }
                        },
                        credits: {
                            enabled: !1
                        },
                        plotOptions: {
                            area: {
                                fillOpacity: .04,
                                marker: {
                                    enabled: !1,
                                    lineWidth: 1.5,
                                    symbol: "circle",
                                    states: {
                                        hover: {
                                            enabled: !0,
                                            radius: 4
                                        }
                                    }
                                },
                                lineWidth: 1,
                                shadow: !1,
                                states: {
                                    hover: {
                                        enabled: !0,
                                        lineWidth: 1
                                    }
                                }
                            }
                        },
                        title: {
                            text: e,
                            margin: 40,
                            style: {
                                fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                color: "#888",
                                fontSize: "12px"
                            }
                        },
                        xAxis: {
                            type: "datetime",
                            dateTimeLabelFormats: {
                                day: f.t("date.formats.short")
                            },
                            lineWidth: 1,
                            lineColor: "#E4E4E4",
                            tickPosition: "inside",
                            tickColor: "#E4E4E4",
                            tickWidth: 1,
                            labels: {
                                y: 20,
                                style: {
                                    color: "#888",
                                    fontSize: "10px"
                                }
                            }
                        },
                        colors: ["#73D7FC", "#C3EC80"],
                        tooltip: {
                            shared: !0,
                            crosshairs: {
                                width: 1,
                                color: "#888",
                                dashStyle: "dash"
                            },
                            backgroundColor: "white",
                            borderWidth: 1,
                            borderColor: "#AAAAAA",
                            borderRadius: 2,
                            shadow: !1,
                            useHTML: !0,
                            style: {
                                fontSize: "11px",
                                lineHeight: "15px"
                            },
                            formatter: function () {
                                var e = new Date(this.points[0].key),
                                    t = this.points[0].point,
                                    r = t.series,
                                    i = n.$(".highcharts-container").offset().top - n.$(".chart-container").offset().top;
                                n.$(".tooltip-date").css({
                                    top: "%@px".fmt(i + 40),
                                    left: t.plotX + s.plotLeft - 30 + "px"
                                }).html(a.dateFormat(f.t("date.formats.short"), e)), n.$(".tooltip-date").show();
                                var o = "";
                                return o += '<div style="background-color: white; padding: 5px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px;"><table>', $.each(this.points, function (e, t) {
                                    var n = t.point.value.localize();
                                    o += "<tr><td>" + t.series.name + ':</td><td style="color: ' + t.series.color + '; text-align: right;">&nbsp;' + n + "</td></tr>"
                                }), o += "</table></div>", o
                            },
                            headerFormat: '<small style="position: fixed; top: 245px;">{point.key}</small><br/><table>',
                            pointFormat: '<tr><td style="color: {series.color}">{series.name}: </td><td style="text-align: right"><b>{point.y}</b></td></tr>',
                            footerFormat: "</table>"
                        },
                        yAxis: [{
                            lineColor: "#6B6B6B",
                            gridLineWidth: 1,
                            gridLineColor: "#E4E4E4",
                            title: {
                                text: "",
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#888",
                                    fontSize: "10px",
                                    fontWeight: "normal"
                                }
                            },
                            labels: {
                                style: {
                                    color: "#379fcf",
                                    fontSize: "10px"
                                }
                            }
                        }, {
                            lineColor: "#6B6B6B",
                            gridLineWidth: 1,
                            gridLineColor: "#E4E4E4",
                            opposite: !0,
                            title: {
                                text: "",
                                style: {
                                    fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                    color: "#888",
                                    fontSize: "10px",
                                    fontWeight: "normal"
                                }
                            },
                            labels: {
                                style: {
                                    color: "#8fad46",
                                    fontSize: "10px"
                                }
                            }
                        }],
                        legend: {
                            enabled: !1,
                            verticalAlign: "bottom",
                            borderWidth: 0,
                            align: "left",
                            floating: !0,
                            y: 0,
                            x: 75,
                            itemStyle: {
                                fontFamily: '"Lucida Sans Unicode", "Lucida Grande", "tahoma", Verdana, sans-serif',
                                color: "#333333",
                                fontSize: "11px"
                            }
                        }
                    });
                    return s
                },
                buildChart: function () {},
                statsDidFetch: function () {
                    if (!this.chartTitle) return;
                    var e = this.get("statsSources") || [],
                        t = this.get("titleSources") || [],
                        n = this;
                    e.forEach(function (e) {
                        var r = n.customTitleSource(e, t);
                        n.chartTitle.update(r || e)
                    })
                },
                customTitleSource: function (e, t) {
                    var n = t.filter(function (t, n, r) {
                        return t.name === e.name
                    });
                    return n[0]
                },
                statsDidRefetch: function () {
                    this.statsDidFetch()
                }
            });
        e.exports = c
    }, require.modules["views/stats.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = n("i18n"),
            o = n("../lib/router"),
            u = n("./reporting_period"),
            a = i.Mixin.create({
                init: function () {
                    this._super();
                    var e = this;
                    if (this.get("path") !== "testing") {
                        var t = o.forPath(this.get("path"));
                        t.ready(function () {
                            e.initStats();
                            var n = function () {
                                i.run.next(e, function () {
                                    var n = t.params(),
                                        r = parseInt(n.period, 10),
                                        i = u.GraphDataPeriods[r];
                                    e.refetchStats.call(e, i)
                                })
                            };
                            n(), t.on("change", function (t, r, i) {
                                var s = e.get("registeredRouterKeys");
                                if (s) {
                                    var o = 0;
                                    for (var u = i.length - 1; u >= 0; u--) {
                                        var a = i[u];
                                        s.indexOf(a) > -1 && o++
                                    }
                                    if (o < 1) return
                                }
                                n()
                            })
                        })
                    }
                },
                initStats: function () {
                    if (this.get("statsInitialized")) return;
                    var e = [],
                        t = [];
                    this.set("statsSources", e), this.set("titleSources", t), this.registerStats(e, t), this.set("statsInitialized", !0)
                },
                fetchStats: function () {
                    this.get("statsInitialized") || this.initStats();
                    var e = this.get("statsSources") || [],
                        t = this.get("titleSources") || [],
                        n = e.concat(t),
                        r = 0,
                        i = n.length,
                        s = this;
                    n.forEach(function (e) {
                        e.fetch().done(function () {
                            r++, r == i && s.statsDidFetch && s.statsDidFetch.call(s)
                        })
                    })
                },
                sourceForName: function (e) {
                    var t = this.get("statsSources") || [],
                        n;
                    return t.forEach(function (t) {
                        !n && t.name == e && (n = t)
                    }), n
                },
                refetchStats: function (e) {
                    var t = this.get("statsSources") || [],
                        n = this.get("titleSources") || [],
                        r = t.concat(n),
                        i = 0,
                        s = r.length,
                        o = this,
                        u = this.getPeriod(),
                        a = this.getPeriodDateRange();
                    e = $.extend(e, u, a), r.forEach(function (t) {
                        if (!o.optionSelected(t)) return;
                        t.setOptions(e), t.refetch().done(function () {
                            i++, i == s && o.statsDidRefetch && o.statsDidRefetch.call(o)
                        })
                    })
                },
                getPeriod: function () {
                    var e = o.forPath(this.get("path")),
                        t = parseInt(e.params().period, 10);
                    return u.GraphDataPeriods[t]
                },
                getPeriodDateRange: function () {
                    var e = 3,
                        t = o.forPath(this.get("path")),
                        n = t.params(),
                        r = n.start,
                        i = n.end,
                        s = {}, u = parseInt(t.params().period, 10);
                    return u == e && (r !== undefined && (s.start = parseInt(r, 10)), i !== undefined && (s.end = parseInt(i, 10))), s
                },
                optionSelected: function (e) {
                    return !0
                },
                formatData: function (e, t) {
                    return t == null && (t = this.get("statName")), t == "csr" && (e = Math.round(e * 1e4) / 100 + "%"), t == "first_response_time" && (e = Math.round(Math.round(e) / 3600 * 100) / 100, e = s.t("txt.views.reporting.x_hrs_plain", {
                        hours: e
                    })), t == "backlog" && (e = Math.round(e)), e
                },
                secondsToHms: function (e) {
                    e = Number(e);
                    var t = Math.floor(e / 3600),
                        n = Math.floor(e % 3600 / 60),
                        r = Math.floor(e % 3600 % 60);
                    return (t > 0 ? t + ":" : "") + (n > 0 ? (t > 0 && n < 10 ? "0" : "") + n + ":" : "0:") + (r < 10 ? "0" : "") + r
                }
            });
        e.exports = a
    }, require.modules["views/stats_pagination_adapter.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.Mixin.create({
                pagination: n("./widgets/pagination/pagination"),
                currentPage: 1,
                perPage: 30,
                totalPages: 0,
                changePage: function () {
                    var e = this.get("statsSources")[0];
                    e.options.query.page = this.get("currentPage"), this.set("statsSources", [e]), this.refetchStats()
                }.observes("currentPage"),
                _startPositionForCurrentPage: function () {
                    var e = this.get("currentPage"),
                        t = this.get("perPage");
                    return (e - 1) * t
                }
            });
        e.exports = s
    }, require.modules["views/toggle_button.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.View.extend(n("../mixins/button_support"), {
                tagName: "a",
                classNameBindings: ["activeClass"],
                action: "setActiveClass",
                activeClass: function () {
                    if (this.getPath("parentView.activeName") == this.get("name")) return "active"
                }.property("parentView.activeName")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = s
    }, require.modules["views/widgets/pagination/page_thumb_view.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = i.View.extend({
                tagName: "a",
                classNames: "page-link",
                content: function () {
                    return this.getPath("parentView.content")
                }.property("parentView.content"),
                didInsertElement: function () {
                    this._html(this.getPath("content.label"))
                },
                click: function (e) {
                    if (this.getPath("parentView.disabled")) return;
                    var t = this.getPath("content.action");
                    this.getPath("parentView")[t](this)
                },
                _html: function (e) {
                    this.$().html(e)
                }
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = s
    }, require.modules["views/widgets/pagination/pagination.js"] = function (e, t, n, r) {
        var i = n("ember"),
            s = 10,
            o = i.CollectionView.extend({
                tagName: "ul",
                prevNavigation: [{
                    label: "«",
                    action: "goToFirstPage"
                }, {
                    label: "‹",
                    action: "previousPage"
                }],
                nextNavigation: [{
                    label: "›",
                    action: "nextPage"
                }, {
                    label: "»",
                    action: "goToLastPage"
                }],
                content: function () {
                    var e = (this.get("pageOptions") || []).map(function (e) {
                        return {
                            label: e,
                            action: "goToPage"
                        }
                    });
                    return e.length ? [].concat(this.prevNavigation, e, this.nextNavigation) : []
                }.property("pageOptions"),
                isVisible: function () {
                    return this.get("totalPages") > 1
                }.property("totalPages"),
                itemViewClass: i.View.extend({
                    pageThumbView: n("./page_thumb_view"),
                    classNameBindings: ["active", "disabled"],
                    active: function () {
                        return this.getPath("content.label") == this.getPath("parentView.currentPage")
                    }.property("parentView.currentPage"),
                    disabled: function () {
                        var e = this.getPath("content.action");
                        return this.getPath("parentView.isFirstPage") ? e === "goToFirstPage" || e === "previousPage" : this.getPath("parentView.noMorePages") ? e === "goToLastPage" || e === "nextPage" : !1
                    }.property("parentView.currentPage"),
                    render: function (e) {
                        this._super(e);
                        var t = this.pageThumbView.create({
                            parentView: this
                        });
                        this.appendChild(t)
                    },
                    _setPage: function (e) {
                        this.getPath("parentView")._setPage(e)
                    },
                    goToPage: function (e) {
                        var t = e.$().html();
                        this._setPage(t)
                    },
                    goToFirstPage: function (e) {
                        this._setPage(1)
                    },
                    goToLastPage: function () {
                        var e = this.getPath("parentView.totalPages");
                        this._setPage(e)
                    },
                    previousPage: function () {
                        var e = this.getPath("parentView.currentPage") - 1;
                        if (e === 0) return;
                        this._setPage(e)
                    },
                    nextPage: function () {
                        var e = this.getPath("parentView.currentPage") + 1,
                            t = this.getPath("parentView.totalPages");
                        if (e > t) return;
                        this._setPage(e)
                    }
                }).reopenClass({
                    preservesContext: !1
                }),
                isFirstPage: function () {
                    return this.getPath("parentView.currentPage") === 1
                }.property("parentView.currentPage"),
                noMorePages: function () {
                    return this.getPath("parentView.currentPage") === this.getPath("parentView.totalPages")
                }.property("parentView.currentPage"),
                currentPage: function () {
                    return parseInt(this.getPath("parentView.currentPage"), 10)
                }.property("parentView.currentPage"),
                totalPages: function () {
                    return parseInt(this.getPath("parentView.totalPages"), 10)
                }.property("parentView.totalPages"),
                _setPage: function (e) {
                    this.getPath("parentView").set("currentPage", e)
                },
                pageOptions: function () {
                    var e = Math.floor(s / 2),
                        t = s - e - 1,
                        n, r, i = this.get("currentPage"),
                        o = this.get("totalPages"),
                        u = [];
                    i <= e ? n = 1 : o - i < t ? n = o - s + 1 : n = i - e, n < 1 && (n = 1), r = n + s - 1, r > o && (r = o);
                    for (var a = n, f = r; a <= f; a++) u.push(a);
                    return u
                }.property("parentView.currentPage", "parentView.totalPages")
            }).reopenClass({
                preservesContext: !1
            });
        e.exports = o
    }, require.modules["templates/advanced_analytics.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n  <div class="controls gooddata clearfix">\n    '), i = e, s = "dashboard", o = {}, u = "analytics.dashboard", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "\n    "), i = e, s = "sync", o = {}, u = "analytics.sync", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + '\n  </div>\n\n  <div class="widget gooddata">\n      <div class="widget-padding">\n        '), i = e, s = "serverError", o = r["if"], c = h.program(2, y, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.program(4, b, t), c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n\n      </div>\n  </div>\n"), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n          <div class="error">\n            <h3>\n              '), i = e, s = "txt.views.reporting.advanced_analytics_pane.error_message", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n            </h3>\n          </div>\n        "), n
            }

            function b(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n\n          "), i = e, s = "showRegister", o = r["if"], c = h.program(5, w, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.program(7, E, t), c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n\n        "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n            "), i = e, s = "register", o = {}, u = "analytics.register", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "\n          "), n
            }

            function E(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n\n            "), i = e, s = "showIFrame", o = r["if"], c = h.program(8, S, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.program(10, x, t), c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n\n          "), n
            }

            function S(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n              "), i = e, s = "iframe", o = {}, u = "analytics.iframe", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "\n            "), n
            }

            function x(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n\n              <div class="widget-container clearfix full">\n                <div class="sample-image">\n                  <div class="interm-message clearfix">\n                    '), i = e, s = "showProjectCreation", o = r["if"], c = h.program(11, T, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.noop, c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n                  </div>\n                </div>\n              </div>\n\n            "), n
            }

            function T(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n                      <div class="spinner"></div>\n                      <h3>\n                        '), i = e, s = "txt.views.reporting.advanced_analytics_pane.register_your_account", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n                      </h3>\n                      <p>\n                        "), i = e, s = "txt.views.reporting.advanced_analytics_pane.initiated", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n                      </p>\n                    "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "ready", f = r["if"], c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.noop, c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n"), o
        })
    }, require.modules["templates/analytics/dashboards.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<div class="dashboards">\n  <label>'), u = n, a = "txt.views.reporting.advanced_analytics_pane.dashboards_label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + ":</label>\n    "), u = n, a = "Zd.SelectView", f = {}, l = "dashboard-selection", f["class"] = l, l = "parentView", f.target = l, l = "parentView.dashboardsConverted", f.optionsBinding = l, l = "parentView.selectedDashboard", f.valueBinding = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</div>\n"), o
        })
    }, require.modules["templates/analytics/modal_firsttime_body.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push("<p>"), u = n, a = "txt.views.reporting.advanced_analytics_pane.takes_time", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "</p>\n"), o
        })
    }, require.modules["templates/analytics/modal_firsttime_footer.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push("<button "), u = n, a = "closeFirstTimeLightbox", f = {}, l = "Em.View.views.analytics", f.target = l, c = r.action, l = c || n.action, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "action", a, h) : u = l, s.buffer.push(g(u) + ' class="btn btn-info">\n  '), u = n, a = "public.javascripts.views.settings.screencasts.screenr_account_downgraded_close_button", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "\n</button>\n"), o
        })
    }, require.modules["templates/analytics/modal_register_body.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n  <p>\n    "), i = e, s = "txt.views.reporting.advanced_analytics_pane.click_to_create", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n  </p>\n"), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n  <p>\n    "), i = e, s = "txt.views.reporting.advanced_analytics_pane.admin_required", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n  </p>\n"), n
            }
            r = r || Ember.Handlebars
                .helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push("<p>\n  "), u = n, a = "txt.views.reporting.advanced_analytics_pane.we_can", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "\n</p>\n\n"), u = n, a = "Zd.currentUser.isAdmin", f = r["if"], c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.program(3, y, s), c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n"), o
        })
    }, require.modules["templates/analytics/modal_register_footer.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n  <button "), i = e, s = "enableGoodData", o = {}, u = "Em.View.views.register_gooddata", o.target = u, l = r.action, u = l || e.action, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "action", s, c) : i = u, t.buffer.push(m(i) + ' class="btn btn-inverse">\n    '), i = e, s = "txt.admin.helpers.tickets_helper.create_label", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n  </button>\n"), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n  <button "), i = e, s = "closeModalDialog", o = {}, u = "Em.View.views.register_gooddata", o.target = u, l = r.action, u = l || e.action, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "action", s, c) : i = u, t.buffer.push(m(i) + ' class="btn btn-info">\n    '), i = e, s = "public.javascripts.views.settings.screencasts.screenr_account_downgraded_close_button", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n  </button>\n"), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "Zd.currentUser.isAdmin", f = r["if"], c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.program(3, y, s), c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n"), o
        })
    }, require.modules["templates/analytics/modal_upgrade_body.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push("<p>"), u = n, a = "txt.views.reporting.advanced_analytics_pane.no_access", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "</p>\n"), o
        })
    }, require.modules["templates/analytics/modal_upgrade_footer.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push("<button "), u = n, a = "closeModalDialog", f = {}, l = "Em.View.views.register_gooddata", f.target = l, c = r.action, l = c || n.action, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "action", a, h) : u = l, s.buffer.push(g(u) + ' class="btn btn-info">\n  '), u = n, a = "public.javascripts.views.settings.screencasts.screenr_account_downgraded_close_button", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "\n</button>\n"), o
        })
    }, require.modules["templates/analytics/register_gooddata.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n    <p>\n      "), i = e, s = "txt.views.reporting.advanced_analytics_pane.legacy_message", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n    </p>\n  "), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n    <p>\n      "), i = e, s = "txt.views.reporting.advanced_analytics_pane.about", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n    </p>\n    "), i = e, s = "needUpgrade", o = r["if"], c = h.program(4, b, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.program(6, w, t), c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n  "), n
            }

            function b(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n      <button "), i = e, s = "upgrade", l = r.action, o = l || e.action, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "action", s, c) : i = o, t.buffer.push(m(i) + ' class="btn btn-warning">\n        '), i = e, s = "txt.views.reporting.advanced_analytics_pane.upgrade_now", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n      </button>\n    "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n      <button "), i = e, s = "showModal", l = r.action, o = l || e.action, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "action", s, c) : i = o, t.buffer.push(m(i) + ' class="btn btn-warning">\n        '), i = e, s = "txt.views.reporting.advanced_analytics_pane.enable_button", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "\n      </button>\n    "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div class="enable-gd">\n  <h2>\n    '), u = n, a = "txt.views.reporting.advanced_analytics_pane.name", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "\n  </h2>\n  <hr/>\n  "), u = n, a = "parentView.showLegacyMessage", f = r["if"], c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.program(3, y, s), c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n\n</div>\n\n<div class="widget-container clearfix full">\n  <div class="sample-image">\n    <h1>'), u = n, a = "txt.views.reporting.advanced_analytics_pane.sample", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "</h1>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/analytics/sync_time.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<div class="sync-time">\n  <label>'), u = n, a = "txt.views.reporting.advanced_analytics_pane.sync_time_label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + ":</label>\n    "), u = n, a = "Zd.SelectView", f = {}, l = "time-selection", f["class"] = l, l = "parentView", f.target = l, l = "timeOptions", f.optionsBinding = l, l = "timeSelected", f.valueBinding = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</div>\n"), o
        })
    }, require.modules["templates/app.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div id=​"wrappers" class=​"reporting">​\n  <div id=​"main_panes">\n    <section class="main_panes split_pane reporting">\n      <header class="sub-nav">\n        '), u = n, a = "buttons", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + '\n      </header>\n\n      <div class="pane section parent">\n        '), u = n, a = "panes", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + "\n      </div>\n    </section>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/forum.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return u = n, a = "period", f = {}, l = "forum.period", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "forumStatsView", f = {}, l = "forum.forum_stats", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n"), o
        })
    }, require.modules["templates/forum/forum_stats_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set forum-tab topics" data-attr-series="entry_create">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.forum_pane.topics_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set forum-tab views" data-attr-series="entry_view">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.forum_pane.views_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function E(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set forum-tab votes" data-attr-series="vote_create">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.forum_pane.votes_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function S(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set forum-tab subscriptions" data-attr-series="watching_entry_create">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.forum_pane.subscriptions_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function x(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set forum-tab comments" data-attr-series="post_create">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.forum_pane.comments_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget">\n  <div class="widget-padding">\n    <h5 class="header">'), u = n, a = "txt.views.reporting.forum_pane.header", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h5>\n    <div class="stat-row">\n      '), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "entry_create", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "entry_view", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "vote_create", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "watching_entry_create", f.name = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "post_create", f.name = l, c = r.view, l = c || n.view, h = p.program(9, x, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n    </div>\n    <div class="widget-container clearfix full">\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n        <div class="tooltip-date"></div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class="widget">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "topic", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</h4>\n    <div class="widget-container full">\n      <div class="clearfix"></div>\n      <ul class="articles widget-list">\n        '), u = n, a = "table", f = {}, l = "entry_create", f.name = l, l = "entry_create", f.statName = l, l = "forum.forum_stats.entry_create", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n        "), u = n, a = "table", f = {}, l = "entry_view", f.name = l, l = "entry_view", f.statName = l, l = "forum.forum_stats.entry_view", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n        "), u = n, a = "table", f = {}, l = "vote_create", f.name = l, l = "vote_create", f.statName = l, l = "forum.forum_stats.vote_create", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n        "), u = n, a = "table", f = {}, l = "watching_entry_create", f.name = l, l = "watching_entry_create", f.statName = l, l = "forum.forum_stats.watching_entry_create", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n        "), u = n, a = "table", f = {}, l = "post_create", f.name = l, l = "post_create", f.statName = l, l = "forum.forum_stats.post_create", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n      </ul>\n    </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/forum/forum_table.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n  "), i = e, s = "title", o = r["if"], c = h.program(2, y, t), c.hash = {}, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.noop, c.data = t, i = o.call(e, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n"), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n    <li class="article widget-item top_article">\n      <h4 class="article_title"><a '), i = {}, s = "link", i.href = s, l = r.bindAttr, s = l || e.bindAttr, c = {}, c.hash = i, c.contexts = [], c.data = t, typeof s === p ? i = s.call(e, c) : s === v ? i = d.call(e, "bindAttr", c) : i = s, t.buffer.push(m(i) + ' target="_blank">'), i = e, s = "title", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + " ("), i = e, s = "statsValue", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + ")</a></h4>\n      <p><b>"), i = e, s = "submitter.name", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + "</b> "), i = e, s = "createdAtFormatted", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + " "), i = e, s = "txt.views.reporting.forum_pane.comments_info", o = {}, u = "postsCount", o.posts_countBinding = u, l = r.t, u = l || e.t, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "t", s, c) : i = u, t.buffer.push(m(i) + "</p>\n      <p><b>"), i = e, s = "forum.title", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + "</b></p>\n    </li>\n  "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "content", f = r.each, c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.noop, c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n<tr>\n  <td colspan="100%">\n    <div class="pagination pagination-centered">\n      '), u = n, a = "pagination", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + "\n    </div>\n  </td>\n</tr>\n"), o
        })
    }, require.modules["templates/leaderboard.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n  "), i = e, s = "period", o = {}, u = "leaderboard.period", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "\n  "), i = e, s = "global", o = {}, u = "leaderboard.global", o.path = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "\n"), n
            }

            function y(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n  <div class="widget">\n    <div class="widget-padding">\n      <div class="widget-container clearfix full">\n        <h5>'), i = e, s = "txt.views.reporting.leaderboard_pane.no_access", l = r.t, o = l || e.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "t", s, c) : i = o, t.buffer.push(m(i) + "</h5>\n      </div>\n    </div>\n  </div>\n"), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "accessible", f = r["if"], c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.program(3, y, s), c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n"), o
        })
    }, require.modules["templates/leaderboard/agent_table.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n  <tr "), i = {}, s = "css", i["class"] = s, l = r.bindAttr, s = l || e.bindAttr, c = {}, c.hash = i, c.contexts = [], c.data = t, typeof s === p ? i = s.call(e, c) : s === v ? i = d.call(e, "bindAttr", c) : i = s, t.buffer.push(m(i) + '>\n    <td width="10%">'), i = e, s = "position", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n    <td width="30%" align="left"><span><a '), i = {}, s = "user.link", i.href = s, l = r.bindAttr, s = l || e.bindAttr, c = {}, c.hash = i, c.contexts = [], c.data = t, typeof s === p ? i = s.call(e, c) : s === v ? i = d.call(e, "bindAttr", c) : i = s, t.buffer.push(m(i) + ' class="link">'), i = e, s = "user.name", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</a></span></td>\n    <td width="30%" align="center">'), i = e, s = "value", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n    <td width="30%" align="center">'), i = e, s = "sparkline", o = {}, l = r.stats, u = l || e.stats, o.values = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "</td>\n  </tr>\n"), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "content", f = r.each, c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.noop, c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n<tr>\n  <td colspan="100%">\n    <div class="pagination pagination-centered">\n      '), u = n, a = "pagination", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + "\n    </div>\n  </td>\n</tr>\n"), o
        })
    }, require.modules["templates/leaderboard/agent_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.groups_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.agents_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="main-title">\n  <h3 class="account-title">'), u = n, a = "currentAccount.name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</h3>\n  <div class="main-nav">\n    '), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "groups", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push(" |\n    "), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "agents", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  </div>\n</div>\n"), u = n, a = "tabs", f = {}, l = "leaderboard.global.agents.tabs", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n<h5 class="header bordered">'), u = n, a = "txt.views.reporting.leaderboard_pane.global_top_agents", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h5>\n<table width="100%" class="statsTable">\n  '), u = n, a = "table", f = {}, l = "solve_count", f.name = l, l = "solve_count", f.statName = l, l = "Integer", f.value = l, l = "true", f.statDesc = l, l = "leaderboard.global.agents.solve_count", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "first_response_time", f.name = l, l = "first_response_time", f.statName = l, l = "Hours", f.value = l, l = "false", f.statDesc = l, l = "leaderboard.global.agents.first_response_time", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "touches", f.name = l, l = "touches", f.statName = l, l = "Integer", f.value = l, l = "true", f.statDesc = l, l = "leaderboard.global.agents.touches", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "csr", f.name = l, l = "csr", f.statName = l, l = "Percentage", f.value = l, l = "true", f.statDesc = l, l = "leaderboard.global.agents.csr", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</table>\n"), o
        })
    }, require.modules["templates/leaderboard/drilldown_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n      "), i = e, s = "currentAccount.name", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + "\n  	"), n
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.groups_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function E(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.agents_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="main-title">\n  <h3 class="account-title">\n  	'), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "agents", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push(" > "), u = n, a = "parentView.group_name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '\n  </h3>\n  <div class="main-nav">\n    '), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "groups", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push(" |\n    "), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "agents", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  </div>\n</div>\n"), u = n, a = "tabs", f = {}, l = "leaderboard.global.drilldown.tabs", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n<h5 class="header bordered">'), u = n, a = "parentView.group_name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</h5>\n<table width="100%" class="statsTable">\n  '), u = n, a = "table", f = {}, l = "solve_count", f.name = l, l = "solve_count", f.statName = l, l = "leaderboard.global.drilldown.solve_count", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "first_response_time", f.name = l, l = "first_response_time", f.statName = l, l = "leaderboard.global.drilldown.first_response_time", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "touches", f.name = l, l = "touches", f.statName = l, l = "leaderboard.global.drilldown.touches", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "csr", f.name = l, l = "csr", f.statName = l, l = "leaderboard.global.drilldown.csr", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</table>\n"), o
        })
    }, require.modules["templates/leaderboard/global.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<div class="widget">\n  <div class="widget-padding">\n    <h5 class="header">'), u = n, a = "txt.views.reporting.nav.leaderboard", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "</h5>\n    "), u = n, a = "agentView", f = {}, l = "agents", f.name = l, l = "leaderboard.global.agents", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n    "), u = n, a = "groupView", f = {}, l = "groups", f.name = l, l = "leaderboard.global.groups", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n    "), u = n, a = "drilldownView", f = {}, l = "drilldown", f.name = l, l = "leaderboard.global.drilldown", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/leaderboard/group_table.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function y(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n  "), i = e, s = "Ember.View", o = {}, u = "this", o.contentBinding = u, l = r
                    .css, u = l || e.css, o["class"] = u, u = "tr", o.tagName = u, l = r.view, u = l || e.view, c = h.program(2, b, t), c.hash = o, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.noop, c.data = t, l && typeof u === p ? i = u.call(e, s, c) : i = g.call(e, u, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n"), n
            }

            function b(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n    <td width="10%">'), i = e, s = "content.position", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n    <td width="30%" align="left">\n      '), i = e, s = "content.toggleButton", o = {}, u = "parentView.parentView.parentView.parentView", o.target = u, u = "drilldown", o.name = u, l = r.content, u = l || e.content, u = u === null || u === undefined || u === !1 ? u : u.user, o.content = u, u = "link", o["class"] = u, l = r.view, u = l || e.view, c = h.program(3, w, t), c.hash = o, c.contexts = [], c.contexts.push(i), c.fn = c, c.inverse = h.noop, c.data = t, l && typeof u === p ? i = u.call(e, s, c) : i = g.call(e, u, s, c), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n    </td>\n    <td width="30%" align="center">'), i = e, s = "content.value", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n    <td width="30%" align="center">'), i = e, s = "content.sparkline", o = {}, l = r.content, u = l || e.content, u = u === null || u === undefined || u === !1 ? u : u.stats, o.values = u, l = r.view, u = l || e.view, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "view", s, c) : i = u, t.buffer.push(m(i) + "</td>\n  "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n        "), i = e, s = "parentView.content.user.name", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + "\n      "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression,
                g = r.blockHelperMissing;
            return u = n, a = "content", f = r.each, c = h.program(1, y, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.noop, c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n<tr>\n  <td colspan="100%">\n    <div class="pagination pagination-centered">\n      '), u = n, a = "pagination", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + "\n    </div>\n  </td>\n</tr>\n"), o
        })
    }, require.modules["templates/leaderboard/group_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.groups_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.agents_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="main-title">\n  <h3 class="account-title">'), u = n, a = "currentAccount.name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</h3>\n  <div class="main-nav">\n    '), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "groups", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push(" |\n    "), u = n, a = "parentView.toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "agents", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  </div>\n</div>\n"), u = n, a = "tabs", f = {}, l = "leaderboard.global.groups.tabs", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n<h5 class="header bordered">'), u = n, a = "txt.views.reporting.leaderboard_pane.global_top_groups", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h5>\n<table width="100%" class="statsTable">\n  '), u = n, a = "table", f = {}, l = "solve_count", f.name = l, l = "solve_count", f.statName = l, l = "Integer", f.value = l, l = "leaderboard.global.groups.solve_count", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "first_response_time", f.name = l, l = "first_response_time", f.statName = l, l = "Hours", f.value = l, l = "leaderboard.global.groups.first_response_time", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "touches", f.name = l, l = "touches", f.statName = l, l = "Integer", f.value = l, l = "leaderboard.global.groups.touches", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n  "), u = n, a = "table", f = {}, l = "csr", f.name = l, l = "csr", f.statName = l, l = "Percentage", f.value = l, l = "leaderboard.global.groups.csr", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</table>\n"), o
        })
    }, require.modules["templates/leaderboard/headers.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.solved_header", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.first_response_time_header", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function E(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.agent_touches_header", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function S(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.leaderboard_pane.satisfaction_header", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push("<th>"), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "solve_count", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("</th>\n<th>"), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "first_response_time", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("</th>\n<th>"), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "touches", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("</th>\n<th>"), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "csr", f.name = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("</th>\n"), o
        })
    }, require.modules["templates/leaderboard/tabs.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n    <div class="stat-set leaderboard-tab solve_count" data-attr-series="solve_count">\n      <span class="value">'), i = e, s = "parentView.solve_count", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + '</span>\n      <span class="title">'), i = e, s = "txt.views.reporting.leaderboard_pane.solved_tickets_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n      <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n    </div>\n  "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n    <div class="stat-set leaderboard-tab first_response_time" data-attr-series="first_response_time">\n      <span class="value">'), i = e, s = "parentView.first_response_time", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + '</span>\n      <span class="title">'), i = e, s = "txt.views.reporting.overview_pane.first_reply_time_widget.label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n      <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_average", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n    </div>\n  "), n
            }

            function E(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n    <div class="stat-set leaderboard-tab csr" data-attr-series="csr">\n      <span class="value">'), i = e, s = "parentView.csr", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + '</span>\n      <span class="title">'), i = e, s = "txt.views.reporting.leaderboard_pane.satisfaction_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n      <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_average", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n    </div>\n  "), n
            }

            function S(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n    <div class="stat-set leaderboard-tab touches" data-attr-series="touches">\n      <span class="value">\n        '), i = {}, s = "parentView.parentView.agentView", i.isVisibleBinding = s, c = r.view, s = c || e.view, h = p.program(8, x, t), h.hash = i, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = t, c && typeof s === d ? i = s.call(e, h) : i = y.call(e, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push("\n        "), i = {}, s = "parentView.parentView.groupView", i.isVisibleBinding = s, c = r.view, s = c || e.view, h = p.program(10, T, t), h.hash = i, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = t, c && typeof s === d ? i = s.call(e, h) : i = y.call(e, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n        </span>\n      <span class="title">'), i = e, s = "txt.views.reporting.leaderboard_pane.agent_touches_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n      <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n    </div>\n  "), n
            }

            function x(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n          "), i = e, s = "parentView.parentView.touches", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + "\n        "), n
            }

            function T(e, t) {
                t.buffer.push("\n          ----\n        ")
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="stat-row">\n  '), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "solve_count", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  "), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "first_response_time", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  "), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "csr", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n  "), u = n, a = "toggleButton", f = {}, l = "parentView.parentView", f.target = l, l = "touches", f.name = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n</div>\n"), o
        })
    }, require.modules["templates/overview.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return u = n, a = "period", f = {}, l = "overview.period", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "ticketStatsView", f = {}, l = "overview.ticket_stats", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "ticketsByChannels", f = {}, l = "overview.tickets_by_channel", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "benchmark", f = {}, l = "overview.benchmark", f.path = l, l = "maximum-widget", f["class"] = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "timeToFirstReply", f = {}, l = "overview.time_to_first_reply", f.path = l, l = "fixed-widget", f["class"] = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n<br/>\n\n"), u = n, a = "topArticles", f = {}, l = "overview.top_articles", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "topSearches", f = {}, l = "overview.top_searches", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "topAgents", f = {}, l = "overview.top_agents", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n"), o
        })
    }, require.modules["templates/overview/benchmark.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="global-info">\n        '), i = e, s = "txt.views.reporting.overview_pane.benchmark_widget.global_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n        </div>\n      "), n
            }

            function w(e, t) {
                t.buffer.push('\n          <div class="chart-placeholder"></div>\n        ')
            }

            function E(e, t) {
                t.buffer.push('\n          <div class="chart-placeholder"></div>\n        ')
            }

            function S(e, t) {
                t.buffer.push('\n          <div class="chart-placeholder"></div>\n        ')
            }

            function x(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n                "), i = e, s = "txt.views.reporting.overview_pane.benchmark_widget.global_average", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n              "), n
            }

            function T(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n                "), i = e, s = "txt.views.reporting.overview_pane.benchmark_widget.industry_average", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n              "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget third">\n  <div class="widget-padding">\n    <div class="header bordered clearfix">\n      <div class="left">\n        <h4 class="title relative">\n          <span>'), u = n, a = "txt.views.reporting.overview_pane.benchmark_widget.label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</span>\n          <a class="external-link" href="http://www.zendesk.com/product/features/benchmark" target="_blank">&nbsp;</a>\n        </h4>\n      </div>\n      <div class="right relative">\n        <div class="filter-container relative clearfix">\n          '), u = n, a = "industryFilter", c = r.view, f = c || n.view, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "view", a, h) : u = f, s.buffer.push(g(u) + "\n        </div>\n      </div>\n      "), u = n, a = "global", f = r["if"], h = p.program(1, b, s), h.hash = {}, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, u = f.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n    </div>\n    <div class="widget-container">\n      <div class="chart-container clearfix">\n        '), u = n, a = "satRating", f = {}, l = "overview.benchmark.sat_rating", f.path = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "timeToFirstReply", f = {}, l = "overview.benchmark.time_to_first_reply", f.path = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "newTickets", f = {}, l = "overview.benchmark.new_tickets", f.path = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n      </div>\n      <div class="benchmark legend-container">\n        <div class="table">\n          <ul class="legend">\n            <li class="your-help-desk">\n              <span class="color"></span>\n              '), u = n, a = "txt.views.reporting.overview_pane.benchmark_widget.your_help_desk", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '\n            </li>\n            <li class="industry-average">\n              <span class="color"></span>\n              '), u = n, a = "global", f = r["if"], h = p.program(9, x, s), h.hash = {}, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.program(11, T, s), h.data = s, u = f.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/overview/ticket_stats_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div class="widget">\n  <div class="widget-padding">\n    <h5 class="header">'), u = n, a = "txt.views.reporting.overview_pane.header", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</h5>\n    <div class="stat-row">\n      <div class="stat-set created_count" data-attr-series="created_count">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.new_tickets_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_total", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n      <div class="stat-set solve_count" data-attr-series="solve_count">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.solved_tickets_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_total", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n      <div class="stat-set backlog" data-attr-series="backlog">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.backlog_tickets_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_now", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n      <div class="stat-set touches" data-attr-series="touches">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.agent_touches_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_total", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n      <div class="stat-set csr" data-attr-series="csr">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.sat_rating_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_average", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n      <div class="stat-set first_response_time" data-attr-series="first_response_time">\n        <span class="value"></span>\n        <span class="title">'), u = n, a = "txt.views.reporting.overview_pane.first_reply_time_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n        <span class="units">'), u = n, a = "txt.views.reporting.overview_pane.stat_helper_average", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</span>\n      </div>\n    </div>\n    <div class="widget-container clearfix full">\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n        <div class="tooltip-date">\n          Jun 23\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n'), o
        })
    }, require.modules["templates/overview/tickets_by_channels.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div class="widget third tickets-by-channel">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "txt.views.reporting.overview_pane.tickets_by_channel_widget.label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</h4>\n    <div class="widget-container">\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n      </div>\n    </div>\n  </div>\n</div>\n'), o
        })
    }, require.modules["templates/overview/time_to_first_reply.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div class="widget third">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "txt.views.reporting.overview_pane.first_reply_time_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</h4>\n    <div class="widget-container">\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n      </div>\n    </div>\n  </div>\n</div>\n'), o
        })
    }, require.modules["templates/overview/top_agents.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_agents_widget.tickets_solved", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_agents_widget.satisfaction", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function E(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_agents_widget.touches", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function S(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.see_all_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget third">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "txt.views.reporting.overview_pane.top_agents_widget.label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h4>\n      <div class="widget-container horizontally-flush shorter">\n        <div class="by-categories horizontally-padded">\n          '), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "ticketsSolved", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n          "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "satisfaction", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n          "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "touches", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n        </div>\n        <div class="widget-table">\n          <table>\n            '), u = n, a = "tableSection", f = {}, l = "ticketsSolved", f.name = l, l = "solve_count", f.statName = l, l = "overview.top_agents.tickets_solved", f.path = l, l = "templates/overview/top_agents/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n            "), u = n, a = "tableSection", f = {}, l = "satisfaction", f.name = l, l = "csr", f.statName = l, l = "overview.top_agents.satisfaction", f.path = l, l = "templates/overview/top_agents/percentage_row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n            "), u = n, a = "tableSection", f = {}, l = "touches", f.name = l, l = "touches", f.statName = l, l = "overview.top_agents.touches", f.path = l, l = "templates/overview/top_agents/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n          </table>\n          <div class="by-actions horizontally-padded">\n            '), u = n, a = "seeAllButton", f = {}, l = "leaderboard", f.to = l, l = "reporting.settings.hasAnalytics", f.isVisibleBinding = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n          </div>\n        </div>\n      </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/overview/top_agents/percentage_row.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<td class="truncates"><div><a '), u = {}, a = "content.link", u.href = a, c = r.bindAttr, a = c || n.bindAttr, h = {}, h.hash = u, h.contexts = [], h.data = s, typeof a === d ? u = a.call(n, h) : a === m ? u = v.call(n, "bindAttr", h) : u = a, s.buffer.push(g(u) + ">"), u = n, a = "content.user.name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</a></div></td>\n<td align="right" class="truncates"><div>'), u = n, a = "content.item.value", c = r.percentage, f = c || n.percentage, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "percentage",
                a, h) : u = f, s.buffer.push(g(u) + "</div></td>\n"), o
        })
    }, require.modules["templates/overview/top_agents/row.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<td class="truncates"><div><a '), u = {}, a = "content.link", u.href = a, c = r.bindAttr, a = c || n.bindAttr, h = {}, h.hash = u, h.contexts = [], h.data = s, typeof a === d ? u = a.call(n, h) : a === m ? u = v.call(n, "bindAttr", h) : u = a, s.buffer.push(g(u) + ">"), u = n, a = "content.user.name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</a></div></td>\n<td align="right" class="truncates"><div>'), u = n, a = "content.item.value", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + "</div></td>\n"), o
        })
    }, require.modules["templates/overview/top_articles.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_articles_by_views_widget.by_view", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_articles_by_views_widget.by_vote", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function E(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_articles_by_views_widget.comments", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function S(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.see_all_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget third">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "txt.views.reporting.overview_pane.top_articles_by_views_widget.label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h4>\n    <div class="widget-container horizontally-flush shorter">\n      <div class="by-categories horizontally-padded">\n        '), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "entry_view", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "vote_create", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "post_create", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n      </div>\n      <div class="widget-table">\n        <table>\n          '), u = n, a = "tableSection", f = {}, l = "entry_view", f.name = l, l = "entry_view", f.statName = l, l = "overview.top_articles.entry_view", f.path = l, l = "templates/overview/top_articles/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n          "), u = n, a = "tableSection", f = {}, l = "vote_create", f.name = l, l = "vote_create", f.statName = l, l = "overview.top_articles.vote_create", f.path = l, l = "templates/overview/top_articles/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n          "), u = n, a = "tableSection", f = {}, l = "post_create", f.name = l, l = "post_create", f.statName = l, l = "overview.top_articles.post_create", f.path = l, l = "templates/overview/top_articles/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n        </table>\n        <div class="by-actions horizontally-padded">\n          '), u = n, a = "seeAllButton", f = {}, l = "forum", f.to = l, l = "reporting.settings.hasForumAnalytics", f.isVisibleBinding = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/overview/top_articles/row.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<td class="truncates">\n  <div>\n    <a '), u = {}, a = "content.id", u["data-attr-id"] = a, a = "content.link", u.href = a, c = r.bindAttr, a = c || n.bindAttr, h = {}, h.hash = u, h.contexts = [], h.data = s, typeof a === d ? u = a.call(n, h) : a === m ? u = v.call(n, "bindAttr", h) : u = a, s.buffer.push(g(u) + ' class="truncated" target="_blank">'), u = n, a = "content.title", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + "</a>\n  </div>\n</td>\n"), o
        })
    }, require.modules["templates/overview/top_searches.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_searches_widget.total", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function w(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_searches_widget.tickets_created", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function E(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.top_searches_widget.with_no_results", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }

            function S(e, t) {
                var n, i, s;
                n = e, i = "txt.views.reporting.overview_pane.see_all_link", c = r.t, s = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(n), h.data = t, typeof s === d ? n = s.call(e, i, h) : s === m ? n = v.call(e, "t", i, h) : n = s, t.buffer.push(g(n))
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget third">\n  <div class="widget-padding">\n    <h4 class="header bordered">'), u = n, a = "txt.views.reporting.overview_pane.top_searches_widget.label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + '</h4>\n    <div class="widget-container horizontally-flush shorter">\n      <div class="by-categories horizontally-padded">\n        '), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "searches", f.name = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "tickets", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "no_results", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n      </div>\n      <div class="widget-table">\n        <table>\n          '), u = n, a = "tableSection", f = {}, l = "searches", f.name = l, l = "searches", f.order = l, l = "overview.top_searches.searches", f.path = l, l = "templates/overview/top_searches/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n          "), u = n, a = "tableSection", f = {}, l = "tickets", f.name = l, l = "tickets", f.order = l, l = "overview.top_searches.tickets", f.path = l, l = "templates/overview/top_searches/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n          "), u = n, a = "tableSection", f = {}, l = "no_results", f.name = l, l = "avg_results", f.order = l, l = "overview.top_searches.no_results", f.path = l, l = "templates/overview/top_searches/row", f.itemViewPath = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + '\n        </table>\n        <div class="by-actions horizontally-padded">\n          '), u = n, a = "seeAllButton", f = {}, l = "search", f.to = l, l = "reporting.settings.hasSearchAnalytics", f.isVisibleBinding = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/overview/top_searches/row.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return s.buffer.push('<td class="truncates"><div>'), u = n, a = "content.string", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + '</div></td>\n<td align="right" class="truncates"><div>'), u = n, a = "content.searches", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + "</div></td>\n"), o
        })
    }, require.modules["templates/period.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return s.buffer.push('<div class="widget widget-header-container">\n  <p class="reporting-period-label">'), u = n, a = "txt.views.reporting.period.reporting_period", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + "&nbsp;</p>\n  "), u = n, a = "reportingPeriod", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + '\n  <div class="custom-period">\n		<p class="left-space reporting-period-label">'), u = n, a = "txt.views.reporting.period.start_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '&nbsp;</p>\n		<input type="text" class="start-date datepicker-field" data-field=".start-date-alt"/>\n    <input type="hidden" class="start-date-alt"/>\n		<p class="left-space reporting-period-label">'), u = n, a = "txt.views.reporting.period.end_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '&nbsp;</p>\n		<input type="text" class="end-date datepicker-field" data-field=".end-date-alt"/>\n    <input type="hidden" class="end-date-alt"/>\n		<button id="update-custom-period" class="btn left-space">'), u = n, a = "txt.views.reporting.period.update_label", l = r.t, f = l || n.t, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "t", a, c) : u = f, s.buffer.push(m(u) + '</button>\n		<p id="custom-period-error" class="left-space reporting-period-label"></p>\n  </div>\n  <div class="clearfix"></div>\n</div>\n'), o
        })
    }, require.modules["templates/reporting.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                t.buffer.push('\n          <a href="javascript:void(0);">Development</a>\n        ')
            }

            function w(e, t) {
                t.buffer.push('\n          <a href="javascript:void(0);">Satisfaction</a>\n        ')
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="pane left section reporting">\n  <div class="stacked_menu">\n    <div class="section">\n      <div class="title">'), u = n, a = "txt.views.reporting.reporting_pane.header", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "</div>\n      <ul>\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "163201", f.name = l, l = "li", f.tagName = l, l = "task settings", f.classNames = l, c = r.view, l = c || n.view, h = p.program(1, b, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "362122", f.name = l, l = "li", f.tagName = l, l = "task settings", f.classNames = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n      </ul>\n    </div>\n  </div>\n</div>\n\n<div class="pane right section reporting">\n  '), u = n, a = "reportDisplay", f = {}, l = "reporting.reportDisplay", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n</div>\n"), o
        })
    }, require.modules["templates/reporting/report_display.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n                <td>"), i = e, s = "name", o = {}, u = "true", o.escaped = u, c = r._triageMustache, u = c || e._triageMustache, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "_triageMustache", s, h) : i = u, t.buffer.push(g(i) + "</td>\n              "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n            "), i = e, s = "content.body", c = r.unbound, o = c || e.unbound, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "unbound", s, h) : i = o, t.buffer.push(g(i) + "\n          "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget">\n  <div class="widget-padding">\n    <h5 class="header">'), u = n, a = "name", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + " ("), u = n, a = "last_run_at", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + ')</h5>\n    <div class="widget-container clearfix full">\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n        <div class="tooltip-date"></div>\n      </div>\n      <div class="widget-table">\n        <table>\n          <thead>\n            <tr>\n              <td>'), u = n, a = "txt.views.reporting.reporting_pane.date_label", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "</td>\n              "), u = n, a = "legends", f = r.each, h = p.program(1, b, s), h.hash = {}, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, u = f.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n            </tr>\n          </thead>\n          "), u = n, a = "reportDisplayCollection", f = {}, l = "reportResult", f.contentBinding = l, l = "tbody", f.tagName = l, l = "tr", f.itemTagName = l, c = r.collection, l = c || n.collection, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n        </table>\n      </div>\n    </div>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/search.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression;
            return u = n, a = "period", f = {}, l = "search.period", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n\n"), u = n, a = "searchStatsView", f = {}, l = "search.search_stats", f.path = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n"), o
        })
    }, require.modules["templates/search/search_stats_view.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function b(e, t) {
                var n = "",
                    i, s;
                return t.buffer.push('\n        <a class="csv" '), i = {}, s = "csv", i.href = s, c = r.bindAttr, s = c || e.bindAttr, h = {}, h.hash = i, h.contexts = [], h.data = t, typeof s === d ? i = s.call(e, h) : s === m ? i = v.call(e, "bindAttr", h) : i = s, t.buffer.push(g(i) + ">CSV</a>\n      "), n
            }

            function w(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set search-tab searches" data-attr-series="searches">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.search_pane.total_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function E(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set search-tab no-results" data-attr-series="no_results">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.search_pane.with_no_results_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function S(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set search-tab no-clicks" data-attr-series="no_clicks">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.search_pane.with_no_clicks_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function x(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <div class="stat-set search-tab tickets" data-attr-series="tickets">\n          <span class="value"></span>\n          <span class="title">'), i = e, s = "txt.views.reporting.search_pane.tickets_created_label", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</span>\n          <span class="units">'), i = e, s = "txt.views.reporting.overview_pane.stat_helper_total", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</span>\n        </div>\n      "), n
            }

            function T(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n        "), i = e, s = "Ember.Select", o = {}, u = "percentageDropdown", o["class"] = u, u = "parentView.content", o.contentBinding = u, u = "parentView.searches", o.selectionBinding = u, u = "content.label", o.optionLabelPath = u, u = "content.value", o.optionValuePath = u, c = r.view, u = c || e.view, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "view", s, h) : i = u, t.buffer.push(g(i) + "\n      "), n
            }

            function N(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n        "), i = e, s = "Ember.Checkbox", o = {}, u = "parentView.feedbackTab", o.checkedBinding = u, c = r.view, u = c || e.view, h = {}, h.hash = o, h.contexts = [], h.contexts.push(i), h.data = t, typeof u === d ? i = u.call(e, s, h) : u === m ? i = v.call(e, "view", s, h) : i = u, t.buffer.push(g(i) + " "), i = e, s = "txt.views.reporting.search_pane.feedback_tab_only", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n      "), n
            }

            function C(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push('\n        <tr>\n          <th width="13%" align="left">'), i = e, s = "txt.views.reporting.search_pane.search_string_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="13%" align="right">\n            '), i = e, s = "parentView.toggleButton", o = {}, u = "parentView.parentView", o.target = u, u = "searches", o.name = u, u = !0, o.sort = u, c = r.view, u = c || e.view, h = p.program(16, k, t), h.hash = o, h.contexts = [], h.contexts.push(i), h.fn = h, h.inverse = p.noop, h.data = t, c && typeof u === d ? i = u.call(e, s, h) : i = y.call(e, u, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n          </th>\n          <th width="13%" align="right">\n            '), i = e, s = "parentView.toggleButton", o = {}, u = "parentView.parentView", o.target = u, u = "avg_results", o.name = u, u = !0, o.sort = u, c = r.view, u = c || e.view, h = p.program(18, L, t), h.hash = o, h.contexts = [], h.contexts.push(i), h.fn = h, h.inverse = p.noop, h.data = t, c && typeof u === d ? i = u.call(e, s, h) : i = y.call(e, u, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n          </th>\n          <th width="13%" align="right">\n            '), i = e, s = "parentView.toggleButton", o = {}, u = "parentView.parentView", o.target = u, u = "ctr", o.name = u, u = !0, o.sort = u, c = r.view, u = c || e.view, h = p.program(20, A, t), h.hash = o, h.contexts = [], h.contexts.push(i), h.fn = h, h.inverse = p.noop, h.data = t, c && typeof u === d ? i = u.call(e, s, h) : i = y.call(e, u, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n          </th>\n          <th width="13%" align="right">\n            '), i = e, s = "parentView.toggleButton", o = {}, u = "parentView.parentView", o.target = u, u = "tickets", o.name = u, u = !0, o.sort = u, c = r.view, u = c || e.view, h = p.program(22, O, t), h.hash = o, h.contexts = [], h.contexts.push(i), h.fn = h, h.inverse = p.noop, h.data = t, c && typeof u === d ? i = u.call(e, s, h) : i = y.call(e, u, s, h), (i || i === 0) && t.buffer.push(i), t.buffer.push('\n          </th>\n          <th width="35%" align="left">'), i = e, s = "txt.views.reporting.search_pane.top_clicked_result_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</th>\n        </tr>\n      "), n
            }

            function k(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n              "), i = e, s = "txt.views.reporting.search_pane.searches_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n            "), n
            }

            function L(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n              "), i = e, s = "txt.views.reporting.search_pane.avg_number_of_results_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n            "), n
            }

            function A(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n              "), i = e, s = "txt.views.reporting.search_pane.clickthrough_rate_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n            "), n
            }

            function O(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push("\n              "), i = e, s = "txt.views.reporting.search_pane.tickets_created_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "\n            "), n
            }

            function M(e, t) {
                var n = "",
                    i, s, o;
                return t.buffer.push('\n        <tr>\n          <th width="13%" align="left">'), i = e, s = "txt.views.reporting.search_pane.search_string_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="13%" align="right">'), i = e, s = "txt.views.reporting.search_pane.searches_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="13%" align="right">'), i = e, s = "txt.views.reporting.search_pane.avg_number_of_results_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="13%" align="right">'), i = e, s = "txt.views.reporting.search_pane.clickthrough_rate_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="13%" align="right">'), i = e, s = "txt.views.reporting.search_pane.tickets_created_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + '</th>\n          <th width="35%" align="left">'), i = e, s = "txt.views.reporting.search_pane.top_clicked_result_header", c = r.t, o = c || e.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(i), h.data = t, typeof o === d ? i = o.call(e, s, h) : o === m ? i = v.call(e, "t", s, h) : i = o, t.buffer.push(g(i) + "</th>\n        </tr>\n      "), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h, p = this,
                d = "function",
                v = r.helperMissing,
                m = void 0,
                g = this.escapeExpression,
                y = r.blockHelperMissing;
            return s.buffer.push('<div class="widget">\n  <div class="widget-padding">\n    <h5 class="header">\n      '), u = n, a = "txt.views.reporting.search_pane.header", c = r.t, f = c || n.t, h = {}, h.hash = {}, h.contexts = [], h.contexts.push(u), h.data = s, typeof f === d ? u = f.call(n, a, h) : f === m ? u = v.call(n, "t", a, h) : u = f, s.buffer.push(g(u) + "\n      "), u = n, a = "hasCSV", f = r["if"], h = p.program(1, b, s), h.hash = {}, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, u = f.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n    </h5>\n    <div class="stat-row">\n      '), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "searches", f.name = l, c = r.view, l = c || n.view, h = p.program(3, w, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "no_results", f.name = l, c = r.view, l = c || n.view, h = p.program(5, E, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "no_clicks", f.name = l, c = r.view, l = c || n.view, h = p.program(7, S, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "toggleButton", f = {}, l = "parentView", f.target = l, l = "tickets", f.name = l, c = r.view, l = c || n.view, h = p.program(9, x, s), h.hash = f, h.contexts = [], h.contexts.push(u), h.fn = h, h.inverse = p.noop, h.data = s, c && typeof l === d ? u = l.call(n, a, h) : u = y.call(n, l, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n    </div>\n    <div class="widget-container clearfix full">\n      '), u = {}, a = "label", u.tagName = a, a = "percentage", u["class"] = a, a = "unsortable", u.isVisibleBinding = a, c = r.view, a = c || n.view, h = p.program(11, T, s), h.hash = u, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = s, c && typeof a === d ? u = a.call(n, h) : u = y.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n      <div class="chart-container">\n        <div class="chart-placeholder"></div>\n        <div class="tooltip-date"></div>\n      </div>\n    </div>\n    <div class="header bordered empty">\n      <h4 class="header main">'), u = n, a = "topic", f = {}, l = "true", f.escaped = l, c = r._triageMustache, l = c || n._triageMustache, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "_triageMustache", a, h) : u = l, s.buffer.push(g(u) + "</h4>\n      "), u = {}, a = "label", u.tagName = a, a = "feedbackTabOnly", u["class"] = a, a = "sortable", u.isVisibleBinding = a, c = r.view, a = c || n.view, h = p.program(13, N, s), h.hash = u, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = s, c && typeof a === d ? u = a.call(n, h) : u = y.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n    </div>\n    <table class="statsTable" width="100%">\n      '), u = {}, a = "sortable", u.isVisibleBinding = a, a = "thead", u.tagName = a, c = r.view, a = c || n.view, h = p.program(15, C, s), h.hash = u, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = s, c && typeof a === d ? u = a.call(n, h) : u = y.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = {}, a = "unsortable", u.isVisibleBinding = a, a = "thead", u.tagName = a, c = r.view, a = c || n.view, h = p.program(24, M, s), h.hash = u, h.contexts = [], h.fn = h, h.inverse = p.noop, h.data = s, c && typeof a === d ? u = a.call(n, h) : u = y.call(n, a, h), (u || u === 0) && s.buffer.push(u), s.buffer.push("\n      "), u = n, a = "table", f = {}, l = "searches", f.name = l, l = "searches", f.statName = l, l = "search.search_stats.searches", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n      "), u = n, a = "table", f = {}, l = "no_results", f.name = l, l = "no_results", f.statName = l, l = "search.search_stats.no_results", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n      "), u = n, a = "table", f = {}, l = "no_clicks", f.name = l, l = "no_clicks", f.statName = l, l = "search.search_stats.no_clicks", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n      "), u = n, a = "table", f = {}, l = "tickets", f.name = l, l = "tickets", f.statName = l, l = "search.search_stats.tickets", f.path = l, l = "tbody", f.tagName = l, c = r.view, l = c || n.view, h = {}, h.hash = f, h.contexts = [], h.contexts.push(u), h.data = s, typeof l === d ? u = l.call(n, a, h) : l === m ? u = v.call(n, "view", a, h) : u = l, s.buffer.push(g(u) + "\n    </table>\n  </div>\n</div>\n"), o
        })
    }, require.modules["templates/search/search_table.js"] = function (e, t, n, r) {
        e.exports = Handlebars.template(function (t, n, r, i, s) {
            function g(e, t) {
                var n = "",
                    i, s, o, u;
                return t.buffer.push("\n	<tr "), i = {}, s = "css", i["class"] = s, l = r.bindAttr, s = l || e.bindAttr, c = {}, c.hash = i, c.contexts = [], c.data = t, typeof
                s === p ? i = s.call(e, c) : s === v ? i = d.call(e, "bindAttr", c) : i = s, t.buffer.push(m(i) + '>\n	  <td align="left">'), i = e, s = "item.string", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n	  <td align="right">'), i = e, s = "item.searches", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n	  <td align="right">'), i = e, s = "item.avg_results", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n	  <td align="right">'), i = e, s = "item.ctr", l = r.percentage, o = l || e.percentage, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(i), c.data = t, typeof o === p ? i = o.call(e, s, c) : o === v ? i = d.call(e, "percentage", s, c) : i = o, t.buffer.push(m(i) + '</td>\n	  <td align="right">'), i = e, s = "item.tickets", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + '</td>\n	  <td align="left">'), i = e, s = "entry.title", o = {}, u = "true", o.escaped = u, l = r._triageMustache, u = l || e._triageMustache, c = {}, c.hash = o, c.contexts = [], c.contexts.push(i), c.data = t, typeof u === p ? i = u.call(e, s, c) : u === v ? i = d.call(e, "_triageMustache", s, c) : i = u, t.buffer.push(m(i) + "</td>\n	</tr>\n"), n
            }
            r = r || Ember.Handlebars.helpers;
            var o = "",
                u, a, f, l, c, h = this,
                p = "function",
                d = r.helperMissing,
                v = void 0,
                m = this.escapeExpression;
            return u = n, a = "content", f = r.each, c = h.program(1, g, s), c.hash = {}, c.contexts = [], c.contexts.push(u), c.fn = c, c.inverse = h.noop, c.data = s, u = f.call(n, a, c), (u || u === 0) && s.buffer.push(u), s.buffer.push('\n<tr>\n  <td colspan="100%">\n    <div class="pagination pagination-centered">\n      '), u = n, a = "pagination", l = r.view, f = l || n.view, c = {}, c.hash = {}, c.contexts = [], c.contexts.push(u), c.data = s, typeof f === p ? u = f.call(n, a, c) : f === v ? u = d.call(n, "view", a, c) : u = f, s.buffer.push(m(u) + "\n    </div>\n  </td>\n</tr>"), o
        })
    }, Reporting = require("index.js")
}(), this.require.define({
    "modules/ticket_forms_data/lib/settings": function (e, t, n) {
        var r, i = function () {
                return r ? r : (r = $.when(Zendesk.ticketFields.fetch(), t("modules/ticket_forms_data/main").ticketForms.fetch()), r)
            };
        n.exports = Object.seal({
            initialize: i
        })
    }
}), this.require.define({
    "modules/ticket_forms_data/lib/ticket_form": function (e, t, n) {
        var r = Em.Resource.define({
            url: "/api/v2/ticket_forms",
            schema: {
                id: {
                    type: Number
                },
                name: {
                    type: String
                },
                position: {
                    type: Number
                },
                isDefault: {
                    type: Boolean,
                    path: "default"
                },
                isActive: {
                    type: Boolean,
                    path: "active"
                },
                displayName: {
                    type: String,
                    path: "display_name"
                },
                endUserVisible: {
                    type: Boolean,
                    path: "end_user_visible"
                },
                ticketFieldIds: {
                    type: Object,
                    path: "ticket_field_ids"
                }
            },
            parse: function (e) {
                return e.ticket_form || e
            }
        }).extend({
            toJSON: function () {
                var e = this._super.apply(this, arguments);
                return {
                    ticket_form: e
                }
            },
            ticketFields: function () {
                var e = [],
                    t = this.get("ticketFieldIds"),
                    n = Zd.TicketFields.instance().allTicketFields();
                return t.forEach(function (t) {
                    var r = n.findProperty("id", t);
                    r && r.get("active") === !0 && e.pushObject(r)
                }), e
            },
            clone: function () {
                var e = this.constructor.create({
                    name: this.get("name"),
                    isActive: !0,
                    displayName: this.get("displayName"),
                    endUserVisible: this.get("endUserVisible"),
                    ticketFieldIds: this.get("ticketFieldIds")
                });
                return e
            }
        });
        r.reopenClass({
            activateForm: function (e) {
                return Em.Resource.ajax({
                    type: "PUT",
                    operation: "update",
                    url: e.resourceURL(),
                    data: JSON.stringify({
                        ticket_form: {
                            id: e.get("id"),
                            active: !0
                        }
                    }),
                    contentType: "application/json"
                })
            },
            deactivateForm: function (e) {
                return Em.Resource.ajax({
                    type: "PUT",
                    operation: "update",
                    url: e.resourceURL(),
                    data: JSON.stringify({
                        ticket_form: {
                            id: e.get("id"),
                            active: !1
                        }
                    }),
                    contentType: "application/json"
                })
            }
        }), n.exports = r
    }
}), this.require.define({
    "modules/ticket_forms_data/lib/ticket_form_collection": function (e, t, n) {
        var r = t("modules/ticket_forms_data/lib/ticket_form"),
            i = Em.ResourceCollection.extend({
                url: "/api/v2/ticket_forms",
                type: r,
                parse: function (e) {
                    return this._super(e.ticket_forms)
                },
                defaultTicketForm: function () {
                    return this.get("content").findProperty("isDefault", !0)
                },
                findTicketForm: function (e) {
                    return this.get("content").findProperty("id", e)
                },
                getAllActiveTicketForms: function () {
                    return this.get("content").filterProperty("isActive", !0)
                },
                destroyTicketForm: function (e) {
                    var t = $.Deferred(),
                        n = this;
                    return e.destroyResource().done(function () {
                        var r = n.get("content").findProperty("id", e.get("id"));
                        n.get("content").removeObject(r), t.resolve()
                    }), t.promise()
                },
                setDefaultTicketForm: function (e) {
                    var t = $.Deferred(),
                        n = this;
                    return e.set("isDefault", !0), e.save().done(function () {
                        n.get("content").without(e).setEach("isDefault", !1), t.resolve()
                    }), t.promise()
                },
                saveTicketForm: function (e) {
                    var t = $.Deferred(),
                        n = this,
                        r = e.get("isNew");
                    return e.save().done(function () {
                        r && n.get("content").pushObject(e), t.resolve()
                    }), t.promise()
                }
            });
        n.exports = i
    }
}), this.require.define({
    "modules/ticket_forms_data/main": function (e, t, n) {
        var r = t("modules/ticket_forms_data/lib/settings");
        n.exports = Object.seal({
            TicketForm: t("modules/ticket_forms_data/lib/ticket_form"),
            TicketFormCollection: t("modules/ticket_forms_data/lib/ticket_form_collection"),
            ticketForms: t("modules/ticket_forms_data/lib/ticket_form_collection").create(),
            initialize: function () {
                return r.initialize()
            },
            getDefaultTicketForm: function () {
                var e = this.ticketForms.defaultTicketForm();
                return Em.assert("A default ticket form is required", e !== undefined), {
                    id: e.get("id"),
                    name: e.get("name")
                }
            },
            getTicketFormFields: function (e) {
                var t = this.ticketForms.findTicketForm(e);
                if (t) return t.ticketFields()
            },
            getTicketForms: function () {
                return this.ticketForms.getAllActiveTicketForms().map(function (e) {
                    return {
                        id: e.get("id"),
                        name: e.get("name")
                    }
                })
            },
            getTicketForm: function (e) {
                return this.ticketForms.findTicketForm(e)
            }
        })
    }
});